{"ast":null,"code":"import { Loader } from 'three';\nimport { GLTFLoader } from './GLTFLoader.js'; //\n// VRM is based on glTF 2.0 and VRM extension is defined\n// in top-level json.extensions.VRM\n\nclass VRMLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.gltfLoader = new GLTFLoader(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    this.gltfLoader.load(url, function (gltf) {\n      try {\n        scope.parse(gltf, onLoad);\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setDRACOLoader(dracoLoader) {\n    this.gltfLoader.setDRACOLoader(dracoLoader);\n    return this;\n  }\n\n  parse(gltf, onLoad) {\n    // const gltfParser = gltf.parser;\n    // const gltfExtensions = gltf.userData.gltfExtensions || {};\n    // const vrmExtension = gltfExtensions.VRM || {};\n    // handle VRM Extension here\n    onLoad(gltf);\n  }\n\n}\n\nexport { VRMLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/three-stdlib/loaders/VRMLoader.js"],"names":["Loader","GLTFLoader","VRMLoader","constructor","manager","gltfLoader","load","url","onLoad","onProgress","onError","scope","gltf","parse","e","console","error","itemError","setDRACOLoader","dracoLoader"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,iBAA3B,C,CAEA;AACA;AACA;;AAEA,MAAMC,SAAN,SAAwBF,MAAxB,CAA+B;AAC7BG,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,UAAL,GAAkB,IAAIJ,UAAJ,CAAeG,OAAf,CAAlB;AACD;;AAEDE,EAAAA,IAAI,CAACC,GAAD,EAAMC,MAAN,EAAcC,UAAd,EAA0BC,OAA1B,EAAmC;AACrC,UAAMC,KAAK,GAAG,IAAd;AACA,SAAKN,UAAL,CAAgBC,IAAhB,CAAqBC,GAArB,EAA0B,UAAUK,IAAV,EAAgB;AACxC,UAAI;AACFD,QAAAA,KAAK,CAACE,KAAN,CAAYD,IAAZ,EAAkBJ,MAAlB;AACD,OAFD,CAEE,OAAOM,CAAP,EAAU;AACV,YAAIJ,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACI,CAAD,CAAP;AACD,SAFD,MAEO;AACLC,UAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;;AAEDH,QAAAA,KAAK,CAACP,OAAN,CAAca,SAAd,CAAwBV,GAAxB;AACD;AACF,KAZD,EAYGE,UAZH,EAYeC,OAZf;AAaD;;AAEDQ,EAAAA,cAAc,CAACC,WAAD,EAAc;AAC1B,SAAKd,UAAL,CAAgBa,cAAhB,CAA+BC,WAA/B;AACA,WAAO,IAAP;AACD;;AAEDN,EAAAA,KAAK,CAACD,IAAD,EAAOJ,MAAP,EAAe;AAClB;AACA;AACA;AACA;AACAA,IAAAA,MAAM,CAACI,IAAD,CAAN;AACD;;AAlC4B;;AAsC/B,SAASV,SAAT","sourcesContent":["import { Loader } from 'three';\nimport { GLTFLoader } from './GLTFLoader.js';\n\n//\n// VRM is based on glTF 2.0 and VRM extension is defined\n// in top-level json.extensions.VRM\n\nclass VRMLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.gltfLoader = new GLTFLoader(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    this.gltfLoader.load(url, function (gltf) {\n      try {\n        scope.parse(gltf, onLoad);\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setDRACOLoader(dracoLoader) {\n    this.gltfLoader.setDRACOLoader(dracoLoader);\n    return this;\n  }\n\n  parse(gltf, onLoad) {\n    // const gltfParser = gltf.parser;\n    // const gltfExtensions = gltf.userData.gltfExtensions || {};\n    // const vrmExtension = gltfExtensions.VRM || {};\n    // handle VRM Extension here\n    onLoad(gltf);\n  }\n\n}\n\nexport { VRMLoader };\n"]},"metadata":{},"sourceType":"module"}