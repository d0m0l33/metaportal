{"ast":null,"code":"import { Loader, CanvasTexture, NearestFilter, FileLoader } from 'three';\n\nclass LottieLoader extends Loader {\n  setQuality(value) {\n    this._quality = value;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const quality = this._quality || 1;\n    const texture = new CanvasTexture();\n    texture.minFilter = NearestFilter;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      const data = JSON.parse(text); // bodymoving uses container.offetWidth and offsetHeight\n      // to define width/height\n\n      const container = document.createElement('div');\n      container.style.width = data.w + 'px';\n      container.style.height = data.h + 'px';\n      document.body.appendChild(container);\n      const animation = bodymovin.loadAnimation({\n        container: container,\n        animType: 'canvas',\n        loop: true,\n        autoplay: true,\n        animationData: data,\n        rendererSettings: {\n          dpr: quality\n        }\n      });\n      texture.animation = animation;\n      texture.image = animation.container;\n      animation.addEventListener('enterFrame', function () {\n        texture.needsUpdate = true;\n      });\n      container.style.display = 'none';\n\n      if (onLoad !== undefined) {\n        onLoad(texture);\n      }\n    }, onProgress, onError);\n    return texture;\n  }\n\n}\n\nexport { LottieLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/three-stdlib/loaders/LottieLoader.js"],"names":["Loader","CanvasTexture","NearestFilter","FileLoader","LottieLoader","setQuality","value","_quality","load","url","onLoad","onProgress","onError","quality","texture","minFilter","loader","manager","setPath","path","setWithCredentials","withCredentials","text","data","JSON","parse","container","document","createElement","style","width","w","height","h","body","appendChild","animation","bodymovin","loadAnimation","animType","loop","autoplay","animationData","rendererSettings","dpr","image","addEventListener","needsUpdate","display","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,aAAjB,EAAgCC,aAAhC,EAA+CC,UAA/C,QAAiE,OAAjE;;AAEA,MAAMC,YAAN,SAA2BJ,MAA3B,CAAkC;AAChCK,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAChB,SAAKC,QAAL,GAAgBD,KAAhB;AACD;;AAEDE,EAAAA,IAAI,CAACC,GAAD,EAAMC,MAAN,EAAcC,UAAd,EAA0BC,OAA1B,EAAmC;AACrC,UAAMC,OAAO,GAAG,KAAKN,QAAL,IAAiB,CAAjC;AACA,UAAMO,OAAO,GAAG,IAAIb,aAAJ,EAAhB;AACAa,IAAAA,OAAO,CAACC,SAAR,GAAoBb,aAApB;AACA,UAAMc,MAAM,GAAG,IAAIb,UAAJ,CAAe,KAAKc,OAApB,CAAf;AACAD,IAAAA,MAAM,CAACE,OAAP,CAAe,KAAKC,IAApB;AACAH,IAAAA,MAAM,CAACI,kBAAP,CAA0B,KAAKC,eAA/B;AACAL,IAAAA,MAAM,CAACR,IAAP,CAAYC,GAAZ,EAAiB,UAAUa,IAAV,EAAgB;AAC/B,YAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAb,CAD+B,CACA;AAC/B;;AAEA,YAAMI,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAlB;AACAF,MAAAA,SAAS,CAACG,KAAV,CAAgBC,KAAhB,GAAwBP,IAAI,CAACQ,CAAL,GAAS,IAAjC;AACAL,MAAAA,SAAS,CAACG,KAAV,CAAgBG,MAAhB,GAAyBT,IAAI,CAACU,CAAL,GAAS,IAAlC;AACAN,MAAAA,QAAQ,CAACO,IAAT,CAAcC,WAAd,CAA0BT,SAA1B;AACA,YAAMU,SAAS,GAAGC,SAAS,CAACC,aAAV,CAAwB;AACxCZ,QAAAA,SAAS,EAAEA,SAD6B;AAExCa,QAAAA,QAAQ,EAAE,QAF8B;AAGxCC,QAAAA,IAAI,EAAE,IAHkC;AAIxCC,QAAAA,QAAQ,EAAE,IAJ8B;AAKxCC,QAAAA,aAAa,EAAEnB,IALyB;AAMxCoB,QAAAA,gBAAgB,EAAE;AAChBC,UAAAA,GAAG,EAAE/B;AADW;AANsB,OAAxB,CAAlB;AAUAC,MAAAA,OAAO,CAACsB,SAAR,GAAoBA,SAApB;AACAtB,MAAAA,OAAO,CAAC+B,KAAR,GAAgBT,SAAS,CAACV,SAA1B;AACAU,MAAAA,SAAS,CAACU,gBAAV,CAA2B,YAA3B,EAAyC,YAAY;AACnDhC,QAAAA,OAAO,CAACiC,WAAR,GAAsB,IAAtB;AACD,OAFD;AAGArB,MAAAA,SAAS,CAACG,KAAV,CAAgBmB,OAAhB,GAA0B,MAA1B;;AAEA,UAAItC,MAAM,KAAKuC,SAAf,EAA0B;AACxBvC,QAAAA,MAAM,CAACI,OAAD,CAAN;AACD;AACF,KA5BD,EA4BGH,UA5BH,EA4BeC,OA5Bf;AA6BA,WAAOE,OAAP;AACD;;AA1C+B;;AA8ClC,SAASV,YAAT","sourcesContent":["import { Loader, CanvasTexture, NearestFilter, FileLoader } from 'three';\n\nclass LottieLoader extends Loader {\n  setQuality(value) {\n    this._quality = value;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const quality = this._quality || 1;\n    const texture = new CanvasTexture();\n    texture.minFilter = NearestFilter;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      const data = JSON.parse(text); // bodymoving uses container.offetWidth and offsetHeight\n      // to define width/height\n\n      const container = document.createElement('div');\n      container.style.width = data.w + 'px';\n      container.style.height = data.h + 'px';\n      document.body.appendChild(container);\n      const animation = bodymovin.loadAnimation({\n        container: container,\n        animType: 'canvas',\n        loop: true,\n        autoplay: true,\n        animationData: data,\n        rendererSettings: {\n          dpr: quality\n        }\n      });\n      texture.animation = animation;\n      texture.image = animation.container;\n      animation.addEventListener('enterFrame', function () {\n        texture.needsUpdate = true;\n      });\n      container.style.display = 'none';\n\n      if (onLoad !== undefined) {\n        onLoad(texture);\n      }\n    }, onProgress, onError);\n    return texture;\n  }\n\n}\n\nexport { LottieLoader };\n"]},"metadata":{},"sourceType":"module"}