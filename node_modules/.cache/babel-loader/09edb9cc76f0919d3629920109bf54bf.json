{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute, PointsMaterial, Points } from 'three';\n\nvar PCDLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(PCDLoader, _Loader);\n\n  var _super = _createSuper(PCDLoader);\n\n  function PCDLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, PCDLoader);\n\n    _this = _super.call(this, manager);\n    _this.littleEndian = true;\n    return _this;\n  }\n\n  _createClass(PCDLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (data) {\n        try {\n          onLoad(scope.parse(data, url));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data, url) {\n      // from https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\n      function decompressLZF(inData, outLength) {\n        var inLength = inData.length;\n        var outData = new Uint8Array(outLength);\n        var inPtr = 0;\n        var outPtr = 0;\n        var ctrl;\n        var len;\n        var ref;\n\n        do {\n          ctrl = inData[inPtr++];\n\n          if (ctrl < 1 << 5) {\n            ctrl++;\n            if (outPtr + ctrl > outLength) throw new Error('Output buffer is not large enough');\n            if (inPtr + ctrl > inLength) throw new Error('Invalid compressed data');\n\n            do {\n              outData[outPtr++] = inData[inPtr++];\n            } while (--ctrl);\n          } else {\n            len = ctrl >> 5;\n            ref = outPtr - ((ctrl & 0x1f) << 8) - 1;\n            if (inPtr >= inLength) throw new Error('Invalid compressed data');\n\n            if (len === 7) {\n              len += inData[inPtr++];\n              if (inPtr >= inLength) throw new Error('Invalid compressed data');\n            }\n\n            ref -= inData[inPtr++];\n            if (outPtr + len + 2 > outLength) throw new Error('Output buffer is not large enough');\n            if (ref < 0) throw new Error('Invalid compressed data');\n            if (ref >= outPtr) throw new Error('Invalid compressed data');\n\n            do {\n              outData[outPtr++] = outData[ref++];\n            } while (--len + 2);\n          }\n        } while (inPtr < inLength);\n\n        return outData;\n      }\n\n      function parseHeader(data) {\n        var PCDheader = {};\n        var result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n        var result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n        PCDheader.data = result2[1];\n        PCDheader.headerLen = result2[0].length + result1;\n        PCDheader.str = data.substr(0, PCDheader.headerLen); // remove comments\n\n        PCDheader.str = PCDheader.str.replace(/\\#.*/gi, ''); // parse\n\n        PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);\n        PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);\n        PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);\n        PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);\n        PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);\n        PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);\n        PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);\n        PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);\n        PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str); // evaluate\n\n        if (PCDheader.version !== null) PCDheader.version = parseFloat(PCDheader.version[1]);\n        if (PCDheader.fields !== null) PCDheader.fields = PCDheader.fields[1].split(' ');\n        if (PCDheader.type !== null) PCDheader.type = PCDheader.type[1].split(' ');\n        if (PCDheader.width !== null) PCDheader.width = parseInt(PCDheader.width[1]);\n        if (PCDheader.height !== null) PCDheader.height = parseInt(PCDheader.height[1]);\n        if (PCDheader.viewpoint !== null) PCDheader.viewpoint = PCDheader.viewpoint[1];\n        if (PCDheader.points !== null) PCDheader.points = parseInt(PCDheader.points[1], 10);\n        if (PCDheader.points === null) PCDheader.points = PCDheader.width * PCDheader.height;\n\n        if (PCDheader.size !== null) {\n          PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {\n            return parseInt(x, 10);\n          });\n        }\n\n        if (PCDheader.count !== null) {\n          PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {\n            return parseInt(x, 10);\n          });\n        } else {\n          PCDheader.count = [];\n\n          for (var i = 0, l = PCDheader.fields.length; i < l; i++) {\n            PCDheader.count.push(1);\n          }\n        }\n\n        PCDheader.offset = {};\n        var sizeSum = 0;\n\n        for (var _i = 0, _l = PCDheader.fields.length; _i < _l; _i++) {\n          if (PCDheader.data === 'ascii') {\n            PCDheader.offset[PCDheader.fields[_i]] = _i;\n          } else {\n            PCDheader.offset[PCDheader.fields[_i]] = sizeSum;\n            sizeSum += PCDheader.size[_i] * PCDheader.count[_i];\n          }\n        } // for binary only\n\n\n        PCDheader.rowSize = sizeSum;\n        return PCDheader;\n      }\n\n      var textData = LoaderUtils.decodeText(new Uint8Array(data)); // parse header (always ascii format)\n\n      var PCDheader = parseHeader(textData); // parse data\n\n      var position = [];\n      var normal = [];\n      var color = []; // ascii\n\n      if (PCDheader.data === 'ascii') {\n        var offset = PCDheader.offset;\n        var pcdData = textData.substr(PCDheader.headerLen);\n        var lines = pcdData.split('\\n');\n\n        for (var i = 0, l = lines.length; i < l; i++) {\n          if (lines[i] === '') continue;\n          var line = lines[i].split(' ');\n\n          if (offset.x !== undefined) {\n            position.push(parseFloat(line[offset.x]));\n            position.push(parseFloat(line[offset.y]));\n            position.push(parseFloat(line[offset.z]));\n          }\n\n          if (offset.rgb !== undefined) {\n            var rgb = parseFloat(line[offset.rgb]);\n            var r = rgb >> 16 & 0x0000ff;\n            var g = rgb >> 8 & 0x0000ff;\n            var b = rgb >> 0 & 0x0000ff;\n            color.push(r / 255, g / 255, b / 255);\n          }\n\n          if (offset.normal_x !== undefined) {\n            normal.push(parseFloat(line[offset.normal_x]));\n            normal.push(parseFloat(line[offset.normal_y]));\n            normal.push(parseFloat(line[offset.normal_z]));\n          }\n        }\n      } // binary-compressed\n      // normally data in PCD files are organized as array of structures: XYZRGBXYZRGB\n      // binary compressed PCD files organize their data as structure of arrays: XXYYZZRGBRGB\n      // that requires a totally different parsing approach compared to non-compressed data\n\n\n      if (PCDheader.data === 'binary_compressed') {\n        var sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n        var compressedSize = sizes[0];\n        var decompressedSize = sizes[1];\n        var decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\n        var dataview = new DataView(decompressed.buffer);\n        var _offset = PCDheader.offset;\n\n        for (var _i2 = 0; _i2 < PCDheader.points; _i2++) {\n          if (_offset.x !== undefined) {\n            position.push(dataview.getFloat32(PCDheader.points * _offset.x + PCDheader.size[0] * _i2, this.littleEndian));\n            position.push(dataview.getFloat32(PCDheader.points * _offset.y + PCDheader.size[1] * _i2, this.littleEndian));\n            position.push(dataview.getFloat32(PCDheader.points * _offset.z + PCDheader.size[2] * _i2, this.littleEndian));\n          }\n\n          if (_offset.rgb !== undefined) {\n            color.push(dataview.getUint8(PCDheader.points * _offset.rgb + PCDheader.size[3] * _i2 + 0) / 255.0);\n            color.push(dataview.getUint8(PCDheader.points * _offset.rgb + PCDheader.size[3] * _i2 + 1) / 255.0);\n            color.push(dataview.getUint8(PCDheader.points * _offset.rgb + PCDheader.size[3] * _i2 + 2) / 255.0);\n          }\n\n          if (_offset.normal_x !== undefined) {\n            normal.push(dataview.getFloat32(PCDheader.points * _offset.normal_x + PCDheader.size[4] * _i2, this.littleEndian));\n            normal.push(dataview.getFloat32(PCDheader.points * _offset.normal_y + PCDheader.size[5] * _i2, this.littleEndian));\n            normal.push(dataview.getFloat32(PCDheader.points * _offset.normal_z + PCDheader.size[6] * _i2, this.littleEndian));\n          }\n        }\n      } // binary\n\n\n      if (PCDheader.data === 'binary') {\n        var _dataview = new DataView(data, PCDheader.headerLen);\n\n        var _offset2 = PCDheader.offset;\n\n        for (var _i3 = 0, row = 0; _i3 < PCDheader.points; _i3++, row += PCDheader.rowSize) {\n          if (_offset2.x !== undefined) {\n            position.push(_dataview.getFloat32(row + _offset2.x, this.littleEndian));\n            position.push(_dataview.getFloat32(row + _offset2.y, this.littleEndian));\n            position.push(_dataview.getFloat32(row + _offset2.z, this.littleEndian));\n          }\n\n          if (_offset2.rgb !== undefined) {\n            color.push(_dataview.getUint8(row + _offset2.rgb + 2) / 255.0);\n            color.push(_dataview.getUint8(row + _offset2.rgb + 1) / 255.0);\n            color.push(_dataview.getUint8(row + _offset2.rgb + 0) / 255.0);\n          }\n\n          if (_offset2.normal_x !== undefined) {\n            normal.push(_dataview.getFloat32(row + _offset2.normal_x, this.littleEndian));\n            normal.push(_dataview.getFloat32(row + _offset2.normal_y, this.littleEndian));\n            normal.push(_dataview.getFloat32(row + _offset2.normal_z, this.littleEndian));\n          }\n        }\n      } // build geometry\n\n\n      var geometry = new BufferGeometry();\n      if (position.length > 0) geometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n      if (normal.length > 0) geometry.setAttribute('normal', new Float32BufferAttribute(normal, 3));\n      if (color.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n      geometry.computeBoundingSphere(); // build material\n\n      var material = new PointsMaterial({\n        size: 0.005\n      });\n\n      if (color.length > 0) {\n        material.vertexColors = true;\n      } else {\n        material.color.setHex(Math.random() * 0xffffff);\n      } // build point cloud\n\n\n      var mesh = new Points(geometry, material);\n      var name = url.split('').reverse().join('');\n      name = /([^\\/]*)/.exec(name);\n      name = name[1].split('').reverse().join('');\n      mesh.name = name;\n      return mesh;\n    }\n  }]);\n\n  return PCDLoader;\n}(Loader);\n\nexport { PCDLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/PCDLoader.js"],"names":["Loader","FileLoader","LoaderUtils","BufferGeometry","Float32BufferAttribute","PointsMaterial","Points","PCDLoader","manager","littleEndian","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","data","parse","e","console","error","itemError","decompressLZF","inData","outLength","inLength","length","outData","Uint8Array","inPtr","outPtr","ctrl","len","ref","Error","parseHeader","PCDheader","result1","search","result2","exec","substr","headerLen","str","replace","version","fields","size","type","count","width","height","viewpoint","points","parseFloat","split","parseInt","map","x","i","l","push","offset","sizeSum","rowSize","textData","decodeText","position","normal","color","pcdData","lines","line","undefined","y","z","rgb","r","g","b","normal_x","normal_y","normal_z","sizes","Uint32Array","slice","compressedSize","decompressedSize","decompressed","dataview","DataView","buffer","getFloat32","getUint8","row","geometry","setAttribute","computeBoundingSphere","material","vertexColors","setHex","Math","random","mesh","name","reverse","join"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute, PointsMaterial, Points } from 'three';\n\nclass PCDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.littleEndian = true;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, url));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data, url) {\n    // from https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\n    function decompressLZF(inData, outLength) {\n      const inLength = inData.length;\n      const outData = new Uint8Array(outLength);\n      let inPtr = 0;\n      let outPtr = 0;\n      let ctrl;\n      let len;\n      let ref;\n\n      do {\n        ctrl = inData[inPtr++];\n\n        if (ctrl < 1 << 5) {\n          ctrl++;\n          if (outPtr + ctrl > outLength) throw new Error('Output buffer is not large enough');\n          if (inPtr + ctrl > inLength) throw new Error('Invalid compressed data');\n\n          do {\n            outData[outPtr++] = inData[inPtr++];\n          } while (--ctrl);\n        } else {\n          len = ctrl >> 5;\n          ref = outPtr - ((ctrl & 0x1f) << 8) - 1;\n          if (inPtr >= inLength) throw new Error('Invalid compressed data');\n\n          if (len === 7) {\n            len += inData[inPtr++];\n            if (inPtr >= inLength) throw new Error('Invalid compressed data');\n          }\n\n          ref -= inData[inPtr++];\n          if (outPtr + len + 2 > outLength) throw new Error('Output buffer is not large enough');\n          if (ref < 0) throw new Error('Invalid compressed data');\n          if (ref >= outPtr) throw new Error('Invalid compressed data');\n\n          do {\n            outData[outPtr++] = outData[ref++];\n          } while (--len + 2);\n        }\n      } while (inPtr < inLength);\n\n      return outData;\n    }\n\n    function parseHeader(data) {\n      const PCDheader = {};\n      const result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n      const result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n      PCDheader.data = result2[1];\n      PCDheader.headerLen = result2[0].length + result1;\n      PCDheader.str = data.substr(0, PCDheader.headerLen); // remove comments\n\n      PCDheader.str = PCDheader.str.replace(/\\#.*/gi, ''); // parse\n\n      PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);\n      PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);\n      PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);\n      PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);\n      PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);\n      PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);\n      PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);\n      PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);\n      PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str); // evaluate\n\n      if (PCDheader.version !== null) PCDheader.version = parseFloat(PCDheader.version[1]);\n      if (PCDheader.fields !== null) PCDheader.fields = PCDheader.fields[1].split(' ');\n      if (PCDheader.type !== null) PCDheader.type = PCDheader.type[1].split(' ');\n      if (PCDheader.width !== null) PCDheader.width = parseInt(PCDheader.width[1]);\n      if (PCDheader.height !== null) PCDheader.height = parseInt(PCDheader.height[1]);\n      if (PCDheader.viewpoint !== null) PCDheader.viewpoint = PCDheader.viewpoint[1];\n      if (PCDheader.points !== null) PCDheader.points = parseInt(PCDheader.points[1], 10);\n      if (PCDheader.points === null) PCDheader.points = PCDheader.width * PCDheader.height;\n\n      if (PCDheader.size !== null) {\n        PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {\n          return parseInt(x, 10);\n        });\n      }\n\n      if (PCDheader.count !== null) {\n        PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {\n          return parseInt(x, 10);\n        });\n      } else {\n        PCDheader.count = [];\n\n        for (let i = 0, l = PCDheader.fields.length; i < l; i++) {\n          PCDheader.count.push(1);\n        }\n      }\n\n      PCDheader.offset = {};\n      let sizeSum = 0;\n\n      for (let i = 0, l = PCDheader.fields.length; i < l; i++) {\n        if (PCDheader.data === 'ascii') {\n          PCDheader.offset[PCDheader.fields[i]] = i;\n        } else {\n          PCDheader.offset[PCDheader.fields[i]] = sizeSum;\n          sizeSum += PCDheader.size[i] * PCDheader.count[i];\n        }\n      } // for binary only\n\n\n      PCDheader.rowSize = sizeSum;\n      return PCDheader;\n    }\n\n    const textData = LoaderUtils.decodeText(new Uint8Array(data)); // parse header (always ascii format)\n\n    const PCDheader = parseHeader(textData); // parse data\n\n    const position = [];\n    const normal = [];\n    const color = []; // ascii\n\n    if (PCDheader.data === 'ascii') {\n      const offset = PCDheader.offset;\n      const pcdData = textData.substr(PCDheader.headerLen);\n      const lines = pcdData.split('\\n');\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        if (lines[i] === '') continue;\n        const line = lines[i].split(' ');\n\n        if (offset.x !== undefined) {\n          position.push(parseFloat(line[offset.x]));\n          position.push(parseFloat(line[offset.y]));\n          position.push(parseFloat(line[offset.z]));\n        }\n\n        if (offset.rgb !== undefined) {\n          const rgb = parseFloat(line[offset.rgb]);\n          const r = rgb >> 16 & 0x0000ff;\n          const g = rgb >> 8 & 0x0000ff;\n          const b = rgb >> 0 & 0x0000ff;\n          color.push(r / 255, g / 255, b / 255);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(parseFloat(line[offset.normal_x]));\n          normal.push(parseFloat(line[offset.normal_y]));\n          normal.push(parseFloat(line[offset.normal_z]));\n        }\n      }\n    } // binary-compressed\n    // normally data in PCD files are organized as array of structures: XYZRGBXYZRGB\n    // binary compressed PCD files organize their data as structure of arrays: XXYYZZRGBRGB\n    // that requires a totally different parsing approach compared to non-compressed data\n\n\n    if (PCDheader.data === 'binary_compressed') {\n      const sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n      const compressedSize = sizes[0];\n      const decompressedSize = sizes[1];\n      const decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\n      const dataview = new DataView(decompressed.buffer);\n      const offset = PCDheader.offset;\n\n      for (let i = 0; i < PCDheader.points; i++) {\n        if (offset.x !== undefined) {\n          position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));\n        }\n\n        if (offset.rgb !== undefined) {\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255.0);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255.0);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255.0);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian));\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian));\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian));\n        }\n      }\n    } // binary\n\n\n    if (PCDheader.data === 'binary') {\n      const dataview = new DataView(data, PCDheader.headerLen);\n      const offset = PCDheader.offset;\n\n      for (let i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {\n        if (offset.x !== undefined) {\n          position.push(dataview.getFloat32(row + offset.x, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.y, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.z, this.littleEndian));\n        }\n\n        if (offset.rgb !== undefined) {\n          color.push(dataview.getUint8(row + offset.rgb + 2) / 255.0);\n          color.push(dataview.getUint8(row + offset.rgb + 1) / 255.0);\n          color.push(dataview.getUint8(row + offset.rgb + 0) / 255.0);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));\n        }\n      }\n    } // build geometry\n\n\n    const geometry = new BufferGeometry();\n    if (position.length > 0) geometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n    if (normal.length > 0) geometry.setAttribute('normal', new Float32BufferAttribute(normal, 3));\n    if (color.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n    geometry.computeBoundingSphere(); // build material\n\n    const material = new PointsMaterial({\n      size: 0.005\n    });\n\n    if (color.length > 0) {\n      material.vertexColors = true;\n    } else {\n      material.color.setHex(Math.random() * 0xffffff);\n    } // build point cloud\n\n\n    const mesh = new Points(geometry, material);\n    let name = url.split('').reverse().join('');\n    name = /([^\\/]*)/.exec(name);\n    name = name[1].split('').reverse().join('');\n    mesh.name = name;\n    return mesh;\n  }\n\n}\n\nexport { PCDLoader };\n"]},"metadata":{},"sourceType":"module"}