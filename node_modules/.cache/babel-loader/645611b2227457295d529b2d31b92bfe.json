{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, Vector3, Matrix4 } from 'three';\nimport { gunzipSync } from 'fflate';\nimport { Volume } from '../misc/Volume.js';\n\nvar NRRDLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(NRRDLoader, _Loader);\n\n  var _super = _createSuper(NRRDLoader);\n\n  function NRRDLoader(manager) {\n    _classCallCheck(this, NRRDLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(NRRDLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (data) {\n        try {\n          onLoad(scope.parse(data));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      // this parser is largely inspired from the XTK NRRD parser : https://github.com/xtk/X\n      var _data = data;\n      var _dataPointer = 0;\n\n      var _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n\n      var _littleEndian = true;\n      var headerObject = {};\n\n      function scan(type, chunks) {\n        if (chunks === undefined || chunks === null) {\n          chunks = 1;\n        }\n\n        var _chunkSize = 1;\n        var _array_type = Uint8Array;\n\n        switch (type) {\n          // 1 byte data types\n          case 'uchar':\n            break;\n\n          case 'schar':\n            _array_type = Int8Array;\n            break;\n          // 2 byte data types\n\n          case 'ushort':\n            _array_type = Uint16Array;\n            _chunkSize = 2;\n            break;\n\n          case 'sshort':\n            _array_type = Int16Array;\n            _chunkSize = 2;\n            break;\n          // 4 byte data types\n\n          case 'uint':\n            _array_type = Uint32Array;\n            _chunkSize = 4;\n            break;\n\n          case 'sint':\n            _array_type = Int32Array;\n            _chunkSize = 4;\n            break;\n\n          case 'float':\n            _array_type = Float32Array;\n            _chunkSize = 4;\n            break;\n\n          case 'complex':\n            _array_type = Float64Array;\n            _chunkSize = 8;\n            break;\n\n          case 'double':\n            _array_type = Float64Array;\n            _chunkSize = 8;\n            break;\n        } // increase the data pointer in-place\n\n\n        var _bytes = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize)); // if required, flip the endianness of the bytes\n\n\n        if (_nativeLittleEndian != _littleEndian) {\n          // we need to flip here since the format doesn't match the native endianness\n          _bytes = flipEndianness(_bytes, _chunkSize);\n        }\n\n        if (chunks == 1) {\n          // if only one chunk was requested, just return one value\n          return _bytes[0];\n        } // return the byte array\n\n\n        return _bytes;\n      } //Flips typed array endianness in-place. Based on https://github.com/kig/DataStream.js/blob/master/DataStream.js.\n\n\n      function flipEndianness(array, chunkSize) {\n        var u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n\n        for (var _i2 = 0; _i2 < array.byteLength; _i2 += chunkSize) {\n          for (var j = _i2 + chunkSize - 1, k = _i2; j > k; j--, k++) {\n            var tmp = u8[k];\n            u8[k] = u8[j];\n            u8[j] = tmp;\n          }\n        }\n\n        return array;\n      } //parse the header\n\n\n      function parseHeader(header) {\n        var data, field, fn, i, l, m, _i, _len;\n\n        var lines = header.split(/\\r?\\n/);\n\n        for (_i = 0, _len = lines.length; _i < _len; _i++) {\n          l = lines[_i];\n\n          if (l.match(/NRRD\\d+/)) {\n            headerObject.isNrrd = true;\n          } else if (l.match(/^#/)) ;else if (m = l.match(/(.*):(.*)/)) {\n            field = m[1].trim();\n            data = m[2].trim();\n            fn = _fieldFunctions[field];\n\n            if (fn) {\n              fn.call(headerObject, data);\n            } else {\n              headerObject[field] = data;\n            }\n          }\n        }\n\n        if (!headerObject.isNrrd) {\n          throw new Error('Not an NRRD file');\n        }\n\n        if (headerObject.encoding === 'bz2' || headerObject.encoding === 'bzip2') {\n          throw new Error('Bzip is not supported');\n        }\n\n        if (!headerObject.vectors) {\n          //if no space direction is set, let's use the identity\n          headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)]; //apply spacing if defined\n\n          if (headerObject.spacings) {\n            for (i = 0; i <= 2; i++) {\n              if (!isNaN(headerObject.spacings[i])) {\n                headerObject.vectors[i].multiplyScalar(headerObject.spacings[i]);\n              }\n            }\n          }\n        }\n      } //parse the data when registred as one of this type : 'text', 'ascii', 'txt'\n\n\n      function parseDataAsText(data, start, end) {\n        var number = '';\n        start = start || 0;\n        end = end || data.length;\n        var value; //length of the result is the product of the sizes\n\n        var lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n          return previous * current;\n        }, 1);\n        var base = 10;\n\n        if (headerObject.encoding === 'hex') {\n          base = 16;\n        }\n\n        var result = new headerObject.__array(lengthOfTheResult);\n        var resultIndex = 0;\n        var parsingFunction = parseInt;\n\n        if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n          parsingFunction = parseFloat;\n        }\n\n        for (var _i3 = start; _i3 < end; _i3++) {\n          value = data[_i3]; //if value is not a space\n\n          if ((value < 9 || value > 13) && value !== 32) {\n            number += String.fromCharCode(value);\n          } else {\n            if (number !== '') {\n              result[resultIndex] = parsingFunction(number, base);\n              resultIndex++;\n            }\n\n            number = '';\n          }\n        }\n\n        if (number !== '') {\n          result[resultIndex] = parsingFunction(number, base);\n          resultIndex++;\n        }\n\n        return result;\n      }\n\n      var _bytes = scan('uchar', data.byteLength);\n\n      var _length = _bytes.length;\n      var _header = null;\n      var _data_start = 0;\n      var i;\n\n      for (i = 1; i < _length; i++) {\n        if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n          // we found two line breaks in a row\n          // now we know what the header is\n          _header = this.parseChars(_bytes, 0, i - 2); // this is were the data starts\n\n          _data_start = i + 1;\n          break;\n        }\n      } // parse the header\n\n\n      parseHeader(_header);\n      _data = _bytes.subarray(_data_start); // the data without header\n\n      if (headerObject.encoding.substring(0, 2) === 'gz') {\n        // we need to decompress the datastream\n        // here we start the unzipping and get a typed Uint8Array back\n        _data = gunzipSync(new Uint8Array(_data)); // eslint-disable-line no-undef\n      } else if (headerObject.encoding === 'ascii' || headerObject.encoding === 'text' || headerObject.encoding === 'txt' || headerObject.encoding === 'hex') {\n        _data = parseDataAsText(_data);\n      } else if (headerObject.encoding === 'raw') {\n        //we need to copy the array to create a new array buffer, else we retrieve the original arraybuffer with the header\n        var _copy = new Uint8Array(_data.length);\n\n        for (var _i4 = 0; _i4 < _data.length; _i4++) {\n          _copy[_i4] = _data[_i4];\n        }\n\n        _data = _copy;\n      } // .. let's use the underlying array buffer\n\n\n      _data = _data.buffer;\n      var volume = new Volume();\n      volume.header = headerObject; //\n      // parse the (unzipped) data to a datastream of the correct type\n      //\n\n      volume.data = new headerObject.__array(_data); // get the min and max intensities\n\n      var min_max = volume.computeMinMax();\n      var min = min_max[0];\n      var max = min_max[1]; // attach the scalar range to the volume\n\n      volume.windowLow = min;\n      volume.windowHigh = max; // get the image dimensions\n\n      volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n      volume.xLength = volume.dimensions[0];\n      volume.yLength = volume.dimensions[1];\n      volume.zLength = volume.dimensions[2]; // spacing\n\n      var spacingX = new Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n      var spacingY = new Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n      var spacingZ = new Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n      volume.spacing = [spacingX, spacingY, spacingZ]; // Create IJKtoRAS matrix\n\n      volume.matrix = new Matrix4();\n      var _spaceX = 1;\n      var _spaceY = 1;\n      var _spaceZ = 1;\n\n      if (headerObject.space == 'left-posterior-superior') {\n        _spaceX = -1;\n        _spaceY = -1;\n      } else if (headerObject.space === 'left-anterior-superior') {\n        _spaceX = -1;\n      }\n\n      if (!headerObject.vectors) {\n        volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n      } else {\n        var v = headerObject.vectors;\n        volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n      }\n\n      volume.inverseMatrix = new Matrix4();\n      volume.inverseMatrix.copy(volume.matrix).invert();\n      volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs); // .. and set the default threshold\n      // only if the threshold was not already set\n\n      if (volume.lowerThreshold === -Infinity) {\n        volume.lowerThreshold = min;\n      }\n\n      if (volume.upperThreshold === Infinity) {\n        volume.upperThreshold = max;\n      }\n\n      return volume;\n    }\n  }, {\n    key: \"parseChars\",\n    value: function parseChars(array, start, end) {\n      // without borders, use the whole array\n      if (start === undefined) {\n        start = 0;\n      }\n\n      if (end === undefined) {\n        end = array.length;\n      }\n\n      var output = ''; // create and append the chars\n\n      var i = 0;\n\n      for (i = start; i < end; ++i) {\n        output += String.fromCharCode(array[i]);\n      }\n\n      return output;\n    }\n  }]);\n\n  return NRRDLoader;\n}(Loader);\n\nvar _fieldFunctions = {\n  type: function type(data) {\n    switch (data) {\n      case 'uchar':\n      case 'unsigned char':\n      case 'uint8':\n      case 'uint8_t':\n        this.__array = Uint8Array;\n        break;\n\n      case 'signed char':\n      case 'int8':\n      case 'int8_t':\n        this.__array = Int8Array;\n        break;\n\n      case 'short':\n      case 'short int':\n      case 'signed short':\n      case 'signed short int':\n      case 'int16':\n      case 'int16_t':\n        this.__array = Int16Array;\n        break;\n\n      case 'ushort':\n      case 'unsigned short':\n      case 'unsigned short int':\n      case 'uint16':\n      case 'uint16_t':\n        this.__array = Uint16Array;\n        break;\n\n      case 'int':\n      case 'signed int':\n      case 'int32':\n      case 'int32_t':\n        this.__array = Int32Array;\n        break;\n\n      case 'uint':\n      case 'unsigned int':\n      case 'uint32':\n      case 'uint32_t':\n        this.__array = Uint32Array;\n        break;\n\n      case 'float':\n        this.__array = Float32Array;\n        break;\n\n      case 'double':\n        this.__array = Float64Array;\n        break;\n\n      default:\n        throw new Error('Unsupported NRRD data type: ' + data);\n    }\n\n    return this.type = data;\n  },\n  endian: function endian(data) {\n    return this.endian = data;\n  },\n  encoding: function encoding(data) {\n    return this.encoding = data;\n  },\n  dimension: function dimension(data) {\n    return this.dim = parseInt(data, 10);\n  },\n  sizes: function sizes(data) {\n    var i;\n    return this.sizes = function () {\n      var _ref = data.split(/\\s+/);\n\n      var _results = [];\n\n      for (var _i = 0, _len = _ref.length; _i < _len; _i++) {\n        i = _ref[_i];\n\n        _results.push(parseInt(i, 10));\n      }\n\n      return _results;\n    }();\n  },\n  space: function space(data) {\n    return this.space = data;\n  },\n  'space origin': function spaceOrigin(data) {\n    return this.space_origin = data.split('(')[1].split(')')[0].split(',');\n  },\n  'space directions': function spaceDirections(data) {\n    var f, v;\n    var parts = data.match(/\\(.*?\\)/g);\n    return this.vectors = function () {\n      var _results = [];\n\n      for (var _i = 0, _len = parts.length; _i < _len; _i++) {\n        v = parts[_i];\n\n        _results.push(function () {\n          var _ref = v.slice(1, -1).split(/,/);\n\n          var _results2 = [];\n\n          for (var _j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n            f = _ref[_j];\n\n            _results2.push(parseFloat(f));\n          }\n\n          return _results2;\n        }());\n      }\n\n      return _results;\n    }();\n  },\n  spacings: function spacings(data) {\n    var f;\n    var parts = data.split(/\\s+/);\n    return this.spacings = function () {\n      var _results = [];\n\n      for (var _i = 0, _len = parts.length; _i < _len; _i++) {\n        f = parts[_i];\n\n        _results.push(parseFloat(f));\n      }\n\n      return _results;\n    }();\n  }\n};\nexport { NRRDLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/NRRDLoader.js"],"names":["Loader","FileLoader","Vector3","Matrix4","gunzipSync","Volume","NRRDLoader","manager","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","data","parse","e","console","error","itemError","_data","_dataPointer","_nativeLittleEndian","Int8Array","Int16Array","buffer","_littleEndian","headerObject","scan","type","chunks","undefined","_chunkSize","_array_type","Uint8Array","Uint16Array","Uint32Array","Int32Array","Float32Array","Float64Array","_bytes","slice","flipEndianness","array","chunkSize","u8","byteOffset","byteLength","i","j","k","tmp","parseHeader","header","field","fn","l","m","_i","_len","lines","split","length","match","isNrrd","trim","_fieldFunctions","call","Error","encoding","vectors","spacings","isNaN","multiplyScalar","parseDataAsText","start","end","number","value","lengthOfTheResult","sizes","reduce","previous","current","base","result","__array","resultIndex","parsingFunction","parseInt","parseFloat","String","fromCharCode","_length","_header","_data_start","parseChars","subarray","substring","_copy","volume","min_max","computeMinMax","min","max","windowLow","windowHigh","dimensions","xLength","yLength","zLength","spacingX","spacingY","spacingZ","spacing","matrix","_spaceX","_spaceY","_spaceZ","space","set","v","inverseMatrix","copy","invert","RASDimensions","applyMatrix4","round","toArray","map","Math","abs","lowerThreshold","Infinity","upperThreshold","output","endian","dimension","dim","_ref","_results","push","space_origin","f","parts","_results2","_j","_len2"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, Vector3, Matrix4 } from 'three';\nimport { gunzipSync } from 'fflate';\nimport { Volume } from '../misc/Volume.js';\n\nclass NRRDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    // this parser is largely inspired from the XTK NRRD parser : https://github.com/xtk/X\n    let _data = data;\n    let _dataPointer = 0;\n\n    const _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n\n    const _littleEndian = true;\n    const headerObject = {};\n\n    function scan(type, chunks) {\n      if (chunks === undefined || chunks === null) {\n        chunks = 1;\n      }\n\n      let _chunkSize = 1;\n      let _array_type = Uint8Array;\n\n      switch (type) {\n        // 1 byte data types\n        case 'uchar':\n          break;\n\n        case 'schar':\n          _array_type = Int8Array;\n          break;\n        // 2 byte data types\n\n        case 'ushort':\n          _array_type = Uint16Array;\n          _chunkSize = 2;\n          break;\n\n        case 'sshort':\n          _array_type = Int16Array;\n          _chunkSize = 2;\n          break;\n        // 4 byte data types\n\n        case 'uint':\n          _array_type = Uint32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'sint':\n          _array_type = Int32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'float':\n          _array_type = Float32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'complex':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n\n        case 'double':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n      } // increase the data pointer in-place\n\n\n      let _bytes = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize)); // if required, flip the endianness of the bytes\n\n\n      if (_nativeLittleEndian != _littleEndian) {\n        // we need to flip here since the format doesn't match the native endianness\n        _bytes = flipEndianness(_bytes, _chunkSize);\n      }\n\n      if (chunks == 1) {\n        // if only one chunk was requested, just return one value\n        return _bytes[0];\n      } // return the byte array\n\n\n      return _bytes;\n    } //Flips typed array endianness in-place. Based on https://github.com/kig/DataStream.js/blob/master/DataStream.js.\n\n\n    function flipEndianness(array, chunkSize) {\n      const u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n\n      for (let i = 0; i < array.byteLength; i += chunkSize) {\n        for (let j = i + chunkSize - 1, k = i; j > k; j--, k++) {\n          const tmp = u8[k];\n          u8[k] = u8[j];\n          u8[j] = tmp;\n        }\n      }\n\n      return array;\n    } //parse the header\n\n\n    function parseHeader(header) {\n      let data, field, fn, i, l, m, _i, _len;\n\n      const lines = header.split(/\\r?\\n/);\n\n      for (_i = 0, _len = lines.length; _i < _len; _i++) {\n        l = lines[_i];\n\n        if (l.match(/NRRD\\d+/)) {\n          headerObject.isNrrd = true;\n        } else if (l.match(/^#/)) ; else if (m = l.match(/(.*):(.*)/)) {\n          field = m[1].trim();\n          data = m[2].trim();\n          fn = _fieldFunctions[field];\n\n          if (fn) {\n            fn.call(headerObject, data);\n          } else {\n            headerObject[field] = data;\n          }\n        }\n      }\n\n      if (!headerObject.isNrrd) {\n        throw new Error('Not an NRRD file');\n      }\n\n      if (headerObject.encoding === 'bz2' || headerObject.encoding === 'bzip2') {\n        throw new Error('Bzip is not supported');\n      }\n\n      if (!headerObject.vectors) {\n        //if no space direction is set, let's use the identity\n        headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)]; //apply spacing if defined\n\n        if (headerObject.spacings) {\n          for (i = 0; i <= 2; i++) {\n            if (!isNaN(headerObject.spacings[i])) {\n              headerObject.vectors[i].multiplyScalar(headerObject.spacings[i]);\n            }\n          }\n        }\n      }\n    } //parse the data when registred as one of this type : 'text', 'ascii', 'txt'\n\n\n    function parseDataAsText(data, start, end) {\n      let number = '';\n      start = start || 0;\n      end = end || data.length;\n      let value; //length of the result is the product of the sizes\n\n      const lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n        return previous * current;\n      }, 1);\n      let base = 10;\n\n      if (headerObject.encoding === 'hex') {\n        base = 16;\n      }\n\n      const result = new headerObject.__array(lengthOfTheResult);\n      let resultIndex = 0;\n      let parsingFunction = parseInt;\n\n      if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n        parsingFunction = parseFloat;\n      }\n\n      for (let i = start; i < end; i++) {\n        value = data[i]; //if value is not a space\n\n        if ((value < 9 || value > 13) && value !== 32) {\n          number += String.fromCharCode(value);\n        } else {\n          if (number !== '') {\n            result[resultIndex] = parsingFunction(number, base);\n            resultIndex++;\n          }\n\n          number = '';\n        }\n      }\n\n      if (number !== '') {\n        result[resultIndex] = parsingFunction(number, base);\n        resultIndex++;\n      }\n\n      return result;\n    }\n\n    const _bytes = scan('uchar', data.byteLength);\n\n    const _length = _bytes.length;\n    let _header = null;\n    let _data_start = 0;\n    let i;\n\n    for (i = 1; i < _length; i++) {\n      if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n        // we found two line breaks in a row\n        // now we know what the header is\n        _header = this.parseChars(_bytes, 0, i - 2); // this is were the data starts\n\n        _data_start = i + 1;\n        break;\n      }\n    } // parse the header\n\n\n    parseHeader(_header);\n    _data = _bytes.subarray(_data_start); // the data without header\n\n    if (headerObject.encoding.substring(0, 2) === 'gz') {\n      // we need to decompress the datastream\n      // here we start the unzipping and get a typed Uint8Array back\n      _data = gunzipSync(new Uint8Array(_data)); // eslint-disable-line no-undef\n    } else if (headerObject.encoding === 'ascii' || headerObject.encoding === 'text' || headerObject.encoding === 'txt' || headerObject.encoding === 'hex') {\n      _data = parseDataAsText(_data);\n    } else if (headerObject.encoding === 'raw') {\n      //we need to copy the array to create a new array buffer, else we retrieve the original arraybuffer with the header\n      const _copy = new Uint8Array(_data.length);\n\n      for (let i = 0; i < _data.length; i++) {\n        _copy[i] = _data[i];\n      }\n\n      _data = _copy;\n    } // .. let's use the underlying array buffer\n\n\n    _data = _data.buffer;\n    const volume = new Volume();\n    volume.header = headerObject; //\n    // parse the (unzipped) data to a datastream of the correct type\n    //\n\n    volume.data = new headerObject.__array(_data); // get the min and max intensities\n\n    const min_max = volume.computeMinMax();\n    const min = min_max[0];\n    const max = min_max[1]; // attach the scalar range to the volume\n\n    volume.windowLow = min;\n    volume.windowHigh = max; // get the image dimensions\n\n    volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n    volume.xLength = volume.dimensions[0];\n    volume.yLength = volume.dimensions[1];\n    volume.zLength = volume.dimensions[2]; // spacing\n\n    const spacingX = new Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n    const spacingY = new Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n    const spacingZ = new Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n    volume.spacing = [spacingX, spacingY, spacingZ]; // Create IJKtoRAS matrix\n\n    volume.matrix = new Matrix4();\n    let _spaceX = 1;\n    let _spaceY = 1;\n    const _spaceZ = 1;\n\n    if (headerObject.space == 'left-posterior-superior') {\n      _spaceX = -1;\n      _spaceY = -1;\n    } else if (headerObject.space === 'left-anterior-superior') {\n      _spaceX = -1;\n    }\n\n    if (!headerObject.vectors) {\n      volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n    } else {\n      const v = headerObject.vectors;\n      volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n    }\n\n    volume.inverseMatrix = new Matrix4();\n    volume.inverseMatrix.copy(volume.matrix).invert();\n    volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs); // .. and set the default threshold\n    // only if the threshold was not already set\n\n    if (volume.lowerThreshold === -Infinity) {\n      volume.lowerThreshold = min;\n    }\n\n    if (volume.upperThreshold === Infinity) {\n      volume.upperThreshold = max;\n    }\n\n    return volume;\n  }\n\n  parseChars(array, start, end) {\n    // without borders, use the whole array\n    if (start === undefined) {\n      start = 0;\n    }\n\n    if (end === undefined) {\n      end = array.length;\n    }\n\n    let output = ''; // create and append the chars\n\n    let i = 0;\n\n    for (i = start; i < end; ++i) {\n      output += String.fromCharCode(array[i]);\n    }\n\n    return output;\n  }\n\n}\n\nconst _fieldFunctions = {\n  type: function (data) {\n    switch (data) {\n      case 'uchar':\n      case 'unsigned char':\n      case 'uint8':\n      case 'uint8_t':\n        this.__array = Uint8Array;\n        break;\n\n      case 'signed char':\n      case 'int8':\n      case 'int8_t':\n        this.__array = Int8Array;\n        break;\n\n      case 'short':\n      case 'short int':\n      case 'signed short':\n      case 'signed short int':\n      case 'int16':\n      case 'int16_t':\n        this.__array = Int16Array;\n        break;\n\n      case 'ushort':\n      case 'unsigned short':\n      case 'unsigned short int':\n      case 'uint16':\n      case 'uint16_t':\n        this.__array = Uint16Array;\n        break;\n\n      case 'int':\n      case 'signed int':\n      case 'int32':\n      case 'int32_t':\n        this.__array = Int32Array;\n        break;\n\n      case 'uint':\n      case 'unsigned int':\n      case 'uint32':\n      case 'uint32_t':\n        this.__array = Uint32Array;\n        break;\n\n      case 'float':\n        this.__array = Float32Array;\n        break;\n\n      case 'double':\n        this.__array = Float64Array;\n        break;\n\n      default:\n        throw new Error('Unsupported NRRD data type: ' + data);\n    }\n\n    return this.type = data;\n  },\n  endian: function (data) {\n    return this.endian = data;\n  },\n  encoding: function (data) {\n    return this.encoding = data;\n  },\n  dimension: function (data) {\n    return this.dim = parseInt(data, 10);\n  },\n  sizes: function (data) {\n    let i;\n    return this.sizes = function () {\n      const _ref = data.split(/\\s+/);\n\n      const _results = [];\n\n      for (let _i = 0, _len = _ref.length; _i < _len; _i++) {\n        i = _ref[_i];\n\n        _results.push(parseInt(i, 10));\n      }\n\n      return _results;\n    }();\n  },\n  space: function (data) {\n    return this.space = data;\n  },\n  'space origin': function (data) {\n    return this.space_origin = data.split('(')[1].split(')')[0].split(',');\n  },\n  'space directions': function (data) {\n    let f, v;\n    const parts = data.match(/\\(.*?\\)/g);\n    return this.vectors = function () {\n      const _results = [];\n\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        v = parts[_i];\n\n        _results.push(function () {\n          const _ref = v.slice(1, -1).split(/,/);\n\n          const _results2 = [];\n\n          for (let _j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n            f = _ref[_j];\n\n            _results2.push(parseFloat(f));\n          }\n\n          return _results2;\n        }());\n      }\n\n      return _results;\n    }();\n  },\n  spacings: function (data) {\n    let f;\n    const parts = data.split(/\\s+/);\n    return this.spacings = function () {\n      const _results = [];\n\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        f = parts[_i];\n\n        _results.push(parseFloat(f));\n      }\n\n      return _results;\n    }();\n  }\n};\n\nexport { NRRDLoader };\n"]},"metadata":{},"sourceType":"module"}