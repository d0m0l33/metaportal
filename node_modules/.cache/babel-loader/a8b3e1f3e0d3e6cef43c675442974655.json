{"ast":null,"code":"import { Line, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Mesh, MeshBasicMaterial, BackSide } from 'three';\n/**\n *  This helper must be added as a child of the light\n */\n\nclass RectAreaLightHelper extends Line {\n  constructor(light, color) {\n    this.light = light;\n    this.color = color; // optional hardwired color for the helper\n\n    const positions = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    const material = new LineBasicMaterial({\n      fog: false\n    });\n    super(geometry, material);\n    this.type = 'RectAreaLightHelper'; //\n\n    const positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];\n    const geometry2 = new BufferGeometry();\n    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n    geometry2.computeBoundingSphere();\n    this.add(new Mesh(geometry2, new MeshBasicMaterial({\n      side: BackSide,\n      fog: false\n    })));\n  }\n\n  updateMatrixWorld() {\n    this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1);\n\n    if (this.color !== undefined) {\n      this.material.color.set(this.color);\n      this.children[0].material.color.set(this.color);\n    } else {\n      this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity); // prevent hue shift\n\n      const c = this.material.color;\n      const max = Math.max(c.r, c.g, c.b);\n      if (max > 1) c.multiplyScalar(1 / max);\n      this.children[0].material.color.copy(this.material.color);\n    }\n\n    this.matrixWorld.copy(this.light.matrixWorld).scale(this.scale);\n    this.children[0].matrixWorld.copy(this.matrixWorld);\n  }\n\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  }\n\n}\n\nexport { RectAreaLightHelper };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/helpers/RectAreaLightHelper.js"],"names":["Line","BufferGeometry","Float32BufferAttribute","LineBasicMaterial","Mesh","MeshBasicMaterial","BackSide","RectAreaLightHelper","constructor","light","color","positions","geometry","setAttribute","computeBoundingSphere","material","fog","type","positions2","geometry2","add","side","updateMatrixWorld","scale","set","width","height","undefined","children","copy","multiplyScalar","intensity","c","max","Math","r","g","b","matrixWorld","dispose"],"mappings":"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","sourcesContent":["import { Line, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Mesh, MeshBasicMaterial, BackSide } from 'three';\n\n/**\n *  This helper must be added as a child of the light\n */\n\nclass RectAreaLightHelper extends Line {\n  constructor(light, color) {\n    this.light = light;\n    this.color = color; // optional hardwired color for the helper\n\n    const positions = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    const material = new LineBasicMaterial({\n      fog: false\n    });\n    super(geometry, material);\n    this.type = 'RectAreaLightHelper'; //\n\n    const positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];\n    const geometry2 = new BufferGeometry();\n    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n    geometry2.computeBoundingSphere();\n    this.add(new Mesh(geometry2, new MeshBasicMaterial({\n      side: BackSide,\n      fog: false\n    })));\n  }\n\n  updateMatrixWorld() {\n    this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1);\n\n    if (this.color !== undefined) {\n      this.material.color.set(this.color);\n      this.children[0].material.color.set(this.color);\n    } else {\n      this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity); // prevent hue shift\n\n      const c = this.material.color;\n      const max = Math.max(c.r, c.g, c.b);\n      if (max > 1) c.multiplyScalar(1 / max);\n      this.children[0].material.color.copy(this.material.color);\n    }\n\n    this.matrixWorld.copy(this.light.matrixWorld).scale(this.scale);\n    this.children[0].matrixWorld.copy(this.matrixWorld);\n  }\n\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  }\n\n}\n\nexport { RectAreaLightHelper };\n"]},"metadata":{},"sourceType":"module"}