{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { PMREMGenerator, CubeTextureLoader } from 'three';\nimport { RGBELoader } from 'three-stdlib';\nimport { useAsset } from 'use-asset';\nimport { presetsObj } from '../helpers/environment-assets.js';\n\nfunction getTexture(texture, gen, isCubeMap) {\n  if (isCubeMap) {\n    gen.compileEquirectangularShader();\n    return gen.fromCubemap(texture).texture;\n  }\n\n  return gen.fromEquirectangular(texture).texture;\n}\n\nconst CUBEMAP_ROOT = 'https://rawcdn.githack.com/pmndrs/drei-assets/aa3600359ba664d546d05821bcbca42013587df2';\n\nfunction Environment(_ref) {\n  let {\n    background = false,\n    files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n    path = '',\n    preset = undefined,\n    scene,\n    extensions\n  } = _ref;\n\n  if (preset) {\n    if (!(preset in presetsObj)) {\n      throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    }\n\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT + '/hdri/';\n  }\n\n  const defaultScene = useThree(_ref2 => {\n    let {\n      scene\n    } = _ref2;\n    return scene;\n  });\n  const gl = useThree(_ref3 => {\n    let {\n      gl\n    } = _ref3;\n    return gl;\n  });\n  const isCubeMap = Array.isArray(files);\n  const loader = isCubeMap ? CubeTextureLoader : RGBELoader; // @ts-expect-error\n\n  const loaderResult = useLoader(loader, isCubeMap ? [files] : files, loader => {\n    loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  const map = isCubeMap ? loaderResult[0] : loaderResult; // PMREMGenerator takes its sweet time to generate the env-map,\n  // Let's make this part of suspense, or else it just yields a frame-skip\n\n  const texture = useAsset(() => new Promise(res => {\n    const gen = new PMREMGenerator(gl);\n    const texture = getTexture(map, gen, isCubeMap);\n    gen.dispose();\n    res(texture);\n  }), map);\n  React.useLayoutEffect(() => {\n    const oldbg = scene ? scene.background : defaultScene.background;\n    const oldenv = scene ? scene.environment : defaultScene.environment;\n\n    if (scene) {\n      scene.environment = texture;\n      if (background) scene.background = texture;\n    } else {\n      defaultScene.environment = texture;\n      if (background) defaultScene.background = texture;\n    }\n\n    return () => {\n      if (scene) {\n        scene.environment = oldenv;\n        scene.background = oldbg;\n      } else {\n        defaultScene.environment = oldenv;\n        defaultScene.background = oldbg;\n      } // Environment textures are volatile, better dispose and uncache them\n\n\n      useAsset.clear(map);\n      texture.dispose();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [texture, background, scene]);\n  return null;\n}\n\nexport { Environment };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/@react-three/drei/core/Environment.js"],"names":["React","useThree","useLoader","PMREMGenerator","CubeTextureLoader","RGBELoader","useAsset","presetsObj","getTexture","texture","gen","isCubeMap","compileEquirectangularShader","fromCubemap","fromEquirectangular","CUBEMAP_ROOT","Environment","background","files","path","preset","undefined","scene","extensions","Error","Object","keys","join","defaultScene","gl","Array","isArray","loader","loaderResult","setPath","map","Promise","res","dispose","useLayoutEffect","oldbg","oldenv","environment","clear"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { PMREMGenerator, CubeTextureLoader } from 'three';\nimport { RGBELoader } from 'three-stdlib';\nimport { useAsset } from 'use-asset';\nimport { presetsObj } from '../helpers/environment-assets.js';\n\nfunction getTexture(texture, gen, isCubeMap) {\n  if (isCubeMap) {\n    gen.compileEquirectangularShader();\n    return gen.fromCubemap(texture).texture;\n  }\n\n  return gen.fromEquirectangular(texture).texture;\n}\n\nconst CUBEMAP_ROOT = 'https://rawcdn.githack.com/pmndrs/drei-assets/aa3600359ba664d546d05821bcbca42013587df2';\nfunction Environment({\n  background = false,\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path = '',\n  preset = undefined,\n  scene,\n  extensions\n}) {\n  if (preset) {\n    if (!(preset in presetsObj)) {\n      throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    }\n\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT + '/hdri/';\n  }\n\n  const defaultScene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const isCubeMap = Array.isArray(files);\n  const loader = isCubeMap ? CubeTextureLoader : RGBELoader; // @ts-expect-error\n\n  const loaderResult = useLoader(loader, isCubeMap ? [files] : files, loader => {\n    loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  const map = isCubeMap ? loaderResult[0] : loaderResult; // PMREMGenerator takes its sweet time to generate the env-map,\n  // Let's make this part of suspense, or else it just yields a frame-skip\n\n  const texture = useAsset(() => new Promise(res => {\n    const gen = new PMREMGenerator(gl);\n    const texture = getTexture(map, gen, isCubeMap);\n    gen.dispose();\n    res(texture);\n  }), map);\n  React.useLayoutEffect(() => {\n    const oldbg = scene ? scene.background : defaultScene.background;\n    const oldenv = scene ? scene.environment : defaultScene.environment;\n\n    if (scene) {\n      scene.environment = texture;\n      if (background) scene.background = texture;\n    } else {\n      defaultScene.environment = texture;\n      if (background) defaultScene.background = texture;\n    }\n\n    return () => {\n      if (scene) {\n        scene.environment = oldenv;\n        scene.background = oldbg;\n      } else {\n        defaultScene.environment = oldenv;\n        defaultScene.background = oldbg;\n      } // Environment textures are volatile, better dispose and uncache them\n\n\n      useAsset.clear(map);\n      texture.dispose();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [texture, background, scene]);\n  return null;\n}\n\nexport { Environment };\n"]},"metadata":{},"sourceType":"module"}