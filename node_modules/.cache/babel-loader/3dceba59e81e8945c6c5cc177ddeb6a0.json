{"ast":null,"code":"var _jsxFileName = \"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx\",\n    _s = $RefreshSig$();\n\nimport { formatUnits } from '@ethersproject/units';\nimport uniswapToken from '@uniswap/default-token-list';\nimport { useContractFunction, useEthers } from '@usedapp/core';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Colors } from '../../global/styles';\nimport { TextBold } from '../../typography/Text';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { TokenSVGIcon } from './TokenSVGIcon';\nimport { useAppSelector, useAppDispatch } from '../../hooks';\nimport { updatedSelectedItem } from './SelectedItemSlice';\nimport { ethers, utils } from 'ethers';\nimport { Contract } from '@ethersproject/contracts';\nimport { BadgeOverviewModal } from '../badge/BadgeOverviewModal';\nimport { parseResponseForItems, getSuccessfulTransactionCount, parseForBadgesForTypes, RANDOM_VISOR_COLORS } from './BadgeHelper';\nimport { getTransactionsFor } from './TransactionsAPI'; // import { useContractFunction } from '../../workarounds/useContractFunction'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initBadges = []; // export const getTransactionsFor = async (signerAddress: string): Promise<AxiosResponse|null>=> {\n//   console.log('signer address : ',signerAddress)\n//   const COVALENT_API_KEY = \"ckey_4aed01d0d6e248a7a4ab27acb8a\"\n//   const COVALENT_MAINNET = {\n//     url: \"https://api.covalenthq.com/v1/1/\",\n//   }\n//   const transactionsForAddress = \n//   `${COVALENT_MAINNET.url}address/${signerAddress}/transactions_v2/?key=${COVALENT_API_KEY}`\n//   // Make a request for a user with a given ID\n//   return axios.get(transactionsForAddress)\n//     .then(function (response) {\n//       // handle success\n//       return response\n//     })\n//     .catch(function (error) {\n//       // handle error\n//       console.log(error);\n//       return null;\n//     });\n// }\n\nexport const VisorsABI = [\"function requestMint(uint256 visorId) public payable\"];\n\nfunction getTokenList(chainId) {\n  return uniswapToken.tokens.filter(token => token.chainId == chainId);\n}\n\nexport function TokensList() {\n  _s();\n\n  const {\n    chainId,\n    account,\n    library\n  } = useEthers();\n  console.log('chainId : ', chainId); // const balances = useTokensBalance(tokenList, account);\n\n  const [badges, setBadges] = useState(initBadges);\n  const [showModal, setShowModal] = useState(false);\n  let mountedRef = true;\n  const visorInterface = new utils.Interface(VisorsABI);\n  const VisorsContractAddress = '0x2f72199e3721c3b1eeb2913089c14c72ee9036b0';\n  const signer = library === null || library === void 0 ? void 0 : library.getSigner();\n  const contract = new Contract(VisorsContractAddress, visorInterface, signer);\n  const {\n    send\n  } = useContractFunction(contract, 'requestMint', {\n    signer: signer,\n    transactionName: 'Mint'\n  });\n\n  const doMint = async visorId => {\n    let overrides = {\n      value: ethers.utils.parseEther('0.0001')\n    };\n    send([1], overrides);\n  };\n\n  useEffect(() => {\n    const doAsync = async () => {\n      init();\n    };\n\n    if (mountedRef) {\n      doAsync();\n    }\n\n    return () => {\n      mountedRef = false;\n    };\n  }, [mountedRef]);\n\n  const init = async () => {\n    console.log('account : ', account);\n\n    if (!account || account === undefined) {\n      return;\n    }\n\n    console.log('awaiting response....');\n    const response = await getTransactionsFor(account);\n    console.log('axios : ', response);\n\n    if (!response) {\n      return;\n    }\n\n    const items = parseResponseForItems(response);\n\n    if (!items) {\n      return;\n    }\n\n    const successCount = getSuccessfulTransactionCount(items);\n    console.log('successes : ', successCount);\n    const badges = parseForBadgesForTypes([successCount]);\n    console.log('badges : ', badges);\n    loadBadges(badges);\n  };\n\n  const selectedItemIndex = useAppSelector(state => {\n    return state.selectedItem.index;\n  });\n  const dispatch = useAppDispatch();\n\n  const handleItemSelect = (index, balance, holders, name, address) => {\n    dispatch(updatedSelectedItem({\n      index: index,\n      balance: balance,\n      holders: holders,\n      name: name,\n      address: address,\n      color: index >= 0 ? RANDOM_VISOR_COLORS[index] : null\n    }));\n  };\n\n  const loadBadges = transactionItems => {\n    setBadges(transactionItems);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showModal && /*#__PURE__*/_jsxDEV(BadgeOverviewModal, {\n      setShowModal: setShowModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }, this), badges.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Not badges available...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 31\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: badges.map((badge, idx) => {\n          return /*#__PURE__*/_jsxDEV(Col, {\n            sm: 4,\n            md: 2,\n            lg: 2,\n            children: /*#__PURE__*/_jsxDEV(Container, {\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(TokenItem, {\n                    children: [/*#__PURE__*/_jsxDEV(TokenIconContainer, {\n                      onClick: () => setShowModal(!showModal),\n                      children: [/*#__PURE__*/_jsxDEV(TokenSVGIcon, {\n                        src: '',\n                        alt: ''\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 169,\n                        columnNumber: 23\n                      }, this), /*#__PURE__*/_jsxDEV(TokenBalance, {\n                        children: formatUnits(0, 0)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 170,\n                        columnNumber: 23\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 167,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(TokenName, {\n                      children: badge.badgeName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 174,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(MintButton, {\n                      onClick: () => doMint(idx),\n                      children: \"Mint\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 175,\n                      columnNumber: 21\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 21\n                  }, this)\n                }, `SubSection-${idx}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)\n          }, `parentSection-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TokensList, \"DdAPzQX/AuVqoCFSdyc6Zq0qO/8=\", false, function () {\n  return [useEthers, useContractFunction, useAppSelector, useAppDispatch];\n});\n\n_c = TokensList;\nexport const Button = styled.button`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 8px;\n  align-items: center;\n  width: fit-content;\n  height: 40px;\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  color: ${Colors.Black[900]};\n  border: 1px solid ${Colors.Black[900]};\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: ${Colors.Black[900]};\n    color: ${Colors.Yellow[100]};\n  }\n`;\nconst MintButton = styled(Button)`\n  background-color: ${Colors.Yellow[100]};\n`;\n_c2 = MintButton;\nconst List = styled.ul`\n`;\nconst ListItem = styled.li`\n`;\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`;\n_c3 = TokenItem;\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`;\n_c4 = TokenIconContainer;\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n\n`;\n_c5 = TokenName;\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`;\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 15px;\n`;\n_c6 = TokenBalance;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"TokensList\");\n$RefreshReg$(_c2, \"MintButton\");\n$RefreshReg$(_c3, \"TokenItem\");\n$RefreshReg$(_c4, \"TokenIconContainer\");\n$RefreshReg$(_c5, \"TokenName\");\n$RefreshReg$(_c6, \"TokenBalance\");","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx"],"names":["formatUnits","uniswapToken","useContractFunction","useEthers","React","useEffect","useState","styled","Colors","TextBold","Col","Container","Row","TokenSVGIcon","useAppSelector","useAppDispatch","updatedSelectedItem","ethers","utils","Contract","BadgeOverviewModal","parseResponseForItems","getSuccessfulTransactionCount","parseForBadgesForTypes","RANDOM_VISOR_COLORS","getTransactionsFor","initBadges","VisorsABI","getTokenList","chainId","tokens","filter","token","TokensList","account","library","console","log","badges","setBadges","showModal","setShowModal","mountedRef","visorInterface","Interface","VisorsContractAddress","signer","getSigner","contract","send","transactionName","doMint","visorId","overrides","value","parseEther","doAsync","init","undefined","response","items","successCount","loadBadges","selectedItemIndex","state","selectedItem","index","dispatch","handleItemSelect","balance","holders","name","address","color","transactionItems","length","map","badge","idx","badgeName","Button","button","Black","Yellow","MintButton","List","ul","ListItem","li","TokenItem","TokenIconContainer","div","TokenName","TokenTicker","Gray","TokenBalance"],"mappings":"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","sourcesContent":["import { formatUnits } from '@ethersproject/units'\nimport uniswapToken from '@uniswap/default-token-list'\nimport { ChainId, ERC20Interface, useContractCall, useContractCalls, useContractFunction, useEthers, useSendTransaction } from '@usedapp/core'\nimport React, { useEffect, useState } from 'react'\nimport { ERC1155Interface, VISORSInterface } from '../../interfaces/interfaces'\nimport styled from 'styled-components'\nimport { Colors } from '../../global/styles'\nimport { TextBold } from '../../typography/Text'\nimport { TokenIcon } from './TokenIcon'\nimport { Col, Container, Row } from 'react-bootstrap'\nimport { TokenSVGIcon } from './TokenSVGIcon'\nimport { useAppSelector, useAppDispatch } from '../../hooks'\nimport { increment } from '../../features/counter/counterSlice'\nimport { updatedSelectedItem } from './SelectedItemSlice'\n\nimport { ContractFactory, ethers, utils } from 'ethers'\nimport axios, { AxiosResponse } from 'axios'\nimport {Contract} from '@ethersproject/contracts'\nimport { BadgeOverviewModal } from '../badge/BadgeOverviewModal'\nimport { parseResponseForItems, getSuccessfulTransactionCount, parseForBadgesForTypes, RANDOM_VISOR_COLORS } from './BadgeHelper'\nimport { getTransactionsFor } from './TransactionsAPI'\n\n// import { useContractFunction } from '../../workarounds/useContractFunction'\n\ndeclare const window: any;\n\nconst initBadges: any[] = [];\n\n// export const getTransactionsFor = async (signerAddress: string): Promise<AxiosResponse|null>=> {\n//   console.log('signer address : ',signerAddress)\n//   const COVALENT_API_KEY = \"ckey_4aed01d0d6e248a7a4ab27acb8a\"\n//   const COVALENT_MAINNET = {\n//     url: \"https://api.covalenthq.com/v1/1/\",\n//   }\n\n//   const transactionsForAddress = \n//   `${COVALENT_MAINNET.url}address/${signerAddress}/transactions_v2/?key=${COVALENT_API_KEY}`\n\n\n//   // Make a request for a user with a given ID\n//   return axios.get(transactionsForAddress)\n//     .then(function (response) {\n//       // handle success\n//       return response\n//     })\n//     .catch(function (error) {\n//       // handle error\n//       console.log(error);\n\n//       return null;\n//     });\n// }\n\nexport const VisorsABI = [\n  \"function requestMint(uint256 visorId) public payable\",\n];\n\nfunction getTokenList(chainId?: ChainId) {\n  return uniswapToken.tokens.filter((token) => token.chainId == chainId)\n}\n\n\n\nexport function TokensList() {\n\n  const { chainId, account, library } = useEthers();\n  console.log('chainId : ',chainId)\n  // const balances = useTokensBalance(tokenList, account);\n  const [badges, setBadges] = useState(initBadges);\n  const [showModal, setShowModal] = useState(false)\n\n  let mountedRef = true;\n  const visorInterface = new utils.Interface(VisorsABI)\n  const VisorsContractAddress = '0x2f72199e3721c3b1eeb2913089c14c72ee9036b0'\n  const signer = library?.getSigner();\n  const contract = new Contract(VisorsContractAddress, visorInterface, signer);\n  const { send } = useContractFunction(contract, 'requestMint', { signer: signer,  transactionName: 'Mint' })\n\n\n  const doMint = async (visorId: number) => {\n    let overrides = {\n      value: ethers.utils.parseEther('0.0001')\n    };\n    send([1],overrides);\n  }  \n  \n\n\n  useEffect(() => {\n    const doAsync = async () => {\n      init();\n    }\n    if(mountedRef) {\n      doAsync();\n    }\n    return () => {\n      mountedRef = false;\n    }; \n\n\n  }, [mountedRef]);\n\n  const init = async () => {\n    console.log('account : ',account);\n    if(!account || account === undefined){\n      return;\n    }\n    console.log('awaiting response....')\n   const response =  await getTransactionsFor(account);  \n   console.log('axios : ',response);\n\n    if(!response){\n      return;\n    }\n\n    const items = parseResponseForItems(response);\n    if(!items) {\n      return;\n    }\n    const successCount = getSuccessfulTransactionCount(items);\n\n    console.log('successes : ',successCount);\n    const badges = parseForBadgesForTypes([successCount]);\n    console.log('badges : ',badges);\n    loadBadges(badges);\n  }\n\n    const selectedItemIndex = useAppSelector((state) => {\n      return state.selectedItem.index;\n    })\n    const dispatch = useAppDispatch();\n\n    const handleItemSelect =(index: number, balance: number, holders: number,name: string, address: string) =>  {\n    \n      dispatch (updatedSelectedItem(\n        {\n          index: index,\n          balance: balance,\n          holders: holders,\n          name: name,\n          address: address,\n          color: index >= 0 ? RANDOM_VISOR_COLORS[index] : null,\n        }\n      ))\n\n    }\n\n\n    const loadBadges =(transactionItems: any[]): void => {\n      setBadges(transactionItems);\n    }\n\n\n  return (\n    <div>\n      {showModal && <BadgeOverviewModal setShowModal={setShowModal} />}\n      {badges.length === 0 ? (<div>Not badges available...</div> ): (\n        <div>\n        <Row>\n        {badges.map((badge: any, idx:number) => {\n              return (\n              <Col sm={4} md={2} lg={2} key={`parentSection-${idx}`}> \n              <Container>\n              <Row>\n                  <Col key={`SubSection-${idx}`}>\n                    <TokenItem > \n                    <TokenIconContainer onClick={() => setShowModal(!showModal)}>\n                    {/* <TokenIconContainer onClick={() => handleItemSelect(idx,idx ,11,`Element ${idx}`,'address')}> */}\n                      <TokenSVGIcon src={''} alt={''}></TokenSVGIcon>\n                      <TokenBalance> \n                        {formatUnits(0,0)}\n                      </TokenBalance>\n                    </TokenIconContainer>\n                    <TokenName>{badge.badgeName}</TokenName>\n                    <MintButton \n\n                      onClick={() => doMint(idx)}\n                    \n                    >Mint</MintButton>\n                  </TokenItem>\n                  </Col>\n              </Row>\n              </Container>\n              </Col>\n          )})}\n        </Row>\n      </div>\n    )}\n    </div>\n  )\n}\n\n\nexport const Button = styled.button`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 8px;\n  align-items: center;\n  width: fit-content;\n  height: 40px;\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  color: ${Colors.Black[900]};\n  border: 1px solid ${Colors.Black[900]};\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: ${Colors.Black[900]};\n    color: ${Colors.Yellow[100]};\n  }\n`\n\nconst MintButton = styled(Button)`\n  background-color: ${Colors.Yellow[100]};\n`\n\nconst List = styled.ul`\n`\n\nconst ListItem = styled.li`\n`\n\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`\n\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`\n\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n\n`\n\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`\n\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 15px;\n`"]},"metadata":{},"sourceType":"module"}