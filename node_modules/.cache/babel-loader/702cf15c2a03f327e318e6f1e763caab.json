{"ast":null,"code":"var _jsxFileName = \"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx\",\n    _s = $RefreshSig$();\n\nimport { formatUnits } from '@ethersproject/units';\nimport { useEthers } from '@usedapp/core';\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Colors } from '../../global/styles';\nimport { useBadgeList } from '../../portalHooks/useBadgeList';\nimport { TextBold } from '../../typography/Text';\nimport { BadgeOverviewModal } from '../badge/BadgeOverviewModal';\nimport { TokenSVGIcon } from './TokenSVGIcon';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TokensList() {\n  _s();\n\n  const {\n    chainId,\n    account,\n    library\n  } = useEthers();\n  const badges = useBadgeList(account);\n  console.log('badges : ', badges);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedBadgeParams, setSelectedBadgeParams] = useState();\n\n  const handleShowModal = (index, badge) => {\n    if (!badge || !badge.ui) {\n      return;\n    }\n\n    setSelectedBadgeParams({\n      name: badge.ui.name,\n      description: badge.ui.description,\n      requirements: badge.ui.requirements,\n      address: badge.ui.onChain ? badge.ui.onChain.address : null,\n      tokenId: badge.ui.onChain ? badge.ui.onChain.tokenId : 0,\n      index: index\n    });\n    setShowModal(!showModal);\n  };\n\n  const item = useSelector(state => {\n    return {\n      index: state.selectedItem.index,\n      balance: state.selectedItem.balance,\n      holders: state.selectedItem.holders,\n      name: state.selectedItem.name,\n      address: state.selectedItem.address,\n      color: state.selectedItem.color,\n      tokenId: state.selectedItem.tokenId\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showModal && selectedBadgeParams && /*#__PURE__*/_jsxDEV(BadgeOverviewModal, {\n      setShowModal: setShowModal,\n      badgeParams: selectedBadgeParams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 45\n    }, this), badges && badges.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Not badges available...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 41\n    }, this) : /*#__PURE__*/_jsxDEV(BadgeContainer, {\n      children: badges && badges.map((badge, idx) => {\n        return /*#__PURE__*/_jsxDEV(TokenItem, {\n          children: [/*#__PURE__*/_jsxDEV(TokenIconContainer, {\n            onClick: () => handleShowModal(idx, badge),\n            children: [/*#__PURE__*/_jsxDEV(BadgeCreatorLogo, {\n              children: \"MPL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 23\n            }, this), item.color && item.index === idx && /*#__PURE__*/_jsxDEV(BadgeApplied, {\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                width: \"22\",\n                height: \"22\",\n                fill: \"currentColor\",\n                className: \"bi bi-check-square\",\n                viewBox: \"0 0 16 16\",\n                children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 3\n                }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.235.235 0 0 1 .02-.022z\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 3\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 62\n            }, this), /*#__PURE__*/_jsxDEV(TokenSVGIcon, {\n              src: '',\n              alt: ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(TokenBalance, {\n              children: [formatUnits(10, 0), \"xp\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), badge.ui && /*#__PURE__*/_jsxDEV(TokenName, {\n            children: badge.ui.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 38\n          }, this)]\n        }, `SubSection-${idx}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TokensList, \"pIqG8U30gRKveN5O3XPIIQtr+xQ=\", false, function () {\n  return [useEthers, useBadgeList, useSelector];\n});\n\n_c = TokensList;\nconst BadgeContainer = styled.div`\ndisplay: flex;\nflex-flow: row wrap;\n`;\n_c2 = BadgeContainer;\nexport const Button = styled.button`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 8px;\n  align-items: center;\n  width: fit-content;\n  height: 40px;\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  color: ${Colors.Black[900]};\n  border: 1px solid ${Colors.Black[900]};\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: ${Colors.Black[900]};\n    color: ${Colors.Yellow[100]};\n  }\n`;\nconst MintButton = styled(Button)`\n  background-color: ${Colors.Yellow[100]};\n`;\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`;\n_c3 = TokenItem;\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`;\n_c4 = TokenIconContainer;\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n`;\n_c5 = TokenName;\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`;\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 12px;\n`;\n_c6 = TokenBalance;\nconst BadgeApplied = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  padding:0.25em;\n  font-size: 12px;\n`;\n_c7 = BadgeApplied;\nconst BadgeCreatorLogo = styled(TextBold)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding:0.25em;\n  font-size: 12px;\n`;\n_c8 = BadgeCreatorLogo;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"TokensList\");\n$RefreshReg$(_c2, \"BadgeContainer\");\n$RefreshReg$(_c3, \"TokenItem\");\n$RefreshReg$(_c4, \"TokenIconContainer\");\n$RefreshReg$(_c5, \"TokenName\");\n$RefreshReg$(_c6, \"TokenBalance\");\n$RefreshReg$(_c7, \"BadgeApplied\");\n$RefreshReg$(_c8, \"BadgeCreatorLogo\");","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx"],"names":["formatUnits","useEthers","React","useState","styled","Colors","useBadgeList","TextBold","BadgeOverviewModal","TokenSVGIcon","useSelector","TokensList","chainId","account","library","badges","console","log","showModal","setShowModal","selectedBadgeParams","setSelectedBadgeParams","handleShowModal","index","badge","ui","name","description","requirements","address","onChain","tokenId","item","state","selectedItem","balance","holders","color","length","map","idx","BadgeContainer","div","Button","button","Black","Yellow","MintButton","TokenItem","li","TokenIconContainer","TokenName","TokenTicker","Gray","TokenBalance","BadgeApplied","BadgeCreatorLogo"],"mappings":"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","sourcesContent":["import { formatUnits } from '@ethersproject/units'\nimport { useEthers } from '@usedapp/core'\nimport React, { useState } from 'react'\nimport { Col, Container, Row } from 'react-bootstrap'\nimport styled from 'styled-components'\nimport { Colors } from '../../global/styles'\nimport { MetaBadge } from '../../portalHooks/BadgeHelperTypes'\nimport { useBadgeList } from '../../portalHooks/useBadgeList'\nimport { TextBold } from '../../typography/Text'\nimport { BadgeOverviewModal, BadgeParams } from '../badge/BadgeOverviewModal'\nimport { TokenSVGIcon } from './TokenSVGIcon'\nimport { useSelector } from 'react-redux'\n\n\ndeclare const window: any;\n\nexport function TokensList() {\n\n  const { chainId, account, library } = useEthers();\n  const badges: MetaBadge[]| undefined = useBadgeList(account);\n\n  console.log('badges : ',badges)\n  const [showModal, setShowModal] = useState(false)\n  const [selectedBadgeParams, setSelectedBadgeParams] = useState<BadgeParams>()\n\n    const handleShowModal =(index: number, badge: MetaBadge) =>  {\n      if(!badge || !badge.ui){\n        return;\n      }\n      setSelectedBadgeParams({\n        name: badge.ui.name,\n        description: badge.ui.description,\n        requirements: badge.ui.requirements,\n        address: badge.ui.onChain ? badge.ui.onChain.address : null,\n        tokenId: badge.ui.onChain ? badge.ui.onChain.tokenId : 0,\n        index: index,\n      });\n\n      setShowModal(!showModal);\n    }\n\n    const item = useSelector((state: any) => {\n      return{\n      index: state.selectedItem.index,\n      balance: state.selectedItem.balance,\n      holders: state.selectedItem.holders,\n      name: state.selectedItem.name,\n      address: state.selectedItem.address,\n      color: state.selectedItem.color,\n      tokenId: state.selectedItem.tokenId,\n    }\n    })\n\n\n  return (\n    <div>\n      {\n      (showModal && selectedBadgeParams) && <BadgeOverviewModal setShowModal={setShowModal} badgeParams={selectedBadgeParams} />\n      }\n      {badges && badges.length === 0 ? (<div>Not badges available...</div> ): (\n        <BadgeContainer>\n        {badges && badges.map((badge: MetaBadge, idx:number) => {\n              return (\n         \n                    <TokenItem key={`SubSection-${idx}`}> \n                    <TokenIconContainer onClick={() => handleShowModal(idx, badge)}>\n                      <BadgeCreatorLogo>\n                        MPL\n                      </BadgeCreatorLogo>\n                      {(item.color && item.index === idx) && <BadgeApplied> \n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" fill=\"currentColor\" className=\"bi bi-check-square\" viewBox=\"0 0 16 16\">\n  <path d=\"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n  <path d=\"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.235.235 0 0 1 .02-.022z\"/>\n</svg>\n                      </BadgeApplied>}\n                      <TokenSVGIcon src={''} alt={''}></TokenSVGIcon>\n                      <TokenBalance> \n                        {formatUnits(10,0)}xp\n                      </TokenBalance>\n                    </TokenIconContainer>\n                        {badge.ui && <TokenName>{badge.ui.name}</TokenName>}                    \n                  </TokenItem>\n           \n          )})}\n        </BadgeContainer>\n    )}\n    </div>\n  )\n}\n\n\nconst BadgeContainer = styled.div`\ndisplay: flex;\nflex-flow: row wrap;\n`\n\n\nexport const Button = styled.button`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 8px;\n  align-items: center;\n  width: fit-content;\n  height: 40px;\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  color: ${Colors.Black[900]};\n  border: 1px solid ${Colors.Black[900]};\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: ${Colors.Black[900]};\n    color: ${Colors.Yellow[100]};\n  }\n`\n\nconst MintButton = styled(Button)`\n  background-color: ${Colors.Yellow[100]};\n`\n\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`\n\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`\n\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n`\n\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`\n\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 12px;\n`\n\nconst BadgeApplied = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  padding:0.25em;\n  font-size: 12px;\n`\n\nconst BadgeCreatorLogo = styled(TextBold)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding:0.25em;\n  font-size: 12px;\n`\n"]},"metadata":{},"sourceType":"module"}