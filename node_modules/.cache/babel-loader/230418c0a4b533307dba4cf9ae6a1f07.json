{"ast":null,"code":"import { Loader, FileLoader, TextureLoader, LoaderUtils, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, sRGBEncoding, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from 'three';\nimport { unzipSync } from 'fflate';\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.availableExtensions = [];\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    const scope = this;\n    const textureLoader = new TextureLoader(this.manager);\n\n    function loadDocument(data) {\n      let zip = null;\n      let file = null;\n      let relsName;\n      let modelRelsName;\n      const modelPartNames = [];\n      const texturesPartNames = [];\n      let modelRels;\n      const modelParts = {};\n      const printTicketParts = {};\n      const texturesParts = {};\n      const otherParts = {};\n\n      try {\n        zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n          return null;\n        }\n      }\n\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ;else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) ;\n      } //\n\n\n      const relsView = zip[relsName];\n      const relsFileText = LoaderUtils.decodeText(relsView);\n      const rels = parseRelsXml(relsFileText); //\n\n      if (modelRelsName) {\n        const relsView = zip[modelRelsName];\n        const relsFileText = LoaderUtils.decodeText(relsView);\n        modelRels = parseRelsXml(relsFileText);\n      } //\n\n\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i];\n        const view = zip[modelPart];\n        const fileText = LoaderUtils.decodeText(view);\n        const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n        }\n\n        const modelNode = xmlData.querySelector('model');\n        const extensions = {};\n\n        for (let i = 0; i < modelNode.attributes.length; i++) {\n          const attr = modelNode.attributes[i];\n\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n\n        const modelData = parseModelNode(modelNode);\n        modelData['xml'] = modelNode;\n\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions;\n        }\n\n        modelParts[modelPart] = modelData;\n      } //\n\n\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n\n    function parseRelsXml(relsFileText) {\n      const relationships = [];\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n      const relsNodes = relsXmlData.querySelectorAll('Relationship');\n\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i];\n        const relationship = {\n          target: relsNode.getAttribute('Target'),\n          //required\n          id: relsNode.getAttribute('Id'),\n          //required\n          type: relsNode.getAttribute('Type') //required\n\n        };\n        relationships.push(relationship);\n      }\n\n      return relationships;\n    }\n\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {};\n\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i];\n        const name = metadataNode.getAttribute('name');\n        const validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n\n      return metadataData;\n    }\n\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute('id'),\n        // required\n        basematerials: []\n      };\n      const basematerialNodes = basematerialsNode.querySelectorAll('base');\n\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i];\n        const basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n        basematerialsData.basematerials.push(basematerialData);\n      }\n\n      return basematerialsData;\n    }\n\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute('id'),\n        // required\n        path: texture2DNode.getAttribute('path'),\n        // required\n        contenttype: texture2DNode.getAttribute('contenttype'),\n        // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter')\n      };\n      return texture2dData;\n    }\n\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'),\n        // required\n        texid: texture2DGroupNode.getAttribute('texid'),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n      };\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n      const uvs = [];\n\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i];\n        const u = tex2coordNode.getAttribute('u');\n        const v = tex2coordNode.getAttribute('v');\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n\n      texture2DGroupData['uvs'] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute('id'),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n      };\n      const colorNodes = colorGroupNode.querySelectorAll('color');\n      const colors = [];\n      const colorObject = new Color();\n\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i];\n        const color = colorNode.getAttribute('color');\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear(); // color is in sRGB\n\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n\n      colorGroupData['colors'] = new Float32Array(colors);\n      return colorGroupData;\n    }\n\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id') // required\n\n      };\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n      const metallicData = [];\n\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute('name'),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n\n        });\n      }\n\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {};\n      basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n      return basematerialData;\n    }\n\n    function parseMeshNode(meshNode) {\n      const meshData = {};\n      const vertices = [];\n      const vertexNodes = meshNode.querySelectorAll('vertices vertex');\n\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i];\n        const x = vertexNode.getAttribute('x');\n        const y = vertexNode.getAttribute('y');\n        const z = vertexNode.getAttribute('z');\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n\n      meshData['vertices'] = new Float32Array(vertices);\n      const triangleProperties = [];\n      const triangles = [];\n      const triangleNodes = meshNode.querySelectorAll('triangles triangle');\n\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i];\n        const v1 = triangleNode.getAttribute('v1');\n        const v2 = triangleNode.getAttribute('v2');\n        const v3 = triangleNode.getAttribute('v3');\n        const p1 = triangleNode.getAttribute('p1');\n        const p2 = triangleNode.getAttribute('p2');\n        const p3 = triangleNode.getAttribute('p3');\n        const pid = triangleNode.getAttribute('pid');\n        const triangleProperty = {};\n        triangleProperty['v1'] = parseInt(v1, 10);\n        triangleProperty['v2'] = parseInt(v2, 10);\n        triangleProperty['v3'] = parseInt(v3, 10);\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10);\n        }\n\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10);\n        }\n\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10);\n        }\n\n        if (pid) {\n          triangleProperty['pid'] = pid;\n        }\n\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n\n      meshData['triangleProperties'] = triangleProperties;\n      meshData['triangles'] = new Uint32Array(triangles);\n      return meshData;\n    }\n\n    function parseComponentsNode(componentsNode) {\n      const components = [];\n      const componentNodes = componentsNode.querySelectorAll('component');\n\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i];\n        const componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n\n      return components;\n    }\n\n    function parseComponentNode(componentNode) {\n      const componentData = {};\n      componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n      const transform = componentNode.getAttribute('transform');\n\n      if (transform) {\n        componentData['transform'] = parseTransform(transform);\n      }\n\n      return componentData;\n    }\n\n    function parseTransform(transform) {\n      const t = [];\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      const matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n      return matrix;\n    }\n\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute('type')\n      };\n      const id = objectNode.getAttribute('id');\n\n      if (id) {\n        objectData['id'] = id;\n      }\n\n      const pid = objectNode.getAttribute('pid');\n\n      if (pid) {\n        objectData['pid'] = pid;\n      }\n\n      const pindex = objectNode.getAttribute('pindex');\n\n      if (pindex) {\n        objectData['pindex'] = pindex;\n      }\n\n      const thumbnail = objectNode.getAttribute('thumbnail');\n\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail;\n      }\n\n      const partnumber = objectNode.getAttribute('partnumber');\n\n      if (partnumber) {\n        objectData['partnumber'] = partnumber;\n      }\n\n      const name = objectNode.getAttribute('name');\n\n      if (name) {\n        objectData['name'] = name;\n      }\n\n      const meshNode = objectNode.querySelector('mesh');\n\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode);\n      }\n\n      const componentsNode = objectNode.querySelector('components');\n\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode);\n      }\n\n      return objectData;\n    }\n\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {};\n      resourcesData['basematerials'] = {};\n      const basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i];\n        const basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n      } //\n\n\n      resourcesData['texture2d'] = {};\n      const textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i];\n        const texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n      } //\n\n\n      resourcesData['colorgroup'] = {};\n      const colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i];\n        const colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n      } //\n\n\n      resourcesData['pbmetallicdisplayproperties'] = {};\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n      } //\n\n\n      resourcesData['texture2dgroup'] = {};\n      const textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i];\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n      } //\n\n\n      resourcesData['object'] = {};\n      const objectNodes = resourcesNode.querySelectorAll('object');\n\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i];\n        const objectData = parseObjectNode(objectNode);\n        resourcesData['object'][objectData['id']] = objectData;\n      }\n\n      return resourcesData;\n    }\n\n    function parseBuildNode(buildNode) {\n      const buildData = [];\n      const itemNodes = buildNode.querySelectorAll('item');\n\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i];\n        const buildItem = {\n          objectId: itemNode.getAttribute('objectid')\n        };\n        const transform = itemNode.getAttribute('transform');\n\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform);\n        }\n\n        buildData.push(buildItem);\n      }\n\n      return buildData;\n    }\n\n    function parseModelNode(modelNode) {\n      const modelData = {\n        unit: modelNode.getAttribute('unit') || 'millimeter'\n      };\n      const metadataNodes = modelNode.querySelectorAll('metadata');\n\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes);\n      }\n\n      const resourcesNode = modelNode.querySelector('resources');\n\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode);\n      }\n\n      const buildNode = modelNode.querySelector('build');\n\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode);\n      }\n\n      return modelData;\n    }\n\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      const texid = texture2dgroup.texid;\n      const texture2ds = modelData.resources.texture2d;\n      const texture2d = texture2ds[texid];\n\n      if (texture2d) {\n        const data = textureData[texture2d.path];\n        const type = texture2d.contenttype;\n        const blob = new Blob([data], {\n          type: type\n        });\n        const sourceURI = URL.createObjectURL(blob);\n        const texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        texture.encoding = sRGBEncoding; // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n\n          case 'linear':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n\n          case 'nearest':\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n\n        return texture;\n      } else {\n        return null;\n      }\n    }\n\n    function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      const objectPindex = objectData.pindex;\n      const materialMap = {};\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      } //\n\n\n      const keys = Object.keys(materialMap);\n      const meshes = [];\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i];\n        const trianglePropertiesProps = materialMap[materialIndex];\n        const basematerialData = basematerials.basematerials[materialIndex];\n        const material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n        const geometry = new BufferGeometry();\n        const positionData = [];\n        const vertices = meshData.vertices;\n\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n        const mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n\n      return meshes;\n    }\n\n    function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const uvData = [];\n      const vertices = meshData.vertices;\n      const uvs = texture2dgroup.uvs;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n      const texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n      const material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const colorData = [];\n      const vertices = meshData.vertices;\n      const colors = colorgroup.colors;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const v1 = triangleProperty.v1;\n        const v2 = triangleProperty.v2;\n        const v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]); //\n\n        const p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n        const p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n        const p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n      const material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n      const material = new MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap);\n      const meshes = [];\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i];\n        const triangleProperties = resourceMap[resourceId];\n        const resourceType = getResourceType(resourceId, modelData);\n\n        switch (resourceType) {\n          case 'material':\n            const basematerials = modelData.resources.basematerials[resourceId];\n            const newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData);\n\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n\n            break;\n\n          case 'texture':\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData));\n            break;\n\n          case 'vertexColors':\n            const colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData));\n            break;\n\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.');\n        }\n      }\n\n      return meshes;\n    }\n\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture';\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material';\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors';\n      } else if (pid === 'default') {\n        return 'default';\n      } else {\n        return undefined;\n      }\n    }\n\n    function analyzeObject(modelData, meshData, objectData) {\n      const resourceMap = {};\n      const triangleProperties = meshData['triangleProperties'];\n      const objectPid = objectData.pid;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        let pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n        if (pid === undefined) pid = 'default';\n        if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n\n      return resourceMap;\n    }\n\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      const group = new Group();\n      const resourceMap = analyzeObject(modelData, meshData, objectData);\n      const meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData);\n\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n\n      return group;\n    }\n\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n\n      const availableExtensions = [];\n      const keys = Object.keys(extensions);\n\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i];\n\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j];\n\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension['ns']], meshData);\n      }\n    }\n\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data, objects, modelData, textureData, objectData);\n      return data.build;\n    }\n\n    function buildBasematerial(materialData, objects, modelData) {\n      let material;\n      const displaypropertiesid = materialData.displaypropertiesid;\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        // otherwise use PhongMaterial\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n\n      material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      const displaycolor = materialData.displaycolor;\n      const color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n\n      return material;\n    }\n\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      const composite = new Group();\n\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j];\n        let build = objects[component.objectId];\n\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData);\n          build = objects[component.objectId];\n        }\n\n        const object3D = build.clone(); // apply component transform\n\n        const transform = component.transform;\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        composite.add(object3D);\n      }\n\n      return composite;\n    }\n\n    function buildObject(objectId, objects, modelData, textureData) {\n      const objectData = modelData['resources']['object'][objectId];\n\n      if (objectData['mesh']) {\n        const meshData = objectData['mesh'];\n        const extensions = modelData['extensions'];\n        const modelXml = modelData['xml'];\n        applyExtensions(extensions, meshData, modelXml);\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n      } else {\n        const compositeData = objectData['components'];\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n      }\n    }\n\n    function buildObjects(data3mf) {\n      const modelsData = data3mf.model;\n      const modelRels = data3mf.modelRels;\n      const objects = {};\n      const modelsKeys = Object.keys(modelsData);\n      const textureData = {}; // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i];\n          const textureKey = modelRel.target.substring(1);\n\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey];\n          }\n        }\n      } // start build\n\n\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i];\n        const modelData = modelsData[modelsKey];\n        const objectIds = Object.keys(modelData['resources']['object']);\n\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j];\n          buildObject(objectId, objects, modelData, textureData);\n        }\n      }\n\n      return objects;\n    }\n\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i];\n        const extension = rel.target.split('.').pop();\n        if (extension.toLowerCase() === 'model') return rel;\n      }\n    }\n\n    function build(objects, data3mf) {\n      const group = new Group();\n      const relationship = fetch3DModelPart(data3mf['rels']);\n      const buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i];\n        const object3D = objects[buildItem['objectId']]; // apply transform\n\n        const transform = buildItem['transform'];\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        group.add(object3D);\n      }\n\n      return group;\n    }\n\n    const data3mf = loadDocument(data);\n    const objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  }\n\n  addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n\n}\n\nexport { ThreeMFLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/3MFLoader.js"],"names":["Loader","FileLoader","TextureLoader","LoaderUtils","Group","Color","Matrix4","BufferGeometry","Float32BufferAttribute","Mesh","MeshPhongMaterial","BufferAttribute","MeshStandardMaterial","sRGBEncoding","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","LinearFilter","LinearMipmapLinearFilter","NearestFilter","unzipSync","ThreeMFLoader","constructor","manager","availableExtensions","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","data","textureLoader","loadDocument","zip","file","relsName","modelRelsName","modelPartNames","texturesPartNames","modelRels","modelParts","printTicketParts","texturesParts","otherParts","Uint8Array","ReferenceError","match","push","relsView","relsFileText","decodeText","rels","parseRelsXml","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","attributes","attr","name","value","RegExp","$1","modelData","parseModelNode","Object","keys","texturesPartName","model","printTicket","texture","other","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","encoding","wrapS","wrapT","magFilter","minFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","undefined","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","j","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop","addExtension"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, TextureLoader, LoaderUtils, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, sRGBEncoding, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.availableExtensions = [];\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    const scope = this;\n    const textureLoader = new TextureLoader(this.manager);\n\n    function loadDocument(data) {\n      let zip = null;\n      let file = null;\n      let relsName;\n      let modelRelsName;\n      const modelPartNames = [];\n      const texturesPartNames = [];\n      let modelRels;\n      const modelParts = {};\n      const printTicketParts = {};\n      const texturesParts = {};\n      const otherParts = {};\n\n      try {\n        zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n          return null;\n        }\n      }\n\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ; else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) ;\n      } //\n\n\n      const relsView = zip[relsName];\n      const relsFileText = LoaderUtils.decodeText(relsView);\n      const rels = parseRelsXml(relsFileText); //\n\n      if (modelRelsName) {\n        const relsView = zip[modelRelsName];\n        const relsFileText = LoaderUtils.decodeText(relsView);\n        modelRels = parseRelsXml(relsFileText);\n      } //\n\n\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i];\n        const view = zip[modelPart];\n        const fileText = LoaderUtils.decodeText(view);\n        const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n        }\n\n        const modelNode = xmlData.querySelector('model');\n        const extensions = {};\n\n        for (let i = 0; i < modelNode.attributes.length; i++) {\n          const attr = modelNode.attributes[i];\n\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n\n        const modelData = parseModelNode(modelNode);\n        modelData['xml'] = modelNode;\n\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions;\n        }\n\n        modelParts[modelPart] = modelData;\n      } //\n\n\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n\n    function parseRelsXml(relsFileText) {\n      const relationships = [];\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n      const relsNodes = relsXmlData.querySelectorAll('Relationship');\n\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i];\n        const relationship = {\n          target: relsNode.getAttribute('Target'),\n          //required\n          id: relsNode.getAttribute('Id'),\n          //required\n          type: relsNode.getAttribute('Type') //required\n\n        };\n        relationships.push(relationship);\n      }\n\n      return relationships;\n    }\n\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {};\n\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i];\n        const name = metadataNode.getAttribute('name');\n        const validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n\n      return metadataData;\n    }\n\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute('id'),\n        // required\n        basematerials: []\n      };\n      const basematerialNodes = basematerialsNode.querySelectorAll('base');\n\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i];\n        const basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n        basematerialsData.basematerials.push(basematerialData);\n      }\n\n      return basematerialsData;\n    }\n\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute('id'),\n        // required\n        path: texture2DNode.getAttribute('path'),\n        // required\n        contenttype: texture2DNode.getAttribute('contenttype'),\n        // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter')\n      };\n      return texture2dData;\n    }\n\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'),\n        // required\n        texid: texture2DGroupNode.getAttribute('texid'),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n      };\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n      const uvs = [];\n\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i];\n        const u = tex2coordNode.getAttribute('u');\n        const v = tex2coordNode.getAttribute('v');\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n\n      texture2DGroupData['uvs'] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute('id'),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n      };\n      const colorNodes = colorGroupNode.querySelectorAll('color');\n      const colors = [];\n      const colorObject = new Color();\n\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i];\n        const color = colorNode.getAttribute('color');\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear(); // color is in sRGB\n\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n\n      colorGroupData['colors'] = new Float32Array(colors);\n      return colorGroupData;\n    }\n\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id') // required\n\n      };\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n      const metallicData = [];\n\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute('name'),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n\n        });\n      }\n\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {};\n      basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n      return basematerialData;\n    }\n\n    function parseMeshNode(meshNode) {\n      const meshData = {};\n      const vertices = [];\n      const vertexNodes = meshNode.querySelectorAll('vertices vertex');\n\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i];\n        const x = vertexNode.getAttribute('x');\n        const y = vertexNode.getAttribute('y');\n        const z = vertexNode.getAttribute('z');\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n\n      meshData['vertices'] = new Float32Array(vertices);\n      const triangleProperties = [];\n      const triangles = [];\n      const triangleNodes = meshNode.querySelectorAll('triangles triangle');\n\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i];\n        const v1 = triangleNode.getAttribute('v1');\n        const v2 = triangleNode.getAttribute('v2');\n        const v3 = triangleNode.getAttribute('v3');\n        const p1 = triangleNode.getAttribute('p1');\n        const p2 = triangleNode.getAttribute('p2');\n        const p3 = triangleNode.getAttribute('p3');\n        const pid = triangleNode.getAttribute('pid');\n        const triangleProperty = {};\n        triangleProperty['v1'] = parseInt(v1, 10);\n        triangleProperty['v2'] = parseInt(v2, 10);\n        triangleProperty['v3'] = parseInt(v3, 10);\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10);\n        }\n\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10);\n        }\n\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10);\n        }\n\n        if (pid) {\n          triangleProperty['pid'] = pid;\n        }\n\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n\n      meshData['triangleProperties'] = triangleProperties;\n      meshData['triangles'] = new Uint32Array(triangles);\n      return meshData;\n    }\n\n    function parseComponentsNode(componentsNode) {\n      const components = [];\n      const componentNodes = componentsNode.querySelectorAll('component');\n\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i];\n        const componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n\n      return components;\n    }\n\n    function parseComponentNode(componentNode) {\n      const componentData = {};\n      componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n      const transform = componentNode.getAttribute('transform');\n\n      if (transform) {\n        componentData['transform'] = parseTransform(transform);\n      }\n\n      return componentData;\n    }\n\n    function parseTransform(transform) {\n      const t = [];\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      const matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n      return matrix;\n    }\n\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute('type')\n      };\n      const id = objectNode.getAttribute('id');\n\n      if (id) {\n        objectData['id'] = id;\n      }\n\n      const pid = objectNode.getAttribute('pid');\n\n      if (pid) {\n        objectData['pid'] = pid;\n      }\n\n      const pindex = objectNode.getAttribute('pindex');\n\n      if (pindex) {\n        objectData['pindex'] = pindex;\n      }\n\n      const thumbnail = objectNode.getAttribute('thumbnail');\n\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail;\n      }\n\n      const partnumber = objectNode.getAttribute('partnumber');\n\n      if (partnumber) {\n        objectData['partnumber'] = partnumber;\n      }\n\n      const name = objectNode.getAttribute('name');\n\n      if (name) {\n        objectData['name'] = name;\n      }\n\n      const meshNode = objectNode.querySelector('mesh');\n\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode);\n      }\n\n      const componentsNode = objectNode.querySelector('components');\n\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode);\n      }\n\n      return objectData;\n    }\n\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {};\n      resourcesData['basematerials'] = {};\n      const basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i];\n        const basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n      } //\n\n\n      resourcesData['texture2d'] = {};\n      const textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i];\n        const texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n      } //\n\n\n      resourcesData['colorgroup'] = {};\n      const colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i];\n        const colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n      } //\n\n\n      resourcesData['pbmetallicdisplayproperties'] = {};\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n      } //\n\n\n      resourcesData['texture2dgroup'] = {};\n      const textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i];\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n      } //\n\n\n      resourcesData['object'] = {};\n      const objectNodes = resourcesNode.querySelectorAll('object');\n\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i];\n        const objectData = parseObjectNode(objectNode);\n        resourcesData['object'][objectData['id']] = objectData;\n      }\n\n      return resourcesData;\n    }\n\n    function parseBuildNode(buildNode) {\n      const buildData = [];\n      const itemNodes = buildNode.querySelectorAll('item');\n\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i];\n        const buildItem = {\n          objectId: itemNode.getAttribute('objectid')\n        };\n        const transform = itemNode.getAttribute('transform');\n\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform);\n        }\n\n        buildData.push(buildItem);\n      }\n\n      return buildData;\n    }\n\n    function parseModelNode(modelNode) {\n      const modelData = {\n        unit: modelNode.getAttribute('unit') || 'millimeter'\n      };\n      const metadataNodes = modelNode.querySelectorAll('metadata');\n\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes);\n      }\n\n      const resourcesNode = modelNode.querySelector('resources');\n\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode);\n      }\n\n      const buildNode = modelNode.querySelector('build');\n\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode);\n      }\n\n      return modelData;\n    }\n\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      const texid = texture2dgroup.texid;\n      const texture2ds = modelData.resources.texture2d;\n      const texture2d = texture2ds[texid];\n\n      if (texture2d) {\n        const data = textureData[texture2d.path];\n        const type = texture2d.contenttype;\n        const blob = new Blob([data], {\n          type: type\n        });\n        const sourceURI = URL.createObjectURL(blob);\n        const texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        texture.encoding = sRGBEncoding; // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n\n          case 'linear':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n\n          case 'nearest':\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n\n        return texture;\n      } else {\n        return null;\n      }\n    }\n\n    function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      const objectPindex = objectData.pindex;\n      const materialMap = {};\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      } //\n\n\n      const keys = Object.keys(materialMap);\n      const meshes = [];\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i];\n        const trianglePropertiesProps = materialMap[materialIndex];\n        const basematerialData = basematerials.basematerials[materialIndex];\n        const material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n        const geometry = new BufferGeometry();\n        const positionData = [];\n        const vertices = meshData.vertices;\n\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n        const mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n\n      return meshes;\n    }\n\n    function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const uvData = [];\n      const vertices = meshData.vertices;\n      const uvs = texture2dgroup.uvs;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n      const texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n      const material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const colorData = [];\n      const vertices = meshData.vertices;\n      const colors = colorgroup.colors;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const v1 = triangleProperty.v1;\n        const v2 = triangleProperty.v2;\n        const v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]); //\n\n        const p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n        const p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n        const p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n      const material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n      const material = new MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap);\n      const meshes = [];\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i];\n        const triangleProperties = resourceMap[resourceId];\n        const resourceType = getResourceType(resourceId, modelData);\n\n        switch (resourceType) {\n          case 'material':\n            const basematerials = modelData.resources.basematerials[resourceId];\n            const newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData);\n\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n\n            break;\n\n          case 'texture':\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData));\n            break;\n\n          case 'vertexColors':\n            const colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData));\n            break;\n\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.');\n        }\n      }\n\n      return meshes;\n    }\n\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture';\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material';\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors';\n      } else if (pid === 'default') {\n        return 'default';\n      } else {\n        return undefined;\n      }\n    }\n\n    function analyzeObject(modelData, meshData, objectData) {\n      const resourceMap = {};\n      const triangleProperties = meshData['triangleProperties'];\n      const objectPid = objectData.pid;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        let pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n        if (pid === undefined) pid = 'default';\n        if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n\n      return resourceMap;\n    }\n\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      const group = new Group();\n      const resourceMap = analyzeObject(modelData, meshData, objectData);\n      const meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData);\n\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n\n      return group;\n    }\n\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n\n      const availableExtensions = [];\n      const keys = Object.keys(extensions);\n\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i];\n\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j];\n\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension['ns']], meshData);\n      }\n    }\n\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data, objects, modelData, textureData, objectData);\n      return data.build;\n    }\n\n    function buildBasematerial(materialData, objects, modelData) {\n      let material;\n      const displaypropertiesid = materialData.displaypropertiesid;\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        // otherwise use PhongMaterial\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n\n      material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      const displaycolor = materialData.displaycolor;\n      const color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n\n      return material;\n    }\n\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      const composite = new Group();\n\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j];\n        let build = objects[component.objectId];\n\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData);\n          build = objects[component.objectId];\n        }\n\n        const object3D = build.clone(); // apply component transform\n\n        const transform = component.transform;\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        composite.add(object3D);\n      }\n\n      return composite;\n    }\n\n    function buildObject(objectId, objects, modelData, textureData) {\n      const objectData = modelData['resources']['object'][objectId];\n\n      if (objectData['mesh']) {\n        const meshData = objectData['mesh'];\n        const extensions = modelData['extensions'];\n        const modelXml = modelData['xml'];\n        applyExtensions(extensions, meshData, modelXml);\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n      } else {\n        const compositeData = objectData['components'];\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n      }\n    }\n\n    function buildObjects(data3mf) {\n      const modelsData = data3mf.model;\n      const modelRels = data3mf.modelRels;\n      const objects = {};\n      const modelsKeys = Object.keys(modelsData);\n      const textureData = {}; // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i];\n          const textureKey = modelRel.target.substring(1);\n\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey];\n          }\n        }\n      } // start build\n\n\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i];\n        const modelData = modelsData[modelsKey];\n        const objectIds = Object.keys(modelData['resources']['object']);\n\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j];\n          buildObject(objectId, objects, modelData, textureData);\n        }\n      }\n\n      return objects;\n    }\n\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i];\n        const extension = rel.target.split('.').pop();\n        if (extension.toLowerCase() === 'model') return rel;\n      }\n    }\n\n    function build(objects, data3mf) {\n      const group = new Group();\n      const relationship = fetch3DModelPart(data3mf['rels']);\n      const buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i];\n        const object3D = objects[buildItem['objectId']]; // apply transform\n\n        const transform = buildItem['transform'];\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        group.add(object3D);\n      }\n\n      return group;\n    }\n\n    const data3mf = loadDocument(data);\n    const objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  }\n\n  addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n\n}\n\nexport { ThreeMFLoader };\n"]},"metadata":{},"sourceType":"module"}