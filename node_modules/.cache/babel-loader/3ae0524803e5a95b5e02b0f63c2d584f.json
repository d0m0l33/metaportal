{"ast":null,"code":"export let TransactionLevel;\n\n(function (TransactionLevel) {\n  TransactionLevel[TransactionLevel[\"Root\"] = 0] = \"Root\";\n  TransactionLevel[TransactionLevel[\"LogEvents\"] = 1] = \"LogEvents\";\n})(TransactionLevel || (TransactionLevel = {}));\n\nexport let CriteriaComparions;\n\n(function (CriteriaComparions) {\n  CriteriaComparions[CriteriaComparions[\"GT\"] = 0] = \"GT\";\n  CriteriaComparions[CriteriaComparions[\"LT\"] = 1] = \"LT\";\n})(CriteriaComparions || (CriteriaComparions = {}));\n\nexport const parseResponseForItems = response => {\n  if (!response || !response.data || !response.data.data) {\n    return null;\n  }\n\n  return response.data.data.items;\n};\nexport const getSuccessfulTransactionCount = items => {\n  let successCount = 0;\n  items.forEach(item => {\n    if (item.successful === true) {\n      successCount++;\n    }\n  });\n  return successCount;\n};\nexport const parseForBadgesForTypes = values => {\n  return [...extractBadgesForBadgeCriteria('successfulTransactions', values[0]), ...extractBadgesForBadgeCriteria('accountCreation', 1)];\n};\nexport const extractBadgesForBadgeCriteria = (badgeType, valueAchieved) => {\n  let successCount = 0;\n  let extractedBadges = [];\n  ALL_BADGES['metaPortal'][badgeType]['greaterThan'].forEach(badgeItem => {\n    if (valueAchieved > badgeItem.value) {\n      extractedBadges.push(badgeItem);\n    }\n  });\n  return extractedBadges;\n};\nexport const RANDOM_VISOR_COLORS = ['black', 'white', 'grey', 'green', 'blue', 'hot-pink', 'purple', 'silver', 'bronze', 'gold'];\nexport const BADGE_LIST = [{\n  ui: {\n    balance: 0,\n    name: 'Space Cadet',\n    imageUri: null\n  },\n  parseRules: {\n    level: TransactionLevel.Root,\n    keyValueObject: {\n      name: '',\n      value: 0\n    },\n    useKeyValueMatching: false,\n    criteria: {\n      comparison: CriteriaComparions.GT,\n      value: 1\n    }\n  }\n}, {\n  ui: {\n    balance: 0,\n    name: 'GM Rank 1',\n    imageUri: null\n  },\n  parseRules: {\n    level: TransactionLevel.Root,\n    keyValueObject: {\n      name: '',\n      value: 0\n    },\n    useKeyValueMatching: false,\n    criteria: {\n      comparison: CriteriaComparions.GT,\n      value: 0\n    }\n  }\n}, {\n  ui: {\n    balance: 0,\n    name: 'Explorer Rank 1',\n    imageUri: null\n  },\n  parseRules: {\n    level: TransactionLevel.Root,\n    keyValueObject: {\n      name: 'successful',\n      value: true\n    },\n    useKeyValueMatching: false,\n    criteria: {\n      comparison: CriteriaComparions.GT,\n      value: 25\n    }\n  }\n}, {\n  ui: {\n    balance: 0,\n    name: 'Explorer Rank 1',\n    imageUri: null\n  },\n  parseRules: {\n    level: TransactionLevel.Root,\n    keyValueObject: {\n      name: 'successful',\n      value: true\n    },\n    useKeyValueMatching: false,\n    criteria: {\n      comparison: CriteriaComparions.GT,\n      value: 50\n    }\n  }\n}, {\n  ui: {\n    balance: 0,\n    name: 'Explorer Rank 1',\n    imageUri: null\n  },\n  parseRules: {\n    level: TransactionLevel.Root,\n    keyValueObject: {\n      name: 'successful',\n      value: true\n    },\n    useKeyValueMatching: false,\n    criteria: {\n      comparison: CriteriaComparions.GT,\n      value: 75\n    }\n  }\n}, {\n  ui: {\n    balance: 0,\n    name: 'Explorer Rank 1',\n    imageUri: null\n  },\n  parseRules: {\n    level: TransactionLevel.Root,\n    keyValueObject: {\n      name: 'successful',\n      value: true\n    },\n    useKeyValueMatching: false,\n    criteria: {\n      comparison: CriteriaComparions.GT,\n      value: 100\n    }\n  }\n}];\nexport const ALL_BADGES = {\n  metaPortal: {\n    accountCreation: {\n      greaterThan: [{\n        value: 0,\n        badgeName: 'Space Cadet'\n      }, {\n        value: 0,\n        badgeName: 'GM Rank 1'\n      }]\n    },\n    successfulTransactions: {\n      greaterThan: [{\n        value: 25,\n        badgeName: 'Explorer Rank 1'\n      }, {\n        value: 50,\n        badgeName: 'Explorer Rank 2'\n      }, {\n        value: 75,\n        badgeName: 'Explorer Rank 3'\n      }, {\n        value: 100,\n        badgeName: 'Sky Captain Rank 1'\n      }]\n    }\n  }\n};\nexport const calculateFrequencyForKeyValueMatches = (transactions, key, value, valueMatching) => {\n  if (valueMatching) {\n    // matches if 'key' found && key maps to 'value'\n    return getKeyValueMatchCount(transactions, key, value);\n  } else {\n    // matches if 'key' found\n    return getKeyMatchCount(transactions, key);\n  }\n};\nexport const parseTransactionsForRules = transactions => {\n  const rules = [{\n    level: TransactionLevel.Root,\n    keyValueObject: {\n      name: 'successful',\n      value: true\n    },\n    useKeyValueMatching: true\n  }];\n};\nexport const getKeyValueMatchCount = (items, key, value) => {\n  let count = 0;\n  items.forEach(item => {\n    if (item[key] && item[key] === value) {\n      count++;\n    }\n  });\n  return count;\n};\nexport const getKeyMatchCount = (items, key) => {\n  let count = 0;\n  items.forEach(item => {\n    if (item[key]) {\n      count++;\n    }\n  });\n  return count;\n};\nexport const getValidBadges = (badges, transactions) => {\n  let validBadges = [];\n  badges.forEach(badge => {\n    if (validateBadgeAgainstTransactions(badge, transactions)) {\n      validBadges.push(badge);\n    }\n  });\n  return validBadges;\n};\nexport const validateBadgeAgainstTransactions = (badge, transactions) => {\n  let isValid = false;\n\n  switch (badge.parseRules.level) {\n    case TransactionLevel.Root:\n      // compare with rules\n      isValid = executeRootLevelChecksForBadge(badge.parseRules, transactions);\n      return isValid;\n\n    default:\n      return false;\n  }\n};\nexport const executeRootLevelChecksForBadge = (rules, transactions) => {\n  // defaulting to Key Match frequency comparisons\n  return executeFrequencyRuleForBadge(rules.keyValueObject.name, rules.keyValueObject.value, rules.criteria.comparison, rules.criteria.value, rules.useKeyValueMatching, transactions);\n};\nexport const executeFrequencyRuleForBadge = (key, value, criteriaRule, criteriaValue, isValueMathing, transactions) => {\n  // defaulting to Key Match frequency comparisons\n  let isValid = false;\n  const frequency = calculateFrequencyForKeyValueMatches(transactions, key, value, isValueMathing);\n\n  switch (criteriaRule) {\n    case CriteriaComparions.GT:\n      return frequency > criteriaValue;\n\n    case CriteriaComparions.LT:\n      return frequency < criteriaValue;\n\n    default:\n      return false;\n  }\n\n  return isValid;\n};","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/BadgeHelper.ts"],"names":["TransactionLevel","CriteriaComparions","parseResponseForItems","response","data","items","getSuccessfulTransactionCount","successCount","forEach","item","successful","parseForBadgesForTypes","values","extractBadgesForBadgeCriteria","badgeType","valueAchieved","extractedBadges","ALL_BADGES","badgeItem","value","push","RANDOM_VISOR_COLORS","BADGE_LIST","ui","balance","name","imageUri","parseRules","level","Root","keyValueObject","useKeyValueMatching","criteria","comparison","GT","metaPortal","accountCreation","greaterThan","badgeName","successfulTransactions","calculateFrequencyForKeyValueMatches","transactions","key","valueMatching","getKeyValueMatchCount","getKeyMatchCount","parseTransactionsForRules","rules","count","getValidBadges","badges","validBadges","badge","validateBadgeAgainstTransactions","isValid","executeRootLevelChecksForBadge","executeFrequencyRuleForBadge","criteriaRule","criteriaValue","isValueMathing","frequency","LT"],"mappings":"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","sourcesContent":["import { AxiosResponse } from \"axios\";\n\n\nexport enum TransactionLevel {\n  Root = 0,\n  LogEvents\n}\n\nexport enum CriteriaComparions {\n  GT = 0,\n  LT\n}\n\nexport interface UIMetadata {\n  name: string,\n  balance: number,\n  imageUri: string| null\n}\n\nexport interface Badge {\n  ui : UIMetadata| null;\n  parseRules: ParseParams,\n}\n\nexport interface RequirementsCriteria {\n  comparison : CriteriaComparions,\n  value: number\n}\n\nexport interface ParseParams {\n  level: TransactionLevel,\n  keyValueObject: KeyValueObject,\n  useKeyValueMatching: boolean,\n  criteria: RequirementsCriteria\n}\n\nexport interface KeyValueObject {\n  name: string,\n  value?: boolean|string|number;\n}\n\nexport const parseResponseForItems =(response: AxiosResponse): (any[]|null) => {\n    if(!response || !response.data || !response.data.data) {\n      return null;\n    }\n    return response.data.data.items;\n  }\n  \n  export const getSuccessfulTransactionCount =(items: any[]): number => {\n    let successCount = 0;\n    items.forEach((item) => {\n      if(item.successful === true) {\n        successCount++;\n      }\n    });\n    return successCount;\n  }\n  \n  \n  export const parseForBadgesForTypes =(values: number[]): any[] => {\n    return [\n      ...extractBadgesForBadgeCriteria('successfulTransactions',values[0]),\n      ...extractBadgesForBadgeCriteria('accountCreation',1)\n    ]\n  }\n  \n  \n  export const extractBadgesForBadgeCriteria = (badgeType: string, valueAchieved: number): any[] => {\n    let successCount = 0;\n    let extractedBadges: any[] = [];\n    \n    ALL_BADGES['metaPortal'][badgeType]['greaterThan'].forEach((badgeItem: any) => {\n      if(valueAchieved > badgeItem.value ) {\n        extractedBadges.push(badgeItem);\n      }\n    });\n    return extractedBadges;\n  }\n\n  export const RANDOM_VISOR_COLORS = [\n    'black',\n    'white',\n    'grey',\n    'green',\n    'blue',\n    'hot-pink',\n    'purple',\n    'silver',\n    'bronze',\n    'gold'\n  ]\n\n  export const BADGE_LIST: Badge[] = [\n    {\n      ui: {\n        balance: 0,\n        name: 'Space Cadet',\n        imageUri: null,\n      },\n      parseRules: {\n        level: TransactionLevel.Root,\n        keyValueObject:  {\n          name: '',\n          value: 0\n        },\n        useKeyValueMatching: false,\n        criteria: {\n          comparison: CriteriaComparions.GT,\n          value: 1\n        }\n      }\n    },\n    {\n      ui: {\n        balance: 0,\n        name: 'GM Rank 1',\n        imageUri: null,\n      },\n      parseRules: {\n        level: TransactionLevel.Root,\n        keyValueObject:  {\n          name: '',\n          value: 0\n        },\n        useKeyValueMatching: false,\n        criteria: {\n          comparison: CriteriaComparions.GT,\n          value: 0\n        }\n      }\n    },\n    {\n      ui: {\n        balance: 0,\n        name: 'Explorer Rank 1',\n        imageUri: null,\n      },\n      parseRules: {\n        level: TransactionLevel.Root,\n        keyValueObject:  {\n          name: 'successful',\n          value: true\n        },\n        useKeyValueMatching: false,\n        criteria: {\n          comparison: CriteriaComparions.GT,\n          value: 25\n        }\n      }\n    },\n    {\n      ui: {\n        balance: 0,\n        name: 'Explorer Rank 1',\n        imageUri: null,\n      },\n      parseRules: {\n        level: TransactionLevel.Root,\n        keyValueObject:  {\n          name: 'successful',\n          value: true\n        },\n        useKeyValueMatching: false,\n        criteria: {\n          comparison: CriteriaComparions.GT,\n          value: 50\n        }\n      }\n    },\n    {\n      ui: {\n        balance: 0,\n        name: 'Explorer Rank 1',\n        imageUri: null,\n      },\n      parseRules: {\n        level: TransactionLevel.Root,\n        keyValueObject:  {\n          name: 'successful',\n          value: true\n        },\n        useKeyValueMatching: false,\n        criteria: {\n          comparison: CriteriaComparions.GT,\n          value: 75\n        }\n      }\n    },\n    {\n      ui: {\n        balance: 0,\n        name: 'Explorer Rank 1',\n        imageUri: null,\n      },\n      parseRules: {\n        level: TransactionLevel.Root,\n        keyValueObject:  {\n          name: 'successful',\n          value: true\n        },\n        useKeyValueMatching: false,\n        criteria: {\n          comparison: CriteriaComparions.GT,\n          value: 100\n        }\n      }\n    },\n  ]\n  \n  export const ALL_BADGES: any = {\n    metaPortal : {\n      accountCreation : {\n        greaterThan: [\n          {\n            value: 0,\n            badgeName: 'Space Cadet',\n          },\n          {\n            value: 0,\n            badgeName: 'GM Rank 1',\n          },\n        ]\n      },\n      successfulTransactions : {\n  \n        greaterThan: [\n          {\n            value: 25,\n            badgeName: 'Explorer Rank 1',\n          },\n          {\n            value: 50,\n            badgeName: 'Explorer Rank 2',\n          },\n          {\n            value: 75,\n            badgeName: 'Explorer Rank 3',\n          },\n          {\n            value: 100,\n            badgeName: 'Sky Captain Rank 1',\n          }\n        ]\n      }\n    }\n  }\n\n\n  export const calculateFrequencyForKeyValueMatches =(\n    transactions: any[], \n    key: string, \n    value: number, \n    valueMatching: boolean\n    ) : number => {\n      if(valueMatching) {\n        // matches if 'key' found && key maps to 'value'\n        return getKeyValueMatchCount(transactions, key, value);\n      } else {\n          // matches if 'key' found\n          return getKeyMatchCount(transactions, key);\n      }\n  }\n\n\n  export const parseTransactionsForRules =(transactions: any[]) => {\n\n    const rules: any[] = [\n      {\n        level: TransactionLevel.Root,\n        keyValueObject: {name: 'successful', value: true} ,\n        useKeyValueMatching: true\n      }\n    ]\n\n  }\n\n\n  export const getKeyValueMatchCount = (items: any[], key: string, value: any) =>  {\n      let count = 0;\n      items.forEach((item) => {\n        if(item[key] && item[key] === value) {\n          count++;\n        }\n      });\n      return count;\n  }\n\n  export const getKeyMatchCount = (items: any[], key: string) =>  {\n    let count = 0;\n    items.forEach((item) => {\n      if(item[key]) {\n        count++;\n      }\n    });\n    return count;\n}\n\n\nexport const getValidBadges = (badges: Badge[], transactions: any[]) : Badge[] =>  {\n  let validBadges: Badge[] = [];\n  badges.forEach((badge: Badge) => {\n    if(validateBadgeAgainstTransactions(badge,transactions)){\n      validBadges.push(badge);\n    }\n  });\n  return validBadges;\n}\n\n\nexport const validateBadgeAgainstTransactions = (badge: Badge, transactions: any[]): boolean =>  {\n  let isValid = false;\n  switch(badge.parseRules.level) {\n    case TransactionLevel.Root :\n        // compare with rules\n        isValid = executeRootLevelChecksForBadge(badge.parseRules,transactions);\n      return isValid;\n    default:\n      return false;\n  }\n}\n\n\nexport const executeRootLevelChecksForBadge = (rules: ParseParams, transactions: any[]): boolean =>  {\n  // defaulting to Key Match frequency comparisons\n  return executeFrequencyRuleForBadge(\n    rules.keyValueObject.name, \n    rules.keyValueObject.value,\n    rules.criteria.comparison,\n    rules.criteria.value,\n    rules.useKeyValueMatching,\n    transactions\n    );\n}\n\n\nexport const executeFrequencyRuleForBadge = (\n  key: string, \n  value: any, \n  criteriaRule: CriteriaComparions,\n  criteriaValue: number,\n  isValueMathing: boolean,\n  transactions: any[], ): boolean =>  {\n  // defaulting to Key Match frequency comparisons\n  let isValid = false;\n  const frequency = calculateFrequencyForKeyValueMatches(transactions, key, value, isValueMathing);\n\n  switch(criteriaRule) {\n    case CriteriaComparions.GT : \n      return frequency > criteriaValue;\n\n    case CriteriaComparions.LT : \n      return frequency < criteriaValue;\n\n    default:\n      return false;\n  }\n\n  return isValid;\n}"]},"metadata":{},"sourceType":"module"}