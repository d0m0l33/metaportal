{"ast":null,"code":"import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nconst _taskCache = new WeakMap();\n\nclass BasisTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture([buffer]).then(function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }).catch(onError);\n    }, onProgress, onError);\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n\n\n  parseInternalAsync(options) {\n    const {\n      levels\n    } = options;\n    const buffers = new Set();\n\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n\n    return this._createTexture(Array.from(buffers), { ...options,\n      lowLevel: true\n    });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n\n\n  _createTexture(buffers) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n\n    const texturePending = this._allocateWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'transcode',\n          id: taskID,\n          buffers: buffers,\n          taskConfig: taskConfig\n        }, buffers);\n      });\n    }).then(message => {\n      const {\n        mipmaps,\n        width,\n        height,\n        format\n      } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffers[0], {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n      }); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(_ref => {\n        let [jsContent, binaryContent] = _ref;\n        const fn = BasisTextureLoader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n      });\n    }\n\n    return this.transcoderPending;\n  }\n\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'transcode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n\n  function transcodeLowLevel(taskConfig) {\n    const {\n      basisFormat,\n      width,\n      height,\n      hasAlpha\n    } = taskConfig;\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    const mipmaps = [];\n\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const {\n        endpointCount,\n        endpointsData,\n        selectorCount,\n        selectorsData,\n        tablesData\n      } = taskConfig.globalData;\n\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, 0, level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + level.index + '.');\n        mipmaps.push({\n          data: dst,\n          width: level.width,\n          height: level.height\n        });\n      }\n    }\n\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\n\nexport { BasisTextureLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/three-stdlib/loaders/BasisTextureLoader.js"],"names":["Loader","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","_taskCache","WeakMap","BasisTextureLoader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","setTranscoderPath","path","setWorkerLimit","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","load","url","onLoad","onProgress","onError","loader","setResponseType","setWithCredentials","withCredentials","texture","buffer","cachedTask","get","promise","then","catch","_createTexture","_texture","copy","needsUpdate","parseInternalAsync","options","levels","buffers","Set","i","length","add","data","Array","from","lowLevel","config","worker","taskID","taskConfig","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","mipmaps","width","height","format","minFilter","magFilter","generateMipmaps","_taskLoad","set","_initTranscoder","jsLoader","setPath","jsContent","undefined","binaryLoader","binaryContent","all","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","onmessage","e","console","error","push","sort","a","b","dispose","terminate","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","init","hasAlpha","transcodeLowLevel","transcode","self","wasmBinary","onRuntimeInitialized","BASIS","initializeBasis","basisFormat","transcoderFormat","engineFormat","getTranscoderFormat","blockByteLength","getBytesPerBlockOrPixel","assert","isFormatSupported","transcoder","LowLevelETC1SImageTranscoder","endpointCount","endpointsData","selectorCount","selectorsData","tablesData","globalData","ok","decodePalettes","decodeTables","level","imageDesc","imageDescs","dstByteLength","getTranscodedImageByteLength","dst","Uint8Array","transcodeImage","getWidthInBlocks","getHeightInBlocks","index","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","imageFlags","delete","transcodeUASTCImage","basisFile","BasisFile","isUASTC","getImageWidth","getImageHeight","getNumLevels","getHasAlpha","cleanup","close","Error","startTranscoding","mip","mipWidth","mipHeight","getImageTranscodedSizeInBytes","status","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","UASTC_OPTIONS","opt","includes","isPowerOfTwo","warn","Math","ceil","getFormatBlockWidth","getFormatBlockHeight","formatIsUncompressed","paddedWidth","paddedHeight","max","value"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nconst _taskCache = new WeakMap();\n\nclass BasisTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture([buffer]).then(function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }).catch(onError);\n    }, onProgress, onError);\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n\n\n  parseInternalAsync(options) {\n    const {\n      levels\n    } = options;\n    const buffers = new Set();\n\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n\n    return this._createTexture(Array.from(buffers), { ...options,\n      lowLevel: true\n    });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n\n\n  _createTexture(buffers, config = {}) {\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n\n    const texturePending = this._allocateWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'transcode',\n          id: taskID,\n          buffers: buffers,\n          taskConfig: taskConfig\n        }, buffers);\n      });\n    }).then(message => {\n      const {\n        mipmaps,\n        width,\n        height,\n        format\n      } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffers[0], {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n      }); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = BasisTextureLoader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n      });\n    }\n\n    return this.transcoderPending;\n  }\n\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'transcode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n\n  function transcodeLowLevel(taskConfig) {\n    const {\n      basisFormat,\n      width,\n      height,\n      hasAlpha\n    } = taskConfig;\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    const mipmaps = [];\n\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const {\n        endpointCount,\n        endpointsData,\n        selectorCount,\n        selectorsData,\n        tablesData\n      } = taskConfig.globalData;\n\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, 0, level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + level.index + '.');\n        mipmaps.push({\n          data: dst,\n          width: level.width,\n          height: level.height\n        });\n      }\n    }\n\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\n\nexport { BasisTextureLoader };\n"]},"metadata":{},"sourceType":"module"}