{"ast":null,"code":"import { CompressedTextureLoader, RGBAFormat, RGB_ETC1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGB_S3TC_DXT1_Format } from 'three';\n\nclass DDSLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  parse(buffer, loadMipmaps) {\n    const dds = {\n      mipmaps: [],\n      width: 0,\n      height: 0,\n      format: null,\n      mipmapCount: 1\n    }; // Adapted from @toji's DDS utils\n    // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n    // All values and structures referenced from:\n    // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n    const DDS_MAGIC = 0x20534444; // let DDSD_CAPS = 0x1;\n    // let DDSD_HEIGHT = 0x2;\n    // let DDSD_WIDTH = 0x4;\n    // let DDSD_PITCH = 0x8;\n    // let DDSD_PIXELFORMAT = 0x1000;\n\n    const DDSD_MIPMAPCOUNT = 0x20000; // let DDSD_LINEARSIZE = 0x80000;\n    // let DDSD_DEPTH = 0x800000;\n    // let DDSCAPS_COMPLEX = 0x8;\n    // let DDSCAPS_MIPMAP = 0x400000;\n    // let DDSCAPS_TEXTURE = 0x1000;\n\n    const DDSCAPS2_CUBEMAP = 0x200;\n    const DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\n    const DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\n    const DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\n    const DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\n    const DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\n    const DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000; // let DDSCAPS2_VOLUME = 0x200000;\n    // let DDPF_ALPHAPIXELS = 0x1;\n    // let DDPF_ALPHA = 0x2;\n\n    const DDPF_FOURCC = 0x4; // let DDPF_RGB = 0x40;\n    // let DDPF_YUV = 0x200;\n    // let DDPF_LUMINANCE = 0x20000;\n\n    function fourCCToInt32(value) {\n      return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n    }\n\n    function int32ToFourCC(value) {\n      return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n    }\n\n    function loadARGBMip(buffer, dataOffset, width, height) {\n      const dataLength = width * height * 4;\n      const srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n      const byteArray = new Uint8Array(dataLength);\n      let dst = 0;\n      let src = 0;\n\n      for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n          const b = srcBuffer[src];\n          src++;\n          const g = srcBuffer[src];\n          src++;\n          const r = srcBuffer[src];\n          src++;\n          const a = srcBuffer[src];\n          src++;\n          byteArray[dst] = r;\n          dst++; //r\n\n          byteArray[dst] = g;\n          dst++; //g\n\n          byteArray[dst] = b;\n          dst++; //b\n\n          byteArray[dst] = a;\n          dst++; //a\n        }\n      }\n\n      return byteArray;\n    }\n\n    const FOURCC_DXT1 = fourCCToInt32('DXT1');\n    const FOURCC_DXT3 = fourCCToInt32('DXT3');\n    const FOURCC_DXT5 = fourCCToInt32('DXT5');\n    const FOURCC_ETC1 = fourCCToInt32('ETC1');\n    const headerLengthInt = 31; // The header length in 32 bit ints\n    // Offsets into the header array\n\n    const off_magic = 0;\n    const off_size = 1;\n    const off_flags = 2;\n    const off_height = 3;\n    const off_width = 4;\n    const off_mipmapCount = 7;\n    const off_pfFlags = 20;\n    const off_pfFourCC = 21;\n    const off_RGBBitCount = 22;\n    const off_RBitMask = 23;\n    const off_GBitMask = 24;\n    const off_BBitMask = 25;\n    const off_ABitMask = 26; // let off_caps = 27;\n\n    const off_caps2 = 28; // let off_caps3 = 29;\n    // let off_caps4 = 30;\n    // Parse header\n\n    const header = new Int32Array(buffer, 0, headerLengthInt);\n\n    if (header[off_magic] !== DDS_MAGIC) {\n      console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n      return dds;\n    }\n\n    if (!header[off_pfFlags] & DDPF_FOURCC) {\n      console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n      return dds;\n    }\n\n    let blockBytes;\n    const fourCC = header[off_pfFourCC];\n    let isRGBAUncompressed = false;\n\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        dds.format = RGB_S3TC_DXT1_Format;\n        break;\n\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT3_Format;\n        break;\n\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT5_Format;\n        break;\n\n      case FOURCC_ETC1:\n        blockBytes = 8;\n        dds.format = RGB_ETC1_Format;\n        break;\n\n      default:\n        if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 0xff0000 && header[off_GBitMask] & 0xff00 && header[off_BBitMask] & 0xff && header[off_ABitMask] & 0xff000000) {\n          isRGBAUncompressed = true;\n          blockBytes = 64;\n          dds.format = RGBAFormat;\n        } else {\n          console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n          return dds;\n        }\n\n    }\n\n    dds.mipmapCount = 1;\n\n    if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n      dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n\n    const caps2 = header[off_caps2];\n    dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\n    if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n      console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n      return dds;\n    }\n\n    dds.width = header[off_width];\n    dds.height = header[off_height];\n    let dataOffset = header[off_size] + 4; // Extract mipmaps buffers\n\n    const faces = dds.isCubemap ? 6 : 1;\n\n    for (let face = 0; face < faces; face++) {\n      let width = dds.width;\n      let height = dds.height;\n\n      for (let i = 0; i < dds.mipmapCount; i++) {\n        let byteArray, dataLength;\n\n        if (isRGBAUncompressed) {\n          byteArray = loadARGBMip(buffer, dataOffset, width, height);\n          dataLength = byteArray.length;\n        } else {\n          dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n          byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n        }\n\n        const mipmap = {\n          data: byteArray,\n          width: width,\n          height: height\n        };\n        dds.mipmaps.push(mipmap);\n        dataOffset += dataLength;\n        width = Math.max(width >> 1, 1);\n        height = Math.max(height >> 1, 1);\n      }\n    }\n\n    return dds;\n  }\n\n}\n\nexport { DDSLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/DDSLoader.js"],"names":["CompressedTextureLoader","RGBAFormat","RGB_ETC1_Format","RGBA_S3TC_DXT5_Format","RGBA_S3TC_DXT3_Format","RGB_S3TC_DXT1_Format","DDSLoader","constructor","manager","parse","buffer","loadMipmaps","dds","mipmaps","width","height","format","mipmapCount","DDS_MAGIC","DDSD_MIPMAPCOUNT","DDSCAPS2_CUBEMAP","DDSCAPS2_CUBEMAP_POSITIVEX","DDSCAPS2_CUBEMAP_NEGATIVEX","DDSCAPS2_CUBEMAP_POSITIVEY","DDSCAPS2_CUBEMAP_NEGATIVEY","DDSCAPS2_CUBEMAP_POSITIVEZ","DDSCAPS2_CUBEMAP_NEGATIVEZ","DDPF_FOURCC","fourCCToInt32","value","charCodeAt","int32ToFourCC","String","fromCharCode","loadARGBMip","dataOffset","dataLength","srcBuffer","Uint8Array","byteArray","dst","src","y","x","b","g","r","a","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","headerLengthInt","off_magic","off_size","off_flags","off_height","off_width","off_mipmapCount","off_pfFlags","off_pfFourCC","off_RGBBitCount","off_RBitMask","off_GBitMask","off_BBitMask","off_ABitMask","off_caps2","header","Int32Array","console","error","blockBytes","fourCC","isRGBAUncompressed","Math","max","caps2","isCubemap","faces","face","i","length","mipmap","data","push"],"mappings":"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","sourcesContent":["import { CompressedTextureLoader, RGBAFormat, RGB_ETC1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGB_S3TC_DXT1_Format } from 'three';\n\nclass DDSLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  parse(buffer, loadMipmaps) {\n    const dds = {\n      mipmaps: [],\n      width: 0,\n      height: 0,\n      format: null,\n      mipmapCount: 1\n    }; // Adapted from @toji's DDS utils\n    // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n    // All values and structures referenced from:\n    // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n    const DDS_MAGIC = 0x20534444; // let DDSD_CAPS = 0x1;\n    // let DDSD_HEIGHT = 0x2;\n    // let DDSD_WIDTH = 0x4;\n    // let DDSD_PITCH = 0x8;\n    // let DDSD_PIXELFORMAT = 0x1000;\n\n    const DDSD_MIPMAPCOUNT = 0x20000; // let DDSD_LINEARSIZE = 0x80000;\n    // let DDSD_DEPTH = 0x800000;\n    // let DDSCAPS_COMPLEX = 0x8;\n    // let DDSCAPS_MIPMAP = 0x400000;\n    // let DDSCAPS_TEXTURE = 0x1000;\n\n    const DDSCAPS2_CUBEMAP = 0x200;\n    const DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\n    const DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\n    const DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\n    const DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\n    const DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\n    const DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000; // let DDSCAPS2_VOLUME = 0x200000;\n    // let DDPF_ALPHAPIXELS = 0x1;\n    // let DDPF_ALPHA = 0x2;\n\n    const DDPF_FOURCC = 0x4; // let DDPF_RGB = 0x40;\n    // let DDPF_YUV = 0x200;\n    // let DDPF_LUMINANCE = 0x20000;\n\n    function fourCCToInt32(value) {\n      return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n    }\n\n    function int32ToFourCC(value) {\n      return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n    }\n\n    function loadARGBMip(buffer, dataOffset, width, height) {\n      const dataLength = width * height * 4;\n      const srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n      const byteArray = new Uint8Array(dataLength);\n      let dst = 0;\n      let src = 0;\n\n      for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n          const b = srcBuffer[src];\n          src++;\n          const g = srcBuffer[src];\n          src++;\n          const r = srcBuffer[src];\n          src++;\n          const a = srcBuffer[src];\n          src++;\n          byteArray[dst] = r;\n          dst++; //r\n\n          byteArray[dst] = g;\n          dst++; //g\n\n          byteArray[dst] = b;\n          dst++; //b\n\n          byteArray[dst] = a;\n          dst++; //a\n        }\n      }\n\n      return byteArray;\n    }\n\n    const FOURCC_DXT1 = fourCCToInt32('DXT1');\n    const FOURCC_DXT3 = fourCCToInt32('DXT3');\n    const FOURCC_DXT5 = fourCCToInt32('DXT5');\n    const FOURCC_ETC1 = fourCCToInt32('ETC1');\n    const headerLengthInt = 31; // The header length in 32 bit ints\n    // Offsets into the header array\n\n    const off_magic = 0;\n    const off_size = 1;\n    const off_flags = 2;\n    const off_height = 3;\n    const off_width = 4;\n    const off_mipmapCount = 7;\n    const off_pfFlags = 20;\n    const off_pfFourCC = 21;\n    const off_RGBBitCount = 22;\n    const off_RBitMask = 23;\n    const off_GBitMask = 24;\n    const off_BBitMask = 25;\n    const off_ABitMask = 26; // let off_caps = 27;\n\n    const off_caps2 = 28; // let off_caps3 = 29;\n    // let off_caps4 = 30;\n    // Parse header\n\n    const header = new Int32Array(buffer, 0, headerLengthInt);\n\n    if (header[off_magic] !== DDS_MAGIC) {\n      console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n      return dds;\n    }\n\n    if (!header[off_pfFlags] & DDPF_FOURCC) {\n      console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n      return dds;\n    }\n\n    let blockBytes;\n    const fourCC = header[off_pfFourCC];\n    let isRGBAUncompressed = false;\n\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        dds.format = RGB_S3TC_DXT1_Format;\n        break;\n\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT3_Format;\n        break;\n\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT5_Format;\n        break;\n\n      case FOURCC_ETC1:\n        blockBytes = 8;\n        dds.format = RGB_ETC1_Format;\n        break;\n\n      default:\n        if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 0xff0000 && header[off_GBitMask] & 0xff00 && header[off_BBitMask] & 0xff && header[off_ABitMask] & 0xff000000) {\n          isRGBAUncompressed = true;\n          blockBytes = 64;\n          dds.format = RGBAFormat;\n        } else {\n          console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n          return dds;\n        }\n\n    }\n\n    dds.mipmapCount = 1;\n\n    if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n      dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n\n    const caps2 = header[off_caps2];\n    dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\n    if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n      console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n      return dds;\n    }\n\n    dds.width = header[off_width];\n    dds.height = header[off_height];\n    let dataOffset = header[off_size] + 4; // Extract mipmaps buffers\n\n    const faces = dds.isCubemap ? 6 : 1;\n\n    for (let face = 0; face < faces; face++) {\n      let width = dds.width;\n      let height = dds.height;\n\n      for (let i = 0; i < dds.mipmapCount; i++) {\n        let byteArray, dataLength;\n\n        if (isRGBAUncompressed) {\n          byteArray = loadARGBMip(buffer, dataOffset, width, height);\n          dataLength = byteArray.length;\n        } else {\n          dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n          byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n        }\n\n        const mipmap = {\n          data: byteArray,\n          width: width,\n          height: height\n        };\n        dds.mipmaps.push(mipmap);\n        dataOffset += dataLength;\n        width = Math.max(width >> 1, 1);\n        height = Math.max(height >> 1, 1);\n      }\n    }\n\n    return dds;\n  }\n\n}\n\nexport { DDSLoader };\n"]},"metadata":{},"sourceType":"module"}