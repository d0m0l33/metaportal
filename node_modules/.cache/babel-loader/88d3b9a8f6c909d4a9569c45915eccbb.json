{"ast":null,"code":"import { DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\n\nfunction useDepthBuffer() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 256 : _ref$size,\n      _ref$frames = _ref.frames,\n      frames = _ref$frames === void 0 ? Infinity : _ref$frames;\n\n  var dpr = useThree(function (state) {\n    return state.viewport.dpr;\n  });\n\n  var _useThree = useThree(function (state) {\n    return state.size;\n  }),\n      width = _useThree.width,\n      height = _useThree.height;\n\n  var w = size || width * dpr;\n  var h = size || height * dpr;\n  var depthConfig = React.useMemo(function () {\n    var depthTexture = new DepthTexture(w, h);\n    depthTexture.format = DepthFormat;\n    depthTexture.type = UnsignedShortType;\n    return {\n      depthTexture: depthTexture\n    };\n  }, [w, h]);\n  var count = 0;\n  var depthFBO = useFBO(w, h, depthConfig);\n  useFrame(function (state) {\n    if (frames === Infinity || count < frames) {\n      state.gl.setRenderTarget(depthFBO);\n      state.gl.render(state.scene, state.camera);\n      state.gl.setRenderTarget(null);\n      count++;\n    }\n  });\n  return depthFBO.depthTexture;\n}\n\nexport { useDepthBuffer };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/@react-three/drei/core/useDepthBuffer.js"],"names":["DepthTexture","DepthFormat","UnsignedShortType","React","useThree","useFrame","useFBO","useDepthBuffer","size","frames","Infinity","dpr","state","viewport","width","height","w","h","depthConfig","useMemo","depthTexture","format","type","count","depthFBO","gl","setRenderTarget","render","scene","camera"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,WAAvB,EAAoCC,iBAApC,QAA6D,OAA7D;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,oBAAnC;AACA,SAASC,MAAT,QAAuB,aAAvB;;AAEA,SAASC,cAAT,GAGQ;AAAA,iFAAJ,EAAI;AAAA,uBAFNC,IAEM;AAAA,MAFNA,IAEM,0BAFC,GAED;AAAA,yBADNC,MACM;AAAA,MADNA,MACM,4BADGC,QACH;;AACN,MAAMC,GAAG,GAAGP,QAAQ,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACC,QAAN,CAAeF,GAAnB;AAAA,GAAN,CAApB;;AACA,kBAGIP,QAAQ,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACJ,IAAV;AAAA,GAAN,CAHZ;AAAA,MACEM,KADF,aACEA,KADF;AAAA,MAEEC,MAFF,aAEEA,MAFF;;AAIA,MAAMC,CAAC,GAAGR,IAAI,IAAIM,KAAK,GAAGH,GAA1B;AACA,MAAMM,CAAC,GAAGT,IAAI,IAAIO,MAAM,GAAGJ,GAA3B;AACA,MAAMO,WAAW,GAAGf,KAAK,CAACgB,OAAN,CAAc,YAAM;AACtC,QAAMC,YAAY,GAAG,IAAIpB,YAAJ,CAAiBgB,CAAjB,EAAoBC,CAApB,CAArB;AACAG,IAAAA,YAAY,CAACC,MAAb,GAAsBpB,WAAtB;AACAmB,IAAAA,YAAY,CAACE,IAAb,GAAoBpB,iBAApB;AACA,WAAO;AACLkB,MAAAA,YAAY,EAAZA;AADK,KAAP;AAGD,GAPmB,EAOjB,CAACJ,CAAD,EAAIC,CAAJ,CAPiB,CAApB;AAQA,MAAIM,KAAK,GAAG,CAAZ;AACA,MAAMC,QAAQ,GAAGlB,MAAM,CAACU,CAAD,EAAIC,CAAJ,EAAOC,WAAP,CAAvB;AACAb,EAAAA,QAAQ,CAAC,UAAAO,KAAK,EAAI;AAChB,QAAIH,MAAM,KAAKC,QAAX,IAAuBa,KAAK,GAAGd,MAAnC,EAA2C;AACzCG,MAAAA,KAAK,CAACa,EAAN,CAASC,eAAT,CAAyBF,QAAzB;AACAZ,MAAAA,KAAK,CAACa,EAAN,CAASE,MAAT,CAAgBf,KAAK,CAACgB,KAAtB,EAA6BhB,KAAK,CAACiB,MAAnC;AACAjB,MAAAA,KAAK,CAACa,EAAN,CAASC,eAAT,CAAyB,IAAzB;AACAH,MAAAA,KAAK;AACN;AACF,GAPO,CAAR;AAQA,SAAOC,QAAQ,CAACJ,YAAhB;AACD;;AAED,SAASb,cAAT","sourcesContent":["import { DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\n\nfunction useDepthBuffer({\n  size = 256,\n  frames = Infinity\n} = {}) {\n  const dpr = useThree(state => state.viewport.dpr);\n  const {\n    width,\n    height\n  } = useThree(state => state.size);\n  const w = size || width * dpr;\n  const h = size || height * dpr;\n  const depthConfig = React.useMemo(() => {\n    const depthTexture = new DepthTexture(w, h);\n    depthTexture.format = DepthFormat;\n    depthTexture.type = UnsignedShortType;\n    return {\n      depthTexture\n    };\n  }, [w, h]);\n  let count = 0;\n  const depthFBO = useFBO(w, h, depthConfig);\n  useFrame(state => {\n    if (frames === Infinity || count < frames) {\n      state.gl.setRenderTarget(depthFBO);\n      state.gl.render(state.scene, state.camera);\n      state.gl.setRenderTarget(null);\n      count++;\n    }\n  });\n  return depthFBO.depthTexture;\n}\n\nexport { useDepthBuffer };\n"]},"metadata":{},"sourceType":"module"}