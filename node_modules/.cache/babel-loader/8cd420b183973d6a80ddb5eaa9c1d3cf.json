{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { getSuccessfulTransactionCount, parseForBadgesForTypes, parseResponseForItems } from '../components/TokensList/BadgeHelper';\nimport { useEthers } from '@usedapp/core';\nexport function useBadgeList(signerAddress, overrideChainId, tags) {\n  _s();\n\n  const {\n    account,\n    chainId: providerChainId\n  } = useEthers();\n  const [badges, setBadges] = useState();\n  const chainId = overrideChainId || providerChainId;\n  useEffect(() => {\n    getTransactionsFor(signerAddress).then(async response => {\n      if (response) {\n        const items = parseResponseForItems(response);\n\n        if (items) {\n          const successCount = getSuccessfulTransactionCount(items);\n          const badges = parseForBadgesForTypes([successCount]);\n          setBadges(badges);\n        } else {\n          // should do something with this case\n          // in theory there should always be the defalt badge\n          // if an account is connected\n          setBadges(undefined);\n        }\n      } else {\n        const errorMessage = 'Couldnt fetch transaction data';\n        return Promise.reject(new Error(errorMessage));\n      }\n    }).catch(err => {\n      console.log(err);\n      setBadges(undefined);\n    });\n  }, [account]);\n  return badges;\n}\n\n_s(useBadgeList, \"T+5dwzrdNVeW0wP7rX4IoBz6/xU=\", false, function () {\n  return [useEthers];\n});\n\nexport const getTransactionsFor = async signerAddress => {\n  if (!signerAddress || signerAddress === undefined) {\n    return null;\n  }\n\n  console.log('signer address : ', signerAddress);\n  const COVALENT_API_KEY = \"ckey_4aed01d0d6e248a7a4ab27acb8a\";\n  const COVALENT_MAINNET = {\n    url: \"https://api.covalenthq.com/v1/1/\"\n  };\n  const transactionsForAddress = `${COVALENT_MAINNET.url}address/${signerAddress}/transactions_v2/?key=${COVALENT_API_KEY}`; // Make a request for a user with a given ID\n\n  return axios.get(transactionsForAddress).then(function (response) {\n    // handle success\n    return response;\n  }).catch(function (error) {\n    // handle error\n    console.log(error);\n    return null;\n  });\n};","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/useBadgeList.ts"],"names":["axios","useEffect","useState","getSuccessfulTransactionCount","parseForBadgesForTypes","parseResponseForItems","useEthers","useBadgeList","signerAddress","overrideChainId","tags","account","chainId","providerChainId","badges","setBadges","getTransactionsFor","then","response","items","successCount","undefined","errorMessage","Promise","reject","Error","catch","err","console","log","COVALENT_API_KEY","COVALENT_MAINNET","url","transactionsForAddress","get","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAqC,OAArC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,6BAAT,EAAwCC,sBAAxC,EAAgEC,qBAAhE,QAA6F,sCAA7F;AACA,SAAkBC,SAAlB,QAAmC,eAAnC;AAOA,OAAO,SAASC,YAAT,CAAsBC,aAAtB,EAA4DC,eAA5D,EAAuFC,IAAvF,EAAwG;AAAA;;AAC7G,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAO,EAAEC;AAApB,MAAwCP,SAAS,EAAvD;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBb,QAAQ,EAApC;AACA,QAAMU,OAAO,GAAGH,eAAe,IAAII,eAAnC;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,kBAAkB,CAACR,aAAD,CAAlB,CACGS,IADH,CACQ,MAAOC,QAAP,IAAoB;AACxB,UAAIA,QAAJ,EAAc;AACV,cAAMC,KAAK,GAAGd,qBAAqB,CAACa,QAAD,CAAnC;;AACA,YAAGC,KAAH,EAAU;AACN,gBAAMC,YAAY,GAAGjB,6BAA6B,CAACgB,KAAD,CAAlD;AACA,gBAAML,MAAM,GAAGV,sBAAsB,CAAC,CAACgB,YAAD,CAAD,CAArC;AACAL,UAAAA,SAAS,CAACD,MAAD,CAAT;AACH,SAJD,MAIO;AACH;AACA;AACA;AACAC,UAAAA,SAAS,CAACM,SAAD,CAAT;AACH;AACJ,OAZD,MAYO;AACL,cAAMC,YAAY,GAAG,gCAArB;AACA,eAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAUH,YAAV,CAAf,CAAP;AACD;AACF,KAlBH,EAmBGI,KAnBH,CAmBUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAZ,MAAAA,SAAS,CAACM,SAAD,CAAT;AACD,KAtBH;AAuBD,GAxBQ,EAwBN,CAACV,OAAD,CAxBM,CAAT;AAyBA,SAAOG,MAAP;AACD;;GA/BeP,Y;UACgCD,S;;;AAiChD,OAAO,MAAMU,kBAAkB,GAAG,MAAOR,aAAP,IAA4E;AAC1G,MAAG,CAACA,aAAD,IAAkBA,aAAa,KAAKa,SAAvC,EAAiD;AAC7C,WAAO,IAAP;AACH;;AACDO,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCrB,aAAhC;AACA,QAAMsB,gBAAgB,GAAG,kCAAzB;AACA,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,GAAG,EAAE;AADkB,GAAzB;AAIA,QAAMC,sBAAsB,GAC3B,GAAEF,gBAAgB,CAACC,GAAI,WAAUxB,aAAc,yBAAwBsB,gBAAiB,EADzF,CAV0G,CAc1G;;AACA,SAAO9B,KAAK,CAACkC,GAAN,CAAUD,sBAAV,EACJhB,IADI,CACC,UAAUC,QAAV,EAAoB;AACxB;AACA,WAAOA,QAAP;AACD,GAJI,EAKJQ,KALI,CAKE,UAAUS,KAAV,EAAiB;AACtB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AAEA,WAAO,IAAP;AACD,GAVI,CAAP;AAWD,CA1BI","sourcesContent":["import axios, { AxiosResponse } from 'axios'\nimport { useEffect, useState } from 'react'\nimport { getSuccessfulTransactionCount, parseForBadgesForTypes, parseResponseForItems } from '../components/TokensList/BadgeHelper'\nimport { ChainId, useEthers } from '@usedapp/core'\n\ninterface Badge {\n    badgeName: string\n    value: number\n  }\n\nexport function useBadgeList(signerAddress: string|null|undefined, overrideChainId?: ChainId, tags?: string[]) {\n  const { account, chainId: providerChainId } = useEthers()\n  const [badges, setBadges] = useState<Badge[]>()\n  const chainId = overrideChainId || providerChainId\n\n  useEffect(() => {\n    getTransactionsFor(signerAddress)\n      .then(async (response) => {\n        if (response) {\n            const items = parseResponseForItems(response);\n            if(items) {\n                const successCount = getSuccessfulTransactionCount(items);\n                const badges = parseForBadgesForTypes([successCount]);\n                setBadges(badges);\n            } else {\n                // should do something with this case\n                // in theory there should always be the defalt badge\n                // if an account is connected\n                setBadges(undefined);\n            }\n        } else {\n          const errorMessage = 'Couldnt fetch transaction data';\n          return Promise.reject(new Error(errorMessage))\n        }\n      })\n      .catch((err) => {\n        console.log(err)\n        setBadges(undefined)\n      })\n  }, [account])\n  return badges\n}\n\n\nexport const getTransactionsFor = async (signerAddress: string|null|undefined): Promise<AxiosResponse|null>=> {\n    if(!signerAddress || signerAddress === undefined){\n        return null;\n    }\n    console.log('signer address : ',signerAddress)\n    const COVALENT_API_KEY = \"ckey_4aed01d0d6e248a7a4ab27acb8a\"\n    const COVALENT_MAINNET = {\n      url: \"https://api.covalenthq.com/v1/1/\",\n    }\n  \n    const transactionsForAddress = \n    `${COVALENT_MAINNET.url}address/${signerAddress}/transactions_v2/?key=${COVALENT_API_KEY}`\n  \n  \n    // Make a request for a user with a given ID\n    return axios.get(transactionsForAddress)\n      .then(function (response) {\n        // handle success\n        return response\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n  \n        return null;\n      });\n  }\n"]},"metadata":{},"sourceType":"module"}