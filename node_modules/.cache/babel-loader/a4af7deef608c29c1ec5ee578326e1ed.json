{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, LoaderUtils, FileLoader, FrontSide, RepeatWrapping, Color, MeshPhongMaterial, Vector2, DefaultLoadingManager, TextureLoader } from 'three';\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nvar MTLLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(MTLLoader, _Loader);\n\n  var _super = _createSuper(MTLLoader);\n\n  function MTLLoader(manager) {\n    _classCallCheck(this, MTLLoader);\n\n    return _super.call(this, manager);\n  }\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n\n\n  _createClass(MTLLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"setMaterialOptions\",\n    value: function setMaterialOptions(value) {\n      this.materialOptions = value;\n      return this;\n    }\n    /**\n     * Parses a MTL file.\n     *\n     * @param {String} text - Content of MTL file\n     * @return {MaterialCreator}\n     *\n     * @see setPath setResourcePath\n     *\n     * @note In order for relative texture references to resolve correctly\n     * you must call setResourcePath() explicitly prior to parse.\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(text, path) {\n      var lines = text.split('\\n');\n      var info = {};\n      var delimiter_pattern = /\\s+/;\n      var materialsInfo = {};\n\n      for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        line = line.trim();\n\n        if (line.length === 0 || line.charAt(0) === '#') {\n          // Blank line or comment ignore\n          continue;\n        }\n\n        var pos = line.indexOf(' ');\n        var key = pos >= 0 ? line.substring(0, pos) : line;\n        key = key.toLowerCase();\n        var value = pos >= 0 ? line.substring(pos + 1) : '';\n        value = value.trim();\n\n        if (key === 'newmtl') {\n          // New material\n          info = {\n            name: value\n          };\n          materialsInfo[value] = info;\n        } else {\n          if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n            var ss = value.split(delimiter_pattern, 3);\n            info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n          } else {\n            info[key] = value;\n          }\n        }\n      }\n\n      var materialCreator = new MaterialCreator(this.resourcePath || path, this.materialOptions);\n      materialCreator.setCrossOrigin(this.crossOrigin);\n      materialCreator.setManager(this.manager);\n      materialCreator.setMaterials(materialsInfo);\n      return materialCreator;\n    }\n  }]);\n\n  return MTLLoader;\n}(Loader);\n/**\n * Create a new MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\n\nvar MaterialCreator = /*#__PURE__*/function () {\n  function MaterialCreator() {\n    var baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, MaterialCreator);\n\n    this.baseUrl = baseUrl;\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n    this.crossOrigin = 'anonymous';\n    this.side = this.options.side !== undefined ? this.options.side : FrontSide;\n    this.wrap = this.options.wrap !== undefined ? this.options.wrap : RepeatWrapping;\n  }\n\n  _createClass(MaterialCreator, [{\n    key: \"setCrossOrigin\",\n    value: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n      return this;\n    }\n  }, {\n    key: \"setManager\",\n    value: function setManager(value) {\n      this.manager = value;\n    }\n  }, {\n    key: \"setMaterials\",\n    value: function setMaterials(materialsInfo) {\n      this.materialsInfo = this.convert(materialsInfo);\n      this.materials = {};\n      this.materialsArray = [];\n      this.nameLookup = {};\n    }\n  }, {\n    key: \"convert\",\n    value: function convert(materialsInfo) {\n      if (!this.options) return materialsInfo;\n      var converted = {};\n\n      for (var mn in materialsInfo) {\n        // Convert materials info into normalized form based on options\n        var mat = materialsInfo[mn];\n        var covmat = {};\n        converted[mn] = covmat;\n\n        for (var prop in mat) {\n          var save = true;\n          var value = mat[prop];\n          var lprop = prop.toLowerCase();\n\n          switch (lprop) {\n            case 'kd':\n            case 'ka':\n            case 'ks':\n              // Diffuse color (color under white light) using RGB values\n              if (this.options && this.options.normalizeRGB) {\n                value = [value[0] / 255, value[1] / 255, value[2] / 255];\n              }\n\n              if (this.options && this.options.ignoreZeroRGBs) {\n                if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                  // ignore\n                  save = false;\n                }\n              }\n\n              break;\n          }\n\n          if (save) {\n            covmat[lprop] = value;\n          }\n        }\n      }\n\n      return converted;\n    }\n  }, {\n    key: \"preload\",\n    value: function preload() {\n      for (var mn in this.materialsInfo) {\n        this.create(mn);\n      }\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(materialName) {\n      return this.nameLookup[materialName];\n    }\n  }, {\n    key: \"getAsArray\",\n    value: function getAsArray() {\n      var index = 0;\n\n      for (var mn in this.materialsInfo) {\n        this.materialsArray[index] = this.create(mn);\n        this.nameLookup[mn] = index;\n        index++;\n      }\n\n      return this.materialsArray;\n    }\n  }, {\n    key: \"create\",\n    value: function create(materialName) {\n      if (this.materials[materialName] === undefined) {\n        this.createMaterial_(materialName);\n      }\n\n      return this.materials[materialName];\n    }\n  }, {\n    key: \"createMaterial_\",\n    value: function createMaterial_(materialName) {\n      // Create material\n      var scope = this;\n      var mat = this.materialsInfo[materialName];\n      var params = {\n        name: materialName,\n        side: this.side\n      };\n\n      function resolveURL(baseUrl, url) {\n        if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n        if (/^https?:\\/\\//i.test(url)) return url;\n        return baseUrl + url;\n      }\n\n      function setMapForType(mapType, value) {\n        if (params[mapType]) return; // Keep the first encountered texture\n\n        var texParams = scope.getTextureParams(value, params);\n        var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n        map.repeat.copy(texParams.scale);\n        map.offset.copy(texParams.offset);\n        map.wrapS = scope.wrap;\n        map.wrapT = scope.wrap;\n        params[mapType] = map;\n      }\n\n      for (var prop in mat) {\n        var value = mat[prop];\n        var n = void 0;\n        if (value === '') continue;\n\n        switch (prop.toLowerCase()) {\n          // Ns is material specular exponent\n          case 'kd':\n            // Diffuse color (color under white light) using RGB values\n            params.color = new Color().fromArray(value);\n            break;\n\n          case 'ks':\n            // Specular color (color when light is reflected from shiny surface) using RGB values\n            params.specular = new Color().fromArray(value);\n            break;\n\n          case 'ke':\n            // Emissive using RGB values\n            params.emissive = new Color().fromArray(value);\n            break;\n\n          case 'map_kd':\n            // Diffuse texture map\n            setMapForType('map', value);\n            break;\n\n          case 'map_ks':\n            // Specular map\n            setMapForType('specularMap', value);\n            break;\n\n          case 'map_ke':\n            // Emissive map\n            setMapForType('emissiveMap', value);\n            break;\n\n          case 'norm':\n            setMapForType('normalMap', value);\n            break;\n\n          case 'map_bump':\n          case 'bump':\n            // Bump texture map\n            setMapForType('bumpMap', value);\n            break;\n\n          case 'map_d':\n            // Alpha map\n            setMapForType('alphaMap', value);\n            params.transparent = true;\n            break;\n\n          case 'ns':\n            // The specular exponent (defines the focus of the specular highlight)\n            // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n            params.shininess = parseFloat(value);\n            break;\n\n          case 'd':\n            n = parseFloat(value);\n\n            if (n < 1) {\n              params.opacity = n;\n              params.transparent = true;\n            }\n\n            break;\n\n          case 'tr':\n            n = parseFloat(value);\n            if (this.options && this.options.invertTrProperty) n = 1 - n;\n\n            if (n > 0) {\n              params.opacity = 1 - n;\n              params.transparent = true;\n            }\n\n            break;\n        }\n      }\n\n      this.materials[materialName] = new MeshPhongMaterial(params);\n      return this.materials[materialName];\n    }\n  }, {\n    key: \"getTextureParams\",\n    value: function getTextureParams(value, matParams) {\n      var texParams = {\n        scale: new Vector2(1, 1),\n        offset: new Vector2(0, 0)\n      };\n      var items = value.split(/\\s+/);\n      var pos;\n      pos = items.indexOf('-bm');\n\n      if (pos >= 0) {\n        matParams.bumpScale = parseFloat(items[pos + 1]);\n        items.splice(pos, 2);\n      }\n\n      pos = items.indexOf('-s');\n\n      if (pos >= 0) {\n        texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n        items.splice(pos, 4); // we expect 3 parameters here!\n      }\n\n      pos = items.indexOf('-o');\n\n      if (pos >= 0) {\n        texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n        items.splice(pos, 4); // we expect 3 parameters here!\n      }\n\n      texParams.url = items.join(' ').trim();\n      return texParams;\n    }\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(url, mapping, onLoad, onProgress, onError) {\n      var manager = this.manager !== undefined ? this.manager : DefaultLoadingManager;\n      var loader = manager.getHandler(url);\n\n      if (loader === null) {\n        loader = new TextureLoader(manager);\n      }\n\n      if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n      var texture = loader.load(url, onLoad, onProgress, onError);\n      if (mapping !== undefined) texture.mapping = mapping;\n      return texture;\n    }\n  }]);\n\n  return MaterialCreator;\n}();\n\nexport { MTLLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/MTLLoader.js"],"names":["Loader","LoaderUtils","FileLoader","FrontSide","RepeatWrapping","Color","MeshPhongMaterial","Vector2","DefaultLoadingManager","TextureLoader","MTLLoader","manager","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","value","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","undefined","wrap","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","create","materialName","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","fromArray","specular","emissive","transparent","shininess","opacity","invertTrProperty","matParams","items","bumpScale","splice","set","join","mapping","getHandler","texture"],"mappings":";;;;AAAA,SAASA,MAAT,EAAiBC,WAAjB,EAA8BC,UAA9B,EAA0CC,SAA1C,EAAqDC,cAArD,EAAqEC,KAArE,EAA4EC,iBAA5E,EAA+FC,OAA/F,EAAwGC,qBAAxG,EAA+HC,aAA/H,QAAoJ,OAApJ;AAEA;AACA;AACA;;IAEMC,S;;;;;AACJ,qBAAYC,OAAZ,EAAqB;AAAA;;AAAA,6BACbA,OADa;AAEpB;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WAGE,cAAKC,GAAL,EAAUC,MAAV,EAAkBC,UAAlB,EAA8BC,OAA9B,EAAuC;AACrC,UAAMC,KAAK,GAAG,IAAd;AACA,UAAMC,IAAI,GAAG,KAAKA,IAAL,KAAc,EAAd,GAAmBhB,WAAW,CAACiB,cAAZ,CAA2BN,GAA3B,CAAnB,GAAqD,KAAKK,IAAvE;AACA,UAAME,MAAM,GAAG,IAAIjB,UAAJ,CAAe,KAAKS,OAApB,CAAf;AACAQ,MAAAA,MAAM,CAACC,OAAP,CAAe,KAAKH,IAApB;AACAE,MAAAA,MAAM,CAACE,gBAAP,CAAwB,KAAKC,aAA7B;AACAH,MAAAA,MAAM,CAACI,kBAAP,CAA0B,KAAKC,eAA/B;AACAL,MAAAA,MAAM,CAACM,IAAP,CAAYb,GAAZ,EAAiB,UAAUc,IAAV,EAAgB;AAC/B,YAAI;AACFb,UAAAA,MAAM,CAACG,KAAK,CAACW,KAAN,CAAYD,IAAZ,EAAkBT,IAAlB,CAAD,CAAN;AACD,SAFD,CAEE,OAAOW,CAAP,EAAU;AACV,cAAIb,OAAJ,EAAa;AACXA,YAAAA,OAAO,CAACa,CAAD,CAAP;AACD,WAFD,MAEO;AACLC,YAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;;AAEDZ,UAAAA,KAAK,CAACL,OAAN,CAAcoB,SAAd,CAAwBnB,GAAxB;AACD;AACF,OAZD,EAYGE,UAZH,EAYeC,OAZf;AAaD;;;WAED,4BAAmBiB,KAAnB,EAA0B;AACxB,WAAKC,eAAL,GAAuBD,KAAvB;AACA,aAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,eAAMN,IAAN,EAAYT,IAAZ,EAAkB;AAChB,UAAMiB,KAAK,GAAGR,IAAI,CAACS,KAAL,CAAW,IAAX,CAAd;AACA,UAAIC,IAAI,GAAG,EAAX;AACA,UAAMC,iBAAiB,GAAG,KAA1B;AACA,UAAMC,aAAa,GAAG,EAAtB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAIE,IAAI,GAAGP,KAAK,CAACK,CAAD,CAAhB;AACAE,QAAAA,IAAI,GAAGA,IAAI,CAACC,IAAL,EAAP;;AAEA,YAAID,IAAI,CAACD,MAAL,KAAgB,CAAhB,IAAqBC,IAAI,CAACE,MAAL,CAAY,CAAZ,MAAmB,GAA5C,EAAiD;AAC/C;AACA;AACD;;AAED,YAAMC,GAAG,GAAGH,IAAI,CAACI,OAAL,CAAa,GAAb,CAAZ;AACA,YAAIC,GAAG,GAAGF,GAAG,IAAI,CAAP,GAAWH,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBH,GAAlB,CAAX,GAAoCH,IAA9C;AACAK,QAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;AACA,YAAIhB,KAAK,GAAGY,GAAG,IAAI,CAAP,GAAWH,IAAI,CAACM,SAAL,CAAeH,GAAG,GAAG,CAArB,CAAX,GAAqC,EAAjD;AACAZ,QAAAA,KAAK,GAAGA,KAAK,CAACU,IAAN,EAAR;;AAEA,YAAII,GAAG,KAAK,QAAZ,EAAsB;AACpB;AACAV,UAAAA,IAAI,GAAG;AACLa,YAAAA,IAAI,EAAEjB;AADD,WAAP;AAGAM,UAAAA,aAAa,CAACN,KAAD,CAAb,GAAuBI,IAAvB;AACD,SAND,MAMO;AACL,cAAIU,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,IAAxB,IAAgCA,GAAG,KAAK,IAAxC,IAAgDA,GAAG,KAAK,IAA5D,EAAkE;AAChE,gBAAMI,EAAE,GAAGlB,KAAK,CAACG,KAAN,CAAYE,iBAAZ,EAA+B,CAA/B,CAAX;AACAD,YAAAA,IAAI,CAACU,GAAD,CAAJ,GAAY,CAACK,UAAU,CAACD,EAAE,CAAC,CAAD,CAAH,CAAX,EAAoBC,UAAU,CAACD,EAAE,CAAC,CAAD,CAAH,CAA9B,EAAuCC,UAAU,CAACD,EAAE,CAAC,CAAD,CAAH,CAAjD,CAAZ;AACD,WAHD,MAGO;AACLd,YAAAA,IAAI,CAACU,GAAD,CAAJ,GAAYd,KAAZ;AACD;AACF;AACF;;AAED,UAAMoB,eAAe,GAAG,IAAIC,eAAJ,CAAoB,KAAKC,YAAL,IAAqBrC,IAAzC,EAA+C,KAAKgB,eAApD,CAAxB;AACAmB,MAAAA,eAAe,CAACG,cAAhB,CAA+B,KAAKC,WAApC;AACAJ,MAAAA,eAAe,CAACK,UAAhB,CAA2B,KAAK9C,OAAhC;AACAyC,MAAAA,eAAe,CAACM,YAAhB,CAA6BpB,aAA7B;AACA,aAAOc,eAAP;AACD;;;;EApGqBpD,M;AAuGxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IAGMqD,e;AACJ,6BAAwC;AAAA,QAA5BM,OAA4B,uEAAlB,EAAkB;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACtC,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKtB,aAAL,GAAqB,EAArB;AACA,SAAKuB,SAAL,GAAiB,EAAjB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKP,WAAL,GAAmB,WAAnB;AACA,SAAKQ,IAAL,GAAY,KAAKJ,OAAL,CAAaI,IAAb,KAAsBC,SAAtB,GAAkC,KAAKL,OAAL,CAAaI,IAA/C,GAAsD7D,SAAlE;AACA,SAAK+D,IAAL,GAAY,KAAKN,OAAL,CAAaM,IAAb,KAAsBD,SAAtB,GAAkC,KAAKL,OAAL,CAAaM,IAA/C,GAAsD9D,cAAlE;AACD;;;;WAED,wBAAe4B,KAAf,EAAsB;AACpB,WAAKwB,WAAL,GAAmBxB,KAAnB;AACA,aAAO,IAAP;AACD;;;WAED,oBAAWA,KAAX,EAAkB;AAChB,WAAKrB,OAAL,GAAeqB,KAAf;AACD;;;WAED,sBAAaM,aAAb,EAA4B;AAC1B,WAAKA,aAAL,GAAqB,KAAK6B,OAAL,CAAa7B,aAAb,CAArB;AACA,WAAKuB,SAAL,GAAiB,EAAjB;AACA,WAAKC,cAAL,GAAsB,EAAtB;AACA,WAAKC,UAAL,GAAkB,EAAlB;AACD;;;WAED,iBAAQzB,aAAR,EAAuB;AACrB,UAAI,CAAC,KAAKsB,OAAV,EAAmB,OAAOtB,aAAP;AACnB,UAAM8B,SAAS,GAAG,EAAlB;;AAEA,WAAK,IAAMC,EAAX,IAAiB/B,aAAjB,EAAgC;AAC9B;AACA,YAAMgC,GAAG,GAAGhC,aAAa,CAAC+B,EAAD,CAAzB;AACA,YAAME,MAAM,GAAG,EAAf;AACAH,QAAAA,SAAS,CAACC,EAAD,CAAT,GAAgBE,MAAhB;;AAEA,aAAK,IAAMC,IAAX,IAAmBF,GAAnB,EAAwB;AACtB,cAAIG,IAAI,GAAG,IAAX;AACA,cAAIzC,KAAK,GAAGsC,GAAG,CAACE,IAAD,CAAf;AACA,cAAME,KAAK,GAAGF,IAAI,CAACxB,WAAL,EAAd;;AAEA,kBAAQ0B,KAAR;AACE,iBAAK,IAAL;AACA,iBAAK,IAAL;AACA,iBAAK,IAAL;AACE;AACA,kBAAI,KAAKd,OAAL,IAAgB,KAAKA,OAAL,CAAae,YAAjC,EAA+C;AAC7C3C,gBAAAA,KAAK,GAAG,CAACA,KAAK,CAAC,CAAD,CAAL,GAAW,GAAZ,EAAiBA,KAAK,CAAC,CAAD,CAAL,GAAW,GAA5B,EAAiCA,KAAK,CAAC,CAAD,CAAL,GAAW,GAA5C,CAAR;AACD;;AAED,kBAAI,KAAK4B,OAAL,IAAgB,KAAKA,OAAL,CAAagB,cAAjC,EAAiD;AAC/C,oBAAI5C,KAAK,CAAC,CAAD,CAAL,KAAa,CAAb,IAAkBA,KAAK,CAAC,CAAD,CAAL,KAAa,CAA/B,IAAoCA,KAAK,CAAC,CAAD,CAAL,KAAa,CAArD,EAAwD;AACtD;AACAyC,kBAAAA,IAAI,GAAG,KAAP;AACD;AACF;;AAED;AAhBJ;;AAmBA,cAAIA,IAAJ,EAAU;AACRF,YAAAA,MAAM,CAACG,KAAD,CAAN,GAAgB1C,KAAhB;AACD;AACF;AACF;;AAED,aAAOoC,SAAP;AACD;;;WAED,mBAAU;AACR,WAAK,IAAMC,EAAX,IAAiB,KAAK/B,aAAtB,EAAqC;AACnC,aAAKuC,MAAL,CAAYR,EAAZ;AACD;AACF;;;WAED,kBAASS,YAAT,EAAuB;AACrB,aAAO,KAAKf,UAAL,CAAgBe,YAAhB,CAAP;AACD;;;WAED,sBAAa;AACX,UAAIC,KAAK,GAAG,CAAZ;;AAEA,WAAK,IAAMV,EAAX,IAAiB,KAAK/B,aAAtB,EAAqC;AACnC,aAAKwB,cAAL,CAAoBiB,KAApB,IAA6B,KAAKF,MAAL,CAAYR,EAAZ,CAA7B;AACA,aAAKN,UAAL,CAAgBM,EAAhB,IAAsBU,KAAtB;AACAA,QAAAA,KAAK;AACN;;AAED,aAAO,KAAKjB,cAAZ;AACD;;;WAED,gBAAOgB,YAAP,EAAqB;AACnB,UAAI,KAAKjB,SAAL,CAAeiB,YAAf,MAAiCb,SAArC,EAAgD;AAC9C,aAAKe,eAAL,CAAqBF,YAArB;AACD;;AAED,aAAO,KAAKjB,SAAL,CAAeiB,YAAf,CAAP;AACD;;;WAED,yBAAgBA,YAAhB,EAA8B;AAC5B;AACA,UAAM9D,KAAK,GAAG,IAAd;AACA,UAAMsD,GAAG,GAAG,KAAKhC,aAAL,CAAmBwC,YAAnB,CAAZ;AACA,UAAMG,MAAM,GAAG;AACbhC,QAAAA,IAAI,EAAE6B,YADO;AAEbd,QAAAA,IAAI,EAAE,KAAKA;AAFE,OAAf;;AAKA,eAASkB,UAAT,CAAoBvB,OAApB,EAA6B/C,GAA7B,EAAkC;AAChC,YAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,EAAvC,EAA2C,OAAO,EAAP,CADX,CACsB;;AAEtD,YAAI,gBAAgBuE,IAAhB,CAAqBvE,GAArB,CAAJ,EAA+B,OAAOA,GAAP;AAC/B,eAAO+C,OAAO,GAAG/C,GAAjB;AACD;;AAED,eAASwE,aAAT,CAAuBC,OAAvB,EAAgCrD,KAAhC,EAAuC;AACrC,YAAIiD,MAAM,CAACI,OAAD,CAAV,EAAqB,OADgB,CACR;;AAE7B,YAAMC,SAAS,GAAGtE,KAAK,CAACuE,gBAAN,CAAuBvD,KAAvB,EAA8BiD,MAA9B,CAAlB;AACA,YAAMO,GAAG,GAAGxE,KAAK,CAACyE,WAAN,CAAkBP,UAAU,CAAClE,KAAK,CAAC2C,OAAP,EAAgB2B,SAAS,CAAC1E,GAA1B,CAA5B,CAAZ;AACA4E,QAAAA,GAAG,CAACE,MAAJ,CAAWC,IAAX,CAAgBL,SAAS,CAACM,KAA1B;AACAJ,QAAAA,GAAG,CAACK,MAAJ,CAAWF,IAAX,CAAgBL,SAAS,CAACO,MAA1B;AACAL,QAAAA,GAAG,CAACM,KAAJ,GAAY9E,KAAK,CAACkD,IAAlB;AACAsB,QAAAA,GAAG,CAACO,KAAJ,GAAY/E,KAAK,CAACkD,IAAlB;AACAe,QAAAA,MAAM,CAACI,OAAD,CAAN,GAAkBG,GAAlB;AACD;;AAED,WAAK,IAAMhB,IAAX,IAAmBF,GAAnB,EAAwB;AACtB,YAAMtC,KAAK,GAAGsC,GAAG,CAACE,IAAD,CAAjB;AACA,YAAIwB,CAAC,SAAL;AACA,YAAIhE,KAAK,KAAK,EAAd,EAAkB;;AAElB,gBAAQwC,IAAI,CAACxB,WAAL,EAAR;AACE;AACA,eAAK,IAAL;AACE;AACAiC,YAAAA,MAAM,CAACgB,KAAP,GAAe,IAAI5F,KAAJ,GAAY6F,SAAZ,CAAsBlE,KAAtB,CAAf;AACA;;AAEF,eAAK,IAAL;AACE;AACAiD,YAAAA,MAAM,CAACkB,QAAP,GAAkB,IAAI9F,KAAJ,GAAY6F,SAAZ,CAAsBlE,KAAtB,CAAlB;AACA;;AAEF,eAAK,IAAL;AACE;AACAiD,YAAAA,MAAM,CAACmB,QAAP,GAAkB,IAAI/F,KAAJ,GAAY6F,SAAZ,CAAsBlE,KAAtB,CAAlB;AACA;;AAEF,eAAK,QAAL;AACE;AACAoD,YAAAA,aAAa,CAAC,KAAD,EAAQpD,KAAR,CAAb;AACA;;AAEF,eAAK,QAAL;AACE;AACAoD,YAAAA,aAAa,CAAC,aAAD,EAAgBpD,KAAhB,CAAb;AACA;;AAEF,eAAK,QAAL;AACE;AACAoD,YAAAA,aAAa,CAAC,aAAD,EAAgBpD,KAAhB,CAAb;AACA;;AAEF,eAAK,MAAL;AACEoD,YAAAA,aAAa,CAAC,WAAD,EAAcpD,KAAd,CAAb;AACA;;AAEF,eAAK,UAAL;AACA,eAAK,MAAL;AACE;AACAoD,YAAAA,aAAa,CAAC,SAAD,EAAYpD,KAAZ,CAAb;AACA;;AAEF,eAAK,OAAL;AACE;AACAoD,YAAAA,aAAa,CAAC,UAAD,EAAapD,KAAb,CAAb;AACAiD,YAAAA,MAAM,CAACoB,WAAP,GAAqB,IAArB;AACA;;AAEF,eAAK,IAAL;AACE;AACA;AACApB,YAAAA,MAAM,CAACqB,SAAP,GAAmBnD,UAAU,CAACnB,KAAD,CAA7B;AACA;;AAEF,eAAK,GAAL;AACEgE,YAAAA,CAAC,GAAG7C,UAAU,CAACnB,KAAD,CAAd;;AAEA,gBAAIgE,CAAC,GAAG,CAAR,EAAW;AACTf,cAAAA,MAAM,CAACsB,OAAP,GAAiBP,CAAjB;AACAf,cAAAA,MAAM,CAACoB,WAAP,GAAqB,IAArB;AACD;;AAED;;AAEF,eAAK,IAAL;AACEL,YAAAA,CAAC,GAAG7C,UAAU,CAACnB,KAAD,CAAd;AACA,gBAAI,KAAK4B,OAAL,IAAgB,KAAKA,OAAL,CAAa4C,gBAAjC,EAAmDR,CAAC,GAAG,IAAIA,CAAR;;AAEnD,gBAAIA,CAAC,GAAG,CAAR,EAAW;AACTf,cAAAA,MAAM,CAACsB,OAAP,GAAiB,IAAIP,CAArB;AACAf,cAAAA,MAAM,CAACoB,WAAP,GAAqB,IAArB;AACD;;AAED;AAzEJ;AA2ED;;AAED,WAAKxC,SAAL,CAAeiB,YAAf,IAA+B,IAAIxE,iBAAJ,CAAsB2E,MAAtB,CAA/B;AACA,aAAO,KAAKpB,SAAL,CAAeiB,YAAf,CAAP;AACD;;;WAED,0BAAiB9C,KAAjB,EAAwByE,SAAxB,EAAmC;AACjC,UAAMnB,SAAS,GAAG;AAChBM,QAAAA,KAAK,EAAE,IAAIrF,OAAJ,CAAY,CAAZ,EAAe,CAAf,CADS;AAEhBsF,QAAAA,MAAM,EAAE,IAAItF,OAAJ,CAAY,CAAZ,EAAe,CAAf;AAFQ,OAAlB;AAIA,UAAMmG,KAAK,GAAG1E,KAAK,CAACG,KAAN,CAAY,KAAZ,CAAd;AACA,UAAIS,GAAJ;AACAA,MAAAA,GAAG,GAAG8D,KAAK,CAAC7D,OAAN,CAAc,KAAd,CAAN;;AAEA,UAAID,GAAG,IAAI,CAAX,EAAc;AACZ6D,QAAAA,SAAS,CAACE,SAAV,GAAsBxD,UAAU,CAACuD,KAAK,CAAC9D,GAAG,GAAG,CAAP,CAAN,CAAhC;AACA8D,QAAAA,KAAK,CAACE,MAAN,CAAahE,GAAb,EAAkB,CAAlB;AACD;;AAEDA,MAAAA,GAAG,GAAG8D,KAAK,CAAC7D,OAAN,CAAc,IAAd,CAAN;;AAEA,UAAID,GAAG,IAAI,CAAX,EAAc;AACZ0C,QAAAA,SAAS,CAACM,KAAV,CAAgBiB,GAAhB,CAAoB1D,UAAU,CAACuD,KAAK,CAAC9D,GAAG,GAAG,CAAP,CAAN,CAA9B,EAAgDO,UAAU,CAACuD,KAAK,CAAC9D,GAAG,GAAG,CAAP,CAAN,CAA1D;AACA8D,QAAAA,KAAK,CAACE,MAAN,CAAahE,GAAb,EAAkB,CAAlB,EAFY,CAEU;AACvB;;AAEDA,MAAAA,GAAG,GAAG8D,KAAK,CAAC7D,OAAN,CAAc,IAAd,CAAN;;AAEA,UAAID,GAAG,IAAI,CAAX,EAAc;AACZ0C,QAAAA,SAAS,CAACO,MAAV,CAAiBgB,GAAjB,CAAqB1D,UAAU,CAACuD,KAAK,CAAC9D,GAAG,GAAG,CAAP,CAAN,CAA/B,EAAiDO,UAAU,CAACuD,KAAK,CAAC9D,GAAG,GAAG,CAAP,CAAN,CAA3D;AACA8D,QAAAA,KAAK,CAACE,MAAN,CAAahE,GAAb,EAAkB,CAAlB,EAFY,CAEU;AACvB;;AAED0C,MAAAA,SAAS,CAAC1E,GAAV,GAAgB8F,KAAK,CAACI,IAAN,CAAW,GAAX,EAAgBpE,IAAhB,EAAhB;AACA,aAAO4C,SAAP;AACD;;;WAED,qBAAY1E,GAAZ,EAAiBmG,OAAjB,EAA0BlG,MAA1B,EAAkCC,UAAlC,EAA8CC,OAA9C,EAAuD;AACrD,UAAMJ,OAAO,GAAG,KAAKA,OAAL,KAAiBsD,SAAjB,GAA6B,KAAKtD,OAAlC,GAA4CH,qBAA5D;AACA,UAAIW,MAAM,GAAGR,OAAO,CAACqG,UAAR,CAAmBpG,GAAnB,CAAb;;AAEA,UAAIO,MAAM,KAAK,IAAf,EAAqB;AACnBA,QAAAA,MAAM,GAAG,IAAIV,aAAJ,CAAkBE,OAAlB,CAAT;AACD;;AAED,UAAIQ,MAAM,CAACoC,cAAX,EAA2BpC,MAAM,CAACoC,cAAP,CAAsB,KAAKC,WAA3B;AAC3B,UAAMyD,OAAO,GAAG9F,MAAM,CAACM,IAAP,CAAYb,GAAZ,EAAiBC,MAAjB,EAAyBC,UAAzB,EAAqCC,OAArC,CAAhB;AACA,UAAIgG,OAAO,KAAK9C,SAAhB,EAA2BgD,OAAO,CAACF,OAAR,GAAkBA,OAAlB;AAC3B,aAAOE,OAAP;AACD;;;;;;AAIH,SAASvG,SAAT","sourcesContent":["import { Loader, LoaderUtils, FileLoader, FrontSide, RepeatWrapping, Color, MeshPhongMaterial, Vector2, DefaultLoadingManager, TextureLoader } from 'three';\n\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nclass MTLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setMaterialOptions(value) {\n    this.materialOptions = value;\n    return this;\n  }\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {MaterialCreator}\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to parse.\n   */\n\n\n  parse(text, path) {\n    const lines = text.split('\\n');\n    let info = {};\n    const delimiter_pattern = /\\s+/;\n    const materialsInfo = {};\n\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n      line = line.trim();\n\n      if (line.length === 0 || line.charAt(0) === '#') {\n        // Blank line or comment ignore\n        continue;\n      }\n\n      const pos = line.indexOf(' ');\n      let key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n      let value = pos >= 0 ? line.substring(pos + 1) : '';\n      value = value.trim();\n\n      if (key === 'newmtl') {\n        // New material\n        info = {\n          name: value\n        };\n        materialsInfo[value] = info;\n      } else {\n        if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n          const ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n\n    const materialCreator = new MaterialCreator(this.resourcePath || path, this.materialOptions);\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  }\n\n}\n/**\n * Create a new MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\n\nclass MaterialCreator {\n  constructor(baseUrl = '', options = {}) {\n    this.baseUrl = baseUrl;\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n    this.crossOrigin = 'anonymous';\n    this.side = this.options.side !== undefined ? this.options.side : FrontSide;\n    this.wrap = this.options.wrap !== undefined ? this.options.wrap : RepeatWrapping;\n  }\n\n  setCrossOrigin(value) {\n    this.crossOrigin = value;\n    return this;\n  }\n\n  setManager(value) {\n    this.manager = value;\n  }\n\n  setMaterials(materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  }\n\n  convert(materialsInfo) {\n    if (!this.options) return materialsInfo;\n    const converted = {};\n\n    for (const mn in materialsInfo) {\n      // Convert materials info into normalized form based on options\n      const mat = materialsInfo[mn];\n      const covmat = {};\n      converted[mn] = covmat;\n\n      for (const prop in mat) {\n        let save = true;\n        let value = mat[prop];\n        const lprop = prop.toLowerCase();\n\n        switch (lprop) {\n          case 'kd':\n          case 'ka':\n          case 'ks':\n            // Diffuse color (color under white light) using RGB values\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                // ignore\n                save = false;\n              }\n            }\n\n            break;\n        }\n\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n\n    return converted;\n  }\n\n  preload() {\n    for (const mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  }\n\n  getIndex(materialName) {\n    return this.nameLookup[materialName];\n  }\n\n  getAsArray() {\n    let index = 0;\n\n    for (const mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n\n    return this.materialsArray;\n  }\n\n  create(materialName) {\n    if (this.materials[materialName] === undefined) {\n      this.createMaterial_(materialName);\n    }\n\n    return this.materials[materialName];\n  }\n\n  createMaterial_(materialName) {\n    // Create material\n    const scope = this;\n    const mat = this.materialsInfo[materialName];\n    const params = {\n      name: materialName,\n      side: this.side\n    };\n\n    function resolveURL(baseUrl, url) {\n      if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n      if (/^https?:\\/\\//i.test(url)) return url;\n      return baseUrl + url;\n    }\n\n    function setMapForType(mapType, value) {\n      if (params[mapType]) return; // Keep the first encountered texture\n\n      const texParams = scope.getTextureParams(value, params);\n      const map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n      params[mapType] = map;\n    }\n\n    for (const prop in mat) {\n      const value = mat[prop];\n      let n;\n      if (value === '') continue;\n\n      switch (prop.toLowerCase()) {\n        // Ns is material specular exponent\n        case 'kd':\n          // Diffuse color (color under white light) using RGB values\n          params.color = new Color().fromArray(value);\n          break;\n\n        case 'ks':\n          // Specular color (color when light is reflected from shiny surface) using RGB values\n          params.specular = new Color().fromArray(value);\n          break;\n\n        case 'ke':\n          // Emissive using RGB values\n          params.emissive = new Color().fromArray(value);\n          break;\n\n        case 'map_kd':\n          // Diffuse texture map\n          setMapForType('map', value);\n          break;\n\n        case 'map_ks':\n          // Specular map\n          setMapForType('specularMap', value);\n          break;\n\n        case 'map_ke':\n          // Emissive map\n          setMapForType('emissiveMap', value);\n          break;\n\n        case 'norm':\n          setMapForType('normalMap', value);\n          break;\n\n        case 'map_bump':\n        case 'bump':\n          // Bump texture map\n          setMapForType('bumpMap', value);\n          break;\n\n        case 'map_d':\n          // Alpha map\n          setMapForType('alphaMap', value);\n          params.transparent = true;\n          break;\n\n        case 'ns':\n          // The specular exponent (defines the focus of the specular highlight)\n          // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n          params.shininess = parseFloat(value);\n          break;\n\n        case 'd':\n          n = parseFloat(value);\n\n          if (n < 1) {\n            params.opacity = n;\n            params.transparent = true;\n          }\n\n          break;\n\n        case 'tr':\n          n = parseFloat(value);\n          if (this.options && this.options.invertTrProperty) n = 1 - n;\n\n          if (n > 0) {\n            params.opacity = 1 - n;\n            params.transparent = true;\n          }\n\n          break;\n      }\n    }\n\n    this.materials[materialName] = new MeshPhongMaterial(params);\n    return this.materials[materialName];\n  }\n\n  getTextureParams(value, matParams) {\n    const texParams = {\n      scale: new Vector2(1, 1),\n      offset: new Vector2(0, 0)\n    };\n    const items = value.split(/\\s+/);\n    let pos;\n    pos = items.indexOf('-bm');\n\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n\n    pos = items.indexOf('-s');\n\n    if (pos >= 0) {\n      texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    pos = items.indexOf('-o');\n\n    if (pos >= 0) {\n      texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    texParams.url = items.join(' ').trim();\n    return texParams;\n  }\n\n  loadTexture(url, mapping, onLoad, onProgress, onError) {\n    const manager = this.manager !== undefined ? this.manager : DefaultLoadingManager;\n    let loader = manager.getHandler(url);\n\n    if (loader === null) {\n      loader = new TextureLoader(manager);\n    }\n\n    if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n    const texture = loader.load(url, onLoad, onProgress, onError);\n    if (mapping !== undefined) texture.mapping = mapping;\n    return texture;\n  }\n\n}\n\nexport { MTLLoader };\n"]},"metadata":{},"sourceType":"module"}