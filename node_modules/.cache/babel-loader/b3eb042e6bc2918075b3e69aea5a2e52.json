{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst isOrthographic = def => def && def.isOrthographicCamera;\n\nconst context = /*#__PURE__*/React.createContext(null);\n\nfunction Bounds(_ref) {\n  let {\n    children,\n    damping = 6,\n    fit,\n    clip,\n    margin = 1.2,\n    eps = 0.01\n  } = _ref;\n  const ref = React.useRef(null);\n  const camera = useThree(state => state.camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const controls = useThree(state => state.controls);\n  const invalidate = useThree(state => state.invalidate);\n\n  function equals(a, b) {\n    return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\n  }\n\n  function damp(v, t, lambda, delta) {\n    v.x = THREE.MathUtils.damp(v.x, t.x, lambda, delta);\n    v.y = THREE.MathUtils.damp(v.y, t.y, lambda, delta);\n    v.z = THREE.MathUtils.damp(v.z, t.z, lambda, delta);\n  }\n\n  const [current] = React.useState(() => ({\n    animating: false,\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [goal] = React.useState(() => ({\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const api = React.useMemo(() => {\n    const box = new THREE.Box3();\n\n    function getSize() {\n      const size = box.getSize(new THREE.Vector3());\n      const center = box.getCenter(new THREE.Vector3());\n      const maxSize = Math.max(size.x, size.y, size.z);\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        size,\n        center,\n        distance\n      };\n    }\n\n    return {\n      getSize,\n\n      refresh(object) {\n        box.setFromObject(object || ref.current);\n\n        if (box.isEmpty()) {\n          const max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n\n        return this;\n      },\n\n      clip() {\n        const {\n          distance\n        } = getSize();\n        if (controls) controls.maxDistance = distance * 10;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) controls.update();\n        return this;\n      },\n\n      fit() {\n        current.camera.copy(camera.position);\n        if (controls) current.focus.copy(controls.target);\n        const {\n          center,\n          distance\n        } = getSize();\n        const direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);\n        goal.camera.copy(center).sub(direction);\n        goal.focus.copy(center);\n\n        if (isOrthographic(camera)) {\n          current.zoom = camera.zoom;\n          let maxHeight = 0,\n              maxWidth = 0;\n          const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)]; // Transform the center and each corner to camera space\n\n          center.applyMatrix4(camera.matrixWorldInverse);\n\n          for (const v of vertices) {\n            v.applyMatrix4(camera.matrixWorldInverse);\n            maxHeight = Math.max(maxHeight, Math.abs(v.y - center.y));\n            maxWidth = Math.max(maxWidth, Math.abs(v.x - center.x));\n          }\n\n          maxHeight *= 2;\n          maxWidth *= 2;\n          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n          const zoomForWidth = (camera.right - camera.left) / maxWidth;\n          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n\n          if (!damping) {\n            camera.zoom = goal.zoom;\n            camera.updateProjectionMatrix();\n          }\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.copy(goal.camera);\n          camera.lookAt(goal.focus);\n\n          if (controls) {\n            controls.target.copy(goal.focus);\n            controls.update();\n          }\n\n          invalidate();\n        }\n\n        return this;\n      }\n\n    };\n  }, [camera, controls, margin, damping, invalidate]);\n  React.useLayoutEffect(() => {\n    api.refresh();\n    if (fit) api.fit();\n    if (clip) api.clip();\n\n    if (controls) {\n      // Try to prevent drag hijacking\n      const callback = event => current.animating = false;\n\n      controls.addEventListener('start', callback);\n      return () => controls.removeEventListener('start', callback);\n    }\n  }, [api, fit, controls]);\n  useFrame((state, delta) => {\n    if (current.animating) {\n      damp(current.focus, goal.focus, damping, delta);\n      damp(current.camera, goal.camera, damping, delta);\n      current.zoom = THREE.MathUtils.damp(current.zoom, goal.zoom, damping, delta);\n      camera.position.copy(current.camera);\n\n      if (isOrthographic(camera)) {\n        camera.zoom = current.zoom;\n        camera.updateProjectionMatrix();\n      }\n\n      if (!controls) {\n        camera.lookAt(current.focus);\n      } else {\n        controls.target.copy(current.focus);\n        controls.update();\n      }\n\n      invalidate();\n      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps)) return;\n      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;\n      if (controls && !equals(current.focus, goal.focus)) return;\n      current.animating = false;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\n\nfunction useBounds() {\n  return React.useContext(context);\n}\n\nexport { Bounds, useBounds };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/@react-three/drei/core/Bounds.js"],"names":["React","THREE","useThree","useFrame","isOrthographic","def","isOrthographicCamera","context","createContext","Bounds","children","damping","fit","clip","margin","eps","ref","useRef","camera","state","controls","invalidate","equals","a","b","Math","abs","x","y","z","damp","v","t","lambda","delta","MathUtils","current","useState","animating","focus","Vector3","zoom","goal","api","useMemo","box","Box3","getSize","size","center","getCenter","maxSize","max","fitHeightDistance","atan","PI","fov","fitWidthDistance","aspect","distance","refresh","object","setFromObject","isEmpty","position","length","setFromCenterAndSize","maxDistance","near","far","updateProjectionMatrix","update","copy","target","direction","clone","sub","normalize","multiplyScalar","maxHeight","maxWidth","vertices","min","applyMatrix4","matrixWorldInverse","zoomForHeight","top","bottom","zoomForWidth","right","left","lookAt","useLayoutEffect","callback","event","addEventListener","removeEventListener","createElement","Provider","value","useBounds","useContext"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst isOrthographic = def => def && def.isOrthographicCamera;\n\nconst context = /*#__PURE__*/React.createContext(null);\nfunction Bounds({\n  children,\n  damping = 6,\n  fit,\n  clip,\n  margin = 1.2,\n  eps = 0.01\n}) {\n  const ref = React.useRef(null);\n  const camera = useThree(state => state.camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const controls = useThree(state => state.controls);\n  const invalidate = useThree(state => state.invalidate);\n\n  function equals(a, b) {\n    return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\n  }\n\n  function damp(v, t, lambda, delta) {\n    v.x = THREE.MathUtils.damp(v.x, t.x, lambda, delta);\n    v.y = THREE.MathUtils.damp(v.y, t.y, lambda, delta);\n    v.z = THREE.MathUtils.damp(v.z, t.z, lambda, delta);\n  }\n\n  const [current] = React.useState(() => ({\n    animating: false,\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [goal] = React.useState(() => ({\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const api = React.useMemo(() => {\n    const box = new THREE.Box3();\n\n    function getSize() {\n      const size = box.getSize(new THREE.Vector3());\n      const center = box.getCenter(new THREE.Vector3());\n      const maxSize = Math.max(size.x, size.y, size.z);\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        size,\n        center,\n        distance\n      };\n    }\n\n    return {\n      getSize,\n\n      refresh(object) {\n        box.setFromObject(object || ref.current);\n\n        if (box.isEmpty()) {\n          const max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n\n        return this;\n      },\n\n      clip() {\n        const {\n          distance\n        } = getSize();\n        if (controls) controls.maxDistance = distance * 10;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) controls.update();\n        return this;\n      },\n\n      fit() {\n        current.camera.copy(camera.position);\n        if (controls) current.focus.copy(controls.target);\n        const {\n          center,\n          distance\n        } = getSize();\n        const direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);\n        goal.camera.copy(center).sub(direction);\n        goal.focus.copy(center);\n\n        if (isOrthographic(camera)) {\n          current.zoom = camera.zoom;\n          let maxHeight = 0,\n              maxWidth = 0;\n          const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)]; // Transform the center and each corner to camera space\n\n          center.applyMatrix4(camera.matrixWorldInverse);\n\n          for (const v of vertices) {\n            v.applyMatrix4(camera.matrixWorldInverse);\n            maxHeight = Math.max(maxHeight, Math.abs(v.y - center.y));\n            maxWidth = Math.max(maxWidth, Math.abs(v.x - center.x));\n          }\n\n          maxHeight *= 2;\n          maxWidth *= 2;\n          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n          const zoomForWidth = (camera.right - camera.left) / maxWidth;\n          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n\n          if (!damping) {\n            camera.zoom = goal.zoom;\n            camera.updateProjectionMatrix();\n          }\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.copy(goal.camera);\n          camera.lookAt(goal.focus);\n\n          if (controls) {\n            controls.target.copy(goal.focus);\n            controls.update();\n          }\n\n          invalidate();\n        }\n\n        return this;\n      }\n\n    };\n  }, [camera, controls, margin, damping, invalidate]);\n  React.useLayoutEffect(() => {\n    api.refresh();\n    if (fit) api.fit();\n    if (clip) api.clip();\n\n    if (controls) {\n      // Try to prevent drag hijacking\n      const callback = event => current.animating = false;\n\n      controls.addEventListener('start', callback);\n      return () => controls.removeEventListener('start', callback);\n    }\n  }, [api, fit, controls]);\n  useFrame((state, delta) => {\n    if (current.animating) {\n      damp(current.focus, goal.focus, damping, delta);\n      damp(current.camera, goal.camera, damping, delta);\n      current.zoom = THREE.MathUtils.damp(current.zoom, goal.zoom, damping, delta);\n      camera.position.copy(current.camera);\n\n      if (isOrthographic(camera)) {\n        camera.zoom = current.zoom;\n        camera.updateProjectionMatrix();\n      }\n\n      if (!controls) {\n        camera.lookAt(current.focus);\n      } else {\n        controls.target.copy(current.focus);\n        controls.update();\n      }\n\n      invalidate();\n      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps)) return;\n      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;\n      if (controls && !equals(current.focus, goal.focus)) return;\n      current.animating = false;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\nfunction useBounds() {\n  return React.useContext(context);\n}\n\nexport { Bounds, useBounds };\n"]},"metadata":{},"sourceType":"module"}