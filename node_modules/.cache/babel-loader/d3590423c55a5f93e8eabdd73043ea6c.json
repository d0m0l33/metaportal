{"ast":null,"code":"import _slicedToArray from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nvar _taskCache = new WeakMap();\n\nvar BasisTextureLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(BasisTextureLoader, _Loader);\n\n  var _super = _createSuper(BasisTextureLoader);\n\n  function BasisTextureLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, BasisTextureLoader);\n\n    _this = _super.call(this, manager);\n    _this.transcoderPath = '';\n    _this.transcoderBinary = null;\n    _this.transcoderPending = null;\n    _this.workerLimit = 4;\n    _this.workerPool = [];\n    _this.workerNextTaskID = 1;\n    _this.workerSourceURL = '';\n    _this.workerConfig = null;\n    return _this;\n  }\n\n  _createClass(BasisTextureLoader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(workerLimit) {\n      this.workerLimit = workerLimit;\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n        etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n        etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n        dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n        bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n        pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n      };\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this2 = this;\n\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.setWithCredentials(this.withCredentials);\n      var texture = new CompressedTexture();\n      loader.load(url, function (buffer) {\n        // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n        // again from this thread.\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n\n        _this2._createTexture([buffer]).then(function (_texture) {\n          texture.copy(_texture);\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }).catch(onError);\n      }, onProgress, onError);\n      return texture;\n    }\n    /** Low-level transcoding API, exposed for use by KTX2Loader. */\n\n  }, {\n    key: \"parseInternalAsync\",\n    value: function parseInternalAsync(options) {\n      var levels = options.levels;\n      var buffers = new Set();\n\n      for (var i = 0; i < levels.length; i++) {\n        buffers.add(levels[i].data.buffer);\n      }\n\n      return this._createTexture(Array.from(buffers), _objectSpread(_objectSpread({}, options), {}, {\n        lowLevel: true\n      }));\n    }\n    /**\n     * @param {ArrayBuffer[]} buffers\n     * @param {object?} config\n     * @return {Promise<CompressedTexture>}\n     */\n\n  }, {\n    key: \"_createTexture\",\n    value: function _createTexture(buffers) {\n      var _this3 = this;\n\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var worker;\n      var taskID;\n      var taskConfig = config;\n      var taskCost = 0;\n\n      for (var i = 0; i < buffers.length; i++) {\n        taskCost += buffers[i].byteLength;\n      }\n\n      var texturePending = this._allocateWorker(taskCost).then(function (_worker) {\n        worker = _worker;\n        taskID = _this3.workerNextTaskID++;\n        return new Promise(function (resolve, reject) {\n          worker._callbacks[taskID] = {\n            resolve: resolve,\n            reject: reject\n          };\n          worker.postMessage({\n            type: 'transcode',\n            id: taskID,\n            buffers: buffers,\n            taskConfig: taskConfig\n          }, buffers);\n        });\n      }).then(function (message) {\n        var mipmaps = message.mipmaps,\n            width = message.width,\n            height = message.height,\n            format = message.format;\n        var texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n        texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        texture.needsUpdate = true;\n        return texture;\n      }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n      texturePending.catch(function () {\n        return true;\n      }).then(function () {\n        if (worker && taskID) {\n          worker._taskLoad -= taskCost;\n          delete worker._callbacks[taskID];\n        }\n      }); // Cache the task result.\n\n      _taskCache.set(buffers[0], {\n        promise: texturePending\n      });\n\n      return texturePending;\n    }\n  }, {\n    key: \"_initTranscoder\",\n    value: function _initTranscoder() {\n      var _this4 = this;\n\n      if (!this.transcoderPending) {\n        // Load transcoder wrapper.\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        var jsContent = new Promise(function (resolve, reject) {\n          jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n        }); // Load transcoder WASM binary.\n\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType('arraybuffer');\n        binaryLoader.setWithCredentials(this.withCredentials);\n        var binaryContent = new Promise(function (resolve, reject) {\n          binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n        });\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              jsContent = _ref2[0],\n              binaryContent = _ref2[1];\n\n          var fn = BasisTextureLoader.BasisWorker.toString();\n          var body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n          _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          _this4.transcoderBinary = binaryContent;\n        });\n      }\n\n      return this.transcoderPending;\n    }\n  }, {\n    key: \"_allocateWorker\",\n    value: function _allocateWorker(taskCost) {\n      var _this5 = this;\n\n      return this._initTranscoder().then(function () {\n        if (_this5.workerPool.length < _this5.workerLimit) {\n          var _worker2 = new Worker(_this5.workerSourceURL);\n\n          _worker2._callbacks = {};\n          _worker2._taskLoad = 0;\n\n          _worker2.postMessage({\n            type: 'init',\n            config: _this5.workerConfig,\n            transcoderBinary: _this5.transcoderBinary\n          });\n\n          _worker2.onmessage = function (e) {\n            var message = e.data;\n\n            switch (message.type) {\n              case 'transcode':\n                _worker2._callbacks[message.id].resolve(message);\n\n                break;\n\n              case 'error':\n                _worker2._callbacks[message.id].reject(message);\n\n                break;\n\n              default:\n                console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n            }\n          };\n\n          _this5.workerPool.push(_worker2);\n        } else {\n          _this5.workerPool.sort(function (a, b) {\n            return a._taskLoad > b._taskLoad ? -1 : 1;\n          });\n        }\n\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\n        worker._taskLoad += taskCost;\n        return worker;\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.workerPool.length; i++) {\n        this.workerPool[i].terminate();\n      }\n\n      this.workerPool.length = 0;\n      return this;\n    }\n  }]);\n\n  return BasisTextureLoader;\n}(Loader);\n/* CONSTANTS */\n\n\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  var TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  var BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function onmessage(e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(function () {\n          try {\n            var _ref3 = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]),\n                width = _ref3.width,\n                height = _ref3.height,\n                hasAlpha = _ref3.hasAlpha,\n                mipmaps = _ref3.mipmaps,\n                format = _ref3.format;\n\n            var buffers = [];\n\n            for (var i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width: width,\n              height: height,\n              hasAlpha: hasAlpha,\n              mipmaps: mipmaps,\n              format: format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(function (resolve) {\n      BasisModule = {\n        wasmBinary: wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(function () {\n      BasisModule.initializeBasis();\n    });\n  }\n\n  function transcodeLowLevel(taskConfig) {\n    var basisFormat = taskConfig.basisFormat,\n        width = taskConfig.width,\n        height = taskConfig.height,\n        hasAlpha = taskConfig.hasAlpha;\n\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n        transcoderFormat = _getTranscoderFormat.transcoderFormat,\n        engineFormat = _getTranscoderFormat.engineFormat;\n\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    var mipmaps = [];\n\n    if (basisFormat === BasisFormat.ETC1S) {\n      var transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      var _taskConfig$globalDat = taskConfig.globalData,\n          endpointCount = _taskConfig$globalDat.endpointCount,\n          endpointsData = _taskConfig$globalDat.endpointsData,\n          selectorCount = _taskConfig$globalDat.selectorCount,\n          selectorsData = _taskConfig$globalDat.selectorsData,\n          tablesData = _taskConfig$globalDat.tablesData;\n\n      try {\n        var ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n\n        for (var i = 0; i < taskConfig.levels.length; i++) {\n          var level = taskConfig.levels[i];\n          var imageDesc = taskConfig.globalData.imageDescs[i];\n          var dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          var dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (var _i = 0; _i < taskConfig.levels.length; _i++) {\n        var _level = taskConfig.levels[_i];\n\n        var _dstByteLength = getTranscodedImageByteLength(transcoderFormat, _level.width, _level.height);\n\n        var _dst = new Uint8Array(_dstByteLength);\n\n        var _ok = BasisModule.transcodeUASTCImage(transcoderFormat, _dst, _dstByteLength / blockByteLength, _level.data, getWidthInBlocks(transcoderFormat, _level.width), getHeightInBlocks(transcoderFormat, _level.height), _level.width, _level.height, _level.index, 0, _level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n\n        assert(_ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + _level.index + '.');\n        mipmaps.push({\n          data: _dst,\n          width: _level.width,\n          height: _level.height\n        });\n      }\n    }\n\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat\n    };\n  }\n\n  function transcode(buffer) {\n    var basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    var basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = basisFile.getImageWidth(0, 0);\n    var height = basisFile.getImageHeight(0, 0);\n    var levels = basisFile.getNumLevels(0);\n    var hasAlpha = basisFile.getHasAlpha();\n\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n\n    var _getTranscoderFormat2 = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n        transcoderFormat = _getTranscoderFormat2.transcoderFormat,\n        engineFormat = _getTranscoderFormat2.engineFormat;\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n\n    var mipmaps = [];\n\n    for (var mip = 0; mip < levels; mip++) {\n      var mipWidth = basisFile.getImageWidth(0, mip);\n      var mipHeight = basisFile.getImageHeight(0, mip);\n      var dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      var status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  var FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (var i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat: transcoderFormat,\n        engineFormat: engineFormat\n      };\n    }\n\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat: transcoderFormat,\n      engineFormat: engineFormat\n    };\n  }\n\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      var paddedWidth = width + 3 & ~3;\n      var paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\n\nexport { BasisTextureLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/BasisTextureLoader.js"],"names":["Loader","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","_taskCache","WeakMap","BasisTextureLoader","manager","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","path","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","url","onLoad","onProgress","onError","loader","setResponseType","setWithCredentials","withCredentials","texture","load","buffer","cachedTask","get","promise","then","catch","_createTexture","_texture","copy","needsUpdate","options","levels","buffers","Set","i","length","add","data","Array","from","lowLevel","config","worker","taskID","taskConfig","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","mipmaps","width","height","format","minFilter","magFilter","generateMipmaps","_taskLoad","set","jsLoader","setPath","jsContent","undefined","binaryLoader","binaryContent","all","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_initTranscoder","Worker","onmessage","e","console","error","push","sort","a","b","terminate","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","init","transcodeLowLevel","transcode","hasAlpha","self","wasmBinary","onRuntimeInitialized","BASIS","initializeBasis","basisFormat","getTranscoderFormat","transcoderFormat","engineFormat","blockByteLength","getBytesPerBlockOrPixel","assert","isFormatSupported","transcoder","LowLevelETC1SImageTranscoder","globalData","endpointCount","endpointsData","selectorCount","selectorsData","tablesData","ok","decodePalettes","decodeTables","level","imageDesc","imageDescs","dstByteLength","getTranscodedImageByteLength","dst","Uint8Array","transcodeImage","getWidthInBlocks","getHeightInBlocks","index","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","imageFlags","delete","transcodeUASTCImage","basisFile","BasisFile","isUASTC","getImageWidth","getImageHeight","getNumLevels","getHasAlpha","cleanup","close","Error","startTranscoding","mip","mipWidth","mipHeight","getImageTranscodedSizeInBytes","status","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","UASTC_OPTIONS","opt","includes","isPowerOfTwo","warn","Math","ceil","getFormatBlockWidth","getFormatBlockHeight","formatIsUncompressed","paddedWidth","paddedHeight","max","value"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nconst _taskCache = new WeakMap();\n\nclass BasisTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture([buffer]).then(function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }).catch(onError);\n    }, onProgress, onError);\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n\n\n  parseInternalAsync(options) {\n    const {\n      levels\n    } = options;\n    const buffers = new Set();\n\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n\n    return this._createTexture(Array.from(buffers), { ...options,\n      lowLevel: true\n    });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n\n\n  _createTexture(buffers, config = {}) {\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n\n    const texturePending = this._allocateWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'transcode',\n          id: taskID,\n          buffers: buffers,\n          taskConfig: taskConfig\n        }, buffers);\n      });\n    }).then(message => {\n      const {\n        mipmaps,\n        width,\n        height,\n        format\n      } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffers[0], {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n      }); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = BasisTextureLoader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n      });\n    }\n\n    return this.transcoderPending;\n  }\n\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'transcode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n\n  function transcodeLowLevel(taskConfig) {\n    const {\n      basisFormat,\n      width,\n      height,\n      hasAlpha\n    } = taskConfig;\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    const mipmaps = [];\n\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const {\n        endpointCount,\n        endpointsData,\n        selectorCount,\n        selectorsData,\n        tablesData\n      } = taskConfig.globalData;\n\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, 0, level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + level.index + '.');\n        mipmaps.push({\n          data: dst,\n          width: level.width,\n          height: level.height\n        });\n      }\n    }\n\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\n\nexport { BasisTextureLoader };\n"]},"metadata":{},"sourceType":"module"}