{"ast":null,"code":"import { Group, SphereGeometry, BoxGeometry, MeshStandardMaterial, Mesh } from 'three';\n\nclass XRHandPrimitiveModel {\n  constructor(handModel, controller, path, handedness, options) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.envMap = null;\n    this.handMesh = new Group();\n    this.handModel.add(this.handMesh);\n\n    if (window.XRHand) {\n      let geometry;\n\n      if (!options || !options.primitive || options.primitive === 'sphere') {\n        geometry = new SphereGeometry(1, 10, 10);\n      } else if (options.primitive === 'box') {\n        geometry = new BoxGeometry(1, 1, 1);\n      }\n\n      const jointMaterial = new MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 1,\n        metalness: 0\n      });\n      const tipMaterial = new MeshStandardMaterial({\n        color: 0x999999,\n        roughness: 1,\n        metalness: 0\n      });\n      const joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n\n      for (let jointName of joints) {\n        var cube = new Mesh(geometry, jointName.indexOf('tip') !== -1 ? tipMaterial : jointMaterial);\n        cube.castShadow = true;\n        cube.receiveShadow = true;\n        cube.jointName = jointName;\n        this.handMesh.add(cube);\n      }\n    }\n  }\n\n  updateMesh() {\n    const defaultRadius = 0.008;\n    const objects = this.handMesh.children; // XR Joints\n\n    const XRJoints = this.controller.joints;\n\n    for (let i = 0; i < objects.length; i++) {\n      const jointMesh = objects[i];\n      const XRJoint = XRJoints[jointMesh.jointName];\n\n      if (XRJoint.visible) {\n        jointMesh.position.copy(XRJoint.position);\n        jointMesh.quaternion.copy(XRJoint.quaternion);\n        jointMesh.scale.setScalar(XRJoint.jointRadius || defaultRadius);\n      }\n\n      jointMesh.visible = XRJoint.visible;\n    }\n  }\n\n}\n\nexport { XRHandPrimitiveModel };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/webxr/XRHandPrimitiveModel.js"],"names":["Group","SphereGeometry","BoxGeometry","MeshStandardMaterial","Mesh","XRHandPrimitiveModel","constructor","handModel","controller","path","handedness","options","envMap","handMesh","add","window","XRHand","geometry","primitive","jointMaterial","color","roughness","metalness","tipMaterial","joints","jointName","cube","indexOf","castShadow","receiveShadow","updateMesh","defaultRadius","objects","children","XRJoints","i","length","jointMesh","XRJoint","visible","position","copy","quaternion","scale","setScalar","jointRadius"],"mappings":"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","sourcesContent":["import { Group, SphereGeometry, BoxGeometry, MeshStandardMaterial, Mesh } from 'three';\n\nclass XRHandPrimitiveModel {\n  constructor(handModel, controller, path, handedness, options) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.envMap = null;\n    this.handMesh = new Group();\n    this.handModel.add(this.handMesh);\n\n    if (window.XRHand) {\n      let geometry;\n\n      if (!options || !options.primitive || options.primitive === 'sphere') {\n        geometry = new SphereGeometry(1, 10, 10);\n      } else if (options.primitive === 'box') {\n        geometry = new BoxGeometry(1, 1, 1);\n      }\n\n      const jointMaterial = new MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 1,\n        metalness: 0\n      });\n      const tipMaterial = new MeshStandardMaterial({\n        color: 0x999999,\n        roughness: 1,\n        metalness: 0\n      });\n      const joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n\n      for (let jointName of joints) {\n        var cube = new Mesh(geometry, jointName.indexOf('tip') !== -1 ? tipMaterial : jointMaterial);\n        cube.castShadow = true;\n        cube.receiveShadow = true;\n        cube.jointName = jointName;\n        this.handMesh.add(cube);\n      }\n    }\n  }\n\n  updateMesh() {\n    const defaultRadius = 0.008;\n    const objects = this.handMesh.children; // XR Joints\n\n    const XRJoints = this.controller.joints;\n\n    for (let i = 0; i < objects.length; i++) {\n      const jointMesh = objects[i];\n      const XRJoint = XRJoints[jointMesh.jointName];\n\n      if (XRJoint.visible) {\n        jointMesh.position.copy(XRJoint.position);\n        jointMesh.quaternion.copy(XRJoint.quaternion);\n        jointMesh.scale.setScalar(XRJoint.jointRadius || defaultRadius);\n      }\n\n      jointMesh.visible = XRJoint.visible;\n    }\n  }\n\n}\n\nexport { XRHandPrimitiveModel };\n"]},"metadata":{},"sourceType":"module"}