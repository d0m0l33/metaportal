{"ast":null,"code":"import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(parameters);\n    this._debug = {\n      value: 0\n    };\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._u_mipmap_0 = {\n      value: null\n    };\n    this._u_mipmap_1 = {\n      value: null\n    };\n    this._u_mipmap_2 = {\n      value: null\n    };\n    this._u_mipmap_3 = {\n      value: null\n    };\n    this._u_mipmap_4 = {\n      value: null\n    };\n    this._u_mipmap_5 = {\n      value: null\n    };\n    this._u_mipmap_6 = {\n      value: null\n    };\n    this._u_mipmap_7 = {\n      value: null\n    };\n    this._u_mipmap_res_0 = {\n      value: null\n    };\n    this._u_mipmap_res_1 = {\n      value: null\n    };\n    this._u_mipmap_res_2 = {\n      value: null\n    };\n    this._u_mipmap_res_3 = {\n      value: null\n    };\n    this._u_mipmap_res_4 = {\n      value: null\n    };\n    this._u_mipmap_res_5 = {\n      value: null\n    };\n    this._u_mipmap_res_6 = {\n      value: null\n    };\n    this._u_mipmap_res_7 = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform int debug;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform sampler2D u_mipmap_0;\n        uniform sampler2D u_mipmap_1;\n        uniform sampler2D u_mipmap_2;\n        uniform sampler2D u_mipmap_3;\n        uniform sampler2D u_mipmap_4;\n        uniform sampler2D u_mipmap_5;\n        uniform sampler2D u_mipmap_6;\n        uniform sampler2D u_mipmap_7;\n        uniform vec2 u_mipmap_res_0;\n        uniform vec2 u_mipmap_res_1;\n        uniform vec2 u_mipmap_res_2;\n        uniform vec2 u_mipmap_res_3;\n        uniform vec2 u_mipmap_res_4;\n        uniform vec2 u_mipmap_res_5;\n        uniform vec2 u_mipmap_res_6;\n        uniform vec2 u_mipmap_res_7;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;  \n        \n        // from http://www.java-gaming.org/index.php?topic=35123.0\n        vec4 cubic( float v ) {\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\n          vec4 s = n * n * n;\n          float x = s.x;\n          float y = s.y - 4.0 * s.x;\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\n          float w = 6.0 - x - y - z;\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\n        }\n        \n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\n          vec2 invTexSize = 1.0 / texSize;\n          texCoords = texCoords * texSize - 0.5;\n          vec2 fxy = fract( texCoords );\n          texCoords -= fxy;\n\n          vec4 xcubic = cubic( fxy.x );\n          vec4 ycubic = cubic( fxy.y );\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\n\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\n          offset *= invTexSize.xxyy;\n        \n          vec4 sample0 = texture2D( sampler, offset.xz);\n          vec4 sample1 = texture2D( sampler, offset.yz);\n          vec4 sample2 = texture2D( sampler, offset.xw);\n          vec4 sample3 = texture2D( sampler, offset.yw);\n        \n          float sx = s.x / ( s.x + s.y );\n          float sy = s.z / ( s.z + s.w );\n\n          return mix(\n            mix(\n              sample3,\n              sample2,\n              sx\n            ),\n            mix(\n              sample1,\n              sample0,\n              sx\n            ),\n            sy\n          );\n        }\n\n\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n    \n      float depthFactor = 1.0;\n      float distortionFactor = 0.0;\n      vec3 my_normal = vec3(0.0);\n      float reflectorRoughnessFactor = roughness;\n      vec3 coord = my_vUv.xyz / my_vUv.w;\n\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      #ifdef USE_NORMALMAP\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\n      #endif\n\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\n      proj_vUv.x += distortionFactor;\n      proj_vUv.y += distortionFactor;\n      \n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2D(tDepth, proj_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\n      #endif\n\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\n      vec4 mixedColor;\n\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\n      if (_lod < 1.) {\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        mixedColor = mix(one, two, _lod);\n      } else if (_lod < 2.) {\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        mixedColor = mix(one, two, _lod - 1.0);\n      } else if (_lod < 3.) {\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        mixedColor = mix(one, two, _lod - 2.0);\n      } else if (_lod < 4.) {\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        mixedColor = mix(one, two, _lod - 3.0);\n      } else if (_lod < 5.) {\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        mixedColor = mix(one, two, _lod - 4.0);\n      } else if (_lod < 6.) {\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        mixedColor = mix(one, two, _lod - 5.0);\n      } else if (_lod < 7.) {\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, two, _lod - 6.0);\n      } else {\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, baseColor, _lod - 7.0);\n      }\n\n      mixedColor.rgb *= depthFactor;\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \n      diffuseColor = sRGBToLinear(diffuseColor);\n\n      if (debug == 1) {\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\n      }\n      if (debug == 2) {\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\n      }\n      if (debug == 3) {\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\n      }\n      if (debug == 4) {\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\n      }\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get u_mipmap_0() {\n    return this._u_mipmap_0.value;\n  }\n\n  set u_mipmap_0(v) {\n    this._u_mipmap_0.value = v;\n  }\n\n  get u_mipmap_1() {\n    return this._u_mipmap_1.value;\n  }\n\n  set u_mipmap_1(v) {\n    this._u_mipmap_1.value = v;\n  }\n\n  get u_mipmap_2() {\n    return this._u_mipmap_2.value;\n  }\n\n  set u_mipmap_2(v) {\n    this._u_mipmap_2.value = v;\n  }\n\n  get u_mipmap_3() {\n    return this._u_mipmap_3.value;\n  }\n\n  set u_mipmap_3(v) {\n    this._u_mipmap_3.value = v;\n  }\n\n  get u_mipmap_4() {\n    return this._u_mipmap_4.value;\n  }\n\n  set u_mipmap_4(v) {\n    this._u_mipmap_4.value = v;\n  }\n\n  get u_mipmap_5() {\n    return this._u_mipmap_5.value;\n  }\n\n  set u_mipmap_5(v) {\n    this._u_mipmap_5.value = v;\n  }\n\n  get u_mipmap_6() {\n    return this._u_mipmap_6.value;\n  }\n\n  set u_mipmap_6(v) {\n    this._u_mipmap_6.value = v;\n  }\n\n  get u_mipmap_7() {\n    return this._u_mipmap_7.value;\n  }\n\n  set u_mipmap_7(v) {\n    this._u_mipmap_7.value = v;\n  }\n\n  get u_mipmap_res_0() {\n    return this._u_mipmap_res_0.value;\n  }\n\n  set u_mipmap_res_0(v) {\n    this._u_mipmap_res_0.value = v;\n  }\n\n  get u_mipmap_res_1() {\n    return this._u_mipmap_res_1.value;\n  }\n\n  set u_mipmap_res_1(v) {\n    this._u_mipmap_res_1.value = v;\n  }\n\n  get u_mipmap_res_2() {\n    return this._u_mipmap_res_2.value;\n  }\n\n  set u_mipmap_res_2(v) {\n    this._u_mipmap_res_2.value = v;\n  }\n\n  get u_mipmap_res_3() {\n    return this._u_mipmap_res_3.value;\n  }\n\n  set u_mipmap_res_3(v) {\n    this._u_mipmap_res_3.value = v;\n  }\n\n  get u_mipmap_res_4() {\n    return this._u_mipmap_res_4.value;\n  }\n\n  set u_mipmap_res_4(v) {\n    this._u_mipmap_res_4.value = v;\n  }\n\n  get u_mipmap_res_5() {\n    return this._u_mipmap_res_5.value;\n  }\n\n  set u_mipmap_res_5(v) {\n    this._u_mipmap_res_5.value = v;\n  }\n\n  get u_mipmap_res_6() {\n    return this._u_mipmap_res_6.value;\n  }\n\n  set u_mipmap_res_6(v) {\n    this._u_mipmap_res_6.value = v;\n  }\n\n  get u_mipmap_res_7() {\n    return this._u_mipmap_res_7.value;\n  }\n\n  set u_mipmap_res_7(v) {\n    this._u_mipmap_res_7.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"names":["MeshStandardMaterial","MeshReflectorMaterial","constructor","parameters","_debug","value","_tDepth","_distortionMap","_tDiffuse","_u_mipmap_0","_u_mipmap_1","_u_mipmap_2","_u_mipmap_3","_u_mipmap_4","_u_mipmap_5","_u_mipmap_6","_u_mipmap_7","_u_mipmap_res_0","_u_mipmap_res_1","_u_mipmap_res_2","_u_mipmap_res_3","_u_mipmap_res_4","_u_mipmap_res_5","_u_mipmap_res_6","_u_mipmap_res_7","_textureMatrix","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","setValues","onBeforeCompile","shader","_shader$defines","defines","USE_UV","uniforms","debug","tDiffuse","tDepth","distortionMap","u_mipmap_0","u_mipmap_1","u_mipmap_2","u_mipmap_3","u_mipmap_4","u_mipmap_5","u_mipmap_6","u_mipmap_7","u_mipmap_res_0","u_mipmap_res_1","u_mipmap_res_2","u_mipmap_res_3","u_mipmap_res_4","u_mipmap_res_5","u_mipmap_res_6","u_mipmap_res_7","textureMatrix","mirror","mixBlur","mixStrength","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","distortion","vertexShader","replace","fragmentShader","v"],"mappings":"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KAAKpC,kBAAzC;AACAM,IAAAA,MAAM,CAACI,QAAP,CAAgB2B,UAAhB,GAA6B,KAAKpC,WAAlC;AACAK,IAAAA,MAAM,CAACI,QAAP,CAAgB4B,oBAAhB,GAAuC,KAAKpC,qBAA5C;AACAI,IAAAA,MAAM,CAACI,QAAP,CAAgB6B,UAAhB,GAA6B,KAAKpC,WAAlC;AACAG,IAAAA,MAAM,CAACkC,YAAP,GAAuB;AAC3B;AACA;AACA,QAAQlC,MAAM,CAACkC,YAAa,EAHxB;AAIAlC,IAAAA,MAAM,CAACkC,YAAP,GAAsBlC,MAAM,CAACkC,YAAP,CAAoBC,OAApB,CAA4B,2BAA5B,EAA0D;AACpF;AACA,kFAF0B,CAAtB;AAGAnC,IAAAA,MAAM,CAACoC,cAAP,GAAyB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUpC,MAAM,CAACoC,cAAe,EAlF5B;AAmFApC,IAAAA,MAAM,CAACoC,cAAP,GAAwBpC,MAAM,CAACoC,cAAP,CAAsBD,OAAtB,CAA8B,iCAA9B,EAAkE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","sourcesContent":["import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._debug = {\n      value: 0\n    };\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._u_mipmap_0 = {\n      value: null\n    };\n    this._u_mipmap_1 = {\n      value: null\n    };\n    this._u_mipmap_2 = {\n      value: null\n    };\n    this._u_mipmap_3 = {\n      value: null\n    };\n    this._u_mipmap_4 = {\n      value: null\n    };\n    this._u_mipmap_5 = {\n      value: null\n    };\n    this._u_mipmap_6 = {\n      value: null\n    };\n    this._u_mipmap_7 = {\n      value: null\n    };\n    this._u_mipmap_res_0 = {\n      value: null\n    };\n    this._u_mipmap_res_1 = {\n      value: null\n    };\n    this._u_mipmap_res_2 = {\n      value: null\n    };\n    this._u_mipmap_res_3 = {\n      value: null\n    };\n    this._u_mipmap_res_4 = {\n      value: null\n    };\n    this._u_mipmap_res_5 = {\n      value: null\n    };\n    this._u_mipmap_res_6 = {\n      value: null\n    };\n    this._u_mipmap_res_7 = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform int debug;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform sampler2D u_mipmap_0;\n        uniform sampler2D u_mipmap_1;\n        uniform sampler2D u_mipmap_2;\n        uniform sampler2D u_mipmap_3;\n        uniform sampler2D u_mipmap_4;\n        uniform sampler2D u_mipmap_5;\n        uniform sampler2D u_mipmap_6;\n        uniform sampler2D u_mipmap_7;\n        uniform vec2 u_mipmap_res_0;\n        uniform vec2 u_mipmap_res_1;\n        uniform vec2 u_mipmap_res_2;\n        uniform vec2 u_mipmap_res_3;\n        uniform vec2 u_mipmap_res_4;\n        uniform vec2 u_mipmap_res_5;\n        uniform vec2 u_mipmap_res_6;\n        uniform vec2 u_mipmap_res_7;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;  \n        \n        // from http://www.java-gaming.org/index.php?topic=35123.0\n        vec4 cubic( float v ) {\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\n          vec4 s = n * n * n;\n          float x = s.x;\n          float y = s.y - 4.0 * s.x;\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\n          float w = 6.0 - x - y - z;\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\n        }\n        \n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\n          vec2 invTexSize = 1.0 / texSize;\n          texCoords = texCoords * texSize - 0.5;\n          vec2 fxy = fract( texCoords );\n          texCoords -= fxy;\n\n          vec4 xcubic = cubic( fxy.x );\n          vec4 ycubic = cubic( fxy.y );\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\n\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\n          offset *= invTexSize.xxyy;\n        \n          vec4 sample0 = texture2D( sampler, offset.xz);\n          vec4 sample1 = texture2D( sampler, offset.yz);\n          vec4 sample2 = texture2D( sampler, offset.xw);\n          vec4 sample3 = texture2D( sampler, offset.yw);\n        \n          float sx = s.x / ( s.x + s.y );\n          float sy = s.z / ( s.z + s.w );\n\n          return mix(\n            mix(\n              sample3,\n              sample2,\n              sx\n            ),\n            mix(\n              sample1,\n              sample0,\n              sx\n            ),\n            sy\n          );\n        }\n\n\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n    \n      float depthFactor = 1.0;\n      float distortionFactor = 0.0;\n      vec3 my_normal = vec3(0.0);\n      float reflectorRoughnessFactor = roughness;\n      vec3 coord = my_vUv.xyz / my_vUv.w;\n\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      #ifdef USE_NORMALMAP\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\n      #endif\n\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\n      proj_vUv.x += distortionFactor;\n      proj_vUv.y += distortionFactor;\n      \n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2D(tDepth, proj_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\n      #endif\n\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\n      vec4 mixedColor;\n\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\n      if (_lod < 1.) {\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        mixedColor = mix(one, two, _lod);\n      } else if (_lod < 2.) {\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        mixedColor = mix(one, two, _lod - 1.0);\n      } else if (_lod < 3.) {\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        mixedColor = mix(one, two, _lod - 2.0);\n      } else if (_lod < 4.) {\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        mixedColor = mix(one, two, _lod - 3.0);\n      } else if (_lod < 5.) {\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        mixedColor = mix(one, two, _lod - 4.0);\n      } else if (_lod < 6.) {\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        mixedColor = mix(one, two, _lod - 5.0);\n      } else if (_lod < 7.) {\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, two, _lod - 6.0);\n      } else {\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, baseColor, _lod - 7.0);\n      }\n\n      mixedColor.rgb *= depthFactor;\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \n      diffuseColor = sRGBToLinear(diffuseColor);\n\n      if (debug == 1) {\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\n      }\n      if (debug == 2) {\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\n      }\n      if (debug == 3) {\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\n      }\n      if (debug == 4) {\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\n      }\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get u_mipmap_0() {\n    return this._u_mipmap_0.value;\n  }\n\n  set u_mipmap_0(v) {\n    this._u_mipmap_0.value = v;\n  }\n\n  get u_mipmap_1() {\n    return this._u_mipmap_1.value;\n  }\n\n  set u_mipmap_1(v) {\n    this._u_mipmap_1.value = v;\n  }\n\n  get u_mipmap_2() {\n    return this._u_mipmap_2.value;\n  }\n\n  set u_mipmap_2(v) {\n    this._u_mipmap_2.value = v;\n  }\n\n  get u_mipmap_3() {\n    return this._u_mipmap_3.value;\n  }\n\n  set u_mipmap_3(v) {\n    this._u_mipmap_3.value = v;\n  }\n\n  get u_mipmap_4() {\n    return this._u_mipmap_4.value;\n  }\n\n  set u_mipmap_4(v) {\n    this._u_mipmap_4.value = v;\n  }\n\n  get u_mipmap_5() {\n    return this._u_mipmap_5.value;\n  }\n\n  set u_mipmap_5(v) {\n    this._u_mipmap_5.value = v;\n  }\n\n  get u_mipmap_6() {\n    return this._u_mipmap_6.value;\n  }\n\n  set u_mipmap_6(v) {\n    this._u_mipmap_6.value = v;\n  }\n\n  get u_mipmap_7() {\n    return this._u_mipmap_7.value;\n  }\n\n  set u_mipmap_7(v) {\n    this._u_mipmap_7.value = v;\n  }\n\n  get u_mipmap_res_0() {\n    return this._u_mipmap_res_0.value;\n  }\n\n  set u_mipmap_res_0(v) {\n    this._u_mipmap_res_0.value = v;\n  }\n\n  get u_mipmap_res_1() {\n    return this._u_mipmap_res_1.value;\n  }\n\n  set u_mipmap_res_1(v) {\n    this._u_mipmap_res_1.value = v;\n  }\n\n  get u_mipmap_res_2() {\n    return this._u_mipmap_res_2.value;\n  }\n\n  set u_mipmap_res_2(v) {\n    this._u_mipmap_res_2.value = v;\n  }\n\n  get u_mipmap_res_3() {\n    return this._u_mipmap_res_3.value;\n  }\n\n  set u_mipmap_res_3(v) {\n    this._u_mipmap_res_3.value = v;\n  }\n\n  get u_mipmap_res_4() {\n    return this._u_mipmap_res_4.value;\n  }\n\n  set u_mipmap_res_4(v) {\n    this._u_mipmap_res_4.value = v;\n  }\n\n  get u_mipmap_res_5() {\n    return this._u_mipmap_res_5.value;\n  }\n\n  set u_mipmap_res_5(v) {\n    this._u_mipmap_res_5.value = v;\n  }\n\n  get u_mipmap_res_6() {\n    return this._u_mipmap_res_6.value;\n  }\n\n  set u_mipmap_res_6(v) {\n    this._u_mipmap_res_6.value = v;\n  }\n\n  get u_mipmap_res_7() {\n    return this._u_mipmap_res_7.value;\n  }\n\n  set u_mipmap_res_7(v) {\n    this._u_mipmap_res_7.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"]},"metadata":{},"sourceType":"module"}