{"ast":null,"code":"async function AmmoPhysics() {\n  if ('Ammo' in window === false) {\n    console.error(\"AmmoPhysics: Couldn't find Ammo.js\");\n    return;\n  }\n\n  const AmmoLib = await Ammo(); // eslint-disable-line no-undef\n\n  const frameRate = 60;\n  const collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n  const dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n  const broadphase = new AmmoLib.btDbvtBroadphase();\n  const solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n  const world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n  world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\n  const worldTransform = new AmmoLib.btTransform(); //\n\n  function getShape(geometry) {\n    const parameters = geometry.parameters; // TODO change type to is*\n\n    if (geometry.type === 'BoxGeometry') {\n      const sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n      const sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n      const sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n      const shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\n      shape.setMargin(0.05);\n      return shape;\n    } else if (geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry') {\n      const radius = parameters.radius !== undefined ? parameters.radius : 1;\n      const shape = new AmmoLib.btSphereShape(radius);\n      shape.setMargin(0.05);\n      return shape;\n    }\n\n    return null;\n  }\n\n  const meshes = [];\n  const meshMap = new WeakMap();\n\n  function addMesh(mesh) {\n    let mass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const shape = getShape(mesh.geometry);\n\n    if (shape !== null) {\n      if (mesh.isInstancedMesh) {\n        handleInstancedMesh(mesh, mass, shape);\n      } else if (mesh.isMesh) {\n        handleMesh(mesh, mass, shape);\n      }\n    }\n  }\n\n  function handleMesh(mesh, mass, shape) {\n    const position = mesh.position;\n    const quaternion = mesh.quaternion;\n    const transform = new AmmoLib.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n    transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n    const motionState = new AmmoLib.btDefaultMotionState(transform);\n    const localInertia = new AmmoLib.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    const body = new AmmoLib.btRigidBody(rbInfo); // body.setFriction( 4 );\n\n    world.addRigidBody(body);\n\n    if (mass > 0) {\n      meshes.push(mesh);\n      meshMap.set(mesh, body);\n    }\n  }\n\n  function handleInstancedMesh(mesh, mass, shape) {\n    const array = mesh.instanceMatrix.array;\n    const bodies = [];\n\n    for (let i = 0; i < mesh.count; i++) {\n      const index = i * 16;\n      const transform = new AmmoLib.btTransform();\n      transform.setFromOpenGLMatrix(array.slice(index, index + 16));\n      const motionState = new AmmoLib.btDefaultMotionState(transform);\n      const localInertia = new AmmoLib.btVector3(0, 0, 0);\n      shape.calculateLocalInertia(mass, localInertia);\n      const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n      const body = new AmmoLib.btRigidBody(rbInfo);\n      world.addRigidBody(body);\n      bodies.push(body);\n    }\n\n    if (mass > 0) {\n      mesh.instanceMatrix.setUsage(35048); // THREE.DynamicDrawUsage = 35048\n\n      meshes.push(mesh);\n      meshMap.set(mesh, bodies);\n    }\n  } //\n\n\n  function setMeshPosition(mesh, position) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    if (mesh.isInstancedMesh) {\n      const bodies = meshMap.get(mesh);\n      const body = bodies[index];\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    } else if (mesh.isMesh) {\n      const body = meshMap.get(mesh);\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    }\n  } //\n\n\n  let lastTime = 0;\n\n  function step() {\n    const time = performance.now();\n\n    if (lastTime > 0) {\n      const delta = (time - lastTime) / 1000; // console.time( 'world.step' );\n\n      world.stepSimulation(delta, 10); // console.timeEnd( 'world.step' );\n    }\n\n    lastTime = time; //\n\n    for (let i = 0, l = meshes.length; i < l; i++) {\n      const mesh = meshes[i];\n\n      if (mesh.isInstancedMesh) {\n        const array = mesh.instanceMatrix.array;\n        const bodies = meshMap.get(mesh);\n\n        for (let j = 0; j < bodies.length; j++) {\n          const body = bodies[j];\n          const motionState = body.getMotionState();\n          motionState.getWorldTransform(worldTransform);\n          const position = worldTransform.getOrigin();\n          const quaternion = worldTransform.getRotation();\n          compose(position, quaternion, array, j * 16);\n        }\n\n        mesh.instanceMatrix.needsUpdate = true;\n      } else if (mesh.isMesh) {\n        const body = meshMap.get(mesh);\n        const motionState = body.getMotionState();\n        motionState.getWorldTransform(worldTransform);\n        const position = worldTransform.getOrigin();\n        const quaternion = worldTransform.getRotation();\n        mesh.position.set(position.x(), position.y(), position.z());\n        mesh.quaternion.set(quaternion.x(), quaternion.y(), quaternion.z(), quaternion.w());\n      }\n    }\n  } // animate\n\n\n  setInterval(step, 1000 / frameRate);\n  return {\n    addMesh: addMesh,\n    setMeshPosition: setMeshPosition // addCompoundMesh\n\n  };\n}\n\nfunction compose(position, quaternion, array, index) {\n  const x = quaternion.x(),\n        y = quaternion.y(),\n        z = quaternion.z(),\n        w = quaternion.w();\n  const x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n  const xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n  const yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n  const wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n  array[index + 0] = 1 - (yy + zz);\n  array[index + 1] = xy + wz;\n  array[index + 2] = xz - wy;\n  array[index + 3] = 0;\n  array[index + 4] = xy - wz;\n  array[index + 5] = 1 - (xx + zz);\n  array[index + 6] = yz + wx;\n  array[index + 7] = 0;\n  array[index + 8] = xz + wy;\n  array[index + 9] = yz - wx;\n  array[index + 10] = 1 - (xx + yy);\n  array[index + 11] = 0;\n  array[index + 12] = position.x();\n  array[index + 13] = position.y();\n  array[index + 14] = position.z();\n  array[index + 15] = 1;\n}\n\nexport { AmmoPhysics };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/physics/AmmoPhysics.js"],"names":["AmmoPhysics","window","console","error","AmmoLib","Ammo","frameRate","collisionConfiguration","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","broadphase","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","world","btDiscreteDynamicsWorld","setGravity","btVector3","worldTransform","btTransform","getShape","geometry","parameters","type","sx","width","undefined","sy","height","sz","depth","shape","btBoxShape","setMargin","radius","btSphereShape","meshes","meshMap","WeakMap","addMesh","mesh","mass","isInstancedMesh","handleInstancedMesh","isMesh","handleMesh","position","quaternion","transform","setIdentity","setOrigin","x","y","z","setRotation","btQuaternion","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","body","btRigidBody","addRigidBody","push","set","array","instanceMatrix","bodies","i","count","index","setFromOpenGLMatrix","slice","setUsage","setMeshPosition","get","setAngularVelocity","setLinearVelocity","setWorldTransform","lastTime","step","time","performance","now","delta","stepSimulation","l","length","j","getMotionState","getWorldTransform","getOrigin","getRotation","compose","needsUpdate","setInterval","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz"],"mappings":"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","sourcesContent":["async function AmmoPhysics() {\n  if ('Ammo' in window === false) {\n    console.error(\"AmmoPhysics: Couldn't find Ammo.js\");\n    return;\n  }\n\n  const AmmoLib = await Ammo(); // eslint-disable-line no-undef\n\n  const frameRate = 60;\n  const collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n  const dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n  const broadphase = new AmmoLib.btDbvtBroadphase();\n  const solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n  const world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n  world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\n  const worldTransform = new AmmoLib.btTransform(); //\n\n  function getShape(geometry) {\n    const parameters = geometry.parameters; // TODO change type to is*\n\n    if (geometry.type === 'BoxGeometry') {\n      const sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n      const sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n      const sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n      const shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\n      shape.setMargin(0.05);\n      return shape;\n    } else if (geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry') {\n      const radius = parameters.radius !== undefined ? parameters.radius : 1;\n      const shape = new AmmoLib.btSphereShape(radius);\n      shape.setMargin(0.05);\n      return shape;\n    }\n\n    return null;\n  }\n\n  const meshes = [];\n  const meshMap = new WeakMap();\n\n  function addMesh(mesh, mass = 0) {\n    const shape = getShape(mesh.geometry);\n\n    if (shape !== null) {\n      if (mesh.isInstancedMesh) {\n        handleInstancedMesh(mesh, mass, shape);\n      } else if (mesh.isMesh) {\n        handleMesh(mesh, mass, shape);\n      }\n    }\n  }\n\n  function handleMesh(mesh, mass, shape) {\n    const position = mesh.position;\n    const quaternion = mesh.quaternion;\n    const transform = new AmmoLib.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n    transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n    const motionState = new AmmoLib.btDefaultMotionState(transform);\n    const localInertia = new AmmoLib.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    const body = new AmmoLib.btRigidBody(rbInfo); // body.setFriction( 4 );\n\n    world.addRigidBody(body);\n\n    if (mass > 0) {\n      meshes.push(mesh);\n      meshMap.set(mesh, body);\n    }\n  }\n\n  function handleInstancedMesh(mesh, mass, shape) {\n    const array = mesh.instanceMatrix.array;\n    const bodies = [];\n\n    for (let i = 0; i < mesh.count; i++) {\n      const index = i * 16;\n      const transform = new AmmoLib.btTransform();\n      transform.setFromOpenGLMatrix(array.slice(index, index + 16));\n      const motionState = new AmmoLib.btDefaultMotionState(transform);\n      const localInertia = new AmmoLib.btVector3(0, 0, 0);\n      shape.calculateLocalInertia(mass, localInertia);\n      const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n      const body = new AmmoLib.btRigidBody(rbInfo);\n      world.addRigidBody(body);\n      bodies.push(body);\n    }\n\n    if (mass > 0) {\n      mesh.instanceMatrix.setUsage(35048); // THREE.DynamicDrawUsage = 35048\n\n      meshes.push(mesh);\n      meshMap.set(mesh, bodies);\n    }\n  } //\n\n\n  function setMeshPosition(mesh, position, index = 0) {\n    if (mesh.isInstancedMesh) {\n      const bodies = meshMap.get(mesh);\n      const body = bodies[index];\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    } else if (mesh.isMesh) {\n      const body = meshMap.get(mesh);\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    }\n  } //\n\n\n  let lastTime = 0;\n\n  function step() {\n    const time = performance.now();\n\n    if (lastTime > 0) {\n      const delta = (time - lastTime) / 1000; // console.time( 'world.step' );\n\n      world.stepSimulation(delta, 10); // console.timeEnd( 'world.step' );\n    }\n\n    lastTime = time; //\n\n    for (let i = 0, l = meshes.length; i < l; i++) {\n      const mesh = meshes[i];\n\n      if (mesh.isInstancedMesh) {\n        const array = mesh.instanceMatrix.array;\n        const bodies = meshMap.get(mesh);\n\n        for (let j = 0; j < bodies.length; j++) {\n          const body = bodies[j];\n          const motionState = body.getMotionState();\n          motionState.getWorldTransform(worldTransform);\n          const position = worldTransform.getOrigin();\n          const quaternion = worldTransform.getRotation();\n          compose(position, quaternion, array, j * 16);\n        }\n\n        mesh.instanceMatrix.needsUpdate = true;\n      } else if (mesh.isMesh) {\n        const body = meshMap.get(mesh);\n        const motionState = body.getMotionState();\n        motionState.getWorldTransform(worldTransform);\n        const position = worldTransform.getOrigin();\n        const quaternion = worldTransform.getRotation();\n        mesh.position.set(position.x(), position.y(), position.z());\n        mesh.quaternion.set(quaternion.x(), quaternion.y(), quaternion.z(), quaternion.w());\n      }\n    }\n  } // animate\n\n\n  setInterval(step, 1000 / frameRate);\n  return {\n    addMesh: addMesh,\n    setMeshPosition: setMeshPosition // addCompoundMesh\n\n  };\n}\n\nfunction compose(position, quaternion, array, index) {\n  const x = quaternion.x(),\n        y = quaternion.y(),\n        z = quaternion.z(),\n        w = quaternion.w();\n  const x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n  const xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n  const yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n  const wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n  array[index + 0] = 1 - (yy + zz);\n  array[index + 1] = xy + wz;\n  array[index + 2] = xz - wy;\n  array[index + 3] = 0;\n  array[index + 4] = xy - wz;\n  array[index + 5] = 1 - (xx + zz);\n  array[index + 6] = yz + wx;\n  array[index + 7] = 0;\n  array[index + 8] = xz + wy;\n  array[index + 9] = yz - wx;\n  array[index + 10] = 1 - (xx + yy);\n  array[index + 11] = 0;\n  array[index + 12] = position.x();\n  array[index + 13] = position.y();\n  array[index + 14] = position.z();\n  array[index + 15] = 1;\n}\n\nexport { AmmoPhysics };\n"]},"metadata":{},"sourceType":"module"}