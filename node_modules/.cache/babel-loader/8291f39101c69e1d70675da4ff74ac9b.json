{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { useFrame, extend } from '@react-three/fiber';\nimport { Line2, LineMaterial, LineSegmentsGeometry } from 'three-stdlib';\nconst context = /*#__PURE__*/React.createContext(null);\n\nconst arrColor = color => color instanceof THREE.Color ? color.toArray() : color;\n\nconst arrPos = pos => pos instanceof THREE.Vector3 ? pos.toArray() : pos;\n\nconst Segments = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  const {\n    limit = 1000,\n    lineWidth = 1.0,\n    children,\n    ...rest\n  } = props;\n  const [segments, setSegments] = React.useState([]);\n  const [line] = React.useState(() => new Line2());\n  const [material] = React.useState(() => new LineMaterial());\n  const [geometry] = React.useState(() => new LineSegmentsGeometry());\n  const [resolution] = React.useState(() => new THREE.Vector2(512, 512));\n  const [positions] = React.useState(() => Array(limit * 6).fill(0));\n  const [colors] = React.useState(() => Array(limit * 6).fill(0));\n  const api = React.useMemo(() => ({\n    subscribe: ref => {\n      setSegments(segments => [...segments, ref]);\n      return () => setSegments(segments => segments.filter(item => item.current !== ref.current));\n    }\n  }), []);\n  useFrame(() => {\n    for (let i = 0; i < limit; i++) {\n      var _segments$i;\n\n      const segment = (_segments$i = segments[i]) == null ? void 0 : _segments$i.current;\n      const segmentStart = segment ? arrPos(segment.start) : [0, 0, 0];\n      const segmentEnd = segment ? arrPos(segment.end) : [0, 0, 0];\n      const segmentColor = segment ? arrColor(segment.color) : [1, 1, 1]; //console.log(segmentStart, segmentEnd, segmentColor)\n\n      for (var j = 0; j < 3; j++) {\n        positions[i * 6 + j] = segmentStart[j];\n        positions[i * 6 + j + 3] = segmentEnd[j];\n        colors[i * 6 + j] = segmentColor[j];\n        colors[i * 6 + j + 3] = segmentColor[j];\n      }\n    }\n\n    geometry.setColors(colors);\n    geometry.setPositions(positions);\n    line.computeLineDistances();\n  });\n  return /*#__PURE__*/React.createElement(\"primitive\", {\n    object: line,\n    ref: forwardedRef\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: geometry,\n    attach: \"geometry\"\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: material,\n    attach: \"material\",\n    vertexColors: true,\n    resolution: resolution,\n    linewidth: lineWidth\n  }, rest)), /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n});\n\nclass SegmentObject {\n  constructor() {\n    this.color = new THREE.Color('white');\n    this.start = new THREE.Vector3(0, 0, 0);\n    this.end = new THREE.Vector3(0, 0, 0);\n  }\n\n}\n\nconst Segment = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  const api = React.useContext(context);\n  if (!api) throw 'Segment must used inside Segments component.';\n  const ref = React.useRef();\n  React.useMemo(() => extend({\n    SegmentObject\n  }), []);\n  React.useLayoutEffect(() => api.subscribe(ref), []);\n  return /*#__PURE__*/React.createElement(\"segmentObject\", _extends({\n    ref: mergeRefs([ref, forwardedRef])\n  }, props));\n});\nexport { Segment, Segments };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/@react-three/drei/core/Segments.js"],"names":["_extends","THREE","React","mergeRefs","useFrame","extend","Line2","LineMaterial","LineSegmentsGeometry","context","createContext","arrColor","color","Color","toArray","arrPos","pos","Vector3","Segments","forwardRef","props","forwardedRef","limit","lineWidth","children","rest","segments","setSegments","useState","line","material","geometry","resolution","Vector2","positions","Array","fill","colors","api","useMemo","subscribe","ref","filter","item","current","i","_segments$i","segment","segmentStart","start","segmentEnd","end","segmentColor","j","setColors","setPositions","computeLineDistances","createElement","object","attach","vertexColors","linewidth","Provider","value","SegmentObject","constructor","Segment","useContext","useRef","useLayoutEffect"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,oBAAjC;AACA,SAASC,KAAT,EAAgBC,YAAhB,EAA8BC,oBAA9B,QAA0D,cAA1D;AAEA,MAAMC,OAAO,GAAG,aAAaP,KAAK,CAACQ,aAAN,CAAoB,IAApB,CAA7B;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,YAAYX,KAAK,CAACY,KAAvB,GAA+BD,KAAK,CAACE,OAAN,EAA/B,GAAiDF,KAA3E;;AAEA,MAAMG,MAAM,GAAGC,GAAG,IAAIA,GAAG,YAAYf,KAAK,CAACgB,OAArB,GAA+BD,GAAG,CAACF,OAAJ,EAA/B,GAA+CE,GAArE;;AAEA,MAAME,QAAQ,GAAG,aAAahB,KAAK,CAACiB,UAAN,CAAiB,CAACC,KAAD,EAAQC,YAAR,KAAyB;AACtE,QAAM;AACJC,IAAAA,KAAK,GAAG,IADJ;AAEJC,IAAAA,SAAS,GAAG,GAFR;AAGJC,IAAAA,QAHI;AAIJ,OAAGC;AAJC,MAKFL,KALJ;AAMA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BzB,KAAK,CAAC0B,QAAN,CAAe,EAAf,CAAhC;AACA,QAAM,CAACC,IAAD,IAAS3B,KAAK,CAAC0B,QAAN,CAAe,MAAM,IAAItB,KAAJ,EAArB,CAAf;AACA,QAAM,CAACwB,QAAD,IAAa5B,KAAK,CAAC0B,QAAN,CAAe,MAAM,IAAIrB,YAAJ,EAArB,CAAnB;AACA,QAAM,CAACwB,QAAD,IAAa7B,KAAK,CAAC0B,QAAN,CAAe,MAAM,IAAIpB,oBAAJ,EAArB,CAAnB;AACA,QAAM,CAACwB,UAAD,IAAe9B,KAAK,CAAC0B,QAAN,CAAe,MAAM,IAAI3B,KAAK,CAACgC,OAAV,CAAkB,GAAlB,EAAuB,GAAvB,CAArB,CAArB;AACA,QAAM,CAACC,SAAD,IAAchC,KAAK,CAAC0B,QAAN,CAAe,MAAMO,KAAK,CAACb,KAAK,GAAG,CAAT,CAAL,CAAiBc,IAAjB,CAAsB,CAAtB,CAArB,CAApB;AACA,QAAM,CAACC,MAAD,IAAWnC,KAAK,CAAC0B,QAAN,CAAe,MAAMO,KAAK,CAACb,KAAK,GAAG,CAAT,CAAL,CAAiBc,IAAjB,CAAsB,CAAtB,CAArB,CAAjB;AACA,QAAME,GAAG,GAAGpC,KAAK,CAACqC,OAAN,CAAc,OAAO;AAC/BC,IAAAA,SAAS,EAAEC,GAAG,IAAI;AAChBd,MAAAA,WAAW,CAACD,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAce,GAAd,CAAb,CAAX;AACA,aAAO,MAAMd,WAAW,CAACD,QAAQ,IAAIA,QAAQ,CAACgB,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACC,OAAL,KAAiBH,GAAG,CAACG,OAA7C,CAAb,CAAxB;AACD;AAJ8B,GAAP,CAAd,EAKR,EALQ,CAAZ;AAMAxC,EAAAA,QAAQ,CAAC,MAAM;AACb,SAAK,IAAIyC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,KAApB,EAA2BuB,CAAC,EAA5B,EAAgC;AAC9B,UAAIC,WAAJ;;AAEA,YAAMC,OAAO,GAAG,CAACD,WAAW,GAAGpB,QAAQ,CAACmB,CAAD,CAAvB,KAA+B,IAA/B,GAAsC,KAAK,CAA3C,GAA+CC,WAAW,CAACF,OAA3E;AACA,YAAMI,YAAY,GAAGD,OAAO,GAAGhC,MAAM,CAACgC,OAAO,CAACE,KAAT,CAAT,GAA2B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvD;AACA,YAAMC,UAAU,GAAGH,OAAO,GAAGhC,MAAM,CAACgC,OAAO,CAACI,GAAT,CAAT,GAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnD;AACA,YAAMC,YAAY,GAAGL,OAAO,GAAGpC,QAAQ,CAACoC,OAAO,CAACnC,KAAT,CAAX,GAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzD,CAN8B,CAMsC;;AAEpE,WAAK,IAAIyC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BnB,QAAAA,SAAS,CAACW,CAAC,GAAG,CAAJ,GAAQQ,CAAT,CAAT,GAAuBL,YAAY,CAACK,CAAD,CAAnC;AACAnB,QAAAA,SAAS,CAACW,CAAC,GAAG,CAAJ,GAAQQ,CAAR,GAAY,CAAb,CAAT,GAA2BH,UAAU,CAACG,CAAD,CAArC;AACAhB,QAAAA,MAAM,CAACQ,CAAC,GAAG,CAAJ,GAAQQ,CAAT,CAAN,GAAoBD,YAAY,CAACC,CAAD,CAAhC;AACAhB,QAAAA,MAAM,CAACQ,CAAC,GAAG,CAAJ,GAAQQ,CAAR,GAAY,CAAb,CAAN,GAAwBD,YAAY,CAACC,CAAD,CAApC;AACD;AACF;;AAEDtB,IAAAA,QAAQ,CAACuB,SAAT,CAAmBjB,MAAnB;AACAN,IAAAA,QAAQ,CAACwB,YAAT,CAAsBrB,SAAtB;AACAL,IAAAA,IAAI,CAAC2B,oBAAL;AACD,GApBO,CAAR;AAqBA,SAAO,aAAatD,KAAK,CAACuD,aAAN,CAAoB,WAApB,EAAiC;AACnDC,IAAAA,MAAM,EAAE7B,IAD2C;AAEnDY,IAAAA,GAAG,EAAEpB;AAF8C,GAAjC,EAGjB,aAAanB,KAAK,CAACuD,aAAN,CAAoB,WAApB,EAAiC;AAC/CC,IAAAA,MAAM,EAAE3B,QADuC;AAE/C4B,IAAAA,MAAM,EAAE;AAFuC,GAAjC,CAHI,EAMhB,aAAazD,KAAK,CAACuD,aAAN,CAAoB,WAApB,EAAiCzD,QAAQ,CAAC;AACzD0D,IAAAA,MAAM,EAAE5B,QADiD;AAEzD6B,IAAAA,MAAM,EAAE,UAFiD;AAGzDC,IAAAA,YAAY,EAAE,IAH2C;AAIzD5B,IAAAA,UAAU,EAAEA,UAJ6C;AAKzD6B,IAAAA,SAAS,EAAEtC;AAL8C,GAAD,EAMvDE,IANuD,CAAzC,CANG,EAYT,aAAavB,KAAK,CAACuD,aAAN,CAAoBhD,OAAO,CAACqD,QAA5B,EAAsC;AAC5DC,IAAAA,KAAK,EAAEzB;AADqD,GAAtC,EAErBd,QAFqB,CAZJ,CAApB;AAeD,CAxD6B,CAA9B;;AA0DA,MAAMwC,aAAN,CAAoB;AAClBC,EAAAA,WAAW,GAAG;AACZ,SAAKrD,KAAL,GAAa,IAAIX,KAAK,CAACY,KAAV,CAAgB,OAAhB,CAAb;AACA,SAAKoC,KAAL,GAAa,IAAIhD,KAAK,CAACgB,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAb;AACA,SAAKkC,GAAL,GAAW,IAAIlD,KAAK,CAACgB,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAX;AACD;;AALiB;;AASpB,MAAMiD,OAAO,GAAG,aAAahE,KAAK,CAACiB,UAAN,CAAiB,CAACC,KAAD,EAAQC,YAAR,KAAyB;AACrE,QAAMiB,GAAG,GAAGpC,KAAK,CAACiE,UAAN,CAAiB1D,OAAjB,CAAZ;AACA,MAAI,CAAC6B,GAAL,EAAU,MAAM,8CAAN;AACV,QAAMG,GAAG,GAAGvC,KAAK,CAACkE,MAAN,EAAZ;AACAlE,EAAAA,KAAK,CAACqC,OAAN,CAAc,MAAMlC,MAAM,CAAC;AACzB2D,IAAAA;AADyB,GAAD,CAA1B,EAEI,EAFJ;AAGA9D,EAAAA,KAAK,CAACmE,eAAN,CAAsB,MAAM/B,GAAG,CAACE,SAAJ,CAAcC,GAAd,CAA5B,EAAgD,EAAhD;AACA,SAAO,aAAavC,KAAK,CAACuD,aAAN,CAAoB,eAApB,EAAqCzD,QAAQ,CAAC;AAChEyC,IAAAA,GAAG,EAAEtC,SAAS,CAAC,CAACsC,GAAD,EAAMpB,YAAN,CAAD;AADkD,GAAD,EAE9DD,KAF8D,CAA7C,CAApB;AAGD,CAX4B,CAA7B;AAaA,SAAS8C,OAAT,EAAkBhD,QAAlB","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { useFrame, extend } from '@react-three/fiber';\nimport { Line2, LineMaterial, LineSegmentsGeometry } from 'three-stdlib';\n\nconst context = /*#__PURE__*/React.createContext(null);\n\nconst arrColor = color => color instanceof THREE.Color ? color.toArray() : color;\n\nconst arrPos = pos => pos instanceof THREE.Vector3 ? pos.toArray() : pos;\n\nconst Segments = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  const {\n    limit = 1000,\n    lineWidth = 1.0,\n    children,\n    ...rest\n  } = props;\n  const [segments, setSegments] = React.useState([]);\n  const [line] = React.useState(() => new Line2());\n  const [material] = React.useState(() => new LineMaterial());\n  const [geometry] = React.useState(() => new LineSegmentsGeometry());\n  const [resolution] = React.useState(() => new THREE.Vector2(512, 512));\n  const [positions] = React.useState(() => Array(limit * 6).fill(0));\n  const [colors] = React.useState(() => Array(limit * 6).fill(0));\n  const api = React.useMemo(() => ({\n    subscribe: ref => {\n      setSegments(segments => [...segments, ref]);\n      return () => setSegments(segments => segments.filter(item => item.current !== ref.current));\n    }\n  }), []);\n  useFrame(() => {\n    for (let i = 0; i < limit; i++) {\n      var _segments$i;\n\n      const segment = (_segments$i = segments[i]) == null ? void 0 : _segments$i.current;\n      const segmentStart = segment ? arrPos(segment.start) : [0, 0, 0];\n      const segmentEnd = segment ? arrPos(segment.end) : [0, 0, 0];\n      const segmentColor = segment ? arrColor(segment.color) : [1, 1, 1]; //console.log(segmentStart, segmentEnd, segmentColor)\n\n      for (var j = 0; j < 3; j++) {\n        positions[i * 6 + j] = segmentStart[j];\n        positions[i * 6 + j + 3] = segmentEnd[j];\n        colors[i * 6 + j] = segmentColor[j];\n        colors[i * 6 + j + 3] = segmentColor[j];\n      }\n    }\n\n    geometry.setColors(colors);\n    geometry.setPositions(positions);\n    line.computeLineDistances();\n  });\n  return /*#__PURE__*/React.createElement(\"primitive\", {\n    object: line,\n    ref: forwardedRef\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: geometry,\n    attach: \"geometry\"\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: material,\n    attach: \"material\",\n    vertexColors: true,\n    resolution: resolution,\n    linewidth: lineWidth\n  }, rest)), /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n});\n\nclass SegmentObject {\n  constructor() {\n    this.color = new THREE.Color('white');\n    this.start = new THREE.Vector3(0, 0, 0);\n    this.end = new THREE.Vector3(0, 0, 0);\n  }\n\n}\n\nconst Segment = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  const api = React.useContext(context);\n  if (!api) throw 'Segment must used inside Segments component.';\n  const ref = React.useRef();\n  React.useMemo(() => extend({\n    SegmentObject\n  }), []);\n  React.useLayoutEffect(() => api.subscribe(ref), []);\n  return /*#__PURE__*/React.createElement(\"segmentObject\", _extends({\n    ref: mergeRefs([ref, forwardedRef])\n  }, props));\n});\n\nexport { Segment, Segments };\n"]},"metadata":{},"sourceType":"module"}