{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { errors } from 'ethers';\n\nvar isDroppedAndReplaced = function isDroppedAndReplaced(e) {\n  return (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\n};\n\nexport function usePromiseTransaction(chainId, options) {\n  var _useState = useState({\n    status: 'None'\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useTransactionsConte = useTransactionsContext(),\n      addTransaction = _useTransactionsConte.addTransaction;\n\n  var _useNotificationsCont = useNotificationsContext(),\n      addNotification = _useNotificationsCont.addNotification;\n\n  var promiseTransaction = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(transactionPromise) {\n      var _a, _b, _c, _d, _e, _f, transaction, receipt, errorMessage, droppedAndReplaced, status, type;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (chainId) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              transaction = undefined;\n              _context.prev = 3;\n              _context.next = 6;\n              return transactionPromise;\n\n            case 6:\n              transaction = _context.sent;\n              setState({\n                transaction: transaction,\n                status: 'Mining',\n                chainId: chainId\n              });\n              addTransaction({\n                transaction: Object.assign(Object.assign({}, transaction), {\n                  chainId: chainId\n                }),\n                submittedAt: Date.now(),\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n              });\n              _context.next = 11;\n              return transaction.wait();\n\n            case 11:\n              receipt = _context.sent;\n              setState({\n                receipt: receipt,\n                transaction: transaction,\n                status: 'Success',\n                chainId: chainId\n              });\n              return _context.abrupt(\"return\", receipt);\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](3);\n              errorMessage = (_e = (_c = (_b = (_a = _context.t0.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : _context.t0.reason) !== null && _c !== void 0 ? _c : (_d = _context.t0.data) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : _context.t0.message;\n\n              if (transaction) {\n                droppedAndReplaced = isDroppedAndReplaced(_context.t0);\n\n                if (droppedAndReplaced) {\n                  status = _context.t0.receipt.status === 0 ? 'Fail' : 'Success';\n                  type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n                  addNotification({\n                    notification: {\n                      type: type,\n                      submittedAt: Date.now(),\n                      transaction: _context.t0.replacement,\n                      receipt: _context.t0.receipt,\n                      transactionName: (_f = _context.t0.replacement) === null || _f === void 0 ? void 0 : _f.transactionName,\n                      originalTransaction: transaction\n                    },\n                    chainId: chainId\n                  });\n                  setState({\n                    status: status,\n                    transaction: _context.t0.replacement,\n                    originalTransaction: transaction,\n                    receipt: _context.t0.receipt,\n                    errorMessage: errorMessage,\n                    chainId: chainId\n                  });\n                } else {\n                  setState({\n                    status: 'Fail',\n                    transaction: transaction,\n                    receipt: _context.t0.receipt,\n                    errorMessage: errorMessage,\n                    chainId: chainId\n                  });\n                }\n              } else {\n                setState({\n                  status: 'Exception',\n                  errorMessage: errorMessage,\n                  chainId: chainId\n                });\n              }\n\n              return _context.abrupt(\"return\", undefined);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 16]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [chainId, setState, addTransaction, options]);\n  return {\n    promiseTransaction: promiseTransaction,\n    state: state\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/usePromiseTransaction.ts"],"names":[],"mappings":";;;AACA,SAAS,WAAT,EAAsB,QAAtB,QAAsC,OAAtC;AACA,SAAS,uBAAT,EAAkC,sBAAlC,QAAgE,cAAhE;AAGA,SAAS,MAAT,QAAuB,QAAvB;;AAEA,IAAM,oBAAoB,GAAG,SAAvB,oBAAuB,CAAC,CAAD;AAAA,SAC3B,CAAA,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,IAAH,MAAY,MAAM,CAAC,oBAAnB,KAA2C,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,WAA9C,MAA8D,CAAA,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,MAAH,MAAc,UAAd,IAA4B,CAAA,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,SAAH,MAAiB,KAA3G,CAD2B;AAAA,CAA7B;;AAGA,OAAM,SAAU,qBAAV,CAAgC,OAAhC,EAA6D,OAA7D,EAAyF;AAC7F,kBAA0B,QAAQ,CAAoB;AAAE,IAAA,MAAM,EAAE;AAAV,GAApB,CAAlC;AAAA;AAAA,MAAO,KAAP;AAAA,MAAc,QAAd;;AACA,8BAA2B,sBAAsB,EAAjD;AAAA,MAAQ,cAAR,yBAAQ,cAAR;;AACA,8BAA4B,uBAAuB,EAAnD;AAAA,MAAQ,eAAR,yBAAQ,eAAR;;AAEA,MAAM,kBAAkB,GAAG,WAAW;AAAA,wEACpC,iBAAO,kBAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBACO,OADP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEM,cAAA,WAFN,GAEqD,SAFrD;AAAA;AAAA;AAAA,qBAIwB,kBAJxB;;AAAA;AAII,cAAA,WAJJ;AAMI,cAAA,QAAQ,CAAC;AAAE,gBAAA,WAAW,EAAX,WAAF;AAAe,gBAAA,MAAM,EAAE,QAAvB;AAAiC,gBAAA,OAAO,EAAP;AAAjC,eAAD,CAAR;AACA,cAAA,cAAc,CAAC;AACb,gBAAA,WAAW,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACN,WADM,CAAA,EACK;AACd,kBAAA,OAAO,EAAE;AADK,iBADL,CADE;AAKb,gBAAA,WAAW,EAAE,IAAI,CAAC,GAAL,EALA;AAMb,gBAAA,eAAe,EAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE;AANb,eAAD,CAAd;AAPJ;AAAA,qBAe0B,WAAW,CAAC,IAAZ,EAf1B;;AAAA;AAeU,cAAA,OAfV;AAgBI,cAAA,QAAQ,CAAC;AAAE,gBAAA,OAAO,EAAP,OAAF;AAAW,gBAAA,WAAW,EAAX,WAAX;AAAwB,gBAAA,MAAM,EAAE,SAAhC;AAA2C,gBAAA,OAAO,EAAP;AAA3C,eAAD,CAAR;AAhBJ,+CAiBW,OAjBX;;AAAA;AAAA;AAAA;AAmBU,cAAA,YAnBV,GAmBsB,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAG,YAAE,KAAL,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,OAAZ,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,EAAnB,GAAuB,YAAE,MAAzB,MAA+B,IAA/B,IAA+B,EAAA,KAAA,KAAA,CAA/B,GAA+B,EAA/B,GAA+B,CAAA,EAAA,GAAI,YAAE,IAAN,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,OAA3C,MAAkD,IAAlD,IAAkD,EAAA,KAAA,KAAA,CAAlD,GAAkD,EAAlD,GAAsD,YAAE,OAnB9E;;AAoBI,kBAAI,WAAJ,EAAiB;AACT,gBAAA,kBADS,GACY,oBAAoB,aADhC;;AAGf,oBAAI,kBAAJ,EAAwB;AAChB,kBAAA,MADgB,GACW,YAAE,OAAF,CAAU,MAAV,KAAqB,CAArB,GAAyB,MAAzB,GAAkC,SAD7C;AAEhB,kBAAA,IAFgB,GAET,MAAM,KAAK,MAAX,GAAoB,mBAApB,GAA0C,oBAFjC;AAItB,kBAAA,eAAe,CAAC;AACd,oBAAA,YAAY,EAAE;AACZ,sBAAA,IAAI,EAAJ,IADY;AAEZ,sBAAA,WAAW,EAAE,IAAI,CAAC,GAAL,EAFD;AAGZ,sBAAA,WAAW,EAAE,YAAE,WAHH;AAIZ,sBAAA,OAAO,EAAE,YAAE,OAJC;AAKZ,sBAAA,eAAe,EAAA,CAAA,EAAA,GAAE,YAAE,WAAJ,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAe,EAAA,CAAE,eALpB;AAMZ,sBAAA,mBAAmB,EAAE;AANT,qBADA;AASd,oBAAA,OAAO,EAAP;AATc,mBAAD,CAAf;AAYA,kBAAA,QAAQ,CAAC;AACP,oBAAA,MAAM,EAAN,MADO;AAEP,oBAAA,WAAW,EAAE,YAAE,WAFR;AAGP,oBAAA,mBAAmB,EAAE,WAHd;AAIP,oBAAA,OAAO,EAAE,YAAE,OAJJ;AAKP,oBAAA,YAAY,EAAZ,YALO;AAMP,oBAAA,OAAO,EAAP;AANO,mBAAD,CAAR;AAQD,iBAxBD,MAwBO;AACL,kBAAA,QAAQ,CAAC;AAAE,oBAAA,MAAM,EAAE,MAAV;AAAkB,oBAAA,WAAW,EAAX,WAAlB;AAA+B,oBAAA,OAAO,EAAE,YAAE,OAA1C;AAAmD,oBAAA,YAAY,EAAZ,YAAnD;AAAiE,oBAAA,OAAO,EAAP;AAAjE,mBAAD,CAAR;AACD;AACF,eA9BD,MA8BO;AACL,gBAAA,QAAQ,CAAC;AAAE,kBAAA,MAAM,EAAE,WAAV;AAAuB,kBAAA,YAAY,EAAZ,YAAvB;AAAqC,kBAAA,OAAO,EAAP;AAArC,iBAAD,CAAR;AACD;;AApDL,+CAqDW,SArDX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADoC;;AAAA;AAAA;AAAA;AAAA,OAyDpC,CAAC,OAAD,EAAU,QAAV,EAAoB,cAApB,EAAoC,OAApC,CAzDoC,CAAtC;AA4DA,SAAO;AAAE,IAAA,kBAAkB,EAAlB,kBAAF;AAAsB,IAAA,KAAK,EAAL;AAAtB,GAAP;AACD","sourceRoot":"","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { errors } from 'ethers';\nconst isDroppedAndReplaced = (e) => (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\nexport function usePromiseTransaction(chainId, options) {\n    const [state, setState] = useState({ status: 'None' });\n    const { addTransaction } = useTransactionsContext();\n    const { addNotification } = useNotificationsContext();\n    const promiseTransaction = useCallback(async (transactionPromise) => {\n        var _a, _b, _c, _d, _e, _f;\n        if (!chainId)\n            return;\n        let transaction = undefined;\n        try {\n            transaction = await transactionPromise;\n            setState({ transaction, status: 'Mining', chainId });\n            addTransaction({\n                transaction: Object.assign(Object.assign({}, transaction), { chainId: chainId }),\n                submittedAt: Date.now(),\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n            });\n            const receipt = await transaction.wait();\n            setState({ receipt, transaction, status: 'Success', chainId });\n            return receipt;\n        }\n        catch (e) {\n            const errorMessage = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : e.reason) !== null && _c !== void 0 ? _c : (_d = e.data) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : e.message;\n            if (transaction) {\n                const droppedAndReplaced = isDroppedAndReplaced(e);\n                if (droppedAndReplaced) {\n                    const status = e.receipt.status === 0 ? 'Fail' : 'Success';\n                    const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n                    addNotification({\n                        notification: {\n                            type,\n                            submittedAt: Date.now(),\n                            transaction: e.replacement,\n                            receipt: e.receipt,\n                            transactionName: (_f = e.replacement) === null || _f === void 0 ? void 0 : _f.transactionName,\n                            originalTransaction: transaction,\n                        },\n                        chainId,\n                    });\n                    setState({\n                        status,\n                        transaction: e.replacement,\n                        originalTransaction: transaction,\n                        receipt: e.receipt,\n                        errorMessage,\n                        chainId,\n                    });\n                }\n                else {\n                    setState({ status: 'Fail', transaction, receipt: e.receipt, errorMessage, chainId });\n                }\n            }\n            else {\n                setState({ status: 'Exception', errorMessage, chainId });\n            }\n            return undefined;\n        }\n    }, [chainId, setState, addTransaction, options]);\n    return { promiseTransaction, state };\n}\n//# sourceMappingURL=usePromiseTransaction.js.map"]},"metadata":{},"sourceType":"module"}