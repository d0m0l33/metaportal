{"ast":null,"code":"import { Loader, FileLoader, NumberKeyframeTrack, AnimationClip, BufferAttribute } from 'three';\n/**\n * MDD is a special format that stores a position for every vertex in a model for every frame in an animation.\n * Similar to BVH, it can be used to transfer animation data between different 3D applications or engines.\n *\n * MDD stores its data in binary format (big endian) in the following way:\n *\n * number of frames (a single uint32)\n * number of vertices (a single uint32)\n * time values for each frame (sequence of float32)\n * vertex data for each frame (sequence of float32)\n */\n\nclass MDDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (data) {\n      onLoad(scope.parse(data));\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    const view = new DataView(data);\n    const totalFrames = view.getUint32(0);\n    const totalPoints = view.getUint32(4);\n    let offset = 8; // animation clip\n\n    const times = new Float32Array(totalFrames);\n    const values = new Float32Array(totalFrames * totalFrames).fill(0);\n\n    for (let i = 0; i < totalFrames; i++) {\n      times[i] = view.getFloat32(offset);\n      offset += 4;\n      values[totalFrames * i + i] = 1;\n    }\n\n    const track = new NumberKeyframeTrack('.morphTargetInfluences', times, values);\n    const clip = new AnimationClip('default', times[times.length - 1], [track]); // morph targets\n\n    const morphTargets = [];\n\n    for (let i = 0; i < totalFrames; i++) {\n      const morphTarget = new Float32Array(totalPoints * 3);\n\n      for (let j = 0; j < totalPoints; j++) {\n        const stride = j * 3;\n        morphTarget[stride + 0] = view.getFloat32(offset);\n        offset += 4; // x\n\n        morphTarget[stride + 1] = view.getFloat32(offset);\n        offset += 4; // y\n\n        morphTarget[stride + 2] = view.getFloat32(offset);\n        offset += 4; // z\n      }\n\n      const attribute = new BufferAttribute(morphTarget, 3);\n      attribute.name = 'morph_' + i;\n      morphTargets.push(attribute);\n    }\n\n    return {\n      morphTargets: morphTargets,\n      clip: clip\n    };\n  }\n\n}\n\nexport { MDDLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/three-stdlib/loaders/MDDLoader.js"],"names":["Loader","FileLoader","NumberKeyframeTrack","AnimationClip","BufferAttribute","MDDLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","data","parse","view","DataView","totalFrames","getUint32","totalPoints","offset","times","Float32Array","values","fill","i","getFloat32","track","clip","length","morphTargets","morphTarget","j","stride","attribute","name","push"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, NumberKeyframeTrack, AnimationClip, BufferAttribute } from 'three';\n\n/**\n * MDD is a special format that stores a position for every vertex in a model for every frame in an animation.\n * Similar to BVH, it can be used to transfer animation data between different 3D applications or engines.\n *\n * MDD stores its data in binary format (big endian) in the following way:\n *\n * number of frames (a single uint32)\n * number of vertices (a single uint32)\n * time values for each frame (sequence of float32)\n * vertex data for each frame (sequence of float32)\n */\n\nclass MDDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (data) {\n      onLoad(scope.parse(data));\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    const view = new DataView(data);\n    const totalFrames = view.getUint32(0);\n    const totalPoints = view.getUint32(4);\n    let offset = 8; // animation clip\n\n    const times = new Float32Array(totalFrames);\n    const values = new Float32Array(totalFrames * totalFrames).fill(0);\n\n    for (let i = 0; i < totalFrames; i++) {\n      times[i] = view.getFloat32(offset);\n      offset += 4;\n      values[totalFrames * i + i] = 1;\n    }\n\n    const track = new NumberKeyframeTrack('.morphTargetInfluences', times, values);\n    const clip = new AnimationClip('default', times[times.length - 1], [track]); // morph targets\n\n    const morphTargets = [];\n\n    for (let i = 0; i < totalFrames; i++) {\n      const morphTarget = new Float32Array(totalPoints * 3);\n\n      for (let j = 0; j < totalPoints; j++) {\n        const stride = j * 3;\n        morphTarget[stride + 0] = view.getFloat32(offset);\n        offset += 4; // x\n\n        morphTarget[stride + 1] = view.getFloat32(offset);\n        offset += 4; // y\n\n        morphTarget[stride + 2] = view.getFloat32(offset);\n        offset += 4; // z\n      }\n\n      const attribute = new BufferAttribute(morphTarget, 3);\n      attribute.name = 'morph_' + i;\n      morphTargets.push(attribute);\n    }\n\n    return {\n      morphTargets: morphTargets,\n      clip: clip\n    };\n  }\n\n}\n\nexport { MDDLoader };\n"]},"metadata":{},"sourceType":"module"}