{"ast":null,"code":"import { FBXLoader } from '../loaders/FBXLoader.js';\n\nclass XRHandOculusMeshModel {\n  constructor(handModel, controller, path, handedness, options) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new FBXLoader();\n    const low = options && options.model === 'lowpoly' ? '_low' : '';\n    loader.setPath(path);\n    loader.load(`OculusHand_${handedness === 'right' ? 'R' : 'L'}${low}.fbx`, object => {\n      this.handModel.add(object); // Hack because of the scale of the skinnedmesh\n\n      object.scale.setScalar(0.01);\n      const mesh = object.getObjectByProperty('type', 'SkinnedMesh');\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      const bonesMapping = ['b_%_wrist', // XRHand.WRIST,\n      'b_%_thumb1', // XRHand.THUMB_METACARPAL,\n      'b_%_thumb2', // XRHand.THUMB_PHALANX_PROXIMAL,\n      'b_%_thumb3', // XRHand.THUMB_PHALANX_DISTAL,\n      'b_%_thumb_null', // XRHand.THUMB_PHALANX_TIP,\n      null, //'b_%_index1', // XRHand.INDEX_METACARPAL,\n      'b_%_index1', // XRHand.INDEX_PHALANX_PROXIMAL,\n      'b_%_index2', // XRHand.INDEX_PHALANX_INTERMEDIATE,\n      'b_%_index3', // XRHand.INDEX_PHALANX_DISTAL,\n      'b_%_index_null', // XRHand.INDEX_PHALANX_TIP,\n      null, //'b_%_middle1', // XRHand.MIDDLE_METACARPAL,\n      'b_%_middle1', // XRHand.MIDDLE_PHALANX_PROXIMAL,\n      'b_%_middle2', // XRHand.MIDDLE_PHALANX_INTERMEDIATE,\n      'b_%_middle3', // XRHand.MIDDLE_PHALANX_DISTAL,\n      'b_%_middlenull', // XRHand.MIDDLE_PHALANX_TIP,\n      null, //'b_%_ring1', // XRHand.RING_METACARPAL,\n      'b_%_ring1', // XRHand.RING_PHALANX_PROXIMAL,\n      'b_%_ring2', // XRHand.RING_PHALANX_INTERMEDIATE,\n      'b_%_ring3', // XRHand.RING_PHALANX_DISTAL,\n      'b_%_ring_inull', // XRHand.RING_PHALANX_TIP,\n      'b_%_pinky0', // XRHand.LITTLE_METACARPAL,\n      'b_%_pinky1', // XRHand.LITTLE_PHALANX_PROXIMAL,\n      'b_%_pinky2', // XRHand.LITTLE_PHALANX_INTERMEDIATE,\n      'b_%_pinky3', // XRHand.LITTLE_PHALANX_DISTAL,\n      'b_%_pinkynull' // XRHand.LITTLE_PHALANX_TIP\n      ];\n      const joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n      let i = 0;\n      bonesMapping.forEach(boneName => {\n        if (boneName) {\n          const bone = object.getObjectByName(boneName.replace(/%/g, handedness === 'right' ? 'r' : 'l'));\n\n          if (bone !== undefined) {\n            bone.jointName = joints[i];\n          }\n\n          this.bones.push(bone);\n        } else {\n          this.bones.push(null);\n        }\n\n        i++;\n      });\n    });\n  }\n\n  updateMesh() {\n    // XR Joints\n    const XRJoints = this.controller.joints;\n\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n\n          if (bone) {\n            bone.position.copy(position.clone().multiplyScalar(100));\n            bone.quaternion.copy(XRJoint.quaternion); // bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n          }\n        }\n      }\n    }\n  }\n\n}\n\nexport { XRHandOculusMeshModel };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/webxr/XRHandOculusMeshModel.js"],"names":["FBXLoader","XRHandOculusMeshModel","constructor","handModel","controller","path","handedness","options","bones","loader","low","model","setPath","load","object","add","scale","setScalar","mesh","getObjectByProperty","frustumCulled","castShadow","receiveShadow","bonesMapping","joints","i","forEach","boneName","bone","getObjectByName","replace","undefined","jointName","push","updateMesh","XRJoints","length","XRJoint","visible","position","copy","clone","multiplyScalar","quaternion"],"mappings":"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","sourcesContent":["import { FBXLoader } from '../loaders/FBXLoader.js';\n\nclass XRHandOculusMeshModel {\n  constructor(handModel, controller, path, handedness, options) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new FBXLoader();\n    const low = options && options.model === 'lowpoly' ? '_low' : '';\n    loader.setPath(path);\n    loader.load(`OculusHand_${handedness === 'right' ? 'R' : 'L'}${low}.fbx`, object => {\n      this.handModel.add(object); // Hack because of the scale of the skinnedmesh\n\n      object.scale.setScalar(0.01);\n      const mesh = object.getObjectByProperty('type', 'SkinnedMesh');\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      const bonesMapping = ['b_%_wrist', // XRHand.WRIST,\n      'b_%_thumb1', // XRHand.THUMB_METACARPAL,\n      'b_%_thumb2', // XRHand.THUMB_PHALANX_PROXIMAL,\n      'b_%_thumb3', // XRHand.THUMB_PHALANX_DISTAL,\n      'b_%_thumb_null', // XRHand.THUMB_PHALANX_TIP,\n      null, //'b_%_index1', // XRHand.INDEX_METACARPAL,\n      'b_%_index1', // XRHand.INDEX_PHALANX_PROXIMAL,\n      'b_%_index2', // XRHand.INDEX_PHALANX_INTERMEDIATE,\n      'b_%_index3', // XRHand.INDEX_PHALANX_DISTAL,\n      'b_%_index_null', // XRHand.INDEX_PHALANX_TIP,\n      null, //'b_%_middle1', // XRHand.MIDDLE_METACARPAL,\n      'b_%_middle1', // XRHand.MIDDLE_PHALANX_PROXIMAL,\n      'b_%_middle2', // XRHand.MIDDLE_PHALANX_INTERMEDIATE,\n      'b_%_middle3', // XRHand.MIDDLE_PHALANX_DISTAL,\n      'b_%_middlenull', // XRHand.MIDDLE_PHALANX_TIP,\n      null, //'b_%_ring1', // XRHand.RING_METACARPAL,\n      'b_%_ring1', // XRHand.RING_PHALANX_PROXIMAL,\n      'b_%_ring2', // XRHand.RING_PHALANX_INTERMEDIATE,\n      'b_%_ring3', // XRHand.RING_PHALANX_DISTAL,\n      'b_%_ring_inull', // XRHand.RING_PHALANX_TIP,\n      'b_%_pinky0', // XRHand.LITTLE_METACARPAL,\n      'b_%_pinky1', // XRHand.LITTLE_PHALANX_PROXIMAL,\n      'b_%_pinky2', // XRHand.LITTLE_PHALANX_INTERMEDIATE,\n      'b_%_pinky3', // XRHand.LITTLE_PHALANX_DISTAL,\n      'b_%_pinkynull' // XRHand.LITTLE_PHALANX_TIP\n      ];\n      const joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n      let i = 0;\n      bonesMapping.forEach(boneName => {\n        if (boneName) {\n          const bone = object.getObjectByName(boneName.replace(/%/g, handedness === 'right' ? 'r' : 'l'));\n\n          if (bone !== undefined) {\n            bone.jointName = joints[i];\n          }\n\n          this.bones.push(bone);\n        } else {\n          this.bones.push(null);\n        }\n\n        i++;\n      });\n    });\n  }\n\n  updateMesh() {\n    // XR Joints\n    const XRJoints = this.controller.joints;\n\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n\n          if (bone) {\n            bone.position.copy(position.clone().multiplyScalar(100));\n            bone.quaternion.copy(XRJoint.quaternion); // bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n          }\n        }\n      }\n    }\n  }\n\n}\n\nexport { XRHandOculusMeshModel };\n"]},"metadata":{},"sourceType":"module"}