{"ast":null,"code":"import { Loader, FileLoader, Group, Mesh, BufferGeometry, Vector3, Quaternion, BufferAttribute, MeshBasicMaterial, DoubleSide, RawShaderMaterial, TextureLoader } from 'three';\nimport { unzipSync, strFromU8 } from 'fflate';\n\nclass TiltLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(buffer) {\n    const group = new Group(); // https://docs.google.com/document/d/11ZsHozYn9FnWG7y3s3WAyKIACfbfwb4PbaS8cZ_xjvo/edit#\n\n    const zip = unzipSync(new Uint8Array(buffer.slice(16)));\n    /*\n    const thumbnail = zip[ 'thumbnail.png' ].buffer;\n    const img = document.createElement( 'img' );\n    img.src = URL.createObjectURL( new Blob( [ thumbnail ] ) );\n    document.body.appendChild( img );\n    */\n\n    const metadata = JSON.parse(strFromU8(zip['metadata.json']));\n    /*\n    const blob = new Blob( [ zip[ 'data.sketch' ].buffer ], { type: 'application/octet-stream' } );\n    window.open( URL.createObjectURL( blob ) );\n    */\n\n    const data = new DataView(zip['data.sketch'].buffer);\n    const num_strokes = data.getInt32(16, true);\n    const brushes = {};\n    let offset = 20;\n\n    for (let i = 0; i < num_strokes; i++) {\n      const brush_index = data.getInt32(offset, true);\n      const brush_color = [data.getFloat32(offset + 4, true), data.getFloat32(offset + 8, true), data.getFloat32(offset + 12, true), data.getFloat32(offset + 16, true)];\n      const brush_size = data.getFloat32(offset + 20, true);\n      const stroke_mask = data.getUint32(offset + 24, true);\n      const controlpoint_mask = data.getUint32(offset + 28, true);\n      let offset_stroke_mask = 0;\n      let offset_controlpoint_mask = 0;\n\n      for (let j = 0; j < 4; j++) {\n        // TOFIX: I don't understand these masks yet\n        const byte = 1 << j;\n        if ((stroke_mask & byte) > 0) offset_stroke_mask += 4;\n        if ((controlpoint_mask & byte) > 0) offset_controlpoint_mask += 4;\n      } // console.log( { brush_index, brush_color, brush_size, stroke_mask, controlpoint_mask } );\n      // console.log( offset_stroke_mask, offset_controlpoint_mask );\n\n\n      offset = offset + 28 + offset_stroke_mask + 4; // TOFIX: This is wrong\n\n      const num_control_points = data.getInt32(offset, true); // console.log( { num_control_points } );\n\n      const positions = new Float32Array(num_control_points * 3);\n      const quaternions = new Float32Array(num_control_points * 4);\n      offset = offset + 4;\n\n      for (let j = 0, k = 0; j < positions.length; j += 3, k += 4) {\n        positions[j + 0] = data.getFloat32(offset + 0, true);\n        positions[j + 1] = data.getFloat32(offset + 4, true);\n        positions[j + 2] = data.getFloat32(offset + 8, true);\n        quaternions[k + 0] = data.getFloat32(offset + 12, true);\n        quaternions[k + 1] = data.getFloat32(offset + 16, true);\n        quaternions[k + 2] = data.getFloat32(offset + 20, true);\n        quaternions[k + 3] = data.getFloat32(offset + 24, true);\n        offset = offset + 28 + offset_controlpoint_mask; // TOFIX: This is wrong\n      }\n\n      if (brush_index in brushes === false) {\n        brushes[brush_index] = [];\n      }\n\n      brushes[brush_index].push([positions, quaternions, brush_size, brush_color]);\n    }\n\n    for (const brush_index in brushes) {\n      const geometry = new StrokeGeometry(brushes[brush_index]);\n      const material = getMaterial(metadata.BrushIndex[brush_index]);\n      group.add(new Mesh(geometry, material));\n    }\n\n    return group;\n  }\n\n}\n\nclass StrokeGeometry extends BufferGeometry {\n  constructor(strokes) {\n    super();\n    const vertices = [];\n    const colors = [];\n    const uvs = [];\n    const position = new Vector3();\n    const prevPosition = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3(); // size = size / 2;\n\n    for (const k in strokes) {\n      const stroke = strokes[k];\n      const positions = stroke[0];\n      const quaternions = stroke[1];\n      const size = stroke[2];\n      const color = stroke[3];\n      prevPosition.fromArray(positions, 0);\n      prevQuaternion.fromArray(quaternions, 0);\n\n      for (let i = 3, j = 4, l = positions.length; i < l; i += 3, j += 4) {\n        position.fromArray(positions, i);\n        quaternion.fromArray(quaternions, j);\n        vector1.set(-size, 0, 0);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(position);\n        vector2.set(size, 0, 0);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(position);\n        vector3.set(size, 0, 0);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPosition);\n        vector4.set(-size, 0, 0);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPosition);\n        vertices.push(vector1.x, vector1.y, -vector1.z);\n        vertices.push(vector2.x, vector2.y, -vector2.z);\n        vertices.push(vector4.x, vector4.y, -vector4.z);\n        vertices.push(vector2.x, vector2.y, -vector2.z);\n        vertices.push(vector3.x, vector3.y, -vector3.z);\n        vertices.push(vector4.x, vector4.y, -vector4.z);\n        prevPosition.copy(position);\n        prevQuaternion.copy(quaternion);\n        colors.push(...color);\n        colors.push(...color);\n        colors.push(...color);\n        colors.push(...color);\n        colors.push(...color);\n        colors.push(...color);\n        const p1 = i / l;\n        const p2 = (i - 3) / l;\n        uvs.push(p1, 0);\n        uvs.push(p1, 1);\n        uvs.push(p2, 0);\n        uvs.push(p1, 1);\n        uvs.push(p2, 1);\n        uvs.push(p2, 0);\n      }\n    }\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 4));\n    this.setAttribute('uv', new BufferAttribute(new Float32Array(uvs), 2));\n  }\n\n}\n\nconst BRUSH_LIST_ARRAY = {\n  '89d104cd-d012-426b-b5b3-bbaee63ac43c': 'Bubbles',\n  '700f3aa8-9a7c-2384-8b8a-ea028905dd8c': 'CelVinyl',\n  '0f0ff7b2-a677-45eb-a7d6-0cd7206f4816': 'ChromaticWave',\n  '1161af82-50cf-47db-9706-0c3576d43c43': 'CoarseBristles',\n  '79168f10-6961-464a-8be1-57ed364c5600': 'CoarseBristlesSingleSided',\n  '1caa6d7d-f015-3f54-3a4b-8b5354d39f81': 'Comet',\n  'c8313697-2563-47fc-832e-290f4c04b901': 'DiamondHull',\n  '4391aaaa-df73-4396-9e33-31e4e4930b27': 'Disco',\n  'd1d991f2-e7a0-4cf1-b328-f57e915e6260': 'DotMarker',\n  '6a1cf9f9-032c-45ec-9b1d-a6680bee30f7': 'Dots',\n  '0d3889f3-3ede-470c-8af4-f44813306126': 'DoubleTaperedFlat',\n  '0d3889f3-3ede-470c-8af4-de4813306126': 'DoubleTaperedMarker',\n  'd0262945-853c-4481-9cbd-88586bed93cb': 'DuctTape',\n  '3ca16e2f-bdcd-4da2-8631-dcef342f40f1': 'DuctTapeSingleSided',\n  'f6e85de3-6dcc-4e7f-87fd-cee8c3d25d51': 'Electricity',\n  '02ffb866-7fb2-4d15-b761-1012cefb1360': 'Embers',\n  'cb92b597-94ca-4255-b017-0e3f42f12f9e': 'Fire',\n  '2d35bcf0-e4d8-452c-97b1-3311be063130': 'Flat',\n  '55303bc4-c749-4a72-98d9-d23e68e76e18': 'FlatDeprecated',\n  '280c0a7a-aad8-416c-a7d2-df63d129ca70': 'FlatSingleSided',\n  'cf019139-d41c-4eb0-a1d0-5cf54b0a42f3': 'Highlighter',\n  '6a1cf9f9-032c-45ec-9b6e-a6680bee32e9': 'HyperGrid',\n  'dce872c2-7b49-4684-b59b-c45387949c5c': 'Hypercolor',\n  'e8ef32b1-baa8-460a-9c2c-9cf8506794f5': 'HypercolorSingleSided',\n  '2f212815-f4d3-c1a4-681a-feeaf9c6dc37': 'Icing',\n  'f5c336cf-5108-4b40-ade9-c687504385ab': 'Ink',\n  'c0012095-3ffd-4040-8ee1-fc180d346eaa': 'InkSingleSided',\n  '4a76a27a-44d8-4bfe-9a8c-713749a499b0': 'Leaves',\n  'ea19de07-d0c0-4484-9198-18489a3c1487': 'LeavesSingleSided',\n  '2241cd32-8ba2-48a5-9ee7-2caef7e9ed62': 'Light',\n  '4391aaaa-df81-4396-9e33-31e4e4930b27': 'LightWire',\n  'd381e0f5-3def-4a0d-8853-31e9200bcbda': 'Lofted',\n  '429ed64a-4e97-4466-84d3-145a861ef684': 'Marker',\n  '79348357-432d-4746-8e29-0e25c112e3aa': 'MatteHull',\n  'b2ffef01-eaaa-4ab5-aa64-95a2c4f5dbc6': 'NeonPulse',\n  'f72ec0e7-a844-4e38-82e3-140c44772699': 'OilPaint',\n  'c515dad7-4393-4681-81ad-162ef052241b': 'OilPaintSingleSided',\n  'f1114e2e-eb8d-4fde-915a-6e653b54e9f5': 'Paper',\n  '759f1ebd-20cd-4720-8d41-234e0da63716': 'PaperSingleSided',\n  'e0abbc80-0f80-e854-4970-8924a0863dcc': 'Petal',\n  'c33714d1-b2f9-412e-bd50-1884c9d46336': 'Plasma',\n  'ad1ad437-76e2-450d-a23a-e17f8310b960': 'Rainbow',\n  'faaa4d44-fcfb-4177-96be-753ac0421ba3': 'ShinyHull',\n  '70d79cca-b159-4f35-990c-f02193947fe8': 'Smoke',\n  'd902ed8b-d0d1-476c-a8de-878a79e3a34c': 'Snow',\n  'accb32f5-4509-454f-93f8-1df3fd31df1b': 'SoftHighlighter',\n  'cf7f0059-7aeb-53a4-2b67-c83d863a9ffa': 'Spikes',\n  '8dc4a70c-d558-4efd-a5ed-d4e860f40dc3': 'Splatter',\n  '7a1c8107-50c5-4b70-9a39-421576d6617e': 'SplatterSingleSided',\n  '0eb4db27-3f82-408d-b5a1-19ebd7d5b711': 'Stars',\n  '44bb800a-fbc3-4592-8426-94ecb05ddec3': 'Streamers',\n  '0077f88c-d93a-42f3-b59b-b31c50cdb414': 'Taffy',\n  'b468c1fb-f254-41ed-8ec9-57030bc5660c': 'TaperedFlat',\n  'c8ccb53d-ae13-45ef-8afb-b730d81394eb': 'TaperedFlatSingleSided',\n  'd90c6ad8-af0f-4b54-b422-e0f92abe1b3c': 'TaperedMarker',\n  '1a26b8c0-8a07-4f8a-9fac-d2ef36e0cad0': 'TaperedMarker_Flat',\n  '75b32cf0-fdd6-4d89-a64b-e2a00b247b0f': 'ThickPaint',\n  'fdf0326a-c0d1-4fed-b101-9db0ff6d071f': 'ThickPaintSingleSided',\n  '4391385a-df73-4396-9e33-31e4e4930b27': 'Toon',\n  'a8fea537-da7c-4d4b-817f-24f074725d6d': 'UnlitHull',\n  'd229d335-c334-495a-a801-660ac8a87360': 'VelvetInk',\n  '10201aa3-ebc2-42d8-84b7-2e63f6eeb8ab': 'Waveform',\n  'b67c0e81-ce6d-40a8-aeb0-ef036b081aa3': 'WetPaint',\n  'dea67637-cd1a-27e4-c9b1-52f4bbcb84e5': 'WetPaintSingleSided',\n  '5347acf0-a8e2-47b6-8346-30c70719d763': 'WigglyGraphite',\n  'e814fef1-97fd-7194-4a2f-50c2bb918be2': 'WigglyGraphiteSingleSided',\n  '4391385a-cf83-4396-9e33-31e4e4930b27': 'Wire'\n};\nconst common = {\n  colors: {\n    BloomColor: `\n\t\t\tvec3 BloomColor(vec3 color, float gain) {\n\t\t\t\t// Guarantee that there's at least a little bit of all 3 channels.\n\t\t\t\t// This makes fully-saturated strokes (which only have 2 non-zero\n\t\t\t\t// color channels) eventually clip to white rather than to a secondary.\n\t\t\t\tfloat cmin = length(color.rgb) * .05;\n\t\t\t\tcolor.rgb = max(color.rgb, vec3(cmin, cmin, cmin));\n\t\t\t\t// If we try to remove this pow() from .a, it brightens up\n\t\t\t\t// pressure-sensitive strokes; looks better as-is.\n\t\t\t\tcolor = pow(color, vec3(2.2));\n\t\t\t\tcolor.rgb *= 2. * exp(gain * 10.);\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`,\n    LinearToSrgb: `\n\t\t\tvec3 LinearToSrgb(vec3 color) {\n\t\t\t\t// Approximation http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html\n\t\t\t\tvec3 linearColor = color.rgb;\n\t\t\t\tvec3 S1 = sqrt(linearColor);\n\t\t\t\tvec3 S2 = sqrt(S1);\n\t\t\t\tvec3 S3 = sqrt(S2);\n\t\t\t\tcolor.rgb = 0.662002687 * S1 + 0.684122060 * S2 - 0.323583601 * S3 - 0.0225411470 * linearColor;\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`,\n    hsv: `\n\t\t\t// uniform sampler2D lookupTex;\n\t\t\tvec4 lookup(vec4 textureColor) {\n\t\t\t\treturn textureColor;\n\t\t\t}\n\n\t\t\tvec3 lookup(vec3 textureColor) {\n\t\t\t\treturn textureColor;\n\t\t\t}\n\n\t\t\tvec3 hsv2rgb( vec3 hsv ) {\n\t\t\t\tvec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\t\t\t\treturn hsv.z * mix( vec3(1.0), rgb, hsv.y);\n\t\t\t}\n\n\t\t\tvec3 rgb2hsv( vec3 rgb ) {\n\t\t\t\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\t\t\t\tvec4 p = mix(vec4(rgb.bg, K.wz), vec4(rgb.gb, K.xy), step(rgb.b, rgb.g));\n\t\t\t\tvec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));\n\n\t\t\t\tfloat d = q.x - min(q.w, q.y);\n\t\t\t\tfloat e = 1.0e-10;\n\n\t\t\t\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n\t\t\t}\n\t\t`,\n    SrgbToLinear: `\n\t\t\tvec3 SrgbToLinear(vec3 color) {\n\t\t\t\t// Approximation http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html\n\t\t\t\tvec3 sRGB = color.rgb;\n\t\t\t\tcolor.rgb = sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`\n  }\n};\n\nconst shaders = () => ({\n  Light: {\n    uniforms: {\n      mainTex: {\n        value: new TextureLoader().setPath('./textures/tiltbrush/').loader.load('Light.webp')\n      },\n      alphaTest: {\n        value: 0.067\n      },\n      emission_gain: {\n        value: 0.45\n      },\n      alpha: {\n        value: 1\n      }\n    },\n    vertexShader: `\n\t\t\tprecision highp float;\n\t\t\tprecision highp int;\n\n\t\t\tattribute vec2 uv;\n\t\t\tattribute vec4 color;\n\t\t\tattribute vec3 position;\n\n\t\t\tuniform mat4 modelMatrix;\n\t\t\tuniform mat4 modelViewMatrix;\n\t\t\tuniform mat4 projectionMatrix;\n\t\t\tuniform mat4 viewMatrix;\n\t\t\tuniform mat3 normalMatrix;\n\t\t\tuniform vec3 cameraPosition;\n\n\t\t\tvarying vec2 vUv;\n\t\t\tvarying vec3 vColor;\n\n\t\t\t${common.colors.LinearToSrgb}\n\t\t\t${common.colors.hsv}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tvColor = lookup(color.rgb);\n\n\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t}\n\t\t`,\n    fragmentShader: `\n\t\t\tprecision highp float;\n\t\t\tprecision highp int;\n\n\t\t\tuniform float emission_gain;\n\n\t\t\tuniform sampler2D mainTex;\n\t\t\tuniform float alphaTest;\n\n\t\t\tvarying vec2 vUv;\n\t\t\tvarying vec3 vColor;\n\n\t\t\t${common.colors.BloomColor}\n\t\t\t${common.colors.SrgbToLinear}\n\n\t\t\tvoid main(){\n\t\t\t\tvec4 col = texture2D(mainTex, vUv);\n\t\t\t\tvec3 color = vColor;\n\t\t\t\tcolor = BloomColor(color, emission_gain);\n\t\t\t\tcolor = color * col.rgb;\n\t\t\t\tcolor = color * col.a;\n\t\t\t\tcolor = SrgbToLinear(color);\n\t\t\t\tgl_FragColor = vec4(color, 1.0);\n\t\t\t}\n\t\t`,\n    side: 2,\n    transparent: true,\n    depthFunc: 2,\n    depthWrite: true,\n    depthTest: false,\n    blending: 5,\n    blendDst: 201,\n    blendDstAlpha: 201,\n    blendEquation: 100,\n    blendEquationAlpha: 100,\n    blendSrc: 201,\n    blendSrcAlpha: 201\n  }\n});\n\nfunction getMaterial(GUID) {\n  const name = BRUSH_LIST_ARRAY[GUID];\n\n  switch (name) {\n    case 'Light':\n      return new RawShaderMaterial(shaders().Light);\n\n    default:\n      return new MeshBasicMaterial({\n        vertexColors: true,\n        side: DoubleSide\n      });\n  }\n}\n\nexport { TiltLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/TiltLoader.js"],"names":["Loader","FileLoader","Group","Mesh","BufferGeometry","Vector3","Quaternion","BufferAttribute","MeshBasicMaterial","DoubleSide","RawShaderMaterial","TextureLoader","unzipSync","strFromU8","TiltLoader","load","url","onLoad","onProgress","onError","scope","loader","manager","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","group","zip","Uint8Array","slice","metadata","JSON","data","DataView","num_strokes","getInt32","brushes","offset","i","brush_index","brush_color","getFloat32","brush_size","stroke_mask","getUint32","controlpoint_mask","offset_stroke_mask","offset_controlpoint_mask","j","byte","num_control_points","positions","Float32Array","quaternions","k","length","push","geometry","StrokeGeometry","material","getMaterial","BrushIndex","add","constructor","strokes","vertices","colors","uvs","position","prevPosition","quaternion","prevQuaternion","vector1","vector2","vector3","vector4","stroke","size","color","fromArray","l","set","applyQuaternion","x","y","z","copy","p1","p2","setAttribute","BRUSH_LIST_ARRAY","common","BloomColor","LinearToSrgb","hsv","SrgbToLinear","shaders","Light","uniforms","mainTex","value","alphaTest","emission_gain","alpha","vertexShader","fragmentShader","side","transparent","depthFunc","depthWrite","depthTest","blending","blendDst","blendDstAlpha","blendEquation","blendEquationAlpha","blendSrc","blendSrcAlpha","GUID","name","vertexColors"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, Group, Mesh, BufferGeometry, Vector3, Quaternion, BufferAttribute, MeshBasicMaterial, DoubleSide, RawShaderMaterial, TextureLoader } from 'three';\nimport { unzipSync, strFromU8 } from 'fflate';\n\nclass TiltLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(buffer) {\n    const group = new Group(); // https://docs.google.com/document/d/11ZsHozYn9FnWG7y3s3WAyKIACfbfwb4PbaS8cZ_xjvo/edit#\n\n    const zip = unzipSync(new Uint8Array(buffer.slice(16)));\n    /*\n    const thumbnail = zip[ 'thumbnail.png' ].buffer;\n    const img = document.createElement( 'img' );\n    img.src = URL.createObjectURL( new Blob( [ thumbnail ] ) );\n    document.body.appendChild( img );\n    */\n\n    const metadata = JSON.parse(strFromU8(zip['metadata.json']));\n    /*\n    const blob = new Blob( [ zip[ 'data.sketch' ].buffer ], { type: 'application/octet-stream' } );\n    window.open( URL.createObjectURL( blob ) );\n    */\n\n    const data = new DataView(zip['data.sketch'].buffer);\n    const num_strokes = data.getInt32(16, true);\n    const brushes = {};\n    let offset = 20;\n\n    for (let i = 0; i < num_strokes; i++) {\n      const brush_index = data.getInt32(offset, true);\n      const brush_color = [data.getFloat32(offset + 4, true), data.getFloat32(offset + 8, true), data.getFloat32(offset + 12, true), data.getFloat32(offset + 16, true)];\n      const brush_size = data.getFloat32(offset + 20, true);\n      const stroke_mask = data.getUint32(offset + 24, true);\n      const controlpoint_mask = data.getUint32(offset + 28, true);\n      let offset_stroke_mask = 0;\n      let offset_controlpoint_mask = 0;\n\n      for (let j = 0; j < 4; j++) {\n        // TOFIX: I don't understand these masks yet\n        const byte = 1 << j;\n        if ((stroke_mask & byte) > 0) offset_stroke_mask += 4;\n        if ((controlpoint_mask & byte) > 0) offset_controlpoint_mask += 4;\n      } // console.log( { brush_index, brush_color, brush_size, stroke_mask, controlpoint_mask } );\n      // console.log( offset_stroke_mask, offset_controlpoint_mask );\n\n\n      offset = offset + 28 + offset_stroke_mask + 4; // TOFIX: This is wrong\n\n      const num_control_points = data.getInt32(offset, true); // console.log( { num_control_points } );\n\n      const positions = new Float32Array(num_control_points * 3);\n      const quaternions = new Float32Array(num_control_points * 4);\n      offset = offset + 4;\n\n      for (let j = 0, k = 0; j < positions.length; j += 3, k += 4) {\n        positions[j + 0] = data.getFloat32(offset + 0, true);\n        positions[j + 1] = data.getFloat32(offset + 4, true);\n        positions[j + 2] = data.getFloat32(offset + 8, true);\n        quaternions[k + 0] = data.getFloat32(offset + 12, true);\n        quaternions[k + 1] = data.getFloat32(offset + 16, true);\n        quaternions[k + 2] = data.getFloat32(offset + 20, true);\n        quaternions[k + 3] = data.getFloat32(offset + 24, true);\n        offset = offset + 28 + offset_controlpoint_mask; // TOFIX: This is wrong\n      }\n\n      if (brush_index in brushes === false) {\n        brushes[brush_index] = [];\n      }\n\n      brushes[brush_index].push([positions, quaternions, brush_size, brush_color]);\n    }\n\n    for (const brush_index in brushes) {\n      const geometry = new StrokeGeometry(brushes[brush_index]);\n      const material = getMaterial(metadata.BrushIndex[brush_index]);\n      group.add(new Mesh(geometry, material));\n    }\n\n    return group;\n  }\n\n}\n\nclass StrokeGeometry extends BufferGeometry {\n  constructor(strokes) {\n    super();\n    const vertices = [];\n    const colors = [];\n    const uvs = [];\n    const position = new Vector3();\n    const prevPosition = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3(); // size = size / 2;\n\n    for (const k in strokes) {\n      const stroke = strokes[k];\n      const positions = stroke[0];\n      const quaternions = stroke[1];\n      const size = stroke[2];\n      const color = stroke[3];\n      prevPosition.fromArray(positions, 0);\n      prevQuaternion.fromArray(quaternions, 0);\n\n      for (let i = 3, j = 4, l = positions.length; i < l; i += 3, j += 4) {\n        position.fromArray(positions, i);\n        quaternion.fromArray(quaternions, j);\n        vector1.set(-size, 0, 0);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(position);\n        vector2.set(size, 0, 0);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(position);\n        vector3.set(size, 0, 0);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPosition);\n        vector4.set(-size, 0, 0);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPosition);\n        vertices.push(vector1.x, vector1.y, -vector1.z);\n        vertices.push(vector2.x, vector2.y, -vector2.z);\n        vertices.push(vector4.x, vector4.y, -vector4.z);\n        vertices.push(vector2.x, vector2.y, -vector2.z);\n        vertices.push(vector3.x, vector3.y, -vector3.z);\n        vertices.push(vector4.x, vector4.y, -vector4.z);\n        prevPosition.copy(position);\n        prevQuaternion.copy(quaternion);\n        colors.push(...color);\n        colors.push(...color);\n        colors.push(...color);\n        colors.push(...color);\n        colors.push(...color);\n        colors.push(...color);\n        const p1 = i / l;\n        const p2 = (i - 3) / l;\n        uvs.push(p1, 0);\n        uvs.push(p1, 1);\n        uvs.push(p2, 0);\n        uvs.push(p1, 1);\n        uvs.push(p2, 1);\n        uvs.push(p2, 0);\n      }\n    }\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 4));\n    this.setAttribute('uv', new BufferAttribute(new Float32Array(uvs), 2));\n  }\n\n}\n\nconst BRUSH_LIST_ARRAY = {\n  '89d104cd-d012-426b-b5b3-bbaee63ac43c': 'Bubbles',\n  '700f3aa8-9a7c-2384-8b8a-ea028905dd8c': 'CelVinyl',\n  '0f0ff7b2-a677-45eb-a7d6-0cd7206f4816': 'ChromaticWave',\n  '1161af82-50cf-47db-9706-0c3576d43c43': 'CoarseBristles',\n  '79168f10-6961-464a-8be1-57ed364c5600': 'CoarseBristlesSingleSided',\n  '1caa6d7d-f015-3f54-3a4b-8b5354d39f81': 'Comet',\n  'c8313697-2563-47fc-832e-290f4c04b901': 'DiamondHull',\n  '4391aaaa-df73-4396-9e33-31e4e4930b27': 'Disco',\n  'd1d991f2-e7a0-4cf1-b328-f57e915e6260': 'DotMarker',\n  '6a1cf9f9-032c-45ec-9b1d-a6680bee30f7': 'Dots',\n  '0d3889f3-3ede-470c-8af4-f44813306126': 'DoubleTaperedFlat',\n  '0d3889f3-3ede-470c-8af4-de4813306126': 'DoubleTaperedMarker',\n  'd0262945-853c-4481-9cbd-88586bed93cb': 'DuctTape',\n  '3ca16e2f-bdcd-4da2-8631-dcef342f40f1': 'DuctTapeSingleSided',\n  'f6e85de3-6dcc-4e7f-87fd-cee8c3d25d51': 'Electricity',\n  '02ffb866-7fb2-4d15-b761-1012cefb1360': 'Embers',\n  'cb92b597-94ca-4255-b017-0e3f42f12f9e': 'Fire',\n  '2d35bcf0-e4d8-452c-97b1-3311be063130': 'Flat',\n  '55303bc4-c749-4a72-98d9-d23e68e76e18': 'FlatDeprecated',\n  '280c0a7a-aad8-416c-a7d2-df63d129ca70': 'FlatSingleSided',\n  'cf019139-d41c-4eb0-a1d0-5cf54b0a42f3': 'Highlighter',\n  '6a1cf9f9-032c-45ec-9b6e-a6680bee32e9': 'HyperGrid',\n  'dce872c2-7b49-4684-b59b-c45387949c5c': 'Hypercolor',\n  'e8ef32b1-baa8-460a-9c2c-9cf8506794f5': 'HypercolorSingleSided',\n  '2f212815-f4d3-c1a4-681a-feeaf9c6dc37': 'Icing',\n  'f5c336cf-5108-4b40-ade9-c687504385ab': 'Ink',\n  'c0012095-3ffd-4040-8ee1-fc180d346eaa': 'InkSingleSided',\n  '4a76a27a-44d8-4bfe-9a8c-713749a499b0': 'Leaves',\n  'ea19de07-d0c0-4484-9198-18489a3c1487': 'LeavesSingleSided',\n  '2241cd32-8ba2-48a5-9ee7-2caef7e9ed62': 'Light',\n  '4391aaaa-df81-4396-9e33-31e4e4930b27': 'LightWire',\n  'd381e0f5-3def-4a0d-8853-31e9200bcbda': 'Lofted',\n  '429ed64a-4e97-4466-84d3-145a861ef684': 'Marker',\n  '79348357-432d-4746-8e29-0e25c112e3aa': 'MatteHull',\n  'b2ffef01-eaaa-4ab5-aa64-95a2c4f5dbc6': 'NeonPulse',\n  'f72ec0e7-a844-4e38-82e3-140c44772699': 'OilPaint',\n  'c515dad7-4393-4681-81ad-162ef052241b': 'OilPaintSingleSided',\n  'f1114e2e-eb8d-4fde-915a-6e653b54e9f5': 'Paper',\n  '759f1ebd-20cd-4720-8d41-234e0da63716': 'PaperSingleSided',\n  'e0abbc80-0f80-e854-4970-8924a0863dcc': 'Petal',\n  'c33714d1-b2f9-412e-bd50-1884c9d46336': 'Plasma',\n  'ad1ad437-76e2-450d-a23a-e17f8310b960': 'Rainbow',\n  'faaa4d44-fcfb-4177-96be-753ac0421ba3': 'ShinyHull',\n  '70d79cca-b159-4f35-990c-f02193947fe8': 'Smoke',\n  'd902ed8b-d0d1-476c-a8de-878a79e3a34c': 'Snow',\n  'accb32f5-4509-454f-93f8-1df3fd31df1b': 'SoftHighlighter',\n  'cf7f0059-7aeb-53a4-2b67-c83d863a9ffa': 'Spikes',\n  '8dc4a70c-d558-4efd-a5ed-d4e860f40dc3': 'Splatter',\n  '7a1c8107-50c5-4b70-9a39-421576d6617e': 'SplatterSingleSided',\n  '0eb4db27-3f82-408d-b5a1-19ebd7d5b711': 'Stars',\n  '44bb800a-fbc3-4592-8426-94ecb05ddec3': 'Streamers',\n  '0077f88c-d93a-42f3-b59b-b31c50cdb414': 'Taffy',\n  'b468c1fb-f254-41ed-8ec9-57030bc5660c': 'TaperedFlat',\n  'c8ccb53d-ae13-45ef-8afb-b730d81394eb': 'TaperedFlatSingleSided',\n  'd90c6ad8-af0f-4b54-b422-e0f92abe1b3c': 'TaperedMarker',\n  '1a26b8c0-8a07-4f8a-9fac-d2ef36e0cad0': 'TaperedMarker_Flat',\n  '75b32cf0-fdd6-4d89-a64b-e2a00b247b0f': 'ThickPaint',\n  'fdf0326a-c0d1-4fed-b101-9db0ff6d071f': 'ThickPaintSingleSided',\n  '4391385a-df73-4396-9e33-31e4e4930b27': 'Toon',\n  'a8fea537-da7c-4d4b-817f-24f074725d6d': 'UnlitHull',\n  'd229d335-c334-495a-a801-660ac8a87360': 'VelvetInk',\n  '10201aa3-ebc2-42d8-84b7-2e63f6eeb8ab': 'Waveform',\n  'b67c0e81-ce6d-40a8-aeb0-ef036b081aa3': 'WetPaint',\n  'dea67637-cd1a-27e4-c9b1-52f4bbcb84e5': 'WetPaintSingleSided',\n  '5347acf0-a8e2-47b6-8346-30c70719d763': 'WigglyGraphite',\n  'e814fef1-97fd-7194-4a2f-50c2bb918be2': 'WigglyGraphiteSingleSided',\n  '4391385a-cf83-4396-9e33-31e4e4930b27': 'Wire'\n};\nconst common = {\n  colors: {\n    BloomColor: `\n\t\t\tvec3 BloomColor(vec3 color, float gain) {\n\t\t\t\t// Guarantee that there's at least a little bit of all 3 channels.\n\t\t\t\t// This makes fully-saturated strokes (which only have 2 non-zero\n\t\t\t\t// color channels) eventually clip to white rather than to a secondary.\n\t\t\t\tfloat cmin = length(color.rgb) * .05;\n\t\t\t\tcolor.rgb = max(color.rgb, vec3(cmin, cmin, cmin));\n\t\t\t\t// If we try to remove this pow() from .a, it brightens up\n\t\t\t\t// pressure-sensitive strokes; looks better as-is.\n\t\t\t\tcolor = pow(color, vec3(2.2));\n\t\t\t\tcolor.rgb *= 2. * exp(gain * 10.);\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`,\n    LinearToSrgb: `\n\t\t\tvec3 LinearToSrgb(vec3 color) {\n\t\t\t\t// Approximation http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html\n\t\t\t\tvec3 linearColor = color.rgb;\n\t\t\t\tvec3 S1 = sqrt(linearColor);\n\t\t\t\tvec3 S2 = sqrt(S1);\n\t\t\t\tvec3 S3 = sqrt(S2);\n\t\t\t\tcolor.rgb = 0.662002687 * S1 + 0.684122060 * S2 - 0.323583601 * S3 - 0.0225411470 * linearColor;\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`,\n    hsv: `\n\t\t\t// uniform sampler2D lookupTex;\n\t\t\tvec4 lookup(vec4 textureColor) {\n\t\t\t\treturn textureColor;\n\t\t\t}\n\n\t\t\tvec3 lookup(vec3 textureColor) {\n\t\t\t\treturn textureColor;\n\t\t\t}\n\n\t\t\tvec3 hsv2rgb( vec3 hsv ) {\n\t\t\t\tvec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\t\t\t\treturn hsv.z * mix( vec3(1.0), rgb, hsv.y);\n\t\t\t}\n\n\t\t\tvec3 rgb2hsv( vec3 rgb ) {\n\t\t\t\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\t\t\t\tvec4 p = mix(vec4(rgb.bg, K.wz), vec4(rgb.gb, K.xy), step(rgb.b, rgb.g));\n\t\t\t\tvec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));\n\n\t\t\t\tfloat d = q.x - min(q.w, q.y);\n\t\t\t\tfloat e = 1.0e-10;\n\n\t\t\t\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n\t\t\t}\n\t\t`,\n    SrgbToLinear: `\n\t\t\tvec3 SrgbToLinear(vec3 color) {\n\t\t\t\t// Approximation http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html\n\t\t\t\tvec3 sRGB = color.rgb;\n\t\t\t\tcolor.rgb = sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`\n  }\n};\n\nconst shaders = () => ({\n  Light: {\n    uniforms: {\n      mainTex: {\n        value: new TextureLoader().setPath('./textures/tiltbrush/').loader.load('Light.webp')\n      },\n      alphaTest: {\n        value: 0.067\n      },\n      emission_gain: {\n        value: 0.45\n      },\n      alpha: {\n        value: 1\n      }\n    },\n    vertexShader: `\n\t\t\tprecision highp float;\n\t\t\tprecision highp int;\n\n\t\t\tattribute vec2 uv;\n\t\t\tattribute vec4 color;\n\t\t\tattribute vec3 position;\n\n\t\t\tuniform mat4 modelMatrix;\n\t\t\tuniform mat4 modelViewMatrix;\n\t\t\tuniform mat4 projectionMatrix;\n\t\t\tuniform mat4 viewMatrix;\n\t\t\tuniform mat3 normalMatrix;\n\t\t\tuniform vec3 cameraPosition;\n\n\t\t\tvarying vec2 vUv;\n\t\t\tvarying vec3 vColor;\n\n\t\t\t${common.colors.LinearToSrgb}\n\t\t\t${common.colors.hsv}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tvColor = lookup(color.rgb);\n\n\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t}\n\t\t`,\n    fragmentShader: `\n\t\t\tprecision highp float;\n\t\t\tprecision highp int;\n\n\t\t\tuniform float emission_gain;\n\n\t\t\tuniform sampler2D mainTex;\n\t\t\tuniform float alphaTest;\n\n\t\t\tvarying vec2 vUv;\n\t\t\tvarying vec3 vColor;\n\n\t\t\t${common.colors.BloomColor}\n\t\t\t${common.colors.SrgbToLinear}\n\n\t\t\tvoid main(){\n\t\t\t\tvec4 col = texture2D(mainTex, vUv);\n\t\t\t\tvec3 color = vColor;\n\t\t\t\tcolor = BloomColor(color, emission_gain);\n\t\t\t\tcolor = color * col.rgb;\n\t\t\t\tcolor = color * col.a;\n\t\t\t\tcolor = SrgbToLinear(color);\n\t\t\t\tgl_FragColor = vec4(color, 1.0);\n\t\t\t}\n\t\t`,\n    side: 2,\n    transparent: true,\n    depthFunc: 2,\n    depthWrite: true,\n    depthTest: false,\n    blending: 5,\n    blendDst: 201,\n    blendDstAlpha: 201,\n    blendEquation: 100,\n    blendEquationAlpha: 100,\n    blendSrc: 201,\n    blendSrcAlpha: 201\n  }\n});\n\nfunction getMaterial(GUID) {\n  const name = BRUSH_LIST_ARRAY[GUID];\n\n  switch (name) {\n    case 'Light':\n      return new RawShaderMaterial(shaders().Light);\n\n    default:\n      return new MeshBasicMaterial({\n        vertexColors: true,\n        side: DoubleSide\n      });\n  }\n}\n\nexport { TiltLoader };\n"]},"metadata":{},"sourceType":"module"}