{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Mesh, Vector3, InstancedInterleavedBuffer, InterleavedBufferAttribute, Vector4, Matrix4, Line3, MathUtils } from 'three';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nimport { LineMaterial } from './LineMaterial.js';\n\nclass LineSegments2 extends Mesh {\n  constructor() {\n    let _geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new LineSegmentsGeometry();\n\n    let _material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineMaterial({\n      color: Math.random() * 0xffffff\n    });\n\n    super(_geometry, _material);\n\n    _defineProperty(this, \"type\", 'LineSegments2');\n\n    _defineProperty(this, \"isLineSegments2\", true);\n\n    _defineProperty(this, \"distStart\", new Vector3());\n\n    _defineProperty(this, \"distEnd\", new Vector3());\n\n    _defineProperty(this, \"computeLineDistances\", () => {\n      const geometry = this.geometry;\n      const instanceStart = geometry.attributes.instanceStart;\n      const instanceEnd = geometry.attributes.instanceEnd;\n      const lineDistances = new Float32Array(2 * instanceStart.data.count);\n\n      for (let i = 0, j = 0, l = instanceStart.data.count; i < l; i++, j += 2) {\n        this.distStart.fromBufferAttribute(instanceStart, i);\n        this.distEnd.fromBufferAttribute(instanceEnd, i);\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + this.distStart.distanceTo(this.distEnd);\n      }\n\n      const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n      geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n      geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n      return this;\n    });\n\n    _defineProperty(this, \"rayStart\", new Vector4());\n\n    _defineProperty(this, \"rayEnd\", new Vector4());\n\n    _defineProperty(this, \"ssOrigin\", new Vector4());\n\n    _defineProperty(this, \"ssOrigin3\", new Vector3());\n\n    _defineProperty(this, \"mvMatrix\", new Matrix4());\n\n    _defineProperty(this, \"line\", new Line3());\n\n    _defineProperty(this, \"closestPoint\", new Vector3());\n\n    _defineProperty(this, \"raycast\", (raycaster, intersects) => {\n      if (raycaster.camera === null) {\n        console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2.');\n      }\n\n      const threshold = 0;\n      const ray = raycaster.ray;\n      const camera = raycaster.camera;\n      const projectionMatrix = camera.projectionMatrix;\n      const geometry = this.geometry;\n      const material = this.material;\n      const resolution = material.resolution;\n      const lineWidth = material.linewidth + threshold;\n      const instanceStart = geometry.attributes.instanceStart;\n      const instanceEnd = geometry.attributes.instanceEnd; // camera forward is negative\n\n      const near = -camera.near; // pick a point 1 unit out along the ray to avoid the ray origin\n      // sitting at the camera origin which will cause \"w\" to be 0 when\n      // applying the projection matrix.\n\n      ray.at(1, this.ssOrigin); // ndc space [ - 1.0, 1.0 ]\n\n      this.ssOrigin.w = 1;\n      this.ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n      this.ssOrigin.applyMatrix4(projectionMatrix);\n      this.ssOrigin.multiplyScalar(1 / this.ssOrigin.w); // screen space\n\n      this.ssOrigin.x *= resolution.x / 2;\n      this.ssOrigin.y *= resolution.y / 2;\n      this.ssOrigin.z = 0;\n      this.ssOrigin3.set(this.ssOrigin.x, this.ssOrigin.y, this.ssOrigin.z);\n      const matrixWorld = this.matrixWorld;\n      this.mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n\n      for (let i = 0, l = instanceStart.count; i < l; i++) {\n        this.rayStart.fromBufferAttribute(instanceStart, i);\n        this.rayEnd.fromBufferAttribute(instanceEnd, i);\n        this.rayStart.w = 1;\n        this.rayEnd.w = 1; // camera space\n\n        this.rayStart.applyMatrix4(this.mvMatrix);\n        this.rayEnd.applyMatrix4(this.mvMatrix); // skip the segment if it's entirely behind the camera\n\n        const isBehindCameraNear = this.rayStart.z > near && this.rayEnd.z > near;\n\n        if (isBehindCameraNear) {\n          continue;\n        } // trim the segment if it extends behind camera near\n\n\n        if (this.rayStart.z > near) {\n          const deltaDist = this.rayStart.z - this.rayEnd.z;\n          const t = (this.rayStart.z - near) / deltaDist;\n          this.rayStart.lerp(this.rayEnd, t);\n        } else if (this.rayEnd.z > near) {\n          const deltaDist = this.rayEnd.z - this.rayStart.z;\n          const t = (this.rayEnd.z - near) / deltaDist;\n          this.rayEnd.lerp(this.rayStart, t);\n        } // clip space\n\n\n        this.rayStart.applyMatrix4(projectionMatrix);\n        this.rayEnd.applyMatrix4(projectionMatrix); // ndc space [ - 1.0, 1.0 ]\n\n        this.rayStart.multiplyScalar(1 / this.rayStart.w);\n        this.rayEnd.multiplyScalar(1 / this.rayEnd.w); // screen space\n\n        this.rayStart.x *= resolution.x / 2;\n        this.rayStart.y *= resolution.y / 2;\n        this.rayEnd.x *= resolution.x / 2;\n        this.rayEnd.y *= resolution.y / 2; // create 2d segment\n\n        this.line.start.set(this.rayStart.x, this.rayStart.y, this.rayStart.z);\n        this.line.start.z = 0;\n        this.line.end.set(this.rayEnd.x, this.rayEnd.y, this.rayEnd.z);\n        this.line.end.z = 0; // get closest point on ray to segment\n\n        const param = this.line.closestPointToPointParameter(this.ssOrigin3, true);\n        this.line.at(param, this.closestPoint); // check if the intersection point is within clip space\n\n        const zPos = MathUtils.lerp(this.rayStart.z, this.rayEnd.z, param);\n        const isInClipSpace = zPos >= -1 && zPos <= 1;\n        const isInside = this.ssOrigin3.distanceTo(this.closestPoint) < lineWidth * 0.5;\n\n        if (isInClipSpace && isInside) {\n          this.line.start.fromBufferAttribute(instanceStart, i);\n          this.line.end.fromBufferAttribute(instanceEnd, i);\n          this.line.start.applyMatrix4(matrixWorld);\n          this.line.end.applyMatrix4(matrixWorld);\n          const pointOnLine = new Vector3();\n          const point = new Vector3();\n          ray.distanceSqToSegment(this.line.start, this.line.end, point, pointOnLine);\n          intersects.push({\n            distance: ray.origin.distanceTo(point),\n            point: point,\n            face: null,\n            faceIndex: i,\n            object: this,\n            uv: undefined,\n            pointOnLine\n          });\n        }\n      }\n    });\n  }\n\n}\n\nexport { LineSegments2 };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/lines/LineSegments2.js"],"names":["_defineProperty","Mesh","Vector3","InstancedInterleavedBuffer","InterleavedBufferAttribute","Vector4","Matrix4","Line3","MathUtils","LineSegmentsGeometry","LineMaterial","LineSegments2","constructor","_geometry","_material","color","Math","random","geometry","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","data","count","i","j","l","distStart","fromBufferAttribute","distEnd","distanceTo","instanceDistanceBuffer","setAttribute","raycaster","intersects","camera","console","error","threshold","ray","projectionMatrix","material","resolution","lineWidth","linewidth","near","at","ssOrigin","w","applyMatrix4","matrixWorldInverse","multiplyScalar","x","y","z","ssOrigin3","set","matrixWorld","mvMatrix","multiplyMatrices","rayStart","rayEnd","isBehindCameraNear","deltaDist","t","lerp","line","start","end","param","closestPointToPointParameter","closestPoint","zPos","isInClipSpace","isInside","pointOnLine","point","distanceSqToSegment","push","distance","origin","face","faceIndex","object","uv","undefined"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Mesh, Vector3, InstancedInterleavedBuffer, InterleavedBufferAttribute, Vector4, Matrix4, Line3, MathUtils } from 'three';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nimport { LineMaterial } from './LineMaterial.js';\n\nclass LineSegments2 extends Mesh {\n  constructor(_geometry = new LineSegmentsGeometry(), _material = new LineMaterial({\n    color: Math.random() * 0xffffff\n  })) {\n    super(_geometry, _material);\n\n    _defineProperty(this, \"type\", 'LineSegments2');\n\n    _defineProperty(this, \"isLineSegments2\", true);\n\n    _defineProperty(this, \"distStart\", new Vector3());\n\n    _defineProperty(this, \"distEnd\", new Vector3());\n\n    _defineProperty(this, \"computeLineDistances\", () => {\n      const geometry = this.geometry;\n      const instanceStart = geometry.attributes.instanceStart;\n      const instanceEnd = geometry.attributes.instanceEnd;\n      const lineDistances = new Float32Array(2 * instanceStart.data.count);\n\n      for (let i = 0, j = 0, l = instanceStart.data.count; i < l; i++, j += 2) {\n        this.distStart.fromBufferAttribute(instanceStart, i);\n        this.distEnd.fromBufferAttribute(instanceEnd, i);\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + this.distStart.distanceTo(this.distEnd);\n      }\n\n      const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n      geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n      geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n      return this;\n    });\n\n    _defineProperty(this, \"rayStart\", new Vector4());\n\n    _defineProperty(this, \"rayEnd\", new Vector4());\n\n    _defineProperty(this, \"ssOrigin\", new Vector4());\n\n    _defineProperty(this, \"ssOrigin3\", new Vector3());\n\n    _defineProperty(this, \"mvMatrix\", new Matrix4());\n\n    _defineProperty(this, \"line\", new Line3());\n\n    _defineProperty(this, \"closestPoint\", new Vector3());\n\n    _defineProperty(this, \"raycast\", (raycaster, intersects) => {\n      if (raycaster.camera === null) {\n        console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2.');\n      }\n\n      const threshold = 0;\n      const ray = raycaster.ray;\n      const camera = raycaster.camera;\n      const projectionMatrix = camera.projectionMatrix;\n      const geometry = this.geometry;\n      const material = this.material;\n      const resolution = material.resolution;\n      const lineWidth = material.linewidth + threshold;\n      const instanceStart = geometry.attributes.instanceStart;\n      const instanceEnd = geometry.attributes.instanceEnd; // camera forward is negative\n\n      const near = -camera.near; // pick a point 1 unit out along the ray to avoid the ray origin\n      // sitting at the camera origin which will cause \"w\" to be 0 when\n      // applying the projection matrix.\n\n      ray.at(1, this.ssOrigin); // ndc space [ - 1.0, 1.0 ]\n\n      this.ssOrigin.w = 1;\n      this.ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n      this.ssOrigin.applyMatrix4(projectionMatrix);\n      this.ssOrigin.multiplyScalar(1 / this.ssOrigin.w); // screen space\n\n      this.ssOrigin.x *= resolution.x / 2;\n      this.ssOrigin.y *= resolution.y / 2;\n      this.ssOrigin.z = 0;\n      this.ssOrigin3.set(this.ssOrigin.x, this.ssOrigin.y, this.ssOrigin.z);\n      const matrixWorld = this.matrixWorld;\n      this.mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n\n      for (let i = 0, l = instanceStart.count; i < l; i++) {\n        this.rayStart.fromBufferAttribute(instanceStart, i);\n        this.rayEnd.fromBufferAttribute(instanceEnd, i);\n        this.rayStart.w = 1;\n        this.rayEnd.w = 1; // camera space\n\n        this.rayStart.applyMatrix4(this.mvMatrix);\n        this.rayEnd.applyMatrix4(this.mvMatrix); // skip the segment if it's entirely behind the camera\n\n        const isBehindCameraNear = this.rayStart.z > near && this.rayEnd.z > near;\n\n        if (isBehindCameraNear) {\n          continue;\n        } // trim the segment if it extends behind camera near\n\n\n        if (this.rayStart.z > near) {\n          const deltaDist = this.rayStart.z - this.rayEnd.z;\n          const t = (this.rayStart.z - near) / deltaDist;\n          this.rayStart.lerp(this.rayEnd, t);\n        } else if (this.rayEnd.z > near) {\n          const deltaDist = this.rayEnd.z - this.rayStart.z;\n          const t = (this.rayEnd.z - near) / deltaDist;\n          this.rayEnd.lerp(this.rayStart, t);\n        } // clip space\n\n\n        this.rayStart.applyMatrix4(projectionMatrix);\n        this.rayEnd.applyMatrix4(projectionMatrix); // ndc space [ - 1.0, 1.0 ]\n\n        this.rayStart.multiplyScalar(1 / this.rayStart.w);\n        this.rayEnd.multiplyScalar(1 / this.rayEnd.w); // screen space\n\n        this.rayStart.x *= resolution.x / 2;\n        this.rayStart.y *= resolution.y / 2;\n        this.rayEnd.x *= resolution.x / 2;\n        this.rayEnd.y *= resolution.y / 2; // create 2d segment\n\n        this.line.start.set(this.rayStart.x, this.rayStart.y, this.rayStart.z);\n        this.line.start.z = 0;\n        this.line.end.set(this.rayEnd.x, this.rayEnd.y, this.rayEnd.z);\n        this.line.end.z = 0; // get closest point on ray to segment\n\n        const param = this.line.closestPointToPointParameter(this.ssOrigin3, true);\n        this.line.at(param, this.closestPoint); // check if the intersection point is within clip space\n\n        const zPos = MathUtils.lerp(this.rayStart.z, this.rayEnd.z, param);\n        const isInClipSpace = zPos >= -1 && zPos <= 1;\n        const isInside = this.ssOrigin3.distanceTo(this.closestPoint) < lineWidth * 0.5;\n\n        if (isInClipSpace && isInside) {\n          this.line.start.fromBufferAttribute(instanceStart, i);\n          this.line.end.fromBufferAttribute(instanceEnd, i);\n          this.line.start.applyMatrix4(matrixWorld);\n          this.line.end.applyMatrix4(matrixWorld);\n          const pointOnLine = new Vector3();\n          const point = new Vector3();\n          ray.distanceSqToSegment(this.line.start, this.line.end, point, pointOnLine);\n          intersects.push({\n            distance: ray.origin.distanceTo(point),\n            point: point,\n            face: null,\n            faceIndex: i,\n            object: this,\n            uv: undefined,\n            pointOnLine\n          });\n        }\n      }\n    });\n  }\n\n}\n\nexport { LineSegments2 };\n"]},"metadata":{},"sourceType":"module"}