[{"/Users/dominiclee/Desktop/ethprojs/metaportal/src/index.tsx":"1","/Users/dominiclee/Desktop/ethprojs/metaportal/src/store.ts":"2","/Users/dominiclee/Desktop/ethprojs/metaportal/src/App.tsx":"3","/Users/dominiclee/Desktop/ethprojs/metaportal/src/features/counter/counterSlice.ts":"4","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/SelectedItemSlice.ts":"5","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TopBar.tsx":"6","/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/Balance.tsx":"7","/Users/dominiclee/Desktop/ethprojs/metaportal/src/global/GlobalStyle.tsx":"8","/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/SendEtherPage.tsx":"9","/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/Block.tsx":"10","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/base/base.tsx":"11","/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/Prices.tsx":"12","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/History.tsx":"13","/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/Transactions.tsx":"14","/Users/dominiclee/Desktop/ethprojs/metaportal/src/global/styles.ts":"15","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx":"16","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/base/Link.tsx":"17","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Forms.tsx":"18","/Users/dominiclee/Desktop/ethprojs/metaportal/src/typography/Label.tsx":"19","/Users/dominiclee/Desktop/ethprojs/metaportal/src/typography/Title.tsx":"20","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/account/AccountButton.tsx":"21","/Users/dominiclee/Desktop/ethprojs/metaportal/src/typography/Text.tsx":"22","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/SendEthForm/SendEthForm.tsx":"23","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/ItemSelection/ItemSelection.tsx":"24","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/index.ts":"25","/Users/dominiclee/Desktop/ethprojs/metaportal/src/hooks.ts":"26","/Users/dominiclee/Desktop/ethprojs/metaportal/src/interfaces/interfaces.ts":"27","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokenSVGIcon.tsx":"28","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/TransactionForm.tsx":"29","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/base/Button.tsx":"30","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/account/AccountModal.tsx":"31","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/ShareIcon.tsx":"32","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/SendItemForm/SendItemForm.tsx":"33","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/WrapIcon.tsx":"34","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/WalletIcon.tsx":"35","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/UnwrapIcon.tsx":"36","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/SpinnerIcon.tsx":"37","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/ExclamationIcon.tsx":"38","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/ClockIcon.tsx":"39","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/CheckIcon.tsx":"40","/Users/dominiclee/Desktop/ethprojs/metaportal/src/models/soldierModel.tsx":"41","/Users/dominiclee/Desktop/ethprojs/metaportal/src/workarounds/useContractFunction.ts":"42","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/badge/BadgeOverviewModal.tsx":"43","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/badge/BadgeRequirementsList.tsx":"44","/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/useBadgeList.ts":"45","/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/TransactionsAPI.ts":"46","/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/BadgeHelper.ts":"47","/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/BadgeHelperTypes.ts":"48","/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/Badges.ts":"49","/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/Badges.tsx":"50","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/index.tsx":"51","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/store.ts":"52","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/App.tsx":"53","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/TokensList/SelectedItemSlice.ts":"54","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/features/counter/counterSlice.ts":"55","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/TopBar.tsx":"56","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/base/base.tsx":"57","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/pages/Badges.tsx":"58","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/global/GlobalStyle.tsx":"59","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/History.tsx":"60","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/global/styles.ts":"61","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/hooks.ts":"62","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/portalHooks/useBadgeList.ts":"63","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/TokensList/TokensList.tsx":"64","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/base/Link.tsx":"65","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/typography/Title.tsx":"66","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/typography/Text.tsx":"67","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/account/AccountButton.tsx":"68","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/ItemSelection/ItemSelection.tsx":"69","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/index.ts":"70","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/portalHooks/BadgeHelper.ts":"71","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/portalHooks/Badges.ts":"72","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/portalHooks/TransactionsAPI.ts":"73","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/TokensList/TokenSVGIcon.tsx":"74","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/base/Button.tsx":"75","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/account/AccountModal.tsx":"76","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/badge/BadgeOverviewModal.tsx":"77","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/models/soldierModel.tsx":"78","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/portalHooks/BadgeHelperTypes.ts":"79","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/WrapIcon.tsx":"80","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/WalletIcon.tsx":"81","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/UnwrapIcon.tsx":"82","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/SpinnerIcon.tsx":"83","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/ShareIcon.tsx":"84","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/ExclamationIcon.tsx":"85","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/ClockIcon.tsx":"86","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/CheckIcon.tsx":"87","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/interfaces/interfaces.ts":"88","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/badge/BadgeRequirementsList.tsx":"89","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/global/apiKeys.ts":"90"},{"size":824,"mtime":1638979454658,"results":"91","hashOfConfig":"92"},{"size":574,"mtime":1636768175875,"results":"93","hashOfConfig":"92"},{"size":713,"mtime":1638307588278,"results":"94","hashOfConfig":"92"},{"size":1162,"mtime":1636692322333,"results":"95","hashOfConfig":"92"},{"size":1656,"mtime":1637883056359,"results":"96","hashOfConfig":"92"},{"size":3086,"mtime":1638381622652,"results":"97","hashOfConfig":"92"},{"size":1722,"mtime":1637343058720,"results":"98","hashOfConfig":"92"},{"size":1904,"mtime":1635908861843,"results":"99","hashOfConfig":"92"},{"size":510,"mtime":1637781469441,"results":"100","hashOfConfig":"92"},{"size":1304,"mtime":1635999535505,"results":"101","hashOfConfig":"92"},{"size":3854,"mtime":1638305793978,"results":"102","hashOfConfig":"92"},{"size":1281,"mtime":1635999534311,"results":"103","hashOfConfig":"92"},{"size":7986,"mtime":1637781229873,"results":"104","hashOfConfig":"92"},{"size":832,"mtime":1635999531605,"results":"105","hashOfConfig":"92"},{"size":798,"mtime":1635908861843,"results":"106","hashOfConfig":"92"},{"size":5359,"mtime":1638381434541,"results":"107","hashOfConfig":"92"},{"size":385,"mtime":1635908861842,"results":"108","hashOfConfig":"92"},{"size":1458,"mtime":1635908861838,"results":"109","hashOfConfig":"92"},{"size":136,"mtime":1635908861845,"results":"110","hashOfConfig":"92"},{"size":198,"mtime":1636336493436,"results":"111","hashOfConfig":"92"},{"size":1725,"mtime":1637946840159,"results":"112","hashOfConfig":"92"},{"size":295,"mtime":1635908861846,"results":"113","hashOfConfig":"92"},{"size":4525,"mtime":1636342978801,"results":"114","hashOfConfig":"92"},{"size":2023,"mtime":1638306963441,"results":"115","hashOfConfig":"92"},{"size":338,"mtime":1635908861841,"results":"116","hashOfConfig":"92"},{"size":345,"mtime":1636734453493,"results":"117","hashOfConfig":"92"},{"size":308,"mtime":1637632200166,"results":"118","hashOfConfig":"92"},{"size":2249,"mtime":1637346637359,"results":"119","hashOfConfig":"92"},{"size":6486,"mtime":1635908861841,"results":"120","hashOfConfig":"92"},{"size":750,"mtime":1635908861842,"results":"121","hashOfConfig":"92"},{"size":3996,"mtime":1638381622652,"results":"122","hashOfConfig":"92"},{"size":1814,"mtime":1635908861840,"results":"123","hashOfConfig":"92"},{"size":4151,"mtime":1636764142594,"results":"124","hashOfConfig":"92"},{"size":893,"mtime":1635908861841,"results":"125","hashOfConfig":"92"},{"size":1483,"mtime":1635908861841,"results":"126","hashOfConfig":"92"},{"size":574,"mtime":1635908861840,"results":"127","hashOfConfig":"92"},{"size":596,"mtime":1635908861840,"results":"128","hashOfConfig":"92"},{"size":2346,"mtime":1635908861839,"results":"129","hashOfConfig":"92"},{"size":1777,"mtime":1635908861839,"results":"130","hashOfConfig":"92"},{"size":2009,"mtime":1637688002155,"results":"131","hashOfConfig":"92"},{"size":1422,"mtime":1637980986034,"results":"132","hashOfConfig":"92"},{"size":1227,"mtime":1637635857505,"results":"133","hashOfConfig":"92"},{"size":8325,"mtime":1638381622653,"results":"134","hashOfConfig":"92"},{"size":8135,"mtime":1637781267199,"results":"135","hashOfConfig":"92"},{"size":1716,"mtime":1637861189866,"results":"136","hashOfConfig":"92"},{"size":861,"mtime":1637776763352,"results":"137","hashOfConfig":"92"},{"size":3294,"mtime":1637981090402,"results":"138","hashOfConfig":"92"},{"size":951,"mtime":1637949314424,"results":"139","hashOfConfig":"92"},{"size":5655,"mtime":1638314736490,"results":"140","hashOfConfig":"92"},{"size":3917,"mtime":1638381622654,"results":"141","hashOfConfig":"92"},{"size":827,"mtime":1649512005834,"results":"142","hashOfConfig":"143"},{"size":574,"mtime":1636768175875,"results":"144","hashOfConfig":"143"},{"size":713,"mtime":1638307588278,"results":"145","hashOfConfig":"143"},{"size":1656,"mtime":1637883056359,"results":"146","hashOfConfig":"143"},{"size":1162,"mtime":1636692322333,"results":"147","hashOfConfig":"143"},{"size":3086,"mtime":1638381622652,"results":"148","hashOfConfig":"143"},{"size":3854,"mtime":1638305793978,"results":"149","hashOfConfig":"143"},{"size":3917,"mtime":1638381622654,"results":"150","hashOfConfig":"143"},{"size":1904,"mtime":1635908861843,"results":"151","hashOfConfig":"143"},{"size":7986,"mtime":1637781229873,"results":"152","hashOfConfig":"143"},{"size":798,"mtime":1635908861843,"results":"153","hashOfConfig":"143"},{"size":345,"mtime":1636734453493,"results":"154","hashOfConfig":"143"},{"size":1716,"mtime":1637861189866,"results":"155","hashOfConfig":"143"},{"size":5359,"mtime":1638381434541,"results":"156","hashOfConfig":"143"},{"size":385,"mtime":1635908861842,"results":"157","hashOfConfig":"143"},{"size":198,"mtime":1636336493436,"results":"158","hashOfConfig":"143"},{"size":295,"mtime":1635908861846,"results":"159","hashOfConfig":"143"},{"size":1725,"mtime":1637946840159,"results":"160","hashOfConfig":"143"},{"size":2023,"mtime":1638306963441,"results":"161","hashOfConfig":"143"},{"size":338,"mtime":1635908861841,"results":"162","hashOfConfig":"143"},{"size":3294,"mtime":1637981090402,"results":"163","hashOfConfig":"143"},{"size":5655,"mtime":1638314736490,"results":"164","hashOfConfig":"143"},{"size":890,"mtime":1649511995455,"results":"165","hashOfConfig":"143"},{"size":2249,"mtime":1637346637359,"results":"166","hashOfConfig":"143"},{"size":750,"mtime":1635908861842,"results":"167","hashOfConfig":"143"},{"size":3996,"mtime":1638381622652,"results":"168","hashOfConfig":"143"},{"size":8325,"mtime":1638381622653,"results":"169","hashOfConfig":"143"},{"size":1422,"mtime":1637980986034,"results":"170","hashOfConfig":"143"},{"size":951,"mtime":1637949314424,"results":"171","hashOfConfig":"143"},{"size":893,"mtime":1635908861841,"results":"172","hashOfConfig":"143"},{"size":1483,"mtime":1635908861841,"results":"173","hashOfConfig":"143"},{"size":574,"mtime":1635908861840,"results":"174","hashOfConfig":"143"},{"size":596,"mtime":1635908861840,"results":"175","hashOfConfig":"143"},{"size":1814,"mtime":1635908861840,"results":"176","hashOfConfig":"143"},{"size":2346,"mtime":1635908861839,"results":"177","hashOfConfig":"143"},{"size":1777,"mtime":1635908861839,"results":"178","hashOfConfig":"143"},{"size":2009,"mtime":1637688002155,"results":"179","hashOfConfig":"143"},{"size":308,"mtime":1637632200166,"results":"180","hashOfConfig":"143"},{"size":8135,"mtime":1637781267199,"results":"181","hashOfConfig":"143"},{"size":83,"mtime":1649512174512,"results":"182","hashOfConfig":"143"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},"hqgf0b",{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"201"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"207"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"188"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"239"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"188"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"188"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"201"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"265"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"188"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"239"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"188"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"188"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"188"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"e8r87p",{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"311"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"311"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"311"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"311"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"311"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"311"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"311"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"311"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"311"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"311"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"311"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"311"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dominiclee/Desktop/ethprojs/metaportal/src/index.tsx",["388"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChainId, Config, DAppProvider, MULTICALL_ADDRESSES } from '@usedapp/core'\nimport { App } from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {store} from './store'\nimport { Provider } from 'react-redux'\n\n\nconst config:Config = {\n  readOnlyChainId: ChainId.Mainnet,\n  readOnlyUrls: {\n    [ChainId.Mainnet]: 'https://mainnet.infura.io/v3/3165a249c65f4198bf57200109b8fadf',\n    [ChainId.Hardhat]: 'http://127.0.0.1:8545/'\n  },\n  supportedChains:[ChainId.Mainnet, ChainId.Kovan, ChainId.Hardhat, ChainId.Polygon, ChainId.Mumbai],\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <DAppProvider config={config}>\n      <App />\n    </DAppProvider>\n    </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","/Users/dominiclee/Desktop/ethprojs/metaportal/src/store.ts",[],["389","390"],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/App.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/features/counter/counterSlice.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/SelectedItemSlice.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TopBar.tsx",["391","392","393","394","395","396","397","398","399","400"],"import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { Colors, Shadows, Sizes, Transitions } from '../global/styles'\nimport { HeaderContainer } from './base/base'\nimport { Badge, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap'\n\n\nexport function TopBar() {\n  return (\n    <Navbar bg=\"light\" variant=\"light\" expand=\"lg\" fixed=\"top\">\n      <Container>\n        <Navbar.Brand href=\"/\">Meta Portal</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"me-auto\">\n            <Nav.Link href=\"/\">Explore\n            <Badge pill bg=\"secondary\"style={{marginLeft: '0.2em'}} >coming soon</Badge>\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  )\n}\n\nconst Header = styled.header`\n  display: flex;\n  position: fixed;\n  top: 0;\n  align-items: center;\n  width: 100%;\n  height: ${Sizes.headerHeight};\n  background-color: ${Colors.White};\n  box-shadow: ${Shadows.main};\n  z-index: 100;\n`\n\nconst HeaderNav = styled.nav`\n  display: flex;\n  align-items: center;\n  height: 100%;\n  position: relative;\n`\n\nconst ToMain = styled.a`\n  display: flex;\n  flex-direction: column;\n  width: fit-content;\n  font-size: 18px;\n  line-height: 24px;\n  font-weight: 700;\n  transition: ${Transitions.all};\n\n  &:hover {\n    color: ${Colors.Yellow[500]};\n  }\n`\n\nconst ToMainBottom = styled.span`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 4px;\n  align-items: center;\n  width: fit-content;\n  font-size: 10px;\n  line-height: 14px;\n  font-weight: 500;\n`\n\nconst Handshaking = styled.span`\n  letter-spacing: -0.3em;\n  font-size: 2em;\n`\n\nconst HeaderNavLinks = styled.div`\n  display: grid;\n  position: absolute;\n  left: 50%;\n  grid-auto-flow: column;\n  align-items: center;\n  grid-column-gap: 20px;\n  align-items: center;\n  height: 100%;\n  transform: translateX(-50%);\n`\n\nconst DisabledLink = styled(NavLink)`\n  display: flex;\n  position: relative;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  padding: 10px;\n  font-size: 12px;\n  line-height: 24px;\n  font-weight: 700;\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n  transition: ${Transitions.all};\n  white-space: nowrap;\n  pointer-events: none;\n\n`\n\n\nconst HeaderLink = styled(NavLink)`\n  display: flex;\n  position: relative;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  padding: 10px;\n  font-size: 12px;\n  line-height: 24px;\n  font-weight: 700;\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n  transition: ${Transitions.all};\n  white-space: nowrap;\n\n  &:after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    width: calc(100% - 20px);\n    height: 2px;\n    background-color: ${Colors.Yellow[500]};\n    transform: scaleX(0);\n    transform-origin: 50% 50%;\n    transition: ${Transitions.all};\n  }\n\n  &:hover {\n    color: ${Colors.Yellow[500]};\n\n    &:after {\n      transform: scaleX(1);\n    }\n  }\n  &.active-page {\n    &:after {\n      transform: scaleX(1);\n    }\n  }\n`\n","/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/Balance.tsx",["401","402","403","404","405","406","407","408","409","410","411","412","413","414","415"],"import React, {useRef, useState } from 'react'\n\nimport { formatEther } from '@ethersproject/units'\nimport { useEtherBalance, useEthers } from '@usedapp/core'\nimport { ContainerCustom, ContentBlock, ContentRow, MainContent, Section, SectionRow } from '../components/base/base'\nimport { Label } from '../typography/Label'\nimport { TextInline } from '../typography/Text'\nimport { Title } from '../typography/Title'\n\nimport { AccountButton } from '../components/account/AccountButton'\n\n\nimport * as THREE from 'three'\nimport { Canvas, useFrame } from '@react-three/fiber'\n\nimport {SoldierModel} from '../models/soldierModel';\nimport { OrbitControls } from '@react-three/drei'\n\n\n\nconst STAKING_CONTRACT = '0x00000000219ab540356cBB839Cbe05303d7705Fa'\n\nexport function Balance() {\n\n\n  return (\n    <MainContent>\n    <Section>\n      <ContentBlock>\n\n    </ContentBlock>\n    </Section>\n    </MainContent>\n\n  )\n}\n\nfunction Box(props: JSX.IntrinsicElements['mesh']) {\n  const mesh = useRef<THREE.Mesh>(null!)\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  useFrame((state, delta) => (mesh.current.rotation.x += 0.01))\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? 1.5 : 1}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}\n    >\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nexport function BasicBox(props: any) {\n  return (\n    <mesh>\n      <boxBufferGeometry args={[1, 1, 1]} attach=\"geometry\" />\n      <meshLambertMaterial attach=\"geometry\" color=\"hotpink\"/>\n    </mesh>\n  )\n}\n\n\n",["416","417"],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/global/GlobalStyle.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/SendEtherPage.tsx",["418","419","420","421"],"import React from 'react'\nimport { AccountButton } from '../components/account/AccountButton'\nimport { ContainerCustom, MainContent, Section, SectionRow } from '../components/base/base'\nimport { SendEthForm } from '../components/SendEthForm/SendEthForm'\nimport { Title } from '../typography/Title'\n\nexport const SendEtherPage = () => {\n  return (\n    <MainContent>\n      <ContainerCustom>\n        <Section>\n        <h2> Coming Soon...</h2>\n\n        </Section>\n      </ContainerCustom>\n    </MainContent>\n  )\n}\n",["422","423"],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/Block.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/base/base.tsx",["424","425"],"import styled from 'styled-components'\nimport { BorderRad, Colors, Gradients, Shadows, Sizes } from '../../global/styles'\nimport { Title } from '../../typography/Title'\n\nexport const Page = styled.div`\n  display: flex;\n  position: relative;\n  flex-direction: column;\n  padding-top: ${Sizes.headerHeight};\n  height: 100%;\n  min-height: 100vh;\n  background-color: ghostwhite;\n`\n\nexport const ContainerCustom = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 800px;\n  height: 100%;\n  margin: 0 auto;\n  padding-right: 14px;\n`\n\n// token page \n\nexport const ContainerCustomTokenListSections = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  max-height: 700px;\n  flex-wrap: wrap-reverse;\n`\nexport const ItemSelectionSection = styled.section`\n  flex-direction: column;\n  flex:1;\n  margin:1em;\n  margin-left:0.5em;\n`\n\n// export const ItemSelectionSection = styled.section`\n//   position: relative;\n//   flex-direction: column;\n//   flex:1;\n//   margin:1em;\n//   margin-left:0.5em;\n// `\n\n\nexport const SignedOutContainer = styled.div`\ndisplay: flex;\njusrifyContent: center;\n  margin-bottom: 1em;\n`\n\nexport const ItemListSection = styled.section`\n  margin:1em;\n  margin-right:0.5em;\n  flex-direction: column;\n  flex:2;\n  border-color: black;\n  border-width: 1px;\n`\n\n// export const ItemListSection = styled.section`\n//   margin:1em;\n//   margin-right:0.5em;\n//   position: relative;\n//   flex-direction: column;\n//   flex:2;\n// `\n\nexport const HeaderContainer = styled(ContainerCustom)`\n  max-width: 1200px;\n`\n\n// export const MainContent = styled.main`\n//   display: flex;\n//   position: relative;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   min-height: calc(100vh - ${Sizes.headerHeight});\n//   overflow: scroll;\n\n//   &:before {\n//     content: '';\n//     position: fixed;\n//     top: 0;\n//     left: 0;\n//     width: 100vw;\n//     height: 100vh;\n//     overflow: hidden;\n//     pointer-events: none;\n//     user-select: none;\n//     background-color: ghostwhite;\n//   }\n// `\n\nexport const MainContent = styled.main`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  overflow: scroll;\n  &:before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    overflow: hidden;\n    pointer-events: none;\n    user-select: none;\n    background-color: ghostwhite;\n  }\n`\n\n// export const Section = styled.section`\n//   display: flex;\n//   position: relative;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   margin-top: 24px;\n//   margin-bottom: 60px;\n// `\n\n\n\nexport const Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  margin-top: 24px;\n  margin-bottom: 60px;\n`\n\nexport const SectionRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  margin-bottom: 3em;\n\n  ${Title} {\n    margin-bottom: 0;\n  }\n`\n\nexport const SectionRowAvatar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  margin-bottom: 3.4em;\n`\n\nexport const DomainSelectBoxContainer = styled.div`\n  flex-grow: 1;\n`\n\nexport const DomainTitleContainer = styled.div`\n  flex-grow: 3;\n`\n\nexport const ContentRow = styled.div`\n  display: block;\n\n  & + & {\n    margin-top: 16px;\n  }\n`\n\nexport const ContentBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  background-color: rgb(223 232 241);;\n  border-radius: ${BorderRad.s};\n  box-shadow: ${Shadows.main};\n  padding: 10px;\n`\n\nexport const ContentBlockBackground = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 800px;\n  min-height: 1000px;\n  background-color: #efeeee; \n  border-radius: ${BorderRad.s};\n  box-shadow: ${Shadows.main};\n  padding: 10px;\n`\n// #c4d9ef","/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/Prices.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/History.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/Transactions.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/global/styles.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx",["426","427","428","429","430","431"],"import { formatUnits } from '@ethersproject/units'\nimport { ChainId, CHAIN_NAMES, useEthers } from '@usedapp/core'\nimport React, { useState } from 'react'\nimport { Row,Spinner } from 'react-bootstrap'\nimport styled from 'styled-components'\nimport { Colors } from '../../global/styles'\nimport { MetaBadge } from '../../portalHooks/BadgeHelperTypes'\nimport { useBadgeList } from '../../portalHooks/useBadgeList'\nimport { TextBold } from '../../typography/Text'\nimport { BadgeOverviewModal, BadgeParams } from '../badge/BadgeOverviewModal'\nimport { TokenSVGIcon } from './TokenSVGIcon'\nimport { useSelector } from 'react-redux'\n\n\ndeclare const window: any;\n\nexport function TokensList() {\n\n  const { chainId, account, library } = useEthers();\n  const badges: MetaBadge[]| undefined = useBadgeList(account);\n\n  console.log('badges : ',badges)\n  const [showModal, setShowModal] = useState(false)\n  const [selectedBadgeParams, setSelectedBadgeParams] = useState<BadgeParams>()\n\n    const handleShowModal =(index: number, badge: MetaBadge) =>  {\n      if(!badge || !badge.ui){\n        return;\n      }\n      const chainId: ChainId = badge.ui.onChain ? badge.ui.onChain.chainId : 0;\n      setSelectedBadgeParams({\n        domainName: 'Meta Portal',\n        name: badge.ui.name,\n        description: badge.ui.description,\n        requirements: badge.ui.requirements,\n        address: badge.ui.onChain ? badge.ui.onChain.address : null,\n        tokenId: badge.ui.onChain ? badge.ui.onChain.tokenId : 0,\n        chainName: CHAIN_NAMES[chainId],\n        chainId: chainId,\n        index: index,\n      });\n\n      setShowModal(!showModal);\n    }\n\n    const item = useSelector((state: any) => {\n      return{\n      index: state.selectedItem.index,\n      balance: state.selectedItem.balance,\n      holders: state.selectedItem.holders,\n      name: state.selectedItem.name,\n      address: state.selectedItem.address,\n      color: state.selectedItem.color,\n      tokenId: state.selectedItem.tokenId,\n    }\n    })\n\n\n  return (\n    <div>\n      {\n      (showModal && selectedBadgeParams) && <BadgeOverviewModal setShowModal={setShowModal} badgeParams={selectedBadgeParams} />\n      }\n      {!badges ? (<Spinner animation=\"grow\" /> ): (\n        <BadgeContainer>\n        {badges && badges.map((badge: MetaBadge, idx:number) => {\n              return (\n         \n                    <TokenItem key={`SubSection-${idx}`}> \n                    <TokenIconContainer onClick={() => handleShowModal(idx, badge)}>\n                      <BadgeCreatorLogo>\n                        MPL\n                      </BadgeCreatorLogo>\n                      {(item.color && item.index === idx) && <BadgeApplied> \n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" color=\"#FFF4D4\" className=\"bi bi-check-square\" viewBox=\"0 0 16 16\">\n  <path d=\"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n  <path d=\"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.235.235 0 0 1 .02-.022z\"/>\n</svg>\n                      </BadgeApplied>}\n                      <TokenSVGIcon src={''} alt={''}></TokenSVGIcon>\n                      <TokenBalance> \n                        {formatUnits(10,0)}xp\n                      </TokenBalance>\n                    </TokenIconContainer>\n                        {badge.ui && <TokenName>{badge.ui.name}</TokenName>}                    \n                  </TokenItem>\n           \n          )})}\n        </BadgeContainer>\n    )}\n    </div>\n  )\n}\n\n\nconst BadgeContainer = styled.div`\ndisplay: flex;\nflex-flow: row wrap;\nheight: 100%;\n`\n\n\nexport const Button = styled.button`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 8px;\n  align-items: center;\n  width: fit-content;\n  height: 40px;\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  color: ${Colors.Black[900]};\n  border: 1px solid ${Colors.Black[900]};\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: ${Colors.Black[900]};\n    color: ${Colors.Yellow[100]};\n  }\n`\n\nconst MintButton = styled(Button)`\n  background-color: ${Colors.Yellow[100]};\n`\n\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`\n\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`\n\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n`\n\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`\n\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 12px;\n`\n\nconst BadgeApplied = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  padding:0.25em;\n  font-size: 12px;\n`\n\nconst BadgeCreatorLogo = styled(TextBold)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding:0.25em;\n  font-size: 12px;\n`\n","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/base/Link.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Forms.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/typography/Label.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/typography/Title.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/account/AccountButton.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/typography/Text.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/SendEthForm/SendEthForm.tsx",["432","433","434","435"],"import React, { useEffect, useState } from 'react'\nimport { formatEther } from '@ethersproject/units'\nimport { BigNumber } from 'ethers'\nimport { ContentBlock } from '../base/base'\nimport { TextBold } from '../../typography/Text'\nimport { Colors, BorderRad, Transitions } from '../../global/styles'\nimport styled from 'styled-components'\nimport { useEtherBalance, useEthers } from '@usedapp/core'\nimport { Button } from '../base/Button'\nimport { useSendTransaction } from '@usedapp/core'\nimport { utils } from 'ethers'\nimport { StatusAnimation } from '../Transactions/TransactionForm'\n\nconst formatter = new Intl.NumberFormat('en-us', {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n})\n\nconst formatBalance = (balance: BigNumber | undefined) =>\n  formatter.format(parseFloat(formatEther(balance ?? BigNumber.from('0'))))\n\nconst InputComponent = () => {\n  const { account } = useEthers()\n\n  const [amount, setAmount] = useState('0')\n  const [address, setAddress] = useState('')\n  const [disabled, setDisabled] = useState(false)\n\n  const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n\n  const handleClick = () => {\n    setDisabled(true)\n    sendTransaction({ to: address, value: utils.parseEther(amount) })\n  }\n\n  useEffect(() => {\n    if (state.status != 'Mining') {\n      setDisabled(false)\n      setAmount('0')\n      setAddress('')\n    }\n  }, [state])\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      <InputRow>\n        <Input\n          id={`EthInput`}\n          type=\"number\"\n          step=\"0.01\"\n          value={amount}\n          onChange={(e) => setAmount(e.currentTarget.value)}\n          min=\"0\"\n          disabled={disabled}\n        />\n        <FormTicker>ETH to:</FormTicker>\n        <AddressInput\n          id={`AddressInput`}\n          type=\"text\"\n          value={address}\n          onChange={(e) => setAddress(e.currentTarget.value)}\n          disabled={disabled}\n        />\n        <SmallButton disabled={!account || disabled} onClick={handleClick}>\n          Send\n        </SmallButton>\n      </InputRow>\n      <StatusAnimation transaction={state} />\n    </div>\n  )\n}\n\nexport const SendEthForm = () => {\n  const { account } = useEthers()\n  const balance = useEtherBalance(account)\n  return (\n    <div>\n      <TitleRow>\n        <CellTitle>Send transaction</CellTitle>\n        <BalanceWrapper>Your ETH balance: {formatBalance(balance)}</BalanceWrapper>\n      </TitleRow>\n      {/* <LabelRow>\n        <Label style={{ marginLeft: '58px' }} htmlFor={'EthInput'}>\n          How much?\n        </Label>\n        <Label style={{ marginLeft: '240px' }} htmlFor={'AddressInput'}>\n          To whom?\n        </Label>\n      </LabelRow> */}\n      <InputComponent />\n      </div>\n  )\n}\n\nconst CellTitle = styled(TextBold)`\n  font-size: 18px;\n`\n\nconst LabelRow = styled.div`\n  display: flex;\n  margin: 32px 0 24px 0;\n`\n\nconst Label = styled.label`\n  font-weight: 700;\n  cursor: pointer;\n  transition: ${Transitions.all};\n\n  &:hover,\n  &:focus-within {\n    color: ${Colors.Yellow[500]};\n  }\n`\n\nconst TitleRow = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  border-bottom: ${Colors.Gray['300']} 1px solid;\n  padding: 16px;\n`\n\nconst BalanceWrapper = styled.div`\n  color: ${Colors.Gray['600']};\n  font-size: 14px;\n`\n\nconst Input = styled.input`\n  width: 120px;\n  padding: 0 0 0 24px;\n  border: 0;\n  border-radius: ${BorderRad.m};\n  -moz-appearance: textfield;\n  outline: none;\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus,\n  &:-webkit-autofill:active {\n    -webkit-background-clip: text;\n  }\n`\n\nconst AddressInput = styled(Input)`\n  width: 100%;\n  padding: 0 0 0 38px;\n`\n\nconst InputRow = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: ${Colors.Gray['600']};\n  border: ${Colors.Gray['300']} 1px solid;\n  border-radius: ${BorderRad.m};\n  overflow: hidden;\n  transition: ${Transitions.all};\n  padding:10px;\n\n  &:hover,\n  &:focus-within {\n    border-color: ${Colors.Black[900]};\n  }\n`\n\nconst FormTicker = styled.div`\n  padding: 0 8px;\n`\n\nconst SmallButton = styled(Button)`\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  padding: 8px 24px;\n  margin-top:10px;\n\n  &:disabled {\n    color: ${Colors.Gray['600']};\n    cursor: unset;\n  }\n\n  &:disabled:hover,\n  &:disabled:focus {\n    background-color: unset;\n    color: unset;\n  }\n`\n",["436","437"],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/ItemSelection/ItemSelection.tsx",["438","439","440","441","442","443","444","445","446","447","448","449"],"import { OrbitControls } from '@react-three/drei'\nimport { Canvas } from '@react-three/fiber'\nimport { useEthers } from '@usedapp/core'\nimport React, { Suspense } from 'react'\n  import { Badge, Container } from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { SoldierModel } from '../../models/soldierModel'\nimport { RANDOM_VISOR_COLOR_NAMES } from '../../portalHooks/BadgeHelper'\nimport { TextBold } from '../../typography/Text'\n\n\n\n\n\n\nexport function ItemSelection() {\n  const { chainId, account } = useEthers()\n\n  const item = useSelector((state: any) => {\n    return{index: state.selectedItem.index,\n    balance: state.selectedItem.balance,\n    holders: state.selectedItem.holders,\n    name: state.selectedItem.name,\n    address: state.selectedItem.address,\n    color: state.selectedItem.color,\n    tokenId:state.selectedItem.tokenId,\n  }\n  })\n\n\n  return account ?  (     \n    <AvatarContainer>\n\n    <Canvas dpr={[1, 2]} camera={{ position: [0, 0, -4], fov: 32 }}>\n    <Suspense fallback={null}>\n    <OrbitControls enableZoom={false} enablePan={false}/>\n    <ambientLight />\n    <pointLight position={[10, 10, 10]} />\n    <SoldierModel position={[0, -0.9, 0]} color={item.color} />\n    </Suspense>\n    </Canvas> \n    </AvatarContainer>\n  ) : <Container></Container>\n}\n\nconst AvatarContainer = styled.div`\n  height: 100%;\n`\n\nconst LinkIconWrapper = styled.div`\n  width: 12px;\n  height: 12px;\n  margin-left:5px;\n`\n\n\nconst NoItemSelected = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 14px;\n`\n\nconst ItemDetail = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 14px;\n`\n\nconst ItemAddressWrapper = styled.div`\n  display: flex;\n  font-size: 15px;\n`\n\nconst ItemAddressLink = styled.a`\n`\nconst ItemPreview = styled(TextBold)`\nwidth:60%;\n`\n\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 15px;\n`\nconst SectionBreak = styled.div`\n  margin-bottom: 20px;\n`\n\nconst SelectionTitle = styled.h2`\n`","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/index.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/hooks.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/interfaces/interfaces.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokenSVGIcon.tsx",["450","451"],"import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { BorderRad } from '../../global/styles'\n\nexport function TokenSVGIcon({ src, alt }: { src: string; alt: string }) {\n  const [isIconError, setIconError] = useState(false)\n\n  return (\n    <>\n      {isIconError ? (\n        '🤷‍♂️'\n      ) : (\n          <SvgContainer>\n  <svg xmlns=\"http://www.w3.org/2000/svg\"  fill=\"currentColor\" className=\"bi bi-controller\" viewBox=\"0 0 16 16\">\n  <path d=\"M11.5 6.027a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-1.5 1.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm2.5-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-1.5 1.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm-6.5-3h1v1h1v1h-1v1h-1v-1h-1v-1h1v-1z\"/>\n  <path d=\"M3.051 3.26a.5.5 0 0 1 .354-.613l1.932-.518a.5.5 0 0 1 .62.39c.655-.079 1.35-.117 2.043-.117.72 0 1.443.041 2.12.126a.5.5 0 0 1 .622-.399l1.932.518a.5.5 0 0 1 .306.729c.14.09.266.19.373.297.408.408.78 1.05 1.095 1.772.32.733.599 1.591.805 2.466.206.875.34 1.78.364 2.606.024.816-.059 1.602-.328 2.21a1.42 1.42 0 0 1-1.445.83c-.636-.067-1.115-.394-1.513-.773-.245-.232-.496-.526-.739-.808-.126-.148-.25-.292-.368-.423-.728-.804-1.597-1.527-3.224-1.527-1.627 0-2.496.723-3.224 1.527-.119.131-.242.275-.368.423-.243.282-.494.575-.739.808-.398.38-.877.706-1.513.773a1.42 1.42 0 0 1-1.445-.83c-.27-.608-.352-1.395-.329-2.21.024-.826.16-1.73.365-2.606.206-.875.486-1.733.805-2.466.315-.722.687-1.364 1.094-1.772a2.34 2.34 0 0 1 .433-.335.504.504 0 0 1-.028-.079zm2.036.412c-.877.185-1.469.443-1.733.708-.276.276-.587.783-.885 1.465a13.748 13.748 0 0 0-.748 2.295 12.351 12.351 0 0 0-.339 2.406c-.022.755.062 1.368.243 1.776a.42.42 0 0 0 .426.24c.327-.034.61-.199.929-.502.212-.202.4-.423.615-.674.133-.156.276-.323.44-.504C4.861 9.969 5.978 9.027 8 9.027s3.139.942 3.965 1.855c.164.181.307.348.44.504.214.251.403.472.615.674.318.303.601.468.929.503a.42.42 0 0 0 .426-.241c.18-.408.265-1.02.243-1.776a12.354 12.354 0 0 0-.339-2.406 13.753 13.753 0 0 0-.748-2.295c-.298-.682-.61-1.19-.885-1.465-.264-.265-.856-.523-1.733-.708-.85-.179-1.877-.27-2.913-.27-1.036 0-2.063.091-2.913.27z\"/>\n</svg>\n      </SvgContainer>\n      )}\n    </>\n  )\n}\nconst SvgContainer = styled.div`\n  width: 70%;\n  height: 70%;\n  object-fit: contain;\n  color: #fff;\n  padding-top:0.5em;\n`","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/TransactionForm.tsx",["452","453","454"],"import { formatEther } from '@ethersproject/units'\nimport { TransactionStatus, useEthers, transactionErrored } from '@usedapp/core'\nimport React, { ReactElement, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { TextBold } from '../../typography/Text'\nimport { ContentBlock } from '../base/base'\nimport { Button } from '../base/Button'\nimport { BorderRad, Colors } from '../../global/styles'\nimport { BigNumber } from 'ethers'\nimport { SpinnerIcon, CheckIcon, ExclamationIcon } from './Icons'\n\nimport { AnimatePresence, motion } from 'framer-motion'\n\nconst formatter = new Intl.NumberFormat('en-us', {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n})\n\nconst formatBalance = (balance: BigNumber | undefined) =>\n  formatter.format(parseFloat(formatEther(balance ?? BigNumber.from('0'))))\n\ninterface StatusBlockProps {\n  color: string\n  text: string\n  icon: ReactElement\n}\n\nconst StatusBlock = ({ color, text, icon }: StatusBlockProps) => (\n  <InformationRow\n    layout\n    initial={{ opacity: 0, y: -50 }}\n    animate={{ opacity: 1, y: 0 }}\n    exit={{ opacity: 0, y: 50 }}\n    key={text}\n  >\n    <IconContainer style={{ fill: color }}>{icon}</IconContainer>\n    <div style={{ color: color, textAlign: 'center' }}>{text}</div>\n  </InformationRow>\n)\n\ninterface StatusAnimationProps {\n  transaction: TransactionStatus\n}\n\nexport const StatusAnimation = ({ transaction }: StatusAnimationProps) => {\n  const [showTransactionStatus, setShowTransactionStatus] = useState(false)\n  const [timer, setTimer] = useState(\n    setTimeout(() => {\n      void 0\n    }, 1)\n  )\n\n  useEffect(() => {\n    setShowTransactionStatus(true)\n    clearTimeout(timer)\n\n    if (transaction.status != 'Mining') setTimer(setTimeout(() => setShowTransactionStatus(false), 5000))\n  }, [transaction])\n\n  return (\n    <AnimationWrapper>\n      <AnimatePresence initial={false} exitBeforeEnter>\n        {showTransactionStatus && transactionErrored(transaction) && (\n          <StatusBlock\n            color={Colors.Red['400']}\n            text={transaction?.errorMessage || ''}\n            icon={<ExclamationIcon />}\n            key={transaction?.chainId + transaction.status}\n          />\n        )}\n        {showTransactionStatus && transaction.status === 'Mining' && (\n          <StatusBlock\n            color=\"black\"\n            text=\"Transaction is being mined\"\n            icon={<SpinnerIcon />}\n            key={transaction?.chainId + transaction.status}\n          />\n        )}\n        {showTransactionStatus && transaction.status === 'Success' && (\n          <StatusBlock\n            color=\"green\"\n            text=\"Transaction successful\"\n            icon={<CheckIcon />}\n            key={transaction?.chainId + transaction.status}\n          />\n        )}\n      </AnimatePresence>\n    </AnimationWrapper>\n  )\n}\n\ninterface InputComponentProps {\n  send: (value: string) => void\n  ticker: string\n  transaction: TransactionStatus\n}\n\nconst InputComponent = ({ ticker, transaction, send }: InputComponentProps) => {\n  const { account } = useEthers()\n  const [value, setValue] = useState('0')\n  const [disabled, setDisabled] = useState(false)\n\n  const onClick = () => {\n    if (Number(value) > 0) {\n      setDisabled(true)\n      send(value)\n    }\n  }\n\n  useEffect(() => {\n    if (transaction.status != 'Mining') {\n      setDisabled(false)\n      setValue('0')\n    }\n  }, [transaction])\n\n  return (\n    <InputRow>\n      <Input\n        id={`${ticker}Input`}\n        type=\"number\"\n        step=\"0.01\"\n        min=\"0\"\n        value={value}\n        onChange={(e) => setValue(e.currentTarget.value)}\n        disabled={disabled}\n      />\n      <FormTicker>{ticker}</FormTicker>\n      <SmallButton disabled={!account || disabled} onClick={onClick}>\n        Send\n      </SmallButton>\n    </InputRow>\n  )\n}\n\ninterface TransactionFormProps {\n  balance: BigNumber | undefined\n  send: (value: string) => void\n  title: string\n  ticker: string\n  transaction: TransactionStatus\n}\n\nexport const TransactionForm = ({ balance, send, title, ticker, transaction }: TransactionFormProps) => (\n  <SmallContentBlock>\n    <TitleRow>\n      <CellTitle>{title}</CellTitle>\n      <BalanceWrapper>\n        Your {ticker} balance: {formatBalance(balance)}\n      </BalanceWrapper>\n    </TitleRow>\n    <LabelRow>\n      <Label htmlFor={`${ticker}Input`}>How much?</Label>\n    </LabelRow>\n    <InputComponent ticker={ticker} transaction={transaction} send={send} />\n    <StatusAnimation transaction={transaction} />\n  </SmallContentBlock>\n)\n\nconst SmallButton = styled(Button)`\n  display: flex;\n  justify-content: center;\n  min-width: 95px;\n  height: unset;\n  padding: 8px 24px;\n\n  &:disabled {\n    color: ${Colors.Gray['600']};\n    cursor: unset;\n  }\n\n  &:disabled:hover,\n  &:disabled:focus {\n    background-color: unset;\n    color: unset;\n  }\n`\n\nconst Input = styled.input`\n  height: 100%;\n  width: 120px;\n  padding: 0 0 0 24px;\n  border: 0;\n  border-radius: ${BorderRad.m};\n  -moz-appearance: textfield;\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  &:focus {\n    outline: transparent auto 1px;\n  }\n\n  &:focus-visible {\n    box-shadow: inset 0 0 0 2px ${Colors.Black['900']};\n  }\n`\n\nconst CellTitle = styled(TextBold)`\n  font-size: 18px;\n`\n\nconst InputRow = styled.div`\n  display: flex;\n  margin: 0 auto;\n  color: ${Colors.Gray['600']};\n  align-items: center;\n  border: ${Colors.Gray['300']} 1px solid;\n  border-radius: ${BorderRad.m};\n  overflow: hidden;\n`\n\nconst FormTicker = styled.div`\n  padding: 0 16px;\n`\n\nconst LabelRow = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 32px 0 24px 0;\n`\n\nconst Label = styled.label`\n  font-weight: 700;\n`\n\nconst TitleRow = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  border-bottom: ${Colors.Gray['300']} 1px solid;\n  padding: 16px;\n`\n\nconst BalanceWrapper = styled.div`\n  color: ${Colors.Gray['600']};\n  font-size: 14px;\n`\n\nconst SmallContentBlock = styled(ContentBlock)`\n  padding: 0;\n`\n\nconst IconContainer = styled.div`\n  margin-right: 15px;\n  height: 40px;\n  width: 40px;\n  float: left;\n`\n\nconst InformationRow = styled(motion.div)`\n  height: 60px;\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  overflow: auto;\n`\n\nconst AnimationWrapper = styled.div`\n  height: 80px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: auto;\n  margin: 10px;\n`\n","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/base/Button.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/account/AccountModal.tsx",["455"],"import React from 'react'\nimport styled from 'styled-components'\nimport { useEthers, getExplorerAddressLink, useEtherBalance } from '@usedapp/core'\nimport { TransactionsList } from '../Transactions/History'\nimport { formatEther } from '@ethersproject/units'\nimport { BigNumber } from 'ethers'\nimport { Colors, Shadows, Transitions } from '../../global/styles'\nimport { ShareIcon } from '../Transactions/Icons'\nimport { motion } from 'framer-motion'\nimport { Link } from '../base/Link'\n\nconst formatter = new Intl.NumberFormat('en-us', {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n})\n\nconst formatBalance = (balance: BigNumber | undefined) =>\n  formatter.format(parseFloat(formatEther(balance ?? BigNumber.from('0'))))\n\nexport type AccountModalProps = {\n  setShowModal: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const AccountModal = ({ setShowModal }: AccountModalProps) => {\n  const { account, chainId } = useEthers()\n  const balance = useEtherBalance(account)\n  if (account && chainId) {\n    return (\n      <ModalBackground onClick={() => setShowModal(false)}>\n        <Modal\n          onClick={(e) => e.stopPropagation()}\n          layout\n          initial={{ opacity: 0, y: -50 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0 }}\n        >\n          <TitleRow>\n            Account info\n            <ClosingButton onClick={() => setShowModal(false)}>+</ClosingButton>\n          </TitleRow>\n          <AccountInfo>\n            <AccountAddress>Address: {account}</AccountAddress>\n            <LinkWrapper>\n              <Link href={getExplorerAddressLink(account, chainId)} target=\"_blank\" rel=\"noopener noreferrer\">\n                Show on etherscan\n                <LinkIconWrapper>\n                  <ShareIcon />\n                </LinkIconWrapper>\n              </Link>\n              {window.isSecureContext && (\n                <Link onClick={() => console.log(navigator.clipboard.writeText(account))}>Copy to clipboard</Link>\n              )}\n            </LinkWrapper>\n            <BalanceWrapper>ETH: {balance && formatBalance(balance)}</BalanceWrapper>\n          </AccountInfo>\n          <HistoryWrapper>\n            <TransactionsList />\n          </HistoryWrapper>\n        </Modal>\n      </ModalBackground>\n    )\n  } else {\n    setShowModal(false)\n    return <div />\n  }\n}\n\nconst LinkWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 20px;\n`\n\nconst LinkIconWrapper = styled.div`\n  width: 12px;\n  height: 12px;\n`\n\nconst BalanceWrapper = styled.div`\n  margin-top: 12px;\n`\n\nconst HistoryWrapper = styled.div``\n\nconst AccountAddress = styled.p`\n  font-weight: 700;\n  margin-bottom: 10px;\n`\n\nconst ClosingButton = styled.button`\n  display: flex;\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  line-height: 1;\n  width: 24px;\n  height: 24px;\n  transform: rotate(45deg);\n  transition: ${Transitions.all};\n\n  &:hover {\n    color: ${Colors.Yellow[500]};\n  }\n`\n\nconst TitleRow = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  padding: 0.5em;\n  width: 100%;\n  font-size: 20px;\n`\nconst DomainRow = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 100%;\n  font-size: 15px;\n  padding-left: 0.5em;\n`\n\nconst AccountInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0.5em;\n  padding: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${Shadows.main};\n  background-color: ${Colors.White};\n`\n\nconst Modal = styled(motion.div)`\n  display: flex;\n  flex-direction: column;\n  height:fit-content;\n  background-color: white;\n  box-shadow: ${Shadows.main};\n  border-radius: 10px;\n  z-index: 3;\n  margin-top:6em;\n`\n\nconst ModalBackground = styled(motion.div)`\n  top: 0;\n  left: 0;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  margin: 0px;\n  z-index: 2;\n  background-color: rgba(235, 232, 223, 0.5);\n  display: flex;\n  justify-content: center;\n`\n","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/ShareIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/SendItemForm/SendItemForm.tsx",["456","457","458","459","460","461","462","463","464"],"import React, { useEffect, useState } from 'react'\nimport { formatEther } from '@ethersproject/units'\nimport { BigNumber } from 'ethers'\nimport { ContentBlock } from '../base/base'\nimport { TextBold } from '../../typography/Text'\nimport { Colors, BorderRad, Transitions } from '../../global/styles'\nimport styled from 'styled-components'\nimport { useEtherBalance, useEthers } from '@usedapp/core'\nimport { Button } from '../base/Button'\nimport { useSendTransaction } from '@usedapp/core'\nimport { utils } from 'ethers'\nimport { StatusAnimation } from '../Transactions/TransactionForm'\n\nconst formatter = new Intl.NumberFormat('en-us', {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n})\n\nconst formatBalance = (balance: BigNumber | undefined) =>\n  formatter.format(parseFloat(formatEther(balance ?? BigNumber.from('0'))))\n\nconst InputComponent = () => {\n  const { account } = useEthers()\n\n  const [amount, setAmount] = useState('0')\n  const [address, setAddress] = useState('')\n  const [disabled, setDisabled] = useState(false)\n\n  const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n\n  const handleClick = () => {\n    setDisabled(true)\n    sendTransaction({ to: address, value: utils.parseEther(amount) })\n  }\n\n  useEffect(() => {\n    if (state.status != 'Mining') {\n      setDisabled(false)\n      setAmount('0')\n      setAddress('')\n    }\n  }, [state])\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      <InputRow>\n        <FormTicker># of Items :</FormTicker>\n        <Input\n          id={`EthInput`}\n          type=\"number\"\n          step=\"0.01\"\n          value={amount}\n          onChange={(e) => setAmount(e.currentTarget.value)}\n          min=\"0\"\n          disabled={disabled}\n        />\n        <FormTicker>Recipient :</FormTicker>\n        <AddressInput\n          id={`AddressInput`}\n          type=\"text\"\n          value={address}\n          onChange={(e) => setAddress(e.currentTarget.value)}\n          disabled={disabled}\n        />\n        <SmallButton disabled={!account || disabled} onClick={handleClick}>\n          Send\n        </SmallButton>\n      </InputRow>\n      <StatusAnimation transaction={state} />\n    </div>\n  )\n}\n\nexport const SendItemForm = () => {\n  const { account } = useEthers()\n  const balance = useEtherBalance(account)\n  return (\n    <div>\n     <InputComponent />\n      </div>\n  )\n}\n\nconst CellTitle = styled(TextBold)`\n  font-size: 18px;\n`\n\nconst LabelRow = styled.div`\n  display: flex;\n  margin: 32px 0 24px 0;\n`\n\nconst Label = styled.label`\n  font-weight: 700;\n  cursor: pointer;\n  transition: ${Transitions.all};\n\n  &:hover,\n  &:focus-within {\n    color: ${Colors.Yellow[500]};\n  }\n`\n\nconst TitleRow = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  border-bottom: ${Colors.Gray['300']} 1px solid;\n  padding: 16px;\n`\n\nconst BalanceWrapper = styled.div`\n  color: ${Colors.Gray['600']};\n  font-size: 14px;\n`\n\nconst Input = styled.input`\n  width: 120px;\n  padding: 0 0 0 24px;\n  border: 0;\n  border-radius: ${BorderRad.m};\n  -moz-appearance: textfield;\n  outline: none;\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus,\n  &:-webkit-autofill:active {\n    -webkit-background-clip: text;\n  }\n`\n\nconst AddressInput = styled(Input)`\n  width: 100%;\n  padding: 0 0 0 38px;\n`\n\nconst InputRow = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: ${Colors.Gray['600']};\n  border: ${Colors.Gray['300']} 1px solid;\n  border-radius: ${BorderRad.m};\n  overflow: hidden;\n  transition: ${Transitions.all};\n  padding:10px;\n\n  &:hover,\n  &:focus-within {\n    border-color: ${Colors.Black[900]};\n  }\n`\n\nconst FormTicker = styled.div`\n  padding: 0 8px;\n`\n\nconst SmallButton = styled(Button)`\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  padding: 8px 24px;\n  margin-top:10px;\n\n  &:disabled {\n    color: ${Colors.Gray['600']};\n    cursor: unset;\n  }\n\n  &:disabled:hover,\n  &:disabled:focus {\n    background-color: unset;\n    color: unset;\n  }\n`\n",["465","466"],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/WrapIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/WalletIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/UnwrapIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/SpinnerIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/ExclamationIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/ClockIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/Transactions/Icons/CheckIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/models/soldierModel.tsx",["467","468","469","470","471","472","473","474"],"\nimport { useGLTF, useAnimations, useTexture } from '@react-three/drei'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\n\nimport * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { Color } from 'three'\n\n\nexport type GLTFResult = GLTF & {\n    nodes: Record<string, THREE.Mesh>;\n    materials: Record<string, THREE.MeshStandardMaterial>;\n}\n\n\n\nexport  function SoldierModel(props:any) {\n  const group = useRef()\n  const { nodes, materials, animations } = useGLTF('/soldier2.glb') as any;\n  const { actions } = useAnimations(animations, group)\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group rotation={[-Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>\n        <primitive object={nodes.mixamorigHips} />\n        <skinnedMesh\n          geometry={nodes.vanguard_Mesh.geometry}\n          material={materials.VanguardBodyMat}\n          skeleton={nodes.vanguard_Mesh.skeleton}\n        >\n         </skinnedMesh>\n        <skinnedMesh\n          geometry={nodes.vanguard_visor.geometry}\n          material={materials.Vanguard_VisorMat}\n          skeleton={nodes.vanguard_visor.skeleton}\n        >\n        <meshStandardMaterial color={ props.color ? props.color : 'grey' } />\n        </skinnedMesh>\n\n\n      </group>\n    </group>\n  )\n}\n  \n\nuseGLTF.preload('/soldier.glb');\n","/Users/dominiclee/Desktop/ethprojs/metaportal/src/workarounds/useContractFunction.ts",["475"],"import { useCallback, useState } from 'react'\nimport { usePromiseTransaction } from '@usedapp/core/dist/esm/src/hooks/usePromiseTransaction'\nimport { Contract } from '@ethersproject/contracts'\n\nexport const useContractFunction = (\n  contract: Contract,\n  functionName: string,\n  chainId: number | undefined,\n  options?: { transactionName?: string }\n) => {\n  const [events, setEvents] = useState<Record<string, any> | undefined>(\n    undefined\n  )\n\n  const { promiseTransaction, state } = usePromiseTransaction(chainId, options)\n\n  const send = useCallback(\n    async (...args: any[]) => {\n      const sendPromise = contract[functionName](...args).then(\n        (result: any): Promise<any> => {\n          // Need to add chainId here to prevent \"TypeError: Unsupported Chain\" error message\n          result.chainId = chainId\n          return result\n        }\n      )\n\n      const receipt = await promiseTransaction(sendPromise)\n\n      if (receipt) {\n        if (receipt.logs && receipt.logs.length > 0) {\n          setEvents(receipt.logs.map((log) => contract.interface.parseLog(log)))\n        } else {\n          setEvents([])\n        }\n      }\n    },\n    [contract, functionName, options]\n  )\n\n  return { send, state, events }\n}","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/badge/BadgeOverviewModal.tsx",["476","477","478","479"],"import React from 'react'\nimport styled from 'styled-components'\nimport { useEthers, getExplorerAddressLink, useEtherBalance, useContractFunction, useContractCall } from '@usedapp/core'\nimport { TransactionsList } from '../Transactions/History'\nimport { formatEther } from '@ethersproject/units'\nimport { BigNumber, utils } from 'ethers'\nimport { Colors, Shadows, Transitions } from '../../global/styles'\nimport { ShareIcon } from '../Transactions/Icons'\nimport { motion } from 'framer-motion'\nimport { Link } from '../base/Link'\nimport { RequirementsList } from './BadgeRequirementsList'\nimport { Contract } from '@ethersproject/contracts'\nimport { useAppDispatch, useAppSelector } from '../../hooks'\nimport { updatedSelectedItem } from '../TokensList/SelectedItemSlice'\nimport { RANDOM_VISOR_COLORS } from '../../portalHooks/BadgeHelper'\nimport { ERC1155Interface } from '../../interfaces/interfaces'\nimport { formatUnits } from '@ethersproject/units'\nimport { Badge } from 'react-bootstrap'\n\n\nexport interface BadgeParams {\n  domainName: string,\n  name: string, \n  index: number,\n  description: string,\n  requirements: string[],\n  address: string | null,\n  chainName: string | null,\n  chainId: number,\n  tokenId: number,\n}\n\n\nconst formatter = new Intl.NumberFormat('en-us', {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n})\n\nconst formatBalance = (balance: BigNumber | undefined) =>\n  formatter.format(parseFloat(formatEther(balance ?? BigNumber.from('0'))))\n\nexport type BadgeOverviewModalProps = {\n  setShowModal: React.Dispatch<React.SetStateAction<boolean>>,\n  badgeParams: BadgeParams\n}\n\nexport const VisorsABI = [\n  \"function requestMint(uint256 visorId) public payable\",\n];\n\n\n\nexport const BadgeOverviewModal = ({ setShowModal, badgeParams }: BadgeOverviewModalProps) => {\n  const { account, chainId, library } = useEthers()\n  const balance = useEtherBalance(account)\n  const visorInterface = new utils.Interface(VisorsABI)\n  const signer = library?.getSigner();\n  let contract: Contract|null = null;\n  if (badgeParams.address && badgeParams.address !== undefined) {\n    contract =  new Contract(badgeParams.address, visorInterface, signer);\n  }  \n  else {\n    contract =  new Contract('0x0000000000000000000000000000000000000000', visorInterface, signer);\n  }\n\n  function useERC1155TokenBalance(contractAddress: (string|undefined|null),  account: (string|undefined|null), tokenId:  (number|undefined|null)): any[] {\n    const [tokenBalance] =\n      useContractCall(\n        account &&\n        contractAddress && {\n            abi: ERC1155Interface,\n            address: contractAddress,\n            method: 'balanceOf',\n            args: [account, tokenId],\n          }\n      ) ?? []\n    return tokenBalance\n  }\n\n  const tokenBalance = useERC1155TokenBalance(\n    badgeParams.address,\n    account,\n    badgeParams.tokenId,\n    );\n  const { send } = useContractFunction(contract, 'requestMint', { signer: signer,  transactionName: 'Mint' });\n\n  const dispatch = useAppDispatch();\n\n  const handleApplyBadgeToAvatar =(index: number| null, tokenId: number| null) =>  {\n    dispatch (updatedSelectedItem(\n      {\n        index: index,\n        balance: 0,\n        holders: 0,\n        name: 'noname',\n        address: 'noaddress',\n        color: tokenId === null ? RANDOM_VISOR_COLORS[0]: RANDOM_VISOR_COLORS[tokenId],\n        tokenId: tokenId\n      }\n    ));\n    \n  }\n\n  const doMint = async (visorId: number) => {\n    let overrides = {\n      value: utils.parseEther('0.1')\n    };\n    send([visorId],overrides);\n  }  \n  if (account && chainId) {\n    return (\n      <ModalBackground onClick={() => setShowModal(false)}>\n        <Modal\n          onClick={(e) => e.stopPropagation()}\n          layout\n          initial={{ opacity: 0, y: -50 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0 }}\n        >\n          <TitleRow>\n            Badge Details\n            <ClosingButton onClick={() => setShowModal(false)}>+</ClosingButton>\n          </TitleRow>\n          <DomainRow>\n            <Badge pill bg=\"success\">{badgeParams.domainName}</Badge>\n          </DomainRow>\n       \n          <AccountInfo>\n          {badgeParams && <AccountAddress>{badgeParams.name}</AccountAddress>}\n          {badgeParams && <p>Portal Item : <b>{badgeParams.description}</b></p>}\n          {(badgeParams && badgeParams.address) && <p>Network : <b>{badgeParams.chainName}</b> </p>}\n          {(badgeParams && badgeParams.address) && <p>Mint : <b>{badgeParams.address}</b> </p>}\n          {(badgeParams && badgeParams.address) && <p>Token ID  : <b>{badgeParams.tokenId}</b> </p>}\n\n          {       \n            (badgeParams && badgeParams.address) &&\n            <LinkWrapper>\n              <Link href={getExplorerAddressLink(badgeParams.address, badgeParams.chainId)} target=\"_blank\" rel=\"noopener noreferrer\">\n                Show on etherscan\n                <LinkIconWrapper>\n                  <ShareIcon />\n                </LinkIconWrapper>\n              </Link>\n              {window.isSecureContext && (\n                <Link onClick={() => console.log(navigator.clipboard.writeText(badgeParams.address ? badgeParams.address : ''))}>Copy to clipboard</Link>\n              )}\n            </LinkWrapper>\n            }\n          {tokenBalance && <BalanceWrapper>Balance : {formatUnits(tokenBalance,0)}</BalanceWrapper> }\n          {(badgeParams && badgeParams.address && tokenBalance) && <MintButton onClick={() => doMint(badgeParams.tokenId)} >Mint</MintButton>}   \n        \n          <ApplyButton onClick={() => handleApplyBadgeToAvatar(\n            badgeParams.index, \n            badgeParams.tokenId\n             )}>Apply Item</ApplyButton>\n          </AccountInfo>\n          <HistoryWrapper>\n  \n            <RequirementsList requirements={badgeParams.requirements}/>\n          </HistoryWrapper>\n        </Modal>\n      </ModalBackground>\n    )\n  } else {\n    setShowModal(false)\n    return <div />\n  }\n}\n\nexport const Button = styled.button`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 8px;\n  align-items: center;\n  padding: 5px;\n  width: fit-content;\n  height: 40px;\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  color: ${Colors.Black[900]};\n  border: 1px solid ${Colors.Black[900]};\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: ${Colors.Black[900]};\n    color: ${Colors.Yellow[100]};\n  }\n`\n\nconst MintButton = styled(Button)`\n  margin-bottom: 5px;\n  background-color: ${Colors.Yellow[100]};\n`\n\nconst ApplyButton = styled(Button)`\n  margin-bottom: 5px;\n  background-color: ${Colors.Gray[300]};\n`\n\nconst LinkWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 20px;\n`\n\nconst LinkIconWrapper = styled.div`\n  width: 12px;\n  height: 12px;\n`\n\nconst BalanceWrapper = styled.div`\n  margin-top: 12px;\n`\n\nconst HistoryWrapper = styled.div``\n\nconst AccountAddress = styled.p`\n  font-weight: 700;\n  margin-bottom: 10px;\n`\n\nconst ClosingButton = styled.button`\n  display: flex;\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  line-height: 1;\n  width: 24px;\n  height: 24px;\n  transform: rotate(45deg);\n  transition: ${Transitions.all};\n\n  &:hover {\n    color: ${Colors.Yellow[500]};\n  }\n`\n\nconst TitleRow = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  padding: 0.5em;\n  width: 100%;\n  font-size: 20px;\n`\nconst DomainRow = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 100%;\n  font-size: 15px;\n  padding-left: 0.5em;\n`\n\nconst AccountInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0.5em;\n  padding: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${Shadows.main};\n  background-color: ${Colors.White};\n`\n\nconst Modal = styled(motion.div)`\n  display: flex;\n  flex-direction: column;\n  height:fit-content;\n  background-color: white;\n  box-shadow: ${Shadows.main};\n  border-radius: 10px;\n  z-index: 3;\n  margin-top:6em;\n`\n\nconst ModalBackground = styled(motion.div)`\n  top: 0;\n  left: 0;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  margin: 0px;\n  z-index: 2;\n  background-color: rgba(235, 232, 223, 0.5);\n  display: flex;\n  justify-content: center;\n`\n","/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/badge/BadgeRequirementsList.tsx",["480","481","482"],"import type { TransactionResponse } from '@ethersproject/providers'\nimport {\n  getExplorerTransactionLink,\n  Notification,\n  useNotifications,\n  useTransactions,\n  getStoredTransactionState,\n  StoredTransaction,\n  shortenTransactionHash,\n} from '@usedapp/core'\nimport React, { ReactElement, ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { TextBold } from '../../typography/Text'\nimport { ContentBlock } from '../base/base'\nimport {\n  CheckIcon,\n  ClockIcon,\n  ExclamationIcon,\n  ShareIcon,\n  UnwrapIcon,\n  WalletIcon,\n  WrapIcon,\n  SpinnerIcon,\n} from '../Transactions/Icons'\nimport { Colors, Shadows } from '../../global/styles'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { formatEther } from '@ethersproject/units'\nimport { BigNumber } from 'ethers'\nimport { Link } from '../base/Link'\n\ninterface TableWrapperProps {\n  children: ReactNode\n  title: string\n}\n\nconst formatter = new Intl.NumberFormat('en-us', {\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 3,\n})\n\nconst formatBalance = (balance: BigNumber | undefined) =>\n  formatter.format(parseFloat(formatEther(balance ?? BigNumber.from('0'))))\n\nconst TableWrapper = ({ children, title }: TableWrapperProps) => (\n  <SmallContentBlock>\n    <TitleRow>{title}</TitleRow>\n    <Table>{children}</Table>\n  </SmallContentBlock>\n)\n\ninterface DateProps {\n  date: number\n  className?: string\n}\n\nconst DateCell = ({ date, className }: DateProps) => {\n  const dateObject = new Date(date)\n  const formattedDate = dateObject.toLocaleDateString()\n  const formattedTime = dateObject.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  })\n\n  return (\n    <DateRow className={className}>\n      <DateDisplay>{formattedDate}</DateDisplay>\n      <HourDisplay>{formattedTime}</HourDisplay>\n    </DateRow>\n  )\n}\n\ninterface TransactionLinkProps {\n  transaction: TransactionResponse | undefined\n}\n\nconst TransactionLink = ({ transaction }: TransactionLinkProps) => (\n  <>\n    {transaction && (\n      <Link\n        href={getExplorerTransactionLink(transaction.hash, transaction.chainId)}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        View on Etherscan\n        <LinkIconWrapper>\n          <ShareIcon />\n        </LinkIconWrapper>\n      </Link>\n    )}\n  </>\n)\n\nconst notificationContent: { [key in Notification['type']]: { title: string; icon: ReactElement } } = {\n  transactionFailed: { title: 'Transaction failed', icon: <ExclamationIcon /> },\n  transactionStarted: { title: 'Transaction started', icon: <ClockIcon /> },\n  transactionSucceed: { title: 'Transaction succeed', icon: <CheckIcon/> },\n  walletConnected: { title: 'Wallet connected', icon: <WalletIcon /> },\n}\n\ninterface ListElementProps {\n  icon: ReactElement\n  title: string | undefined\n  transaction?: TransactionResponse\n  date?: number\n}\n\nconst ListElement = ({icon, title }: ListElementProps) => {\n  return (\n    <ListElementWrapper layout initial={{ opacity: 0, y: -50 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0 }}>\n      <ListIconContainer>{icon}</ListIconContainer>\n      <ListDetailsWrapper>\n        <TextBold>{title}</TextBold>\n      </ListDetailsWrapper>\n    </ListElementWrapper>\n  )\n}\n\nfunction TransactionIcon(transaction: StoredTransaction) {\n  if (getStoredTransactionState(transaction) === 'Mining') {\n    return <SpinnerIcon />\n  } else if (getStoredTransactionState(transaction) === 'Fail') {\n    return <ExclamationIcon />\n  } else if (transaction.transactionName === 'Unwrap') {\n    return <UnwrapIcon />\n  } else if (transaction.transactionName === 'Wrap') {\n    return <WrapIcon />\n  } else {\n    return <RequirmentCheck/>\n  }\n}\n\n\nfunction RequirementIcon() {\n    return <RequirmentCheck/>\n}\n\ninterface RequirementsListProps {\n  requirements: (string[]| undefined);\n}\n\nexport const RequirementsList = (props: RequirementsListProps) => {\n  const { transactions } = useTransactions()\n  // const badgeRequirements = [\n  //     {title: 'Create an ethereum account'},\n  //     {title: 'Be awesome'},\n\n  //   ]\n  return (\n    <TableWrapper title=\"Requirements\">\n      <AnimatePresence initial={false}>\n        {  props.requirements &&  \n         props.requirements.map((requirement, index) =>\n          <ListElement\n            key={`requirement-${index}`}\n            title={requirement}\n            icon={RequirementIcon()}\n          />)\n        }\n        \n      </AnimatePresence>\n    </TableWrapper>\n  )\n}\n\nconst NotificationElement = ({ transaction, icon, title }: ListElementProps) => {\n  return (\n    <NotificationWrapper layout initial={{ opacity: 0, y: -50 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0 }}>\n      <NotificationIconContainer>{icon}</NotificationIconContainer>\n      <NotificationDetailsWrapper>\n        <NotificationText>{title}</NotificationText>\n        <TransactionLink transaction={transaction} />\n        <TransactionDetails>\n          {transaction && `${shortenTransactionHash(transaction?.hash)} #${transaction.nonce}`}\n        </TransactionDetails>\n      </NotificationDetailsWrapper>\n      {transaction && <div style={{ marginLeft: 'auto' }}>- {formatBalance(transaction.value)} ETH</div>}\n    </NotificationWrapper>\n  )\n}\n\nexport const NotificationsList = () => {\n  const { notifications } = useNotifications()\n  return (\n    <NotificationsWrapper>\n      <AnimatePresence initial={false}>\n        {notifications.map((notification) => {\n          if ('transaction' in notification)\n            return (\n              <NotificationElement\n                key={notification.id}\n                icon={notificationContent[notification.type].icon}\n                title={notificationContent[notification.type].title}\n                transaction={notification.transaction}\n                date={Date.now()}\n              />\n            )\n          else\n            return (\n              <NotificationElement\n                key={notification.id}\n                icon={notificationContent[notification.type].icon}\n                title={notificationContent[notification.type].title}\n                date={Date.now()}\n              />\n            )\n        })}\n      </AnimatePresence>\n    </NotificationsWrapper>\n  )\n}\n\nconst RequirmentCheck = styled(CheckIcon)`\n    color: blue;\n`\n\nconst NotificationText = styled(TextBold)`\n  font-size: 20px;\n  margin-bottom: 5px;\n`\n\nconst TransactionDetails = styled.div`\n  font-size: 14px;\n`\n\nconst NotificationWrapper = styled(motion.div)`\n  display: flex;\n  align-items: center;\n  background-color: ${Colors.White};\n  box-shadow: ${Shadows.notification};\n  width: 395px;\n  border-radius: 10px;\n  margin: 15px;\n  padding: 10px 20px 10px 20px;\n`\n\nconst NotificationsWrapper = styled.div`\n  position: fixed;\n  right: 24px;\n  bottom: 24px;\n`\n\nconst NotificationIconContainer = styled.div`\n  width: 60px;\n  height: 60px;\n  padding: 0px;\n  margin-right: 20px;\n`\n\nconst ListIconContainer = styled.div`\n  width: 48px;\n  height: 48px;\n  padding: 12px;\n  padding: 14px 16px 14px 12px;\n`\n\nconst ListElementWrapper = styled(motion.div)`\n  display: flex;\n`\n\nconst NotificationDetailsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 4px 0;\n`\n\nconst ListDetailsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 4px 0;\n`\n\nconst Table = styled.div`\n  max-height: 300px;\n  overflow: scroll;\n  padding: 12px;\n\n  & > * + * {\n    margin-top: 12px;\n  }\n`\n\nconst LinkIconWrapper = styled.div`\n  width: 12px;\n  height: 12px;\n  margin-left: 8px;\n`\n\nconst SmallContentBlock = styled(ContentBlock)`\n  padding: 0;\n`\n\nconst TitleRow = styled(TextBold)`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  border-bottom: ${Colors.Gray['300']} 1px solid;\n  padding: 16px;\n  font-size: 18px;\n`\n\nconst DateRow = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  text-align: end;\n  padding: 8px;\n`\n\nconst NotificationDate = styled(DateCell)`\n  margin-left: auto;\n`\n\nconst DateDisplay = styled.div`\n  font-size: 14px;\n`\nconst HourDisplay = styled.div`\n  font-size: 12px;\n  color: ${Colors.Gray['600']};\n`\n","/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/useBadgeList.ts",["483","484","485"],"import axios, { AxiosResponse } from 'axios'\nimport { useEffect, useState } from 'react'\nimport { getValidBadges, parseResponseForItems } from './BadgeHelper'\nimport { ChainId, useEthers } from '@usedapp/core'\nimport { getTransactionsFor } from './TransactionsAPI'\nimport { MetaBadge } from './BadgeHelperTypes'\nimport { BADGE_LIST, DEFAULT_BADGELIST } from './Badges'\n\n\n\nexport function useBadgeList(signerAddress: string|null|undefined, overrideChainId?: ChainId, tags?: string[]) {\n  const { account, chainId } = useEthers();\n  const adjustedChainId = chainId === 31337 ? ChainId.Mainnet : chainId;\n\n  console.log('chainId : ',chainId)\n  const [badges, setBadges] = useState<MetaBadge[]>()\n  useEffect(() => {\n    getTransactionsFor(signerAddress, adjustedChainId)\n      .then(async (response) => {\n        if (response) {\n            const transactionItems = parseResponseForItems(response);\n            console.log(transactionItems)\n            if(transactionItems) {\n                const badges = getValidBadges(BADGE_LIST,transactionItems);\n                badges.push(DEFAULT_BADGELIST[0]);\n                badges.push(DEFAULT_BADGELIST[1]);\n\n                setBadges(badges);\n            } else {\n                // should do something with this case\n                // in theory there should always be the defalt badge\n                // if an account is connected\n                setBadges(undefined);\n            }\n        } else {\n          const errorMessage = 'Couldnt fetch transaction data';\n          return Promise.reject(new Error(errorMessage))\n        }\n      })\n      .catch((err) => {\n        console.log(err)\n        setBadges(undefined)\n      })\n  }, [account,chainId])\n  return badges\n}\n","/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/TransactionsAPI.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/BadgeHelper.ts",["486"],"import { AxiosResponse } from \"axios\";\nimport { TransactionLevel, ParseParams, CriteriaComparions, MetaBadge } from \"./BadgeHelperTypes\";\n\n\nexport const parseResponseForItems =(response: AxiosResponse): (any[]|null) => {\n    if(!response || !response.data || !response.data.data) {\n      return null;\n    }\n    return response.data.data.items;\n}\n  \n  export const RANDOM_VISOR_COLOR_NAMES = [\n    'black',\n    'white',\n    'grey',\n    'green',\n    'blue',\n    'purple',\n    'pink',\n    'silver',\n    'bronze',\n    'gold'\n  ]\n\n  export const RANDOM_VISOR_COLORS = [\n    'black',\n    'white',\n    'grey',\n    '#3f9468',//light green\n    '#5093aa',//light blue\n    '#9550aa',//light purple\n    '#e74f71',//light pink\n    'silver',\n    '#271f1f',//brown\n    'gold'\n  ]\n  \n  export const calculateFrequencyForKeyValueMatches =(\n    transactions: any[], \n    key: string, \n    value: number, \n    valueMatching: boolean\n    ) : number => {\n      if(valueMatching) {\n        // matches if 'key' found && key maps to 'value'\n        return getKeyValueMatchCount(transactions, key, value);\n      } else {\n          // matches if 'key' found\n          return getKeyMatchCount(transactions, key);\n      }\n  }\n\n  export const getKeyValueMatchCount = (items: any[], key: string, value: any) =>  {\n      let count = 0;\n      items.forEach((item) => {\n        if(item[key] && item[key] === value) {\n          count++;\n        }\n      });\n      return count;\n  }\n\n  export const getKeyMatchCount = (items: any[], key: string) =>  {\n    let count = 0;\n    items.forEach((item) => {\n      if(item[key]) {\n        count++;\n      }\n    });\n    return count;\n}\n\n\nexport const getValidBadges = (badges: MetaBadge[], transactions: any[]) : MetaBadge[] =>  {\n  let validBadges: MetaBadge[] = [];\n  badges.forEach((badge: MetaBadge) => {\n    if(validateBadgeAgainstTransactions(badge,transactions)){\n      validBadges.push(badge);\n    }\n  });\n  return validBadges;\n}\n\n\nexport const validateBadgeAgainstTransactions = (badge: MetaBadge, transactions: any[]): boolean =>  {\n  let isValid = false;\n  switch(badge.parseRules.level) {\n    case TransactionLevel.Root :\n        // compare rules with trnsaction list\n        isValid = executeRootLevelChecksForBadge(badge.parseRules,transactions);\n      return isValid;\n    default:\n      return false;\n  }\n}\n\n\nexport const executeRootLevelChecksForBadge = (rules: ParseParams, transactions: any[]): boolean =>  {\n  // defaulting to Key Match frequency comparisons\n  return executeFrequencyRuleForBadge(\n    rules.keyValueObject.name, \n    rules.keyValueObject.value,\n    rules.criteria.comparison,\n    rules.criteria.value,\n    rules.useKeyValueMatching,\n    transactions\n    );\n}\n\n\nexport const executeFrequencyRuleForBadge = (\n  key: string, \n  value: any, \n  criteriaRule: CriteriaComparions,\n  criteriaValue: number,\n  isValueMathing: boolean,\n  transactions: any[], ): boolean =>  {\n  // defaulting to Key Match frequency comparisons\n  let isValid = false;\n  const frequency = calculateFrequencyForKeyValueMatches(transactions, key, value, isValueMathing);\n\n  switch(criteriaRule) {\n    case CriteriaComparions.GT : \n      return frequency > criteriaValue;\n\n    case CriteriaComparions.LT : \n      return frequency < criteriaValue;\n\n    default:\n      return false;\n  }\n}","/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/BadgeHelperTypes.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/Badges.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportal/src/pages/Badges.tsx",["487","488"],"import { CHAIN_NAMES, useEthers } from '@usedapp/core'\nimport React, { useEffect } from 'react'\nimport { Badge, Form } from 'react-bootstrap'\nimport styled from 'styled-components'\nimport { AccountButton } from '../components/account/AccountButton'\nimport { ItemSelection } from '../components/ItemSelection/ItemSelection'\nimport { updatedSelectedItem } from '../components/TokensList/SelectedItemSlice'\nimport { TokensList } from '../components/TokensList/TokensList'\nimport { Shadows } from '../global/styles'\nimport { useAppDispatch } from '../hooks'\nimport { MetaBadge } from '../portalHooks/BadgeHelperTypes'\nimport { useBadgeList } from '../portalHooks/useBadgeList'\nimport { Text } from '../typography/Text'\n\n\n\n\nexport function BadgePage() {\n  const { chainId, account, library } = useEthers();\n  const badges: MetaBadge[]| undefined = useBadgeList(account);\n\n  const dispatch = useAppDispatch();\n\n  const handleApplyBadgeToAvatar =(index: number) =>  {  \n    dispatch (updatedSelectedItem(\n      {\n        index: index,\n        balance: 0,\n        holders: 0,\n        name: 'noname',\n        address: 'noaddress',\n        color: null,\n      }\n    ))\n  }\n\n  useEffect(() => {\n    // clearing badge selection when\n    // account ORR chainID changed\n    handleApplyBadgeToAvatar(0);\n\n  }, [account,chainId])\n\n  return (\n    <div>\n    { account ? (<BadgesPageContainer>\n\n      <BadgeListColumn>\n        <BadgeListHeaderRow>\n          <BadgeListHeaderInfoColumn>\n            <p>Badges based on <b>on-chain activity</b></p>\n            {chainId && <Badge pill bg=\"dark\">{CHAIN_NAMES[chainId]}</Badge>}          \n            </BadgeListHeaderInfoColumn>\n          <BadgeListHeaderDropdownColumn>\n            <Form.Select aria-label=\"Default select example\">\n              <option>Meta Portal</option>\n            </Form.Select>\n          </BadgeListHeaderDropdownColumn>\n        </BadgeListHeaderRow>\n        <BadgeListRow>\n          <TokensList />\n        </BadgeListRow>\n      </BadgeListColumn>\n\n      <AvatarColumn>\n        <AvatarHeaderRow>\n          <AvatarHeaderXPColumn>\n          { account && <Badge pill bg=\"light\" style={{color: 'black'}}>{badges ? (badges.length * 10): 0} XP</Badge>}          \n          </AvatarHeaderXPColumn>\n          <AvatarHeaderAccountSignInColumn>\n              <AccountButton />\n          </AvatarHeaderAccountSignInColumn>\n        </AvatarHeaderRow>\n        <AvatarRow>\n          <ItemSelection />\n        </AvatarRow>\n      </AvatarColumn>\n\n    </BadgesPageContainer>) : \n    (<BadgesPageContainer>\n      <Text style={{margin: '0.5em'}}> Connect browser wallet to access portal</Text>\n      <AccountButton />\n    </BadgesPageContainer>)\n  }\n  </div>\n  )\n}\n\nconst BadgesPageContainer = styled.div `\n  display: flex;\n  margin: 1em;\n  column-gap: 10px;\n  row-gap: 10px;\n\n  flex-flow: wrap-reverse;\n`\nconst BadgeListColumn = styled.div `\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1; \n  box-shadow: ${Shadows.main};\n  background-color: aliceblue;\n\n`\n\nconst AvatarColumn = styled.div `\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1; \n  background-color: aliceblue;\n  box-shadow: ${Shadows.main};\n`\n\nconst BadgeListHeaderRow = styled.div `\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 1.5em;\n  min-height: 60px;\n  padding: 0.5em;\n  `\n  \nconst BadgeListHeaderInfoColumn = styled.div `\n  flex-grow: 4; \n  `\n\nconst BadgeListHeaderDropdownColumn = styled.div `\n  flex-grow: 1; \n  `\nconst BadgeListRow = styled.div`\n  padding: 0.5em;\n  height: 500px;\n`\n\nconst AvatarHeaderRow = styled.div `\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 1.5em;\n  column-gap: 5px;\n  min-height: 60px;\n  padding: 0.5em;\n\n`\n\nconst AvatarRow = styled.div`\n  display:flex;\n  justify-content: center;\n  height: 500px;\n  padding: 0.5em;\n\n`\n\nconst AvatarHeaderXPColumn = styled.div `\n`\n\nconst AvatarHeaderAccountSignInColumn = styled.div `\n`\n","/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/index.tsx",["489"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/store.ts",[],["490","491"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/App.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/TokensList/SelectedItemSlice.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/features/counter/counterSlice.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/TopBar.tsx",["492","493","494","495","496","497","498","499","500","501"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/base/base.tsx",["502","503"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/pages/Badges.tsx",["504","505"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/global/GlobalStyle.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/History.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/global/styles.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/hooks.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/portalHooks/useBadgeList.ts",["506","507","508"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/TokensList/TokensList.tsx",["509","510","511","512","513","514"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/base/Link.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/typography/Title.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/typography/Text.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/account/AccountButton.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/ItemSelection/ItemSelection.tsx",["515","516","517","518","519","520","521","522","523","524","525","526"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/index.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/portalHooks/BadgeHelper.ts",["527"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/portalHooks/Badges.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/portalHooks/TransactionsAPI.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/TokensList/TokenSVGIcon.tsx",["528","529"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/base/Button.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/account/AccountModal.tsx",["530"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/badge/BadgeOverviewModal.tsx",["531","532","533","534"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/models/soldierModel.tsx",["535","536","537","538","539","540","541","542"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/portalHooks/BadgeHelperTypes.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/WrapIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/WalletIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/UnwrapIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/SpinnerIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/ShareIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/ExclamationIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/ClockIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/Transactions/Icons/CheckIcon.tsx",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/interfaces/interfaces.ts",[],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/components/badge/BadgeRequirementsList.tsx",["543","544","545"],"/Users/dominiclee/Desktop/ethprojs/metaportalpublic/src/global/apiKeys.ts",[],{"ruleId":"546","severity":1,"message":"547","line":3,"column":41,"nodeType":"548","messageId":"549","endLine":3,"endColumn":60},{"ruleId":"550","replacedBy":"551"},{"ruleId":"552","replacedBy":"553"},{"ruleId":"546","severity":1,"message":"554","line":5,"column":10,"nodeType":"548","messageId":"549","endLine":5,"endColumn":25},{"ruleId":"546","severity":1,"message":"555","line":6,"column":41,"nodeType":"548","messageId":"549","endLine":6,"endColumn":52},{"ruleId":"546","severity":1,"message":"556","line":27,"column":7,"nodeType":"548","messageId":"549","endLine":27,"endColumn":13},{"ruleId":"546","severity":1,"message":"557","line":39,"column":7,"nodeType":"548","messageId":"549","endLine":39,"endColumn":16},{"ruleId":"546","severity":1,"message":"558","line":46,"column":7,"nodeType":"548","messageId":"549","endLine":46,"endColumn":13},{"ruleId":"546","severity":1,"message":"559","line":60,"column":7,"nodeType":"548","messageId":"549","endLine":60,"endColumn":19},{"ruleId":"546","severity":1,"message":"560","line":71,"column":7,"nodeType":"548","messageId":"549","endLine":71,"endColumn":18},{"ruleId":"546","severity":1,"message":"561","line":76,"column":7,"nodeType":"548","messageId":"549","endLine":76,"endColumn":21},{"ruleId":"546","severity":1,"message":"562","line":88,"column":7,"nodeType":"548","messageId":"549","endLine":88,"endColumn":19},{"ruleId":"546","severity":1,"message":"563","line":107,"column":7,"nodeType":"548","messageId":"549","endLine":107,"endColumn":17},{"ruleId":"546","severity":1,"message":"564","line":3,"column":10,"nodeType":"548","messageId":"549","endLine":3,"endColumn":21},{"ruleId":"546","severity":1,"message":"565","line":4,"column":10,"nodeType":"548","messageId":"549","endLine":4,"endColumn":25},{"ruleId":"546","severity":1,"message":"566","line":4,"column":27,"nodeType":"548","messageId":"549","endLine":4,"endColumn":36},{"ruleId":"546","severity":1,"message":"567","line":5,"column":10,"nodeType":"548","messageId":"549","endLine":5,"endColumn":25},{"ruleId":"546","severity":1,"message":"568","line":5,"column":41,"nodeType":"548","messageId":"549","endLine":5,"endColumn":51},{"ruleId":"546","severity":1,"message":"569","line":5,"column":75,"nodeType":"548","messageId":"549","endLine":5,"endColumn":85},{"ruleId":"546","severity":1,"message":"570","line":6,"column":10,"nodeType":"548","messageId":"549","endLine":6,"endColumn":15},{"ruleId":"546","severity":1,"message":"571","line":7,"column":10,"nodeType":"548","messageId":"549","endLine":7,"endColumn":20},{"ruleId":"546","severity":1,"message":"572","line":8,"column":10,"nodeType":"548","messageId":"549","endLine":8,"endColumn":15},{"ruleId":"546","severity":1,"message":"573","line":10,"column":10,"nodeType":"548","messageId":"549","endLine":10,"endColumn":23},{"ruleId":"546","severity":1,"message":"574","line":14,"column":10,"nodeType":"548","messageId":"549","endLine":14,"endColumn":16},{"ruleId":"546","severity":1,"message":"575","line":16,"column":9,"nodeType":"548","messageId":"549","endLine":16,"endColumn":21},{"ruleId":"546","severity":1,"message":"576","line":17,"column":10,"nodeType":"548","messageId":"549","endLine":17,"endColumn":23},{"ruleId":"546","severity":1,"message":"577","line":21,"column":7,"nodeType":"548","messageId":"549","endLine":21,"endColumn":23},{"ruleId":"546","severity":1,"message":"578","line":38,"column":10,"nodeType":"548","messageId":"549","endLine":38,"endColumn":13},{"ruleId":"550","replacedBy":"579"},{"ruleId":"552","replacedBy":"580"},{"ruleId":"546","severity":1,"message":"573","line":2,"column":10,"nodeType":"548","messageId":"549","endLine":2,"endColumn":23},{"ruleId":"546","severity":1,"message":"569","line":3,"column":49,"nodeType":"548","messageId":"549","endLine":3,"endColumn":59},{"ruleId":"546","severity":1,"message":"581","line":4,"column":10,"nodeType":"548","messageId":"549","endLine":4,"endColumn":21},{"ruleId":"546","severity":1,"message":"572","line":5,"column":10,"nodeType":"548","messageId":"549","endLine":5,"endColumn":15},{"ruleId":"550","replacedBy":"582"},{"ruleId":"552","replacedBy":"583"},{"ruleId":"546","severity":1,"message":"584","line":2,"column":21,"nodeType":"548","messageId":"549","endLine":2,"endColumn":27},{"ruleId":"546","severity":1,"message":"585","line":2,"column":29,"nodeType":"548","messageId":"549","endLine":2,"endColumn":38},{"ruleId":"546","severity":1,"message":"586","line":4,"column":10,"nodeType":"548","messageId":"549","endLine":4,"endColumn":13},{"ruleId":"546","severity":1,"message":"587","line":15,"column":15,"nodeType":"548","messageId":"549","endLine":15,"endColumn":26},{"ruleId":"546","severity":1,"message":"588","line":19,"column":11,"nodeType":"548","messageId":"549","endLine":19,"endColumn":18},{"ruleId":"546","severity":1,"message":"589","line":19,"column":29,"nodeType":"548","messageId":"549","endLine":19,"endColumn":36},{"ruleId":"546","severity":1,"message":"590","line":127,"column":7,"nodeType":"548","messageId":"549","endLine":127,"endColumn":17},{"ruleId":"546","severity":1,"message":"591","line":161,"column":7,"nodeType":"548","messageId":"549","endLine":161,"endColumn":18},{"ruleId":"546","severity":1,"message":"592","line":4,"column":10,"nodeType":"548","messageId":"549","endLine":4,"endColumn":22},{"ruleId":"593","severity":1,"message":"594","line":37,"column":22,"nodeType":"595","messageId":"596","endLine":37,"endColumn":24},{"ruleId":"546","severity":1,"message":"597","line":99,"column":7,"nodeType":"548","messageId":"549","endLine":99,"endColumn":15},{"ruleId":"546","severity":1,"message":"598","line":104,"column":7,"nodeType":"548","messageId":"549","endLine":104,"endColumn":12},{"ruleId":"550","replacedBy":"599"},{"ruleId":"552","replacedBy":"600"},{"ruleId":"546","severity":1,"message":"601","line":5,"column":12,"nodeType":"548","messageId":"549","endLine":5,"endColumn":17},{"ruleId":"546","severity":1,"message":"602","line":9,"column":10,"nodeType":"548","messageId":"549","endLine":9,"endColumn":34},{"ruleId":"546","severity":1,"message":"588","line":18,"column":11,"nodeType":"548","messageId":"549","endLine":18,"endColumn":18},{"ruleId":"546","severity":1,"message":"603","line":51,"column":7,"nodeType":"548","messageId":"549","endLine":51,"endColumn":22},{"ruleId":"546","severity":1,"message":"604","line":58,"column":7,"nodeType":"548","messageId":"549","endLine":58,"endColumn":21},{"ruleId":"546","severity":1,"message":"605","line":63,"column":7,"nodeType":"548","messageId":"549","endLine":63,"endColumn":17},{"ruleId":"546","severity":1,"message":"606","line":68,"column":7,"nodeType":"548","messageId":"549","endLine":68,"endColumn":25},{"ruleId":"546","severity":1,"message":"607","line":73,"column":7,"nodeType":"548","messageId":"549","endLine":73,"endColumn":22},{"ruleId":"546","severity":1,"message":"608","line":75,"column":7,"nodeType":"548","messageId":"549","endLine":75,"endColumn":18},{"ruleId":"546","severity":1,"message":"609","line":79,"column":7,"nodeType":"548","messageId":"549","endLine":79,"endColumn":19},{"ruleId":"546","severity":1,"message":"610","line":86,"column":7,"nodeType":"548","messageId":"549","endLine":86,"endColumn":19},{"ruleId":"546","severity":1,"message":"611","line":90,"column":7,"nodeType":"548","messageId":"549","endLine":90,"endColumn":21},{"ruleId":"546","severity":1,"message":"612","line":3,"column":10,"nodeType":"548","messageId":"549","endLine":3,"endColumn":19},{"ruleId":"546","severity":1,"message":"613","line":6,"column":23,"nodeType":"548","messageId":"549","endLine":6,"endColumn":35},{"ruleId":"593","severity":1,"message":"594","line":57,"column":28,"nodeType":"595","messageId":"596","endLine":57,"endColumn":30},{"ruleId":"614","severity":1,"message":"615","line":58,"column":6,"nodeType":"616","endLine":58,"endColumn":19,"suggestions":"617"},{"ruleId":"593","severity":1,"message":"594","line":111,"column":28,"nodeType":"595","messageId":"596","endLine":111,"endColumn":30},{"ruleId":"546","severity":1,"message":"618","line":118,"column":7,"nodeType":"548","messageId":"549","endLine":118,"endColumn":16},{"ruleId":"546","severity":1,"message":"592","line":4,"column":10,"nodeType":"548","messageId":"549","endLine":4,"endColumn":22},{"ruleId":"546","severity":1,"message":"619","line":19,"column":7,"nodeType":"548","messageId":"549","endLine":19,"endColumn":20},{"ruleId":"593","severity":1,"message":"594","line":37,"column":22,"nodeType":"595","messageId":"596","endLine":37,"endColumn":24},{"ruleId":"546","severity":1,"message":"620","line":76,"column":9,"nodeType":"548","messageId":"549","endLine":76,"endColumn":16},{"ruleId":"546","severity":1,"message":"621","line":84,"column":7,"nodeType":"548","messageId":"549","endLine":84,"endColumn":16},{"ruleId":"546","severity":1,"message":"597","line":88,"column":7,"nodeType":"548","messageId":"549","endLine":88,"endColumn":15},{"ruleId":"546","severity":1,"message":"598","line":93,"column":7,"nodeType":"548","messageId":"549","endLine":93,"endColumn":12},{"ruleId":"546","severity":1,"message":"622","line":104,"column":7,"nodeType":"548","messageId":"549","endLine":104,"endColumn":15},{"ruleId":"546","severity":1,"message":"623","line":112,"column":7,"nodeType":"548","messageId":"549","endLine":112,"endColumn":21},{"ruleId":"550","replacedBy":"624"},{"ruleId":"552","replacedBy":"625"},{"ruleId":"546","severity":1,"message":"626","line":2,"column":34,"nodeType":"548","messageId":"549","endLine":2,"endColumn":44},{"ruleId":"546","severity":1,"message":"627","line":6,"column":8,"nodeType":"548","messageId":"549","endLine":6,"endColumn":16},{"ruleId":"546","severity":1,"message":"628","line":7,"column":17,"nodeType":"548","messageId":"549","endLine":7,"endColumn":26},{"ruleId":"546","severity":1,"message":"629","line":7,"column":36,"nodeType":"548","messageId":"549","endLine":7,"endColumn":44},{"ruleId":"546","severity":1,"message":"574","line":8,"column":10,"nodeType":"548","messageId":"549","endLine":8,"endColumn":16},{"ruleId":"546","severity":1,"message":"630","line":8,"column":18,"nodeType":"548","messageId":"549","endLine":8,"endColumn":26},{"ruleId":"546","severity":1,"message":"631","line":9,"column":10,"nodeType":"548","messageId":"549","endLine":9,"endColumn":15},{"ruleId":"546","severity":1,"message":"632","line":22,"column":11,"nodeType":"548","messageId":"549","endLine":22,"endColumn":18},{"ruleId":"614","severity":1,"message":"633","line":37,"column":5,"nodeType":"616","endLine":37,"endColumn":38,"suggestions":"634"},{"ruleId":"546","severity":1,"message":"635","line":4,"column":10,"nodeType":"548","messageId":"549","endLine":4,"endColumn":26},{"ruleId":"546","severity":1,"message":"636","line":13,"column":26,"nodeType":"548","messageId":"549","endLine":13,"endColumn":40},{"ruleId":"546","severity":1,"message":"619","line":39,"column":7,"nodeType":"548","messageId":"549","endLine":39,"endColumn":20},{"ruleId":"546","severity":1,"message":"620","line":55,"column":9,"nodeType":"548","messageId":"549","endLine":55,"endColumn":16},{"ruleId":"546","severity":1,"message":"637","line":119,"column":10,"nodeType":"548","messageId":"549","endLine":119,"endColumn":25},{"ruleId":"546","severity":1,"message":"638","line":143,"column":11,"nodeType":"548","messageId":"549","endLine":143,"endColumn":23},{"ruleId":"546","severity":1,"message":"639","line":311,"column":7,"nodeType":"548","messageId":"549","endLine":311,"endColumn":23},{"ruleId":"546","severity":1,"message":"640","line":1,"column":8,"nodeType":"548","messageId":"549","endLine":1,"endColumn":13},{"ruleId":"546","severity":1,"message":"641","line":1,"column":17,"nodeType":"548","messageId":"549","endLine":1,"endColumn":30},{"ruleId":"614","severity":1,"message":"642","line":44,"column":6,"nodeType":"616","endLine":44,"endColumn":23,"suggestions":"643"},{"ruleId":"546","severity":1,"message":"644","line":119,"column":7,"nodeType":"548","messageId":"549","endLine":119,"endColumn":14},{"ruleId":"546","severity":1,"message":"589","line":19,"column":29,"nodeType":"548","messageId":"549","endLine":19,"endColumn":36},{"ruleId":"614","severity":1,"message":"645","line":42,"column":6,"nodeType":"616","endLine":42,"endColumn":23,"suggestions":"646"},{"ruleId":"546","severity":1,"message":"547","line":3,"column":41,"nodeType":"548","messageId":"549","endLine":3,"endColumn":60},{"ruleId":"550","replacedBy":"647"},{"ruleId":"552","replacedBy":"648"},{"ruleId":"546","severity":1,"message":"554","line":5,"column":10,"nodeType":"548","messageId":"549","endLine":5,"endColumn":25},{"ruleId":"546","severity":1,"message":"555","line":6,"column":41,"nodeType":"548","messageId":"549","endLine":6,"endColumn":52},{"ruleId":"546","severity":1,"message":"556","line":27,"column":7,"nodeType":"548","messageId":"549","endLine":27,"endColumn":13},{"ruleId":"546","severity":1,"message":"557","line":39,"column":7,"nodeType":"548","messageId":"549","endLine":39,"endColumn":16},{"ruleId":"546","severity":1,"message":"558","line":46,"column":7,"nodeType":"548","messageId":"549","endLine":46,"endColumn":13},{"ruleId":"546","severity":1,"message":"559","line":60,"column":7,"nodeType":"548","messageId":"549","endLine":60,"endColumn":19},{"ruleId":"546","severity":1,"message":"560","line":71,"column":7,"nodeType":"548","messageId":"549","endLine":71,"endColumn":18},{"ruleId":"546","severity":1,"message":"561","line":76,"column":7,"nodeType":"548","messageId":"549","endLine":76,"endColumn":21},{"ruleId":"546","severity":1,"message":"562","line":88,"column":7,"nodeType":"548","messageId":"549","endLine":88,"endColumn":19},{"ruleId":"546","severity":1,"message":"563","line":107,"column":7,"nodeType":"548","messageId":"549","endLine":107,"endColumn":17},{"ruleId":"546","severity":1,"message":"584","line":2,"column":21,"nodeType":"548","messageId":"549","endLine":2,"endColumn":27},{"ruleId":"546","severity":1,"message":"585","line":2,"column":29,"nodeType":"548","messageId":"549","endLine":2,"endColumn":38},{"ruleId":"546","severity":1,"message":"589","line":19,"column":29,"nodeType":"548","messageId":"549","endLine":19,"endColumn":36},{"ruleId":"614","severity":1,"message":"645","line":42,"column":6,"nodeType":"616","endLine":42,"endColumn":23,"suggestions":"649"},{"ruleId":"546","severity":1,"message":"640","line":1,"column":8,"nodeType":"548","messageId":"549","endLine":1,"endColumn":13},{"ruleId":"546","severity":1,"message":"641","line":1,"column":17,"nodeType":"548","messageId":"549","endLine":1,"endColumn":30},{"ruleId":"614","severity":1,"message":"642","line":44,"column":6,"nodeType":"616","endLine":44,"endColumn":23,"suggestions":"650"},{"ruleId":"546","severity":1,"message":"586","line":4,"column":10,"nodeType":"548","messageId":"549","endLine":4,"endColumn":13},{"ruleId":"546","severity":1,"message":"587","line":15,"column":15,"nodeType":"548","messageId":"549","endLine":15,"endColumn":26},{"ruleId":"546","severity":1,"message":"588","line":19,"column":11,"nodeType":"548","messageId":"549","endLine":19,"endColumn":18},{"ruleId":"546","severity":1,"message":"589","line":19,"column":29,"nodeType":"548","messageId":"549","endLine":19,"endColumn":36},{"ruleId":"546","severity":1,"message":"590","line":127,"column":7,"nodeType":"548","messageId":"549","endLine":127,"endColumn":17},{"ruleId":"546","severity":1,"message":"591","line":161,"column":7,"nodeType":"548","messageId":"549","endLine":161,"endColumn":18},{"ruleId":"546","severity":1,"message":"601","line":5,"column":12,"nodeType":"548","messageId":"549","endLine":5,"endColumn":17},{"ruleId":"546","severity":1,"message":"602","line":9,"column":10,"nodeType":"548","messageId":"549","endLine":9,"endColumn":34},{"ruleId":"546","severity":1,"message":"588","line":18,"column":11,"nodeType":"548","messageId":"549","endLine":18,"endColumn":18},{"ruleId":"546","severity":1,"message":"603","line":51,"column":7,"nodeType":"548","messageId":"549","endLine":51,"endColumn":22},{"ruleId":"546","severity":1,"message":"604","line":58,"column":7,"nodeType":"548","messageId":"549","endLine":58,"endColumn":21},{"ruleId":"546","severity":1,"message":"605","line":63,"column":7,"nodeType":"548","messageId":"549","endLine":63,"endColumn":17},{"ruleId":"546","severity":1,"message":"606","line":68,"column":7,"nodeType":"548","messageId":"549","endLine":68,"endColumn":25},{"ruleId":"546","severity":1,"message":"607","line":73,"column":7,"nodeType":"548","messageId":"549","endLine":73,"endColumn":22},{"ruleId":"546","severity":1,"message":"608","line":75,"column":7,"nodeType":"548","messageId":"549","endLine":75,"endColumn":18},{"ruleId":"546","severity":1,"message":"609","line":79,"column":7,"nodeType":"548","messageId":"549","endLine":79,"endColumn":19},{"ruleId":"546","severity":1,"message":"610","line":86,"column":7,"nodeType":"548","messageId":"549","endLine":86,"endColumn":19},{"ruleId":"546","severity":1,"message":"611","line":90,"column":7,"nodeType":"548","messageId":"549","endLine":90,"endColumn":21},{"ruleId":"546","severity":1,"message":"644","line":119,"column":7,"nodeType":"548","messageId":"549","endLine":119,"endColumn":14},{"ruleId":"546","severity":1,"message":"612","line":3,"column":10,"nodeType":"548","messageId":"549","endLine":3,"endColumn":19},{"ruleId":"546","severity":1,"message":"613","line":6,"column":23,"nodeType":"548","messageId":"549","endLine":6,"endColumn":35},{"ruleId":"546","severity":1,"message":"618","line":118,"column":7,"nodeType":"548","messageId":"549","endLine":118,"endColumn":16},{"ruleId":"546","severity":1,"message":"635","line":4,"column":10,"nodeType":"548","messageId":"549","endLine":4,"endColumn":26},{"ruleId":"546","severity":1,"message":"636","line":13,"column":26,"nodeType":"548","messageId":"549","endLine":13,"endColumn":40},{"ruleId":"546","severity":1,"message":"619","line":39,"column":7,"nodeType":"548","messageId":"549","endLine":39,"endColumn":20},{"ruleId":"546","severity":1,"message":"620","line":55,"column":9,"nodeType":"548","messageId":"549","endLine":55,"endColumn":16},{"ruleId":"546","severity":1,"message":"626","line":2,"column":34,"nodeType":"548","messageId":"549","endLine":2,"endColumn":44},{"ruleId":"546","severity":1,"message":"627","line":6,"column":8,"nodeType":"548","messageId":"549","endLine":6,"endColumn":16},{"ruleId":"546","severity":1,"message":"628","line":7,"column":17,"nodeType":"548","messageId":"549","endLine":7,"endColumn":26},{"ruleId":"546","severity":1,"message":"629","line":7,"column":36,"nodeType":"548","messageId":"549","endLine":7,"endColumn":44},{"ruleId":"546","severity":1,"message":"574","line":8,"column":10,"nodeType":"548","messageId":"549","endLine":8,"endColumn":16},{"ruleId":"546","severity":1,"message":"630","line":8,"column":18,"nodeType":"548","messageId":"549","endLine":8,"endColumn":26},{"ruleId":"546","severity":1,"message":"631","line":9,"column":10,"nodeType":"548","messageId":"549","endLine":9,"endColumn":15},{"ruleId":"546","severity":1,"message":"632","line":22,"column":11,"nodeType":"548","messageId":"549","endLine":22,"endColumn":18},{"ruleId":"546","severity":1,"message":"637","line":119,"column":10,"nodeType":"548","messageId":"549","endLine":119,"endColumn":25},{"ruleId":"546","severity":1,"message":"638","line":143,"column":11,"nodeType":"548","messageId":"549","endLine":143,"endColumn":23},{"ruleId":"546","severity":1,"message":"639","line":311,"column":7,"nodeType":"548","messageId":"549","endLine":311,"endColumn":23},"@typescript-eslint/no-unused-vars","'MULTICALL_ADDRESSES' is defined but never used.","Identifier","unusedVar","no-native-reassign",["651"],"no-negated-in-lhs",["652"],"'HeaderContainer' is defined but never used.","'NavDropdown' is defined but never used.","'Header' is assigned a value but never used.","'HeaderNav' is assigned a value but never used.","'ToMain' is assigned a value but never used.","'ToMainBottom' is assigned a value but never used.","'Handshaking' is assigned a value but never used.","'HeaderNavLinks' is assigned a value but never used.","'DisabledLink' is assigned a value but never used.","'HeaderLink' is assigned a value but never used.","'formatEther' is defined but never used.","'useEtherBalance' is defined but never used.","'useEthers' is defined but never used.","'ContainerCustom' is defined but never used.","'ContentRow' is defined but never used.","'SectionRow' is defined but never used.","'Label' is defined but never used.","'TextInline' is defined but never used.","'Title' is defined but never used.","'AccountButton' is defined but never used.","'Canvas' is defined but never used.","'SoldierModel' is defined but never used.","'OrbitControls' is defined but never used.","'STAKING_CONTRACT' is assigned a value but never used.","'Box' is defined but never used.",["651"],["652"],"'SendEthForm' is defined but never used.",["651"],["652"],"'Colors' is defined but never used.","'Gradients' is defined but never used.","'Row' is defined but never used.","'window' is defined but never used.","'chainId' is assigned a value but never used.","'library' is assigned a value but never used.","'MintButton' is assigned a value but never used.","'TokenTicker' is assigned a value but never used.","'ContentBlock' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'LabelRow' is assigned a value but never used.","'Label' is assigned a value but never used.",["651"],["652"],"'Badge' is defined but never used.","'RANDOM_VISOR_COLOR_NAMES' is defined but never used.","'LinkIconWrapper' is assigned a value but never used.","'NoItemSelected' is assigned a value but never used.","'ItemDetail' is assigned a value but never used.","'ItemAddressWrapper' is assigned a value but never used.","'ItemAddressLink' is assigned a value but never used.","'ItemPreview' is assigned a value but never used.","'TokenBalance' is assigned a value but never used.","'SectionBreak' is assigned a value but never used.","'SelectionTitle' is assigned a value but never used.","'BorderRad' is defined but never used.","'setIconError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'timer'. Either include it or remove the dependency array.","ArrayExpression",["653"],"'DomainRow' is assigned a value but never used.","'formatBalance' is assigned a value but never used.","'balance' is assigned a value but never used.","'CellTitle' is assigned a value but never used.","'TitleRow' is assigned a value but never used.","'BalanceWrapper' is assigned a value but never used.",["651"],["652"],"'useTexture' is defined but never used.","'ReactDOM' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useFrame' is defined but never used.","'Color' is defined but never used.","'actions' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'chainId' and 'promiseTransaction'. Either include them or remove the dependency array.",["654"],"'TransactionsList' is defined but never used.","'useAppSelector' is defined but never used.","'TransactionIcon' is defined but never used.","'transactions' is assigned a value but never used.","'NotificationDate' is assigned a value but never used.","'axios' is defined but never used.","'AxiosResponse' is defined but never used.","React Hook useEffect has missing dependencies: 'adjustedChainId' and 'signerAddress'. Either include them or remove the dependency array.",["655"],"'isValid' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleApplyBadgeToAvatar'. Either include it or remove the dependency array.",["656"],["651"],["652"],["657"],["658"],"no-global-assign","no-unsafe-negation",{"desc":"659","fix":"660"},{"desc":"661","fix":"662"},{"desc":"663","fix":"664"},{"desc":"665","fix":"666"},{"desc":"665","fix":"667"},{"desc":"663","fix":"668"},"Update the dependencies array to be: [timer, transaction]",{"range":"669","text":"670"},"Update the dependencies array to be: [chainId, contract, functionName, promiseTransaction]",{"range":"671","text":"672"},"Update the dependencies array to be: [account, adjustedChainId, chainId, signerAddress]",{"range":"673","text":"674"},"Update the dependencies array to be: [account, chainId, handleApplyBadgeToAvatar]",{"range":"675","text":"676"},{"range":"677","text":"676"},{"range":"678","text":"674"},[1792,1805],"[timer, transaction]",[1154,1187],"[chainId, contract, functionName, promiseTransaction]",[1679,1696],"[account, adjustedChainId, chainId, signerAddress]",[1294,1311],"[account, chainId, handleApplyBadgeToAvatar]",[1294,1311],[1679,1696]]