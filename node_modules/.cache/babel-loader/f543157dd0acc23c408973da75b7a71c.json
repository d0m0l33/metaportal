{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkPrefixAlternativesAmbiguities = exports.validateSomeNonEmptyLookaheadPath = exports.validateTooManyAlts = exports.RepetionCollector = exports.validateAmbiguousAlternationAlternatives = exports.validateEmptyOrAlternative = exports.getFirstNoneTerminal = exports.validateNoLeftRecursion = exports.validateRuleIsOverridden = exports.validateRuleDoesNotAlreadyExist = exports.OccurrenceValidationCollector = exports.identifyProductionForDuplicates = exports.validateGrammar = void 0;\n\nvar utils = require(\"@chevrotain/utils\");\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar parser_1 = require(\"../parser/parser\");\n\nvar gast_1 = require(\"./gast/gast\");\n\nvar lookahead_1 = require(\"./lookahead\");\n\nvar interpreter_1 = require(\"./interpreter\");\n\nvar gast_public_1 = require(\"./gast/gast_public\");\n\nvar gast_visitor_public_1 = require(\"./gast/gast_visitor_public\");\n\nfunction validateGrammar(topLevels, globalMaxLookahead, tokenTypes, errMsgProvider, grammarName) {\n  var duplicateErrors = utils.map(topLevels, function (currTopLevel) {\n    return validateDuplicateProductions(currTopLevel, errMsgProvider);\n  });\n  var leftRecursionErrors = utils.map(topLevels, function (currTopRule) {\n    return validateNoLeftRecursion(currTopRule, currTopRule, errMsgProvider);\n  });\n  var emptyAltErrors = [];\n  var ambiguousAltsErrors = [];\n  var emptyRepetitionErrors = []; // left recursion could cause infinite loops in the following validations.\n  // It is safest to first have the user fix the left recursion errors first and only then examine Further issues.\n\n  if ((0, utils_1.every)(leftRecursionErrors, utils_1.isEmpty)) {\n    emptyAltErrors = (0, utils_1.map)(topLevels, function (currTopRule) {\n      return validateEmptyOrAlternative(currTopRule, errMsgProvider);\n    });\n    ambiguousAltsErrors = (0, utils_1.map)(topLevels, function (currTopRule) {\n      return validateAmbiguousAlternationAlternatives(currTopRule, globalMaxLookahead, errMsgProvider);\n    });\n    emptyRepetitionErrors = validateSomeNonEmptyLookaheadPath(topLevels, globalMaxLookahead, errMsgProvider);\n  }\n\n  var termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n  var tooManyAltsErrors = (0, utils_1.map)(topLevels, function (curRule) {\n    return validateTooManyAlts(curRule, errMsgProvider);\n  });\n  var duplicateRulesError = (0, utils_1.map)(topLevels, function (curRule) {\n    return validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider);\n  });\n  return utils.flatten(duplicateErrors.concat(emptyRepetitionErrors, leftRecursionErrors, emptyAltErrors, ambiguousAltsErrors, termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError));\n}\n\nexports.validateGrammar = validateGrammar;\n\nfunction validateDuplicateProductions(topLevelRule, errMsgProvider) {\n  var collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  var allRuleProductions = collectorVisitor.allProductions;\n  var productionGroups = utils.groupBy(allRuleProductions, identifyProductionForDuplicates);\n  var duplicates = utils.pick(productionGroups, function (currGroup) {\n    return currGroup.length > 1;\n  });\n  var errors = utils.map(utils.values(duplicates), function (currDuplicates) {\n    var firstProd = utils.first(currDuplicates);\n    var msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n    var dslName = (0, gast_1.getProductionDslName)(firstProd);\n    var defError = {\n      message: msg,\n      type: parser_1.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx\n    };\n    var param = getExtraProductionArgument(firstProd);\n\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nfunction identifyProductionForDuplicates(prod) {\n  return (0, gast_1.getProductionDslName)(prod) + \"_#_\" + prod.idx + \"_#_\" + getExtraProductionArgument(prod);\n}\n\nexports.identifyProductionForDuplicates = identifyProductionForDuplicates;\n\nfunction getExtraProductionArgument(prod) {\n  if (prod instanceof gast_public_1.Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof gast_public_1.NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nvar OccurrenceValidationCollector =\n/** @class */\nfunction (_super) {\n  __extends(OccurrenceValidationCollector, _super);\n\n  function OccurrenceValidationCollector() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.allProductions = [];\n    return _this;\n  }\n\n  OccurrenceValidationCollector.prototype.visitNonTerminal = function (subrule) {\n    this.allProductions.push(subrule);\n  };\n\n  OccurrenceValidationCollector.prototype.visitOption = function (option) {\n    this.allProductions.push(option);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n    this.allProductions.push(manySep);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n    this.allProductions.push(atLeastOne);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n    this.allProductions.push(atLeastOneSep);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetition = function (many) {\n    this.allProductions.push(many);\n  };\n\n  OccurrenceValidationCollector.prototype.visitAlternation = function (or) {\n    this.allProductions.push(or);\n  };\n\n  OccurrenceValidationCollector.prototype.visitTerminal = function (terminal) {\n    this.allProductions.push(terminal);\n  };\n\n  return OccurrenceValidationCollector;\n}(gast_visitor_public_1.GAstVisitor);\n\nexports.OccurrenceValidationCollector = OccurrenceValidationCollector;\n\nfunction validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n  var errors = [];\n  var occurrences = (0, utils_1.reduce)(allRules, function (result, curRule) {\n    if (curRule.name === rule.name) {\n      return result + 1;\n    }\n\n    return result;\n  }, 0);\n\n  if (occurrences > 1) {\n    var errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className\n    });\n    errors.push({\n      message: errMsg,\n      type: parser_1.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name\n    });\n  }\n\n  return errors;\n}\n\nexports.validateRuleDoesNotAlreadyExist = validateRuleDoesNotAlreadyExist; // TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\n\nfunction validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n  var errors = [];\n  var errMsg;\n\n  if (!utils.contains(definedRulesNames, ruleName)) {\n    errMsg = \"Invalid rule override, rule: ->\" + ruleName + \"<- cannot be overridden in the grammar: ->\" + className + \"<-\" + \"as it is not defined in any of the super grammars \";\n    errors.push({\n      message: errMsg,\n      type: parser_1.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName\n    });\n  }\n\n  return errors;\n}\n\nexports.validateRuleIsOverridden = validateRuleIsOverridden;\n\nfunction validateNoLeftRecursion(topRule, currRule, errMsgProvider, path) {\n  if (path === void 0) {\n    path = [];\n  }\n\n  var errors = [];\n  var nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n\n  if (utils.isEmpty(nextNonTerminals)) {\n    return [];\n  } else {\n    var ruleName = topRule.name;\n    var foundLeftRecursion = utils.contains(nextNonTerminals, topRule);\n\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path\n        }),\n        type: parser_1.ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName\n      });\n    } // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n\n\n    var validNextSteps = utils.difference(nextNonTerminals, path.concat([topRule]));\n    var errorsFromNextSteps = utils.map(validNextSteps, function (currRefRule) {\n      var newPath = utils.cloneArr(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n    });\n    return errors.concat(utils.flatten(errorsFromNextSteps));\n  }\n}\n\nexports.validateNoLeftRecursion = validateNoLeftRecursion;\n\nfunction getFirstNoneTerminal(definition) {\n  var result = [];\n\n  if (utils.isEmpty(definition)) {\n    return result;\n  }\n\n  var firstProd = utils.first(definition);\n  /* istanbul ignore else */\n\n  if (firstProd instanceof gast_public_1.NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (firstProd instanceof gast_public_1.Alternative || firstProd instanceof gast_public_1.Option || firstProd instanceof gast_public_1.RepetitionMandatory || firstProd instanceof gast_public_1.RepetitionMandatoryWithSeparator || firstProd instanceof gast_public_1.RepetitionWithSeparator || firstProd instanceof gast_public_1.Repetition) {\n    result = result.concat(getFirstNoneTerminal(firstProd.definition));\n  } else if (firstProd instanceof gast_public_1.Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = utils.flatten(utils.map(firstProd.definition, function (currSubDef) {\n      return getFirstNoneTerminal(currSubDef.definition);\n    }));\n  } else if (firstProd instanceof gast_public_1.Terminal) {// nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  var isFirstOptional = (0, gast_1.isOptionalProd)(firstProd);\n  var hasMore = definition.length > 1;\n\n  if (isFirstOptional && hasMore) {\n    var rest = utils.drop(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nexports.getFirstNoneTerminal = getFirstNoneTerminal;\n\nvar OrCollector =\n/** @class */\nfunction (_super) {\n  __extends(OrCollector, _super);\n\n  function OrCollector() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.alternations = [];\n    return _this;\n  }\n\n  OrCollector.prototype.visitAlternation = function (node) {\n    this.alternations.push(node);\n  };\n\n  return OrCollector;\n}(gast_visitor_public_1.GAstVisitor);\n\nfunction validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n  var orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  var ors = orCollector.alternations;\n  var errors = utils.reduce(ors, function (errors, currOr) {\n    var exceptLast = utils.dropRight(currOr.definition);\n    var currErrors = utils.map(exceptLast, function (currAlternative, currAltIdx) {\n      var possibleFirstInAlt = (0, interpreter_1.nextPossibleTokensAfter)([currAlternative], [], null, 1);\n\n      if (utils.isEmpty(possibleFirstInAlt)) {\n        return {\n          message: errMsgProvider.buildEmptyAlternationError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n            emptyChoiceIdx: currAltIdx\n          }),\n          type: parser_1.ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n          alternative: currAltIdx + 1\n        };\n      } else {\n        return null;\n      }\n    });\n    return errors.concat(utils.compact(currErrors));\n  }, []);\n  return errors;\n}\n\nexports.validateEmptyOrAlternative = validateEmptyOrAlternative;\n\nfunction validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n  var orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  var ors = orCollector.alternations; // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n\n  ors = (0, utils_1.reject)(ors, function (currOr) {\n    return currOr.ignoreAmbiguities === true;\n  });\n  var errors = utils.reduce(ors, function (result, currOr) {\n    var currOccurrence = currOr.idx;\n    var actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    var alternatives = (0, lookahead_1.getLookaheadPathsForOr)(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n    var altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n    var altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n    return result.concat(altsAmbiguityErrors, altsPrefixAmbiguityErrors);\n  }, []);\n  return errors;\n}\n\nexports.validateAmbiguousAlternationAlternatives = validateAmbiguousAlternationAlternatives;\n\nvar RepetionCollector =\n/** @class */\nfunction (_super) {\n  __extends(RepetionCollector, _super);\n\n  function RepetionCollector() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.allProductions = [];\n    return _this;\n  }\n\n  RepetionCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n    this.allProductions.push(manySep);\n  };\n\n  RepetionCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n    this.allProductions.push(atLeastOne);\n  };\n\n  RepetionCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n    this.allProductions.push(atLeastOneSep);\n  };\n\n  RepetionCollector.prototype.visitRepetition = function (many) {\n    this.allProductions.push(many);\n  };\n\n  return RepetionCollector;\n}(gast_visitor_public_1.GAstVisitor);\n\nexports.RepetionCollector = RepetionCollector;\n\nfunction validateTooManyAlts(topLevelRule, errMsgProvider) {\n  var orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  var ors = orCollector.alternations;\n  var errors = utils.reduce(ors, function (errors, currOr) {\n    if (currOr.definition.length > 255) {\n      errors.push({\n        message: errMsgProvider.buildTooManyAlternativesError({\n          topLevelRule: topLevelRule,\n          alternation: currOr\n        }),\n        type: parser_1.ParserDefinitionErrorType.TOO_MANY_ALTS,\n        ruleName: topLevelRule.name,\n        occurrence: currOr.idx\n      });\n    }\n\n    return errors;\n  }, []);\n  return errors;\n}\n\nexports.validateTooManyAlts = validateTooManyAlts;\n\nfunction validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n  var errors = [];\n  (0, utils_1.forEach)(topLevelRules, function (currTopRule) {\n    var collectorVisitor = new RepetionCollector();\n    currTopRule.accept(collectorVisitor);\n    var allRuleProductions = collectorVisitor.allProductions;\n    (0, utils_1.forEach)(allRuleProductions, function (currProd) {\n      var prodType = (0, lookahead_1.getProdType)(currProd);\n      var actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      var currOccurrence = currProd.idx;\n      var paths = (0, lookahead_1.getLookaheadPathsForOptionalProd)(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n      var pathsInsideProduction = paths[0];\n\n      if ((0, utils_1.isEmpty)((0, utils_1.flatten)(pathsInsideProduction))) {\n        var errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd\n        });\n        errors.push({\n          message: errMsg,\n          type: parser_1.ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name\n        });\n      }\n    });\n  });\n  return errors;\n}\n\nexports.validateSomeNonEmptyLookaheadPath = validateSomeNonEmptyLookaheadPath;\n\nfunction checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n  var foundAmbiguousPaths = [];\n  var identicalAmbiguities = (0, utils_1.reduce)(alternatives, function (result, currAlt, currAltIdx) {\n    // ignore (skip) ambiguities with this alternative\n    if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n      return result;\n    }\n\n    (0, utils_1.forEach)(currAlt, function (currPath) {\n      var altsCurrPathAppearsIn = [currAltIdx];\n      (0, utils_1.forEach)(alternatives, function (currOtherAlt, currOtherAltIdx) {\n        if (currAltIdx !== currOtherAltIdx && (0, lookahead_1.containsPath)(currOtherAlt, currPath) && // ignore (skip) ambiguities with this \"other\" alternative\n        alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {\n          altsCurrPathAppearsIn.push(currOtherAltIdx);\n        }\n      });\n\n      if (altsCurrPathAppearsIn.length > 1 && !(0, lookahead_1.containsPath)(foundAmbiguousPaths, currPath)) {\n        foundAmbiguousPaths.push(currPath);\n        result.push({\n          alts: altsCurrPathAppearsIn,\n          path: currPath\n        });\n      }\n    });\n    return result;\n  }, []);\n  var currErrors = utils.map(identicalAmbiguities, function (currAmbDescriptor) {\n    var ambgIndices = (0, utils_1.map)(currAmbDescriptor.alts, function (currAltIdx) {\n      return currAltIdx + 1;\n    });\n    var currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path\n    });\n    return {\n      message: currMessage,\n      type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: [currAmbDescriptor.alts]\n    };\n  });\n  return currErrors;\n}\n\nfunction checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n  var errors = []; // flatten\n\n  var pathsAndIndices = (0, utils_1.reduce)(alternatives, function (result, currAlt, idx) {\n    var currPathsAndIdx = (0, utils_1.map)(currAlt, function (currPath) {\n      return {\n        idx: idx,\n        path: currPath\n      };\n    });\n    return result.concat(currPathsAndIdx);\n  }, []);\n  (0, utils_1.forEach)(pathsAndIndices, function (currPathAndIdx) {\n    var alternativeGast = alternation.definition[currPathAndIdx.idx]; // ignore (skip) ambiguities with this alternative\n\n    if (alternativeGast.ignoreAmbiguities === true) {\n      return;\n    }\n\n    var targetIdx = currPathAndIdx.idx;\n    var targetPath = currPathAndIdx.path;\n    var prefixAmbiguitiesPathsAndIndices = (0, utils_1.findAll)(pathsAndIndices, function (searchPathAndIdx) {\n      // prefix ambiguity can only be created from lower idx (higher priority) path\n      return (// ignore (skip) ambiguities with this \"other\" alternative\n        alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !== true && searchPathAndIdx.idx < targetIdx && // checking for strict prefix because identical lookaheads\n        // will be be detected using a different validation.\n        (0, lookahead_1.isStrictPrefixOfPath)(searchPathAndIdx.path, targetPath)\n      );\n    });\n    var currPathPrefixErrors = (0, utils_1.map)(prefixAmbiguitiesPathsAndIndices, function (currAmbPathAndIdx) {\n      var ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n      var occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n      var message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n        topLevelRule: rule,\n        alternation: alternation,\n        ambiguityIndices: ambgIndices,\n        prefixPath: currAmbPathAndIdx.path\n      });\n      return {\n        message: message,\n        type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n        ruleName: rule.name,\n        occurrence: occurrence,\n        alternatives: ambgIndices\n      };\n    });\n    errors = errors.concat(currPathPrefixErrors);\n  });\n  return errors;\n}\n\nexports.checkPrefixAlternativesAmbiguities = checkPrefixAlternativesAmbiguities;\n\nfunction checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n  var errors = [];\n  var tokenNames = (0, utils_1.map)(tokenTypes, function (currToken) {\n    return currToken.name;\n  });\n  (0, utils_1.forEach)(topLevels, function (currRule) {\n    var currRuleName = currRule.name;\n\n    if ((0, utils_1.contains)(tokenNames, currRuleName)) {\n      var errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n      errors.push({\n        message: errMsg,\n        type: parser_1.ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName\n      });\n    }\n  });\n  return errors;\n}","map":{"version":3,"sources":["../../../../src/parse/grammar/checks.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkPrefixAlternativesAmbiguities = exports.validateSomeNonEmptyLookaheadPath = exports.validateTooManyAlts = exports.RepetionCollector = exports.validateAmbiguousAlternationAlternatives = exports.validateEmptyOrAlternative = exports.getFirstNoneTerminal = exports.validateNoLeftRecursion = exports.validateRuleIsOverridden = exports.validateRuleDoesNotAlreadyExist = exports.OccurrenceValidationCollector = exports.identifyProductionForDuplicates = exports.validateGrammar = void 0;\nvar utils = require(\"@chevrotain/utils\");\nvar utils_1 = require(\"@chevrotain/utils\");\nvar parser_1 = require(\"../parser/parser\");\nvar gast_1 = require(\"./gast/gast\");\nvar lookahead_1 = require(\"./lookahead\");\nvar interpreter_1 = require(\"./interpreter\");\nvar gast_public_1 = require(\"./gast/gast_public\");\nvar gast_visitor_public_1 = require(\"./gast/gast_visitor_public\");\nfunction validateGrammar(topLevels, globalMaxLookahead, tokenTypes, errMsgProvider, grammarName) {\n    var duplicateErrors = utils.map(topLevels, function (currTopLevel) {\n        return validateDuplicateProductions(currTopLevel, errMsgProvider);\n    });\n    var leftRecursionErrors = utils.map(topLevels, function (currTopRule) {\n        return validateNoLeftRecursion(currTopRule, currTopRule, errMsgProvider);\n    });\n    var emptyAltErrors = [];\n    var ambiguousAltsErrors = [];\n    var emptyRepetitionErrors = [];\n    // left recursion could cause infinite loops in the following validations.\n    // It is safest to first have the user fix the left recursion errors first and only then examine Further issues.\n    if ((0, utils_1.every)(leftRecursionErrors, utils_1.isEmpty)) {\n        emptyAltErrors = (0, utils_1.map)(topLevels, function (currTopRule) {\n            return validateEmptyOrAlternative(currTopRule, errMsgProvider);\n        });\n        ambiguousAltsErrors = (0, utils_1.map)(topLevels, function (currTopRule) {\n            return validateAmbiguousAlternationAlternatives(currTopRule, globalMaxLookahead, errMsgProvider);\n        });\n        emptyRepetitionErrors = validateSomeNonEmptyLookaheadPath(topLevels, globalMaxLookahead, errMsgProvider);\n    }\n    var termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n    var tooManyAltsErrors = (0, utils_1.map)(topLevels, function (curRule) {\n        return validateTooManyAlts(curRule, errMsgProvider);\n    });\n    var duplicateRulesError = (0, utils_1.map)(topLevels, function (curRule) {\n        return validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider);\n    });\n    return (utils.flatten(duplicateErrors.concat(emptyRepetitionErrors, leftRecursionErrors, emptyAltErrors, ambiguousAltsErrors, termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError)));\n}\nexports.validateGrammar = validateGrammar;\nfunction validateDuplicateProductions(topLevelRule, errMsgProvider) {\n    var collectorVisitor = new OccurrenceValidationCollector();\n    topLevelRule.accept(collectorVisitor);\n    var allRuleProductions = collectorVisitor.allProductions;\n    var productionGroups = utils.groupBy(allRuleProductions, identifyProductionForDuplicates);\n    var duplicates = utils.pick(productionGroups, function (currGroup) {\n        return currGroup.length > 1;\n    });\n    var errors = utils.map(utils.values(duplicates), function (currDuplicates) {\n        var firstProd = utils.first(currDuplicates);\n        var msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n        var dslName = (0, gast_1.getProductionDslName)(firstProd);\n        var defError = {\n            message: msg,\n            type: parser_1.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n            ruleName: topLevelRule.name,\n            dslName: dslName,\n            occurrence: firstProd.idx\n        };\n        var param = getExtraProductionArgument(firstProd);\n        if (param) {\n            defError.parameter = param;\n        }\n        return defError;\n    });\n    return errors;\n}\nfunction identifyProductionForDuplicates(prod) {\n    return (0, gast_1.getProductionDslName)(prod) + \"_#_\" + prod.idx + \"_#_\" + getExtraProductionArgument(prod);\n}\nexports.identifyProductionForDuplicates = identifyProductionForDuplicates;\nfunction getExtraProductionArgument(prod) {\n    if (prod instanceof gast_public_1.Terminal) {\n        return prod.terminalType.name;\n    }\n    else if (prod instanceof gast_public_1.NonTerminal) {\n        return prod.nonTerminalName;\n    }\n    else {\n        return \"\";\n    }\n}\nvar OccurrenceValidationCollector = /** @class */ (function (_super) {\n    __extends(OccurrenceValidationCollector, _super);\n    function OccurrenceValidationCollector() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.allProductions = [];\n        return _this;\n    }\n    OccurrenceValidationCollector.prototype.visitNonTerminal = function (subrule) {\n        this.allProductions.push(subrule);\n    };\n    OccurrenceValidationCollector.prototype.visitOption = function (option) {\n        this.allProductions.push(option);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n        this.allProductions.push(manySep);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetition = function (many) {\n        this.allProductions.push(many);\n    };\n    OccurrenceValidationCollector.prototype.visitAlternation = function (or) {\n        this.allProductions.push(or);\n    };\n    OccurrenceValidationCollector.prototype.visitTerminal = function (terminal) {\n        this.allProductions.push(terminal);\n    };\n    return OccurrenceValidationCollector;\n}(gast_visitor_public_1.GAstVisitor));\nexports.OccurrenceValidationCollector = OccurrenceValidationCollector;\nfunction validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n    var errors = [];\n    var occurrences = (0, utils_1.reduce)(allRules, function (result, curRule) {\n        if (curRule.name === rule.name) {\n            return result + 1;\n        }\n        return result;\n    }, 0);\n    if (occurrences > 1) {\n        var errMsg = errMsgProvider.buildDuplicateRuleNameError({\n            topLevelRule: rule,\n            grammarName: className\n        });\n        errors.push({\n            message: errMsg,\n            type: parser_1.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n            ruleName: rule.name\n        });\n    }\n    return errors;\n}\nexports.validateRuleDoesNotAlreadyExist = validateRuleDoesNotAlreadyExist;\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nfunction validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n    var errors = [];\n    var errMsg;\n    if (!utils.contains(definedRulesNames, ruleName)) {\n        errMsg =\n            \"Invalid rule override, rule: ->\" + ruleName + \"<- cannot be overridden in the grammar: ->\" + className + \"<-\" +\n                \"as it is not defined in any of the super grammars \";\n        errors.push({\n            message: errMsg,\n            type: parser_1.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n            ruleName: ruleName\n        });\n    }\n    return errors;\n}\nexports.validateRuleIsOverridden = validateRuleIsOverridden;\nfunction validateNoLeftRecursion(topRule, currRule, errMsgProvider, path) {\n    if (path === void 0) { path = []; }\n    var errors = [];\n    var nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n    if (utils.isEmpty(nextNonTerminals)) {\n        return [];\n    }\n    else {\n        var ruleName = topRule.name;\n        var foundLeftRecursion = utils.contains(nextNonTerminals, topRule);\n        if (foundLeftRecursion) {\n            errors.push({\n                message: errMsgProvider.buildLeftRecursionError({\n                    topLevelRule: topRule,\n                    leftRecursionPath: path\n                }),\n                type: parser_1.ParserDefinitionErrorType.LEFT_RECURSION,\n                ruleName: ruleName\n            });\n        }\n        // we are only looking for cyclic paths leading back to the specific topRule\n        // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n        var validNextSteps = utils.difference(nextNonTerminals, path.concat([topRule]));\n        var errorsFromNextSteps = utils.map(validNextSteps, function (currRefRule) {\n            var newPath = utils.cloneArr(path);\n            newPath.push(currRefRule);\n            return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n        });\n        return errors.concat(utils.flatten(errorsFromNextSteps));\n    }\n}\nexports.validateNoLeftRecursion = validateNoLeftRecursion;\nfunction getFirstNoneTerminal(definition) {\n    var result = [];\n    if (utils.isEmpty(definition)) {\n        return result;\n    }\n    var firstProd = utils.first(definition);\n    /* istanbul ignore else */\n    if (firstProd instanceof gast_public_1.NonTerminal) {\n        result.push(firstProd.referencedRule);\n    }\n    else if (firstProd instanceof gast_public_1.Alternative ||\n        firstProd instanceof gast_public_1.Option ||\n        firstProd instanceof gast_public_1.RepetitionMandatory ||\n        firstProd instanceof gast_public_1.RepetitionMandatoryWithSeparator ||\n        firstProd instanceof gast_public_1.RepetitionWithSeparator ||\n        firstProd instanceof gast_public_1.Repetition) {\n        result = result.concat(getFirstNoneTerminal(firstProd.definition));\n    }\n    else if (firstProd instanceof gast_public_1.Alternation) {\n        // each sub definition in alternation is a FLAT\n        result = utils.flatten(utils.map(firstProd.definition, function (currSubDef) {\n            return getFirstNoneTerminal(currSubDef.definition);\n        }));\n    }\n    else if (firstProd instanceof gast_public_1.Terminal) {\n        // nothing to see, move along\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n    var isFirstOptional = (0, gast_1.isOptionalProd)(firstProd);\n    var hasMore = definition.length > 1;\n    if (isFirstOptional && hasMore) {\n        var rest = utils.drop(definition);\n        return result.concat(getFirstNoneTerminal(rest));\n    }\n    else {\n        return result;\n    }\n}\nexports.getFirstNoneTerminal = getFirstNoneTerminal;\nvar OrCollector = /** @class */ (function (_super) {\n    __extends(OrCollector, _super);\n    function OrCollector() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.alternations = [];\n        return _this;\n    }\n    OrCollector.prototype.visitAlternation = function (node) {\n        this.alternations.push(node);\n    };\n    return OrCollector;\n}(gast_visitor_public_1.GAstVisitor));\nfunction validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n    var orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    var ors = orCollector.alternations;\n    var errors = utils.reduce(ors, function (errors, currOr) {\n        var exceptLast = utils.dropRight(currOr.definition);\n        var currErrors = utils.map(exceptLast, function (currAlternative, currAltIdx) {\n            var possibleFirstInAlt = (0, interpreter_1.nextPossibleTokensAfter)([currAlternative], [], null, 1);\n            if (utils.isEmpty(possibleFirstInAlt)) {\n                return {\n                    message: errMsgProvider.buildEmptyAlternationError({\n                        topLevelRule: topLevelRule,\n                        alternation: currOr,\n                        emptyChoiceIdx: currAltIdx\n                    }),\n                    type: parser_1.ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n                    ruleName: topLevelRule.name,\n                    occurrence: currOr.idx,\n                    alternative: currAltIdx + 1\n                };\n            }\n            else {\n                return null;\n            }\n        });\n        return errors.concat(utils.compact(currErrors));\n    }, []);\n    return errors;\n}\nexports.validateEmptyOrAlternative = validateEmptyOrAlternative;\nfunction validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n    var orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    var ors = orCollector.alternations;\n    // New Handling of ignoring ambiguities\n    // - https://github.com/chevrotain/chevrotain/issues/869\n    ors = (0, utils_1.reject)(ors, function (currOr) { return currOr.ignoreAmbiguities === true; });\n    var errors = utils.reduce(ors, function (result, currOr) {\n        var currOccurrence = currOr.idx;\n        var actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n        var alternatives = (0, lookahead_1.getLookaheadPathsForOr)(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n        var altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        var altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        return result.concat(altsAmbiguityErrors, altsPrefixAmbiguityErrors);\n    }, []);\n    return errors;\n}\nexports.validateAmbiguousAlternationAlternatives = validateAmbiguousAlternationAlternatives;\nvar RepetionCollector = /** @class */ (function (_super) {\n    __extends(RepetionCollector, _super);\n    function RepetionCollector() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.allProductions = [];\n        return _this;\n    }\n    RepetionCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n        this.allProductions.push(manySep);\n    };\n    RepetionCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    };\n    RepetionCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    };\n    RepetionCollector.prototype.visitRepetition = function (many) {\n        this.allProductions.push(many);\n    };\n    return RepetionCollector;\n}(gast_visitor_public_1.GAstVisitor));\nexports.RepetionCollector = RepetionCollector;\nfunction validateTooManyAlts(topLevelRule, errMsgProvider) {\n    var orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    var ors = orCollector.alternations;\n    var errors = utils.reduce(ors, function (errors, currOr) {\n        if (currOr.definition.length > 255) {\n            errors.push({\n                message: errMsgProvider.buildTooManyAlternativesError({\n                    topLevelRule: topLevelRule,\n                    alternation: currOr\n                }),\n                type: parser_1.ParserDefinitionErrorType.TOO_MANY_ALTS,\n                ruleName: topLevelRule.name,\n                occurrence: currOr.idx\n            });\n        }\n        return errors;\n    }, []);\n    return errors;\n}\nexports.validateTooManyAlts = validateTooManyAlts;\nfunction validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n    var errors = [];\n    (0, utils_1.forEach)(topLevelRules, function (currTopRule) {\n        var collectorVisitor = new RepetionCollector();\n        currTopRule.accept(collectorVisitor);\n        var allRuleProductions = collectorVisitor.allProductions;\n        (0, utils_1.forEach)(allRuleProductions, function (currProd) {\n            var prodType = (0, lookahead_1.getProdType)(currProd);\n            var actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n            var currOccurrence = currProd.idx;\n            var paths = (0, lookahead_1.getLookaheadPathsForOptionalProd)(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n            var pathsInsideProduction = paths[0];\n            if ((0, utils_1.isEmpty)((0, utils_1.flatten)(pathsInsideProduction))) {\n                var errMsg = errMsgProvider.buildEmptyRepetitionError({\n                    topLevelRule: currTopRule,\n                    repetition: currProd\n                });\n                errors.push({\n                    message: errMsg,\n                    type: parser_1.ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n                    ruleName: currTopRule.name\n                });\n            }\n        });\n    });\n    return errors;\n}\nexports.validateSomeNonEmptyLookaheadPath = validateSomeNonEmptyLookaheadPath;\nfunction checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    var foundAmbiguousPaths = [];\n    var identicalAmbiguities = (0, utils_1.reduce)(alternatives, function (result, currAlt, currAltIdx) {\n        // ignore (skip) ambiguities with this alternative\n        if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n            return result;\n        }\n        (0, utils_1.forEach)(currAlt, function (currPath) {\n            var altsCurrPathAppearsIn = [currAltIdx];\n            (0, utils_1.forEach)(alternatives, function (currOtherAlt, currOtherAltIdx) {\n                if (currAltIdx !== currOtherAltIdx &&\n                    (0, lookahead_1.containsPath)(currOtherAlt, currPath) &&\n                    // ignore (skip) ambiguities with this \"other\" alternative\n                    alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {\n                    altsCurrPathAppearsIn.push(currOtherAltIdx);\n                }\n            });\n            if (altsCurrPathAppearsIn.length > 1 &&\n                !(0, lookahead_1.containsPath)(foundAmbiguousPaths, currPath)) {\n                foundAmbiguousPaths.push(currPath);\n                result.push({\n                    alts: altsCurrPathAppearsIn,\n                    path: currPath\n                });\n            }\n        });\n        return result;\n    }, []);\n    var currErrors = utils.map(identicalAmbiguities, function (currAmbDescriptor) {\n        var ambgIndices = (0, utils_1.map)(currAmbDescriptor.alts, function (currAltIdx) { return currAltIdx + 1; });\n        var currMessage = errMsgProvider.buildAlternationAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbDescriptor.path\n        });\n        return {\n            message: currMessage,\n            type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n            ruleName: rule.name,\n            occurrence: alternation.idx,\n            alternatives: [currAmbDescriptor.alts]\n        };\n    });\n    return currErrors;\n}\nfunction checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    var errors = [];\n    // flatten\n    var pathsAndIndices = (0, utils_1.reduce)(alternatives, function (result, currAlt, idx) {\n        var currPathsAndIdx = (0, utils_1.map)(currAlt, function (currPath) {\n            return { idx: idx, path: currPath };\n        });\n        return result.concat(currPathsAndIdx);\n    }, []);\n    (0, utils_1.forEach)(pathsAndIndices, function (currPathAndIdx) {\n        var alternativeGast = alternation.definition[currPathAndIdx.idx];\n        // ignore (skip) ambiguities with this alternative\n        if (alternativeGast.ignoreAmbiguities === true) {\n            return;\n        }\n        var targetIdx = currPathAndIdx.idx;\n        var targetPath = currPathAndIdx.path;\n        var prefixAmbiguitiesPathsAndIndices = (0, utils_1.findAll)(pathsAndIndices, function (searchPathAndIdx) {\n            // prefix ambiguity can only be created from lower idx (higher priority) path\n            return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n                true &&\n                searchPathAndIdx.idx < targetIdx &&\n                // checking for strict prefix because identical lookaheads\n                // will be be detected using a different validation.\n                (0, lookahead_1.isStrictPrefixOfPath)(searchPathAndIdx.path, targetPath));\n        });\n        var currPathPrefixErrors = (0, utils_1.map)(prefixAmbiguitiesPathsAndIndices, function (currAmbPathAndIdx) {\n            var ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n            var occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n            var message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n                topLevelRule: rule,\n                alternation: alternation,\n                ambiguityIndices: ambgIndices,\n                prefixPath: currAmbPathAndIdx.path\n            });\n            return {\n                message: message,\n                type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n                ruleName: rule.name,\n                occurrence: occurrence,\n                alternatives: ambgIndices\n            };\n        });\n        errors = errors.concat(currPathPrefixErrors);\n    });\n    return errors;\n}\nexports.checkPrefixAlternativesAmbiguities = checkPrefixAlternativesAmbiguities;\nfunction checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n    var errors = [];\n    var tokenNames = (0, utils_1.map)(tokenTypes, function (currToken) { return currToken.name; });\n    (0, utils_1.forEach)(topLevels, function (currRule) {\n        var currRuleName = currRule.name;\n        if ((0, utils_1.contains)(tokenNames, currRuleName)) {\n            var errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n            errors.push({\n                message: errMsg,\n                type: parser_1.ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n                ruleName: currRuleName\n            });\n        }\n    });\n    return errors;\n}\n//# sourceMappingURL=checks.js.map"]},"metadata":{},"sourceType":"script"}