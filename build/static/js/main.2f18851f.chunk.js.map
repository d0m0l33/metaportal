{"version":3,"sources":["global/styles.ts","typography/Title.tsx","components/base/base.tsx","components/TopBar.tsx","typography/Text.tsx","components/Transactions/Icons/CheckIcon.tsx","components/Transactions/Icons/ClockIcon.tsx","components/Transactions/Icons/ExclamationIcon.tsx","components/Transactions/Icons/ShareIcon.tsx","components/Transactions/Icons/SpinnerIcon.tsx","components/Transactions/Icons/UnwrapIcon.tsx","components/Transactions/Icons/WalletIcon.tsx","components/Transactions/Icons/WrapIcon.tsx","components/base/Link.tsx","components/Transactions/History.tsx","assets/fonts/HelveticaNeue.woff2","assets/fonts/HelveticaNeueBold.woff2","assets/fonts/HelveticaNeueMedium.woff2","global/GlobalStyle.tsx","components/base/Button.tsx","components/account/AccountModal.tsx","components/account/AccountButton.tsx","models/soldierModel.tsx","components/ItemSelection/ItemSelection.tsx","portalHooks/BadgeHelperTypes.ts","components/TokensList/SelectedItemSlice.ts","portalHooks/BadgeHelper.ts","portalHooks/TransactionsAPI.ts","portalHooks/Badges.ts","portalHooks/useBadgeList.ts","components/badge/BadgeRequirementsList.tsx","hooks.ts","interfaces/interfaces.ts","components/badge/BadgeOverviewModal.tsx","components/TokensList/TokenSVGIcon.tsx","components/TokensList/TokensList.tsx","pages/Badges.tsx","App.tsx","features/counter/counterSlice.ts","store.ts","index.tsx"],"names":["Colors","Fonts","Shadows","Sizes","Transitions","BorderRad","Title","styled","h1","Page","h2","div","ContainerCustom","ContentBlock","section","main","TopBar","Navbar","bg","variant","expand","fixed","Container","Brand","href","Toggle","Collapse","id","Nav","className","Link","Badge","pill","style","marginLeft","header","nav","a","span","NavLink","Text","p","TextBold","CheckIcon","viewBox","fill","xmlns","d","ClockIcon","ExclamationIcon","ShareIcon","color","fillRule","clipRule","SpinnerIcon","Svg","Circle","cx","cy","r","svg","circle","UnwrapIcon","WalletIcon","WrapIcon","formatter","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","TableWrapper","children","title","SmallContentBlock","TitleRow","Table","TransactionLink","transaction","getExplorerTransactionLink","hash","chainId","target","rel","LinkIconWrapper","notificationContent","transactionFailed","icon","transactionStarted","transactionSucceed","walletConnected","ListElement","date","ListElementWrapper","layout","initial","opacity","y","animate","exit","ListIconContainer","ListDetailsWrapper","NotificationDate","TransactionIcon","getStoredTransactionState","transactionName","TransactionsList","transactions","useTransactions","AnimatePresence","map","submittedAt","NotificationElement","balance","NotificationWrapper","NotificationIconContainer","NotificationDetailsWrapper","NotificationText","TransactionDetails","shortenTransactionHash","nonce","value","format","parseFloat","formatEther","BigNumber","from","NotificationsList","notifications","useNotifications","NotificationsWrapper","notification","type","Date","now","motion","DateRow","dateObject","formattedDate","toLocaleDateString","formattedTime","toLocaleTimeString","hour","minute","hour12","DateDisplay","HourDisplay","GlobalStyle","createGlobalStyle","HelveticaNeue","HelveticaNeueMedium","HelveticaNeueBold","Button","button","formatBalance","AccountModal","setShowModal","useEthers","account","useEtherBalance","ModalBackground","onClick","Modal","e","stopPropagation","ClosingButton","AccountInfo","AccountAddress","LinkWrapper","getExplorerAddressLink","window","isSecureContext","console","log","navigator","clipboard","writeText","BalanceWrapper","HistoryWrapper","AccountButton","deactivate","activateBrowserWallet","ens","useLookupAddress","useState","showModal","activateError","setActivateError","error","useEffect","message","activate","Account","ErrorWrapper","AccountLabel","shortenAddress","LoginButton","SoldierModel","props","group","useRef","useGLTF","nodes","materials","animations","useAnimations","actions","ref","dispose","rotation","Math","PI","scale","object","mixamorigHips","geometry","vanguard_Mesh","material","VanguardBodyMat","skeleton","vanguard_visor","Vanguard_VisorMat","ItemSelection","item","useSelector","state","index","selectedItem","holders","name","address","tokenId","AvatarContainer","dpr","camera","position","fov","fallback","OrbitControls","enableZoom","enablePan","preload","TransactionLevel","CriteriaComparions","selectedItemSlice","createSlice","initialState","reducers","updatedSelectedItem","action","payload","parseResponseForItems","response","data","items","RANDOM_VISOR_COLORS","getKeyValueMatchCount","key","count","forEach","getKeyMatchCount","getValidBadges","badges","validBadges","badge","validateBadgeAgainstTransactions","push","parseRules","level","Root","executeRootLevelChecksForBadge","rules","executeFrequencyRuleForBadge","keyValueObject","criteria","comparison","useKeyValueMatching","criteriaRule","criteriaValue","isValueMathing","frequency","valueMatching","calculateFrequencyForKeyValueMatches","GT","LT","getTransactionsFor","signerAddress","undefined","transactionsForAddress","url","axios","get","then","catch","DEFAULT_BADGELIST","ui","domainId","imageUri","description","requirements","onChain","ChainId","Polygon","BADGE_LIST","useBadgeList","overrideChainId","tags","adjustedChainId","Mainnet","setBadges","transactionItems","Promise","reject","Error","err","RequirementsList","requirement","RequirmentCheck","useAppDispatch","useDispatch","ERC1155Interface","Interface","ERC1155","abi","VisorsABI","VISORS","BadgeOverviewModal","badgeParams","library","visorInterface","utils","signer","getSigner","contract","Contract","tokenBalance","contractAddress","useContractCall","method","args","useERC1155TokenBalance","send","useContractFunction","dispatch","doMint","visorId","overrides","parseEther","domainName","chainName","formatUnits","MintButton","ApplyButton","DomainRow","TokenSVGIcon","src","alt","isIconError","SvgContainer","TokensList","selectedBadgeParams","setSelectedBadgeParams","BadgeContainer","idx","TokenItem","TokenIconContainer","CHAIN_NAMES","handleShowModal","BadgeCreatorLogo","BadgeApplied","width","height","TokenName","Spinner","animation","li","TokenBalance","BadgePage","BadgesPageContainer","BadgeListColumn","BadgeListHeaderRow","BadgeListHeaderInfoColumn","BadgeListHeaderDropdownColumn","Form","Select","BadgeListRow","AvatarColumn","AvatarHeaderRow","AvatarHeaderXPColumn","length","AvatarHeaderAccountSignInColumn","AvatarRow","margin","App","exact","path","component","to","counterSlice","increment","decrement","incrementByAmount","store","configureStore","reducer","counter","counterReducer","selectedItemReducer","config","readOnlyChainId","readOnlyUrls","Hardhat","supportedChains","Kovan","Mumbai","ReactDOM","render","StrictMode","DAppProvider","document","getElementById"],"mappings":"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","file":"static/js/main.2f18851f.chunk.js","sourcesContent":["export const Colors = {\n  Black: {\n    900: '#23242A',\n    200: '#DDE2EB',\n  },\n  Gray: {\n    600: '#757575',\n    300: '#E0E0E0',\n  },\n  White: '#ffffff',\n  Yellow: {\n    500: '#F2C94C',\n    200: '#fff9e6',\n    100: '#FFF4D4',\n  },\n  Red: { 400: '#F87171' },\n}\n\nexport const Fonts = {\n  Helvetica: '\"HelveticaNeue\", sans-serif',\n}\n\nexport const Shadows = {\n  main: '0px 4px 28px rgba(136, 169, 200, 0.15)',\n  notification: '0px 4px 14px rgba(136, 169, 200, 0.3)',\n}\n\nexport const Sizes = {\n  headerHeight: '64px',\n}\n\nexport const Gradients = {\n  bodyBackground: `linear-gradient(180deg, ${Colors.Yellow[100]}, ${Colors.White})`,\n}\n\nexport const Transitions = {\n  duration: '0.25s',\n  all: 'all 0.25s ease',\n}\n\nexport const BorderRad = {\n  s: '8px',\n  m: '24px',\n  round: '50%',\n  full: '1000px',\n}\n","import styled from 'styled-components'\n\nexport const Title = styled.h1`\n  font-weight: 700;\n  margin-bottom: 5;\n`\n\n\nexport const DomainTitle = styled.h2`\n  font-weight: 500;\n  margin-bottom: 5px;\n`\n","import styled from 'styled-components'\nimport { BorderRad, Colors, Gradients, Shadows, Sizes } from '../../global/styles'\nimport { Title } from '../../typography/Title'\n\nexport const Page = styled.div`\n  display: flex;\n  position: relative;\n  flex-direction: column;\n  padding-top: ${Sizes.headerHeight};\n  height: 100%;\n  min-height: 100vh;\n  background-color: ghostwhite;\n`\n\nexport const ContainerCustom = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 800px;\n  height: 100%;\n  margin: 0 auto;\n  padding-right: 14px;\n`\n\n// token page \n\nexport const ContainerCustomTokenListSections = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  max-height: 700px;\n  flex-wrap: wrap-reverse;\n`\nexport const ItemSelectionSection = styled.section`\n  flex-direction: column;\n  flex:1;\n  margin:1em;\n  margin-left:0.5em;\n`\n\n// export const ItemSelectionSection = styled.section`\n//   position: relative;\n//   flex-direction: column;\n//   flex:1;\n//   margin:1em;\n//   margin-left:0.5em;\n// `\n\n\nexport const SignedOutContainer = styled.div`\ndisplay: flex;\njusrifyContent: center;\n  margin-bottom: 1em;\n`\n\nexport const ItemListSection = styled.section`\n  margin:1em;\n  margin-right:0.5em;\n  flex-direction: column;\n  flex:2;\n  border-color: black;\n  border-width: 1px;\n`\n\n// export const ItemListSection = styled.section`\n//   margin:1em;\n//   margin-right:0.5em;\n//   position: relative;\n//   flex-direction: column;\n//   flex:2;\n// `\n\nexport const HeaderContainer = styled(ContainerCustom)`\n  max-width: 1200px;\n`\n\n// export const MainContent = styled.main`\n//   display: flex;\n//   position: relative;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   min-height: calc(100vh - ${Sizes.headerHeight});\n//   overflow: scroll;\n\n//   &:before {\n//     content: '';\n//     position: fixed;\n//     top: 0;\n//     left: 0;\n//     width: 100vw;\n//     height: 100vh;\n//     overflow: hidden;\n//     pointer-events: none;\n//     user-select: none;\n//     background-color: ghostwhite;\n//   }\n// `\n\nexport const MainContent = styled.main`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  overflow: scroll;\n  &:before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    overflow: hidden;\n    pointer-events: none;\n    user-select: none;\n    background-color: ghostwhite;\n  }\n`\n\n// export const Section = styled.section`\n//   display: flex;\n//   position: relative;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   margin-top: 24px;\n//   margin-bottom: 60px;\n// `\n\n\n\nexport const Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  margin-top: 24px;\n  margin-bottom: 60px;\n`\n\nexport const SectionRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  margin-bottom: 3em;\n\n  ${Title} {\n    margin-bottom: 0;\n  }\n`\n\nexport const SectionRowAvatar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  margin-bottom: 3.4em;\n`\n\nexport const DomainSelectBoxContainer = styled.div`\n  flex-grow: 1;\n`\n\nexport const DomainTitleContainer = styled.div`\n  flex-grow: 3;\n`\n\nexport const ContentRow = styled.div`\n  display: block;\n\n  & + & {\n    margin-top: 16px;\n  }\n`\n\nexport const ContentBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  background-color: rgb(223 232 241);;\n  border-radius: ${BorderRad.s};\n  box-shadow: ${Shadows.main};\n  padding: 10px;\n`\n\nexport const ContentBlockBackground = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 800px;\n  min-height: 1000px;\n  background-color: #efeeee; \n  border-radius: ${BorderRad.s};\n  box-shadow: ${Shadows.main};\n  padding: 10px;\n`\n// #c4d9ef","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { Colors, Shadows, Sizes, Transitions } from '../global/styles'\nimport { HeaderContainer } from './base/base'\nimport { Badge, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap'\n\n\nexport function TopBar() {\n  return (\n    <Navbar bg=\"light\" variant=\"light\" expand=\"lg\" fixed=\"top\">\n      <Container>\n        <Navbar.Brand href=\"/\">Meta Portal</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"me-auto\">\n            <Nav.Link href=\"/\">Explore\n            <Badge pill bg=\"secondary\"style={{marginLeft: '0.2em'}} >coming soon</Badge>\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  )\n}\n\nconst Header = styled.header`\n  display: flex;\n  position: fixed;\n  top: 0;\n  align-items: center;\n  width: 100%;\n  height: ${Sizes.headerHeight};\n  background-color: ${Colors.White};\n  box-shadow: ${Shadows.main};\n  z-index: 100;\n`\n\nconst HeaderNav = styled.nav`\n  display: flex;\n  align-items: center;\n  height: 100%;\n  position: relative;\n`\n\nconst ToMain = styled.a`\n  display: flex;\n  flex-direction: column;\n  width: fit-content;\n  font-size: 18px;\n  line-height: 24px;\n  font-weight: 700;\n  transition: ${Transitions.all};\n\n  &:hover {\n    color: ${Colors.Yellow[500]};\n  }\n`\n\nconst ToMainBottom = styled.span`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 4px;\n  align-items: center;\n  width: fit-content;\n  font-size: 10px;\n  line-height: 14px;\n  font-weight: 500;\n`\n\nconst Handshaking = styled.span`\n  letter-spacing: -0.3em;\n  font-size: 2em;\n`\n\nconst HeaderNavLinks = styled.div`\n  display: grid;\n  position: absolute;\n  left: 50%;\n  grid-auto-flow: column;\n  align-items: center;\n  grid-column-gap: 20px;\n  align-items: center;\n  height: 100%;\n  transform: translateX(-50%);\n`\n\nconst DisabledLink = styled(NavLink)`\n  display: flex;\n  position: relative;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  padding: 10px;\n  font-size: 12px;\n  line-height: 24px;\n  font-weight: 700;\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n  transition: ${Transitions.all};\n  white-space: nowrap;\n  pointer-events: none;\n\n`\n\n\nconst HeaderLink = styled(NavLink)`\n  display: flex;\n  position: relative;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  padding: 10px;\n  font-size: 12px;\n  line-height: 24px;\n  font-weight: 700;\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n  transition: ${Transitions.all};\n  white-space: nowrap;\n\n  &:after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    width: calc(100% - 20px);\n    height: 2px;\n    background-color: ${Colors.Yellow[500]};\n    transform: scaleX(0);\n    transform-origin: 50% 50%;\n    transition: ${Transitions.all};\n  }\n\n  &:hover {\n    color: ${Colors.Yellow[500]};\n\n    &:after {\n      transform: scaleX(1);\n    }\n  }\n  &.active-page {\n    &:after {\n      transform: scaleX(1);\n    }\n  }\n`\n","import styled from 'styled-components'\n\nexport const Text = styled.p`\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n`\n\nexport const TextInline = styled.span`\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n`\n\nexport const TextBold = styled(Text)`\n  font-weight: 700;\n`\n","import React from 'react'\n\nexport const CheckIcon = () => (\n  <svg viewBox=\"0 0 20 21\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M12.72 7.29L8.43001 11.59L6.78 9.94C6.69036 9.83532 6.58004 9.7503 6.45597 9.69027C6.33191 9.63025 6.19678 9.59652 6.05906 9.5912C5.92134 9.58588 5.78401 9.60909 5.65568 9.65936C5.52736 9.70964 5.41081 9.78589 5.31335 9.88335C5.2159 9.9808 5.13964 10.0974 5.08937 10.2257C5.03909 10.354 5.01589 10.4913 5.02121 10.6291C5.02653 10.7668 5.06026 10.9019 5.12028 11.026C5.1803 11.15 5.26532 11.2604 5.37 11.35L7.72 13.71C7.81344 13.8027 7.92426 13.876 8.0461 13.9258C8.16794 13.9755 8.2984 14.0008 8.43001 14C8.69234 13.9989 8.94374 13.8947 9.13 13.71L14.13 8.71C14.2237 8.61704 14.2981 8.50644 14.3489 8.38458C14.3997 8.26272 14.4258 8.13201 14.4258 8C14.4258 7.86799 14.3997 7.73728 14.3489 7.61542C14.2981 7.49356 14.2237 7.38296 14.13 7.29C13.9426 7.10375 13.6892 6.99921 13.425 6.99921C13.1608 6.99921 12.9074 7.10375 12.72 7.29ZM10 0.5C8.02219 0.5 6.08879 1.08649 4.4443 2.1853C2.79981 3.28412 1.51809 4.8459 0.761209 6.67317C0.00433284 8.50043 -0.193701 10.5111 0.192152 12.4509C0.578004 14.3907 1.53041 16.1725 2.92894 17.5711C4.32746 18.9696 6.10929 19.922 8.0491 20.3079C9.98891 20.6937 11.9996 20.4957 13.8268 19.7388C15.6541 18.9819 17.2159 17.7002 18.3147 16.0557C19.4135 14.4112 20 12.4778 20 10.5C20 9.18678 19.7413 7.88642 19.2388 6.67317C18.7363 5.45991 17.9997 4.35752 17.0711 3.42893C16.1425 2.50035 15.0401 1.76375 13.8268 1.2612C12.6136 0.758658 11.3132 0.5 10 0.5ZM10 18.5C8.41775 18.5 6.87104 18.0308 5.55544 17.1518C4.23985 16.2727 3.21447 15.0233 2.60897 13.5615C2.00347 12.0997 1.84504 10.4911 2.15372 8.93928C2.4624 7.38743 3.22433 5.96197 4.34315 4.84315C5.46197 3.72433 6.88743 2.9624 8.43928 2.65372C9.99113 2.34504 11.5997 2.50346 13.0615 3.10896C14.5233 3.71447 15.7727 4.73984 16.6518 6.05544C17.5308 7.37103 18 8.91775 18 10.5C18 12.6217 17.1572 14.6566 15.6569 16.1569C14.1566 17.6571 12.1217 18.5 10 18.5Z\" />\n  </svg>\n)\n","import React from 'react'\n\nexport const ClockIcon = () => (\n  <svg viewBox=\"0 0 20 21\" fill=\"current\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M10 0.5C8.02219 0.5 6.08879 1.08649 4.4443 2.1853C2.79981 3.28412 1.51809 4.8459 0.761209 6.67317C0.00433284 8.50043 -0.193701 10.5111 0.192152 12.4509C0.578004 14.3907 1.53041 16.1725 2.92894 17.5711C4.32746 18.9696 6.10929 19.922 8.0491 20.3079C9.98891 20.6937 11.9996 20.4957 13.8268 19.7388C15.6541 18.9819 17.2159 17.7002 18.3147 16.0557C19.4135 14.4112 20 12.4778 20 10.5C20 9.18678 19.7413 7.88642 19.2388 6.67317C18.7363 5.45991 17.9997 4.35752 17.0711 3.42893C16.1425 2.50035 15.0401 1.76375 13.8268 1.2612C12.6136 0.758658 11.3132 0.5 10 0.5ZM10 18.5C8.41775 18.5 6.87104 18.0308 5.55544 17.1518C4.23985 16.2727 3.21447 15.0233 2.60897 13.5615C2.00347 12.0997 1.84504 10.4911 2.15372 8.93928C2.4624 7.38743 3.22433 5.96197 4.34315 4.84315C5.46197 3.72433 6.88743 2.9624 8.43928 2.65372C9.99113 2.34504 11.5997 2.50346 13.0615 3.10896C14.5233 3.71447 15.7727 4.73984 16.6518 6.05544C17.5308 7.37103 18 8.91775 18 10.5C18 12.6217 17.1572 14.6566 15.6569 16.1569C14.1566 17.6571 12.1217 18.5 10 18.5ZM13.1 11.13L11 9.92V5.5C11 5.23478 10.8946 4.98043 10.7071 4.79289C10.5196 4.60536 10.2652 4.5 10 4.5C9.73479 4.5 9.48043 4.60536 9.2929 4.79289C9.10536 4.98043 9 5.23478 9 5.5V10.5C9 10.5 9 10.58 9 10.62C9.00593 10.6889 9.02281 10.7564 9.05 10.82C9.0706 10.8793 9.09741 10.9363 9.13 10.99C9.15737 11.0468 9.1909 11.1005 9.23 11.15L9.39001 11.28L9.48 11.37L12.08 12.87C12.2324 12.9564 12.4048 13.0012 12.58 13C12.8014 13.0015 13.0171 12.9296 13.1932 12.7953C13.3693 12.6611 13.4959 12.4722 13.5531 12.2583C13.6103 12.0444 13.5948 11.8176 13.5092 11.6134C13.4236 11.4092 13.2726 11.2392 13.08 11.13H13.1Z\" />\n  </svg>\n)\n","import React from 'react'\n\nexport const ExclamationIcon = () => (\n  <svg viewBox=\"0 0 24 21\" fill=\"current\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M12.0005 14.4998C11.8027 14.4998 11.6093 14.5584 11.4449 14.6683C11.2804 14.7782 11.1523 14.9344 11.0766 15.1171C11.0009 15.2998 10.9811 15.5009 11.0197 15.6949C11.0583 15.8889 11.1535 16.067 11.2933 16.2069C11.4332 16.3467 11.6114 16.442 11.8054 16.4806C11.9993 16.5192 12.2004 16.4994 12.3831 16.4237C12.5659 16.348 12.722 16.2198 12.8319 16.0554C12.9418 15.8909 13.0005 15.6976 13.0005 15.4998C13.0005 15.2346 12.8951 14.9802 12.7076 14.7927C12.52 14.6051 12.2657 14.4998 12.0005 14.4998ZM22.6705 15.9698L14.6205 1.96978C14.3603 1.5033 13.9802 1.11474 13.5196 0.844252C13.0591 0.573763 12.5346 0.431152 12.0005 0.431152C11.4663 0.431152 10.9419 0.573763 10.4813 0.844252C10.0207 1.11474 9.64065 1.5033 9.38046 1.96978L1.38046 15.9698C1.11125 16.4238 0.966598 16.9408 0.9611 17.4686C0.955602 17.9964 1.08945 18.5163 1.34914 18.9758C1.60883 19.4354 1.98516 19.8182 2.44014 20.0858C2.89512 20.3534 3.41264 20.4962 3.94046 20.4998H20.0605C20.5925 20.505 21.1164 20.3687 21.5784 20.1047C22.0403 19.8407 22.4238 19.4586 22.6894 18.9976C22.9551 18.5366 23.0933 18.0132 23.09 17.4811C23.0866 16.9491 22.9418 16.4274 22.6705 15.9698ZM20.9405 17.9698C20.8528 18.1257 20.7249 18.2553 20.5701 18.345C20.4154 18.4347 20.2393 18.4813 20.0605 18.4798H3.94046C3.76157 18.4813 3.58556 18.4347 3.43077 18.345C3.27599 18.2553 3.14811 18.1257 3.06046 17.9698C2.97269 17.8178 2.92648 17.6453 2.92648 17.4698C2.92648 17.2942 2.97269 17.1218 3.06046 16.9698L11.0605 2.96978C11.1444 2.80598 11.2719 2.66852 11.4289 2.57253C11.5859 2.47654 11.7664 2.42574 11.9505 2.42574C12.1345 2.42574 12.315 2.47654 12.472 2.57253C12.629 2.66852 12.7565 2.80598 12.8405 2.96978L20.8905 16.9698C20.9897 17.1196 21.0467 17.2934 21.0555 17.4729C21.0643 17.6524 21.0245 17.831 20.9405 17.9898V17.9698ZM12.0005 6.49978C11.7352 6.49978 11.4809 6.60514 11.2933 6.79268C11.1058 6.98021 11.0005 7.23457 11.0005 7.49978V11.4998C11.0005 11.765 11.1058 12.0194 11.2933 12.2069C11.4809 12.3944 11.7352 12.4998 12.0005 12.4998C12.2657 12.4998 12.52 12.3944 12.7076 12.2069C12.8951 12.0194 13.0005 11.765 13.0005 11.4998V7.49978C13.0005 7.23457 12.8951 6.98021 12.7076 6.79268C12.52 6.60514 12.2657 6.49978 12.0005 6.49978Z\" />\n  </svg>\n)\n","import React from 'react'\n\nexport const ShareIcon = () => (\n  <svg viewBox=\"0 0 10 11\" fill=\"none\" color=\"currentColor\">\n    <path\n      fill=\"currentColor\"\n      color=\"currentColor\"\n      d=\"M8.14394 6.45953H7.76512C7.70979 6.45953 7.66439 6.47844 7.62907 6.51643C7.59345 6.55419 7.57573 6.6026 7.57573 6.66155V8.68174C7.57573 8.95953 7.48307 9.19728 7.29764 9.39512C7.11221 9.59291 6.88923 9.69174 6.6288 9.69174H1.70451C1.4441 9.69174 1.22114 9.59291 1.03567 9.39512C0.850242 9.19731 0.757538 8.95956 0.757538 8.68174V3.42919C0.757538 3.15142 0.850222 2.91369 1.03567 2.71587C1.22114 2.51803 1.4441 2.41917 1.70451 2.41917H4.22535C4.28068 2.41917 4.32608 2.40018 4.36155 2.36234C4.39702 2.32446 4.41474 2.2761 4.41474 2.21713V1.81303C4.41474 1.75417 4.39702 1.70572 4.36155 1.66791C4.32608 1.63003 4.28068 1.61113 4.22535 1.61113H1.70451C1.23501 1.61113 0.833513 1.78895 0.50005 2.14458C0.166711 2.50019 0 2.92846 0 3.42926V8.68183C0 9.1826 0.166711 9.61094 0.500071 9.96643C0.833534 10.3221 1.23503 10.5 1.70453 10.5H6.6288C7.09828 10.5 7.49982 10.3221 7.83324 9.96643C8.16668 9.61094 8.33339 9.18262 8.33339 8.68183V6.6617C8.33339 6.60269 8.31565 6.55426 8.28003 6.51643C8.24452 6.47844 8.19912 6.45953 8.14394 6.45953Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      color=\"currentColor\"\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M5.40766 1.26336V0.5L10 0.5L10 5.19992H9.25411V1.26336H5.40766Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      color=\"currentColor\"\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M9.76725 0.749511C9.90926 0.894841 9.90926 1.13047 9.76725 1.2758L3.89336 7.28728C3.75136 7.43261 3.52112 7.43261 3.37912 7.28728C3.23712 7.14195 3.23712 6.90633 3.37912 6.761L9.25301 0.749511C9.39502 0.604182 9.62525 0.604182 9.76725 0.749511Z\"\n    />\n  </svg>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport const SpinnerIcon = () => (\n  <Svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n    <Circle cx=\"50\" cy=\"50\" r=\"40\" />\n  </Svg>\n)\n\nconst Svg = styled.svg`\n  animation: 1s linear infinite svg-animation;\n\n  @keyframes svg-animation {\n    0% {\n      transform: rotateZ(0deg);\n    }\n    100% {\n      transform: rotateZ(360deg);\n    }\n  }\n`\n\nconst Circle = styled.circle`\n  fill: transparent;\n  stroke: currentColor;\n  stroke-linecap: round;\n  stroke-dasharray: 280;\n  stroke-dashoffset: 100;\n  stroke-width: 8px;\n`\n","import React from 'react'\n\nexport const UnwrapIcon = () => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M13.002 4.744a.84.84 0 00.003 1.175l3.64 3.679.084.074a.807.807 0 001.072-.077.835.835 0 00-.002-1.174l-3.64-3.68-.083-.073a.81.81 0 00-1.074.076zm-9.286 6.432A.827.827 0 003 12c0 .458.367.83.818.83h14.383l-5.196 5.251-.074.085a.84.84 0 00.072 1.09.81.81 0 001.156.002l6.6-6.67.073-.084a.836.836 0 00.106-.82.817.817 0 00-.756-.514H3.818l-.102.006z\"\n      fill=\"#200E32\"\n    />\n  </svg>\n)\n","import React from 'react'\n\nexport const WalletIcon = () => (\n  <svg viewBox=\"0 0 20 19\" fill=\"current\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M17 4.5H16V3.5C16 2.70435 15.6839 1.94129 15.1213 1.37868C14.5587 0.816071 13.7956 0.5 13 0.5H3C2.20435 0.5 1.44129 0.816071 0.87868 1.37868C0.316071 1.94129 0 2.70435 0 3.5V15.5C0 16.2956 0.316071 17.0587 0.87868 17.6213C1.44129 18.1839 2.20435 18.5 3 18.5H17C17.7956 18.5 18.5587 18.1839 19.1213 17.6213C19.6839 17.0587 20 16.2956 20 15.5V7.5C20 6.70435 19.6839 5.94129 19.1213 5.37868C18.5587 4.81607 17.7956 4.5 17 4.5ZM3 2.5H13C13.2652 2.5 13.5196 2.60536 13.7071 2.79289C13.8946 2.98043 14 3.23478 14 3.5V4.5H3C2.73478 4.5 2.48043 4.39464 2.29289 4.20711C2.10536 4.01957 2 3.76522 2 3.5C2 3.23478 2.10536 2.98043 2.29289 2.79289C2.48043 2.60536 2.73478 2.5 3 2.5ZM18 12.5H17C16.7348 12.5 16.4804 12.3946 16.2929 12.2071C16.1054 12.0196 16 11.7652 16 11.5C16 11.2348 16.1054 10.9804 16.2929 10.7929C16.4804 10.6054 16.7348 10.5 17 10.5H18V12.5ZM18 8.5H17C16.2044 8.5 15.4413 8.81607 14.8787 9.37868C14.3161 9.94129 14 10.7044 14 11.5C14 12.2956 14.3161 13.0587 14.8787 13.6213C15.4413 14.1839 16.2044 14.5 17 14.5H18V15.5C18 15.7652 17.8946 16.0196 17.7071 16.2071C17.5196 16.3946 17.2652 16.5 17 16.5H3C2.73478 16.5 2.48043 16.3946 2.29289 16.2071C2.10536 16.0196 2 15.7652 2 15.5V6.33C2.32127 6.44302 2.65943 6.50051 3 6.5H17C17.2652 6.5 17.5196 6.60536 17.7071 6.79289C17.8946 6.98043 18 7.23478 18 7.5V8.5Z\" />\n  </svg>\n)\n","import React from 'react'\n\nexport const WrapIcon = () => (\n  <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M10.6698 3.81818C10.6698 3.36655 11.0418 3 11.5002 3C11.9585 3 12.3305 3.36655 12.3305 3.81818V20.1818C12.3305 20.5135 12.1279 20.8113 11.8168 20.9378C11.715 20.9793 11.6076 21 11.5002 21C11.2843 21 11.0706 20.9171 10.9123 20.7589L4.24177 14.1589C3.91849 13.8393 3.9196 13.3211 4.24399 13.0025C4.56949 12.684 5.09538 12.684 5.41866 13.0047L10.6698 18.2007V3.81818ZM17.5813 13.0046C17.9046 12.6839 18.4305 12.6839 18.756 13.0024C19.0804 13.321 19.0815 13.8392 18.7582 14.1599L15.0792 17.7992C14.9165 17.9606 14.7039 18.0403 14.4902 18.0403C14.2787 18.0403 14.0673 17.9606 13.9045 17.8013C13.579 17.4828 13.5779 16.9657 13.9023 16.645L17.5813 13.0046Z\"\n      fill=\"#200E32\"\n    />\n  </svg>\n)\n","import styled from 'styled-components'\nimport { Colors, Transitions } from '../../global/styles'\n\nexport const Link = styled.a`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  font-size: 12px;\n  text-decoration: underline;\n  color: ${Colors.Gray['600']};\n  cursor: pointer;\n  transition: ${Transitions.all};\n\n  &:hover,\n  &:focus-within {\n    color: ${Colors.Yellow[500]};\n  }\n`\n","import type { TransactionResponse } from '@ethersproject/providers'\nimport {\n  getExplorerTransactionLink,\n  Notification,\n  useNotifications,\n  useTransactions,\n  getStoredTransactionState,\n  StoredTransaction,\n  shortenTransactionHash,\n} from '@usedapp/core'\nimport React, { ReactElement, ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { TextBold } from '../../typography/Text'\nimport { ContentBlock } from '../base/base'\nimport {\n  CheckIcon,\n  ClockIcon,\n  ExclamationIcon,\n  ShareIcon,\n  UnwrapIcon,\n  WalletIcon,\n  WrapIcon,\n  SpinnerIcon,\n} from './Icons'\nimport { Colors, Shadows } from '../../global/styles'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { formatEther } from '@ethersproject/units'\nimport { BigNumber } from 'ethers'\nimport { Link } from '../base/Link'\n\ninterface TableWrapperProps {\n  children: ReactNode\n  title: string\n}\n\nconst formatter = new Intl.NumberFormat('en-us', {\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 3,\n})\n\nconst formatBalance = (balance: BigNumber | undefined) =>\n  formatter.format(parseFloat(formatEther(balance ?? BigNumber.from('0'))))\n\nconst TableWrapper = ({ children, title }: TableWrapperProps) => (\n  <SmallContentBlock>\n    <TitleRow>{title}</TitleRow>\n    <Table>{children}</Table>\n  </SmallContentBlock>\n)\n\ninterface DateProps {\n  date: number\n  className?: string\n}\n\nconst DateCell = ({ date, className }: DateProps) => {\n  const dateObject = new Date(date)\n  const formattedDate = dateObject.toLocaleDateString()\n  const formattedTime = dateObject.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  })\n\n  return (\n    <DateRow className={className}>\n      <DateDisplay>{formattedDate}</DateDisplay>\n      <HourDisplay>{formattedTime}</HourDisplay>\n    </DateRow>\n  )\n}\n\ninterface TransactionLinkProps {\n  transaction: TransactionResponse | undefined\n}\n\nconst TransactionLink = ({ transaction }: TransactionLinkProps) => (\n  <>\n    {transaction && (\n      <Link\n        href={getExplorerTransactionLink(transaction.hash, transaction.chainId)}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        View on Etherscan\n        <LinkIconWrapper>\n          <ShareIcon />\n        </LinkIconWrapper>\n      </Link>\n    )}\n  </>\n)\n\nconst notificationContent: { [key in Notification['type']]: { title: string; icon: ReactElement } } = {\n  transactionFailed: { title: 'Transaction failed', icon: <ExclamationIcon /> },\n  transactionStarted: { title: 'Transaction started', icon: <ClockIcon /> },\n  transactionSucceed: { title: 'Transaction succeed', icon: <CheckIcon /> },\n  walletConnected: { title: 'Wallet connected', icon: <WalletIcon /> },\n}\n\ninterface ListElementProps {\n  icon: ReactElement\n  title: string | undefined\n  transaction?: TransactionResponse\n  date: number\n}\n\nconst ListElement = ({ transaction, icon, title, date }: ListElementProps) => {\n  return (\n    <ListElementWrapper layout initial={{ opacity: 0, y: -50 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0 }}>\n      <ListIconContainer>{icon}</ListIconContainer>\n      <ListDetailsWrapper>\n        <TextBold>{title}</TextBold>\n        <TransactionLink transaction={transaction} />\n      </ListDetailsWrapper>\n      <NotificationDate date={date} />\n    </ListElementWrapper>\n  )\n}\n\nfunction TransactionIcon(transaction: StoredTransaction) {\n  if (getStoredTransactionState(transaction) === 'Mining') {\n    return <SpinnerIcon />\n  } else if (getStoredTransactionState(transaction) === 'Fail') {\n    return <ExclamationIcon />\n  } else if (transaction.transactionName === 'Unwrap') {\n    return <UnwrapIcon />\n  } else if (transaction.transactionName === 'Wrap') {\n    return <WrapIcon />\n  } else {\n    return <CheckIcon />\n  }\n}\n\nexport const TransactionsList = () => {\n  const { transactions } = useTransactions()\n  return (\n    <TableWrapper title=\"Transactions history\">\n      <AnimatePresence initial={false}>\n        {transactions.map((transaction) => (\n          <ListElement\n            transaction={transaction.transaction}\n            title={transaction.transactionName}\n            icon={TransactionIcon(transaction)}\n            key={transaction.transaction.hash}\n            date={transaction.submittedAt}\n          />\n        ))}\n      </AnimatePresence>\n    </TableWrapper>\n  )\n}\n\nconst NotificationElement = ({ transaction, icon, title }: ListElementProps) => {\n  return (\n    <NotificationWrapper layout initial={{ opacity: 0, y: -50 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0 }}>\n      <NotificationIconContainer>{icon}</NotificationIconContainer>\n      <NotificationDetailsWrapper>\n        <NotificationText>{title}</NotificationText>\n        <TransactionLink transaction={transaction} />\n        <TransactionDetails>\n          {transaction && `${shortenTransactionHash(transaction?.hash)} #${transaction.nonce}`}\n        </TransactionDetails>\n      </NotificationDetailsWrapper>\n      {transaction && <div style={{ marginLeft: 'auto' }}>- {formatBalance(transaction.value)} ETH</div>}\n    </NotificationWrapper>\n  )\n}\n\nexport const NotificationsList = () => {\n  const { notifications } = useNotifications()\n  return (\n    <NotificationsWrapper>\n      <AnimatePresence initial={false}>\n        {notifications.map((notification) => {\n          if ('transaction' in notification)\n            return (\n              <NotificationElement\n                key={notification.id}\n                icon={notificationContent[notification.type].icon}\n                title={notificationContent[notification.type].title}\n                transaction={notification.transaction}\n                date={Date.now()}\n              />\n            )\n          else\n            return (\n              <NotificationElement\n                key={notification.id}\n                icon={notificationContent[notification.type].icon}\n                title={notificationContent[notification.type].title}\n                date={Date.now()}\n              />\n            )\n        })}\n      </AnimatePresence>\n    </NotificationsWrapper>\n  )\n}\n\nconst NotificationText = styled(TextBold)`\n  font-size: 20px;\n  margin-bottom: 5px;\n`\n\nconst TransactionDetails = styled.div`\n  font-size: 14px;\n`\n\nconst NotificationWrapper = styled(motion.div)`\n  display: flex;\n  align-items: center;\n  background-color: ${Colors.White};\n  box-shadow: ${Shadows.notification};\n  width: 395px;\n  border-radius: 10px;\n  margin: 15px;\n  padding: 10px 20px 10px 20px;\n`\n\nconst NotificationsWrapper = styled.div`\n  position: fixed;\n  right: 24px;\n  bottom: 24px;\n`\n\nconst NotificationIconContainer = styled.div`\n  width: 60px;\n  height: 60px;\n  padding: 0px;\n  margin-right: 20px;\n`\n\nconst ListIconContainer = styled.div`\n  width: 48px;\n  height: 48px;\n  padding: 12px;\n  padding: 14px 16px 14px 12px;\n`\n\nconst ListElementWrapper = styled(motion.div)`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst NotificationDetailsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 4px 0;\n`\n\nconst ListDetailsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 4px 0;\n`\n\nconst Table = styled.div`\n  height: 300px;\n  overflow: scroll;\n  padding: 12px;\n\n  & > * + * {\n    margin-top: 12px;\n  }\n`\n\nconst LinkIconWrapper = styled.div`\n  width: 12px;\n  height: 12px;\n  margin-left: 8px;\n`\n\nconst SmallContentBlock = styled(ContentBlock)`\n  padding: 0;\n`\n\nconst TitleRow = styled(TextBold)`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  border-bottom: ${Colors.Gray['300']} 1px solid;\n  padding: 16px;\n  font-size: 18px;\n`\n\nconst DateRow = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  text-align: end;\n  padding: 8px;\n`\n\nconst NotificationDate = styled(DateCell)`\n  margin-left: auto;\n`\n\nconst DateDisplay = styled.div`\n  font-size: 14px;\n`\nconst HourDisplay = styled.div`\n  font-size: 12px;\n  color: ${Colors.Gray['600']};\n`\n","export default __webpack_public_path__ + \"static/media/HelveticaNeue.6936ad61.woff2\";","export default __webpack_public_path__ + \"static/media/HelveticaNeueBold.ba2f3586.woff2\";","export default __webpack_public_path__ + \"static/media/HelveticaNeueMedium.2600e9d5.woff2\";","import { createGlobalStyle } from 'styled-components'\nimport HelveticaNeue from '../assets/fonts/HelveticaNeue.woff2'\nimport HelveticaNeueBold from '../assets/fonts/HelveticaNeueBold.woff2'\nimport HelveticaNeueMedium from '../assets/fonts/HelveticaNeueMedium.woff2'\nimport { Colors, Fonts } from './styles'\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    scrollbar-width: none;\n    \n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n\n  @font-face {\n    font-family: \"HelveticaNeue\";\n    src: url(${HelveticaNeue}) format('woff2');\n    font-weight: 400;\n    font-style: normal;\n    font-display: swap;\n  }\n  @font-face {\n    font-family: \"HelveticaNeue\";\n    src: url(${HelveticaNeueMedium}) format('woff2');\n    font-weight: 500;\n    font-style: normal;\n    font-display: swap;\n  }\n  @font-face {\n    font-family: \"HelveticaNeue\";\n    src: url(${HelveticaNeueBold}) format('woff2');\n    font-weight: 700;\n    font-style: normal;\n    font-display: swap;\n  }\n\n  body, html {\n    margin: 0;\n    width: 100%;\n    height: 100%;\n    background-color: ${Colors.White};\n    font-family: ${Fonts.Helvetica};\n    font-size: 16px;\n    color: ${Colors.Black[900]};\n    overscroll-behavior-y: none;\n  }\n  \n  button {\n    font-family: ${Fonts.Helvetica};\n    font-size: 1em;\n    border: none;\n    background-color: transparent;\n    padding: 0;\n    outline: none;\n    cursor: pointer;\n  }\n\n  ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  a {\n    color: ${Colors.Black[900]};\n    text-decoration: none;\n\n    &:visited {\n      color: ${Colors.Black[900]};\n    }\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    margin: 0;\n    line-height: 150%;\n    font-weight: 600;\n    font-family: ${Fonts.Helvetica};\n  }\n\n  h1 {\n    font-size: 32px;\n  }\n\n  h2 {\n    font-size: 24px;\n  }\n  \n  h3 {\n    font-size: 14px;\n  }\n\n  h4 {\n    font-size: 12px;\n  }\n\n  p {\n    margin: 0;\n  }\n`\n","import styled from 'styled-components'\nimport { BorderRad, Colors, Fonts, Transitions } from '../../global/styles'\n\nexport const Button = styled.button`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 8px;\n  align-items: center;\n  width: fit-content;\n  min-width: 160px;\n  height: 40px;\n  font-family: ${Fonts.Helvetica};\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  color: ${Colors.Black[900]};\n  border: 1px solid ${Colors.Black[900]};\n  border-radius: ${BorderRad.m};\n  background-color: transparent;\n  cursor: pointer;\n  transition: ${Transitions.all};\n\n  &:hover,\n  &:focus {\n    background-color: ${Colors.Black[900]};\n    color: ${Colors.Yellow[100]};\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useEthers, getExplorerAddressLink, useEtherBalance } from '@usedapp/core'\nimport { TransactionsList } from '../Transactions/History'\nimport { formatEther } from '@ethersproject/units'\nimport { BigNumber } from 'ethers'\nimport { Colors, Shadows, Transitions } from '../../global/styles'\nimport { ShareIcon } from '../Transactions/Icons'\nimport { motion } from 'framer-motion'\nimport { Link } from '../base/Link'\n\nconst formatter = new Intl.NumberFormat('en-us', {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n})\n\nconst formatBalance = (balance: BigNumber | undefined) =>\n  formatter.format(parseFloat(formatEther(balance ?? BigNumber.from('0'))))\n\nexport type AccountModalProps = {\n  setShowModal: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const AccountModal = ({ setShowModal }: AccountModalProps) => {\n  const { account, chainId } = useEthers()\n  const balance = useEtherBalance(account)\n  if (account && chainId) {\n    return (\n      <ModalBackground onClick={() => setShowModal(false)}>\n        <Modal\n          onClick={(e) => e.stopPropagation()}\n          layout\n          initial={{ opacity: 0, y: -50 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0 }}\n        >\n          <TitleRow>\n            Account info\n            <ClosingButton onClick={() => setShowModal(false)}>+</ClosingButton>\n          </TitleRow>\n          <AccountInfo>\n            <AccountAddress>Address: {account}</AccountAddress>\n            <LinkWrapper>\n              <Link href={getExplorerAddressLink(account, chainId)} target=\"_blank\" rel=\"noopener noreferrer\">\n                Show on etherscan\n                <LinkIconWrapper>\n                  <ShareIcon />\n                </LinkIconWrapper>\n              </Link>\n              {window.isSecureContext && (\n                <Link onClick={() => console.log(navigator.clipboard.writeText(account))}>Copy to clipboard</Link>\n              )}\n            </LinkWrapper>\n            <BalanceWrapper>ETH: {balance && formatBalance(balance)}</BalanceWrapper>\n          </AccountInfo>\n          <HistoryWrapper>\n            <TransactionsList />\n          </HistoryWrapper>\n        </Modal>\n      </ModalBackground>\n    )\n  } else {\n    setShowModal(false)\n    return <div />\n  }\n}\n\nconst LinkWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 20px;\n`\n\nconst LinkIconWrapper = styled.div`\n  width: 12px;\n  height: 12px;\n`\n\nconst BalanceWrapper = styled.div`\n  margin-top: 12px;\n`\n\nconst HistoryWrapper = styled.div``\n\nconst AccountAddress = styled.p`\n  font-weight: 700;\n  margin-bottom: 10px;\n`\n\nconst ClosingButton = styled.button`\n  display: flex;\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  line-height: 1;\n  width: 24px;\n  height: 24px;\n  transform: rotate(45deg);\n  transition: ${Transitions.all};\n\n  &:hover {\n    color: ${Colors.Yellow[500]};\n  }\n`\n\nconst TitleRow = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  padding: 0.5em;\n  width: 100%;\n  font-size: 20px;\n`\nconst DomainRow = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 100%;\n  font-size: 15px;\n  padding-left: 0.5em;\n`\n\nconst AccountInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0.5em;\n  padding: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${Shadows.main};\n  background-color: ${Colors.White};\n`\n\nconst Modal = styled(motion.div)`\n  display: flex;\n  flex-direction: column;\n  height:fit-content;\n  background-color: white;\n  box-shadow: ${Shadows.main};\n  border-radius: 10px;\n  z-index: 3;\n  margin-top:6em;\n`\n\nconst ModalBackground = styled(motion.div)`\n  top: 0;\n  left: 0;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  margin: 0px;\n  z-index: 2;\n  background-color: rgba(235, 232, 223, 0.5);\n  display: flex;\n  justify-content: center;\n`\n","import React, { useEffect, useState } from 'react'\nimport { useEthers, shortenAddress, useLookupAddress } from '@usedapp/core'\nimport { Button } from '../base/Button'\nimport { Colors } from '../../global/styles'\nimport styled from 'styled-components'\n\nimport { AccountModal } from './AccountModal'\n\nexport const AccountButton = () => {\n  const { account, deactivate, activateBrowserWallet } = useEthers()\n  const ens = useLookupAddress()\n  const [showModal, setShowModal] = useState(false)\n\n  const [activateError, setActivateError] = useState('');\n  const { error } = useEthers()\n  useEffect(() => {\n    if (error) {\n      setActivateError(error.message)\n    }\n  }, [error])\n\n  const activate = async () => {\n    setActivateError('')\n    activateBrowserWallet()\n  }\n\n  return (\n    <Account>\n      {activateError && <ErrorWrapper>⚠️ {activateError}</ErrorWrapper>}\n      {showModal && <AccountModal setShowModal={setShowModal} />}\n      {account ? (\n        <>\n          <AccountLabel onClick={() => setShowModal(!showModal)}>{ens ?? shortenAddress(account)}</AccountLabel>\n          <LoginButton onClick={() => deactivate()}>Disconnect</LoginButton>\n        </>\n      ) : (\n        <LoginButton onClick={activate}>Connect</LoginButton>\n      )}\n    </Account>\n  )\n}\n\nconst ErrorWrapper = styled.div`\n  color: #ff3960;\n  margin-right: 40px;\n  margin-left: 40px;\n  overflow: auto;\n`\n\nconst Account = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst LoginButton = styled(Button)`\n  background-color: ${Colors.Yellow[100]};\n`\n\nconst AccountLabel = styled(Button)`\n  height: 32px;\n  margin-right: -40px;\n  padding-right: 40px;\n  padding-left: 8px;\n  background-color: ${Colors.Yellow[100]};\n  font-size: 12px;\n`\n","\nimport { useGLTF, useAnimations, useTexture } from '@react-three/drei'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\n\nimport * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { Color } from 'three'\n\n\nexport type GLTFResult = GLTF & {\n    nodes: Record<string, THREE.Mesh>;\n    materials: Record<string, THREE.MeshStandardMaterial>;\n}\n\n\n\nexport  function SoldierModel(props:any) {\n  const group = useRef()\n  const { nodes, materials, animations } = useGLTF('/soldier2.glb') as any;\n  const { actions } = useAnimations(animations, group)\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group rotation={[-Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>\n        <primitive object={nodes.mixamorigHips} />\n        <skinnedMesh\n          geometry={nodes.vanguard_Mesh.geometry}\n          material={materials.VanguardBodyMat}\n          skeleton={nodes.vanguard_Mesh.skeleton}\n        >\n         </skinnedMesh>\n        <skinnedMesh\n          geometry={nodes.vanguard_visor.geometry}\n          material={materials.Vanguard_VisorMat}\n          skeleton={nodes.vanguard_visor.skeleton}\n        >\n        <meshStandardMaterial color={ props.color ? props.color : 'grey' } />\n        </skinnedMesh>\n\n\n      </group>\n    </group>\n  )\n}\n  \n\nuseGLTF.preload('/soldier.glb');\n","import { OrbitControls } from '@react-three/drei'\nimport { Canvas } from '@react-three/fiber'\nimport { useEthers } from '@usedapp/core'\nimport React, { Suspense } from 'react'\n  import { Badge, Container } from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { SoldierModel } from '../../models/soldierModel'\nimport { RANDOM_VISOR_COLOR_NAMES } from '../../portalHooks/BadgeHelper'\nimport { TextBold } from '../../typography/Text'\n\n\n\n\n\n\nexport function ItemSelection() {\n  const { chainId, account } = useEthers()\n\n  const item = useSelector((state: any) => {\n    return{index: state.selectedItem.index,\n    balance: state.selectedItem.balance,\n    holders: state.selectedItem.holders,\n    name: state.selectedItem.name,\n    address: state.selectedItem.address,\n    color: state.selectedItem.color,\n    tokenId:state.selectedItem.tokenId,\n  }\n  })\n\n\n  return account ?  (     \n    <AvatarContainer>\n\n    <Canvas dpr={[1, 2]} camera={{ position: [0, 0, -4], fov: 32 }}>\n    <Suspense fallback={null}>\n    <OrbitControls enableZoom={false} enablePan={false}/>\n    <ambientLight />\n    <pointLight position={[10, 10, 10]} />\n    <SoldierModel position={[0, -0.9, 0]} color={item.color} />\n    </Suspense>\n    </Canvas> \n    </AvatarContainer>\n  ) : <Container></Container>\n}\n\nconst AvatarContainer = styled.div`\n  height: 100%;\n`\n\nconst LinkIconWrapper = styled.div`\n  width: 12px;\n  height: 12px;\n  margin-left:5px;\n`\n\n\nconst NoItemSelected = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 14px;\n`\n\nconst ItemDetail = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 14px;\n`\n\nconst ItemAddressWrapper = styled.div`\n  display: flex;\n  font-size: 15px;\n`\n\nconst ItemAddressLink = styled.a`\n`\nconst ItemPreview = styled(TextBold)`\nwidth:60%;\n`\n\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 15px;\n`\nconst SectionBreak = styled.div`\n  margin-bottom: 20px;\n`\n\nconst SelectionTitle = styled.h2`\n`","import { ChainId } from \"@usedapp/core\";\n\nexport enum TransactionLevel {\n    Root = 0,\n    LogEvents\n  }\n  \n  export enum CriteriaComparions {\n    GT = 0,\n    LT\n  }\n  \n  export interface UIMetadata {\n    domainId: number,\n    name: string,\n    balance: number,\n    imageUri: string| null,\n    description: string,\n    requirements: string[]\n    onChain: OnChainEntity| null;\n  }\n\n  export interface OnChainEntity {\n    chainId: ChainId,\n    address: string,\n    tokenId: number,\n  }\n  \n  export interface MetaBadge {\n    ui : UIMetadata| null;\n    parseRules: ParseParams,\n  }\n  \n  export interface RequirementsCriteria {\n    comparison : CriteriaComparions,\n    value: number\n  }\n  \n  export interface ParseParams {\n    level: TransactionLevel,\n    keyValueObject: KeyValueObject,\n    useKeyValueMatching: boolean,\n    criteria: RequirementsCriteria\n  }\n  \n  export interface KeyValueObject {\n    name: string,\n    value?: boolean|string|number;\n  }","import { createSlice , PayloadAction} from '@reduxjs/toolkit'\nimport type { RootState } from '../../store'\n\n\n// Define a type for the slice state\ninterface SelectedItemState {\n    index: number| null,\n    tokenId: number|null,\n    balance: number|null,\n    holders: number| null,\n    name: string| null\n    address: string| null,\n    color: string|null,\n  }\n  \n  // Define the initial state using that type\n  const initialState: SelectedItemState = {\n      index: null,\n      tokenId: null,\n      balance: null,\n      holders: null,\n      name: null,\n      address: null,\n      color: null,\n  }\n\nexport const selectedItemSlice = createSlice({\n  name: 'selectedItem',\n  initialState,\n\n  reducers: {\n\n    updatedSelectedItem: (state, action: PayloadAction<any>) => {\n        state.index = action.payload.index;\n        state.tokenId = action.payload.tokenId;\n        state.balance = action.payload.balance;\n        state.holders = action.payload.holders;\n        state.name = action.payload.name;\n        state.address = action.payload.address;\n        state.color = action.payload.color;\n\n    },\n  },\n})\n\nexport const { updatedSelectedItem } = selectedItemSlice.actions\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectedItem = (state: RootState) => {\n    return {\n        index: state.selectedItem.index,\n        tokenId:  state.selectedItem.tokenId,\n        balance: state.selectedItem.balance,\n        holders: state.selectedItem.holders,\n        name: state.selectedItem.name,\n        address: state.selectedItem.address,\n        color: state.selectedItem.color,\n    }\n}\n\nexport default selectedItemSlice.reducer","import { AxiosResponse } from \"axios\";\nimport { TransactionLevel, ParseParams, CriteriaComparions, MetaBadge } from \"./BadgeHelperTypes\";\n\n\nexport const parseResponseForItems =(response: AxiosResponse): (any[]|null) => {\n    if(!response || !response.data || !response.data.data) {\n      return null;\n    }\n    return response.data.data.items;\n}\n  \n  export const RANDOM_VISOR_COLOR_NAMES = [\n    'black',\n    'white',\n    'grey',\n    'green',\n    'blue',\n    'purple',\n    'pink',\n    'silver',\n    'bronze',\n    'gold'\n  ]\n\n  export const RANDOM_VISOR_COLORS = [\n    'black',\n    'white',\n    'grey',\n    '#3f9468',//light green\n    '#5093aa',//light blue\n    '#9550aa',//light purple\n    '#e74f71',//light pink\n    'silver',\n    '#271f1f',//brown\n    'gold'\n  ]\n  \n  export const calculateFrequencyForKeyValueMatches =(\n    transactions: any[], \n    key: string, \n    value: number, \n    valueMatching: boolean\n    ) : number => {\n      if(valueMatching) {\n        // matches if 'key' found && key maps to 'value'\n        return getKeyValueMatchCount(transactions, key, value);\n      } else {\n          // matches if 'key' found\n          return getKeyMatchCount(transactions, key);\n      }\n  }\n\n  export const getKeyValueMatchCount = (items: any[], key: string, value: any) =>  {\n      let count = 0;\n      items.forEach((item) => {\n        if(item[key] && item[key] === value) {\n          count++;\n        }\n      });\n      return count;\n  }\n\n  export const getKeyMatchCount = (items: any[], key: string) =>  {\n    let count = 0;\n    items.forEach((item) => {\n      if(item[key]) {\n        count++;\n      }\n    });\n    return count;\n}\n\n\nexport const getValidBadges = (badges: MetaBadge[], transactions: any[]) : MetaBadge[] =>  {\n  let validBadges: MetaBadge[] = [];\n  badges.forEach((badge: MetaBadge) => {\n    if(validateBadgeAgainstTransactions(badge,transactions)){\n      validBadges.push(badge);\n    }\n  });\n  return validBadges;\n}\n\n\nexport const validateBadgeAgainstTransactions = (badge: MetaBadge, transactions: any[]): boolean =>  {\n  let isValid = false;\n  switch(badge.parseRules.level) {\n    case TransactionLevel.Root :\n        // compare rules with trnsaction list\n        isValid = executeRootLevelChecksForBadge(badge.parseRules,transactions);\n      return isValid;\n    default:\n      return false;\n  }\n}\n\n\nexport const executeRootLevelChecksForBadge = (rules: ParseParams, transactions: any[]): boolean =>  {\n  // defaulting to Key Match frequency comparisons\n  return executeFrequencyRuleForBadge(\n    rules.keyValueObject.name, \n    rules.keyValueObject.value,\n    rules.criteria.comparison,\n    rules.criteria.value,\n    rules.useKeyValueMatching,\n    transactions\n    );\n}\n\n\nexport const executeFrequencyRuleForBadge = (\n  key: string, \n  value: any, \n  criteriaRule: CriteriaComparions,\n  criteriaValue: number,\n  isValueMathing: boolean,\n  transactions: any[], ): boolean =>  {\n  // defaulting to Key Match frequency comparisons\n  let isValid = false;\n  const frequency = calculateFrequencyForKeyValueMatches(transactions, key, value, isValueMathing);\n\n  switch(criteriaRule) {\n    case CriteriaComparions.GT : \n      return frequency > criteriaValue;\n\n    case CriteriaComparions.LT : \n      return frequency < criteriaValue;\n\n    default:\n      return false;\n  }\n}","import axios, { AxiosResponse } from \"axios\"\n\nexport const getTransactionsFor = async (signerAddress: string|null|undefined, chainId:  number|null|undefined): Promise<AxiosResponse|null>=> {\n  if(!signerAddress || signerAddress === undefined){\n      return null;\n  }\n  console.log('signer address : ',signerAddress)\n  const COVALENT_API_KEY = \"ckey_4aed01d0d6e248a7a4ab27acb8a\"\n  const COVALENT = {\n    url: \"https://api.covalenthq.com/v1/\", \n  }\n\n  const transactionsForAddress = \n  `${COVALENT.url}${chainId}/address/${signerAddress}/transactions_v2/?key=${COVALENT_API_KEY}`\n\n  // Make a request for a user with a given ID\n  return axios.get(transactionsForAddress)\n    .then(function (response) {\n      // handle success\n      return response\n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n\n      return null;\n    });\n}","import { ChainId } from '@usedapp/core'\nimport { MetaBadge, CriteriaComparions, TransactionLevel } from './BadgeHelperTypes'\n\n// MetaBadge Model V0\nexport const DEFAULT_BADGELIST: MetaBadge[] = [\n       {\n        ui: {\n          domainId: 1,\n          balance: 0,\n          name: 'WAGMI Rank 1',\n          imageUri: null,\n          description: 'Black Visor',\n          requirements: ['Create an ethereum account', 'Be amazing'],\n          onChain: {\n            chainId: ChainId.Polygon,\n            address: '0xF685F5A6bA626c262e0Aeded849d15a71933e8C5',\n            tokenId: 0\n          },\n        },\n        parseRules: {\n          level: TransactionLevel.Root,\n          keyValueObject:  {\n            name: '',\n            value: 0\n          },\n          useKeyValueMatching: false,\n          criteria: {\n            comparison: CriteriaComparions.GT,\n            value: 1\n          }\n        }\n      },\n      {\n        ui: {\n          domainId: 1,\n          balance: 0,\n          name: 'GM Rank 1',\n          imageUri: null,\n          description: 'White Visor',\n          requirements: ['Create an ethereum account','Be awesome'],\n          onChain: {\n            chainId: ChainId.Polygon,\n            address: '0xF685F5A6bA626c262e0Aeded849d15a71933e8C5',\n            tokenId: 1\n          },\n        },\n        parseRules: {\n          level: TransactionLevel.Root,\n          keyValueObject:  {\n            name: '',\n            value: 0\n          },\n          useKeyValueMatching: false,\n          criteria: {\n            comparison: CriteriaComparions.GT,\n            value: 0\n          }\n        }\n      },\n]\n\nexport const BADGE_LIST: MetaBadge[] = [\n  {\n    ui: {\n      domainId: 1,\n      balance: 0,\n      name: 'Explorer Rank 4',\n      imageUri: null,\n      description: 'Grey Visor',\n      requirements: ['Complete more than 100 successful transactions'],\n      onChain: {\n        chainId: ChainId.Polygon,\n\n        address: '0xF685F5A6bA626c262e0Aeded849d15a71933e8C5',\n        tokenId: 2\n      },\n\n    },\n    parseRules: {\n      level: TransactionLevel.Root,\n      keyValueObject:  {\n        name: 'successful',\n        value: true\n      },\n      useKeyValueMatching: true,\n      criteria: {\n        comparison: CriteriaComparions.GT,\n        value: 100\n      }\n    }\n  },\n  {\n    ui: {\n      domainId: 1,\n      balance: 0,\n      name: 'Explorer Rank 3',\n      imageUri: null,\n      description: 'Green Visor',\n      requirements: ['Complete more than 75 successful transactions'],\n      onChain: {\n        chainId: ChainId.Polygon,\n\n        address: '0xF685F5A6bA626c262e0Aeded849d15a71933e8C5',\n        tokenId: 3\n      },  \n    },\n    parseRules: {\n      level: TransactionLevel.Root,\n      keyValueObject:  {\n        name: 'successful',\n        value: true\n      },\n      useKeyValueMatching: true,\n      criteria: {\n        comparison: CriteriaComparions.GT,\n        value: 75\n      }\n    }\n  },\n    {\n      ui: {\n        domainId: 1,\n        balance: 0,\n        name: 'Explorer Rank 2',\n        imageUri: null,\n        description: 'Blue Visor',\n        requirements: ['Complete more than 50 successful transactions'],\n        onChain: {\n          chainId: ChainId.Polygon,\n\n          address: '0xF685F5A6bA626c262e0Aeded849d15a71933e8C5',\n          tokenId: 4\n        },         \n      },\n      parseRules: {\n        level: TransactionLevel.Root,\n        keyValueObject:  {\n          name: 'successful',\n          value: true\n        },\n        useKeyValueMatching: true,\n        criteria: {\n          comparison: CriteriaComparions.GT,\n          value: 50\n        }\n      }\n    },\n    {\n      ui: {\n        domainId: 1,\n        balance: 0,\n        name: 'Explorer Rank 1',\n        imageUri: null,\n        description: 'purple Visor',\n        requirements: ['Complete more than 25 successful transactions'],\n        onChain: {\n          chainId: ChainId.Polygon,\n\n          address: '0xF685F5A6bA626c262e0Aeded849d15a71933e8C5',\n          tokenId: 5\n        },\n      },\n      parseRules: {\n        level: TransactionLevel.Root,\n        keyValueObject:  {\n          name: 'successful',\n          value: true\n        },\n        useKeyValueMatching: true,\n        criteria: {\n          comparison: CriteriaComparions.GT,\n          value: 25\n        }\n      }\n    },\n    {\n      ui: {\n        domainId: 1,\n        balance: 0,\n        name: 'Space Cadet Rank 1',\n        imageUri: null,\n        description: 'Pink Visor',\n        requirements: ['Complete more than 10 successful transactions'],\n        onChain: {\n          chainId: ChainId.Polygon,\n\n          address: '0xF685F5A6bA626c262e0Aeded849d15a71933e8C5',\n          tokenId: 6\n        },\n      },\n      parseRules: {\n        level: TransactionLevel.Root,\n        keyValueObject:  {\n          name: 'successful',\n          value: true\n        },\n        useKeyValueMatching: true,\n        criteria: {\n          comparison: CriteriaComparions.GT,\n          value: 10\n        }\n      }\n    },\n\n    {\n      ui: {\n        domainId: 1,\n        balance: 0,\n        name: 'Space Cadet Rank 2',\n        imageUri: null,\n        description: 'Silver Visor',\n        requirements: ['Complete more than 5 successful transactions'],\n        onChain: {\n          chainId: ChainId.Polygon,\n\n          address: '0xF685F5A6bA626c262e0Aeded849d15a71933e8C5',\n          tokenId: 7\n        },\n      },\n      parseRules: {\n        level: TransactionLevel.Root,\n        keyValueObject:  {\n          name: 'successful',\n          value: true\n        },\n        useKeyValueMatching: true,\n        criteria: {\n          comparison: CriteriaComparions.GT,\n          value: 5\n        }\n      }\n    },\n\n  ]","import axios, { AxiosResponse } from 'axios'\nimport { useEffect, useState } from 'react'\nimport { getValidBadges, parseResponseForItems } from './BadgeHelper'\nimport { ChainId, useEthers } from '@usedapp/core'\nimport { getTransactionsFor } from './TransactionsAPI'\nimport { MetaBadge } from './BadgeHelperTypes'\nimport { BADGE_LIST, DEFAULT_BADGELIST } from './Badges'\n\n\n\nexport function useBadgeList(signerAddress: string|null|undefined, overrideChainId?: ChainId, tags?: string[]) {\n  const { account, chainId } = useEthers();\n  const adjustedChainId = chainId === 31337 ? ChainId.Mainnet : chainId;\n\n  console.log('chainId : ',chainId)\n  const [badges, setBadges] = useState<MetaBadge[]>()\n  useEffect(() => {\n    getTransactionsFor(signerAddress, adjustedChainId)\n      .then(async (response) => {\n        if (response) {\n            const transactionItems = parseResponseForItems(response);\n            console.log(transactionItems)\n            if(transactionItems) {\n                const badges = getValidBadges(BADGE_LIST,transactionItems);\n                badges.push(DEFAULT_BADGELIST[0]);\n                badges.push(DEFAULT_BADGELIST[1]);\n\n                setBadges(badges);\n            } else {\n                // should do something with this case\n                // in theory there should always be the defalt badge\n                // if an account is connected\n                setBadges(undefined);\n            }\n        } else {\n          const errorMessage = 'Couldnt fetch transaction data';\n          return Promise.reject(new Error(errorMessage))\n        }\n      })\n      .catch((err) => {\n        console.log(err)\n        setBadges(undefined)\n      })\n  }, [account,chainId])\n  return badges\n}\n","import type { TransactionResponse } from '@ethersproject/providers'\nimport {\n  getExplorerTransactionLink,\n  Notification,\n  useNotifications,\n  useTransactions,\n  getStoredTransactionState,\n  StoredTransaction,\n  shortenTransactionHash,\n} from '@usedapp/core'\nimport React, { ReactElement, ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { TextBold } from '../../typography/Text'\nimport { ContentBlock } from '../base/base'\nimport {\n  CheckIcon,\n  ClockIcon,\n  ExclamationIcon,\n  ShareIcon,\n  UnwrapIcon,\n  WalletIcon,\n  WrapIcon,\n  SpinnerIcon,\n} from '../Transactions/Icons'\nimport { Colors, Shadows } from '../../global/styles'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { formatEther } from '@ethersproject/units'\nimport { BigNumber } from 'ethers'\nimport { Link } from '../base/Link'\n\ninterface TableWrapperProps {\n  children: ReactNode\n  title: string\n}\n\nconst formatter = new Intl.NumberFormat('en-us', {\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 3,\n})\n\nconst formatBalance = (balance: BigNumber | undefined) =>\n  formatter.format(parseFloat(formatEther(balance ?? BigNumber.from('0'))))\n\nconst TableWrapper = ({ children, title }: TableWrapperProps) => (\n  <SmallContentBlock>\n    <TitleRow>{title}</TitleRow>\n    <Table>{children}</Table>\n  </SmallContentBlock>\n)\n\ninterface DateProps {\n  date: number\n  className?: string\n}\n\nconst DateCell = ({ date, className }: DateProps) => {\n  const dateObject = new Date(date)\n  const formattedDate = dateObject.toLocaleDateString()\n  const formattedTime = dateObject.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  })\n\n  return (\n    <DateRow className={className}>\n      <DateDisplay>{formattedDate}</DateDisplay>\n      <HourDisplay>{formattedTime}</HourDisplay>\n    </DateRow>\n  )\n}\n\ninterface TransactionLinkProps {\n  transaction: TransactionResponse | undefined\n}\n\nconst TransactionLink = ({ transaction }: TransactionLinkProps) => (\n  <>\n    {transaction && (\n      <Link\n        href={getExplorerTransactionLink(transaction.hash, transaction.chainId)}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        View on Etherscan\n        <LinkIconWrapper>\n          <ShareIcon />\n        </LinkIconWrapper>\n      </Link>\n    )}\n  </>\n)\n\nconst notificationContent: { [key in Notification['type']]: { title: string; icon: ReactElement } } = {\n  transactionFailed: { title: 'Transaction failed', icon: <ExclamationIcon /> },\n  transactionStarted: { title: 'Transaction started', icon: <ClockIcon /> },\n  transactionSucceed: { title: 'Transaction succeed', icon: <CheckIcon/> },\n  walletConnected: { title: 'Wallet connected', icon: <WalletIcon /> },\n}\n\ninterface ListElementProps {\n  icon: ReactElement\n  title: string | undefined\n  transaction?: TransactionResponse\n  date?: number\n}\n\nconst ListElement = ({icon, title }: ListElementProps) => {\n  return (\n    <ListElementWrapper layout initial={{ opacity: 0, y: -50 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0 }}>\n      <ListIconContainer>{icon}</ListIconContainer>\n      <ListDetailsWrapper>\n        <TextBold>{title}</TextBold>\n      </ListDetailsWrapper>\n    </ListElementWrapper>\n  )\n}\n\nfunction TransactionIcon(transaction: StoredTransaction) {\n  if (getStoredTransactionState(transaction) === 'Mining') {\n    return <SpinnerIcon />\n  } else if (getStoredTransactionState(transaction) === 'Fail') {\n    return <ExclamationIcon />\n  } else if (transaction.transactionName === 'Unwrap') {\n    return <UnwrapIcon />\n  } else if (transaction.transactionName === 'Wrap') {\n    return <WrapIcon />\n  } else {\n    return <RequirmentCheck/>\n  }\n}\n\n\nfunction RequirementIcon() {\n    return <RequirmentCheck/>\n}\n\ninterface RequirementsListProps {\n  requirements: (string[]| undefined);\n}\n\nexport const RequirementsList = (props: RequirementsListProps) => {\n  const { transactions } = useTransactions()\n  // const badgeRequirements = [\n  //     {title: 'Create an ethereum account'},\n  //     {title: 'Be awesome'},\n\n  //   ]\n  return (\n    <TableWrapper title=\"Requirements\">\n      <AnimatePresence initial={false}>\n        {  props.requirements &&  \n         props.requirements.map((requirement, index) =>\n          <ListElement\n            key={`requirement-${index}`}\n            title={requirement}\n            icon={RequirementIcon()}\n          />)\n        }\n        \n      </AnimatePresence>\n    </TableWrapper>\n  )\n}\n\nconst NotificationElement = ({ transaction, icon, title }: ListElementProps) => {\n  return (\n    <NotificationWrapper layout initial={{ opacity: 0, y: -50 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0 }}>\n      <NotificationIconContainer>{icon}</NotificationIconContainer>\n      <NotificationDetailsWrapper>\n        <NotificationText>{title}</NotificationText>\n        <TransactionLink transaction={transaction} />\n        <TransactionDetails>\n          {transaction && `${shortenTransactionHash(transaction?.hash)} #${transaction.nonce}`}\n        </TransactionDetails>\n      </NotificationDetailsWrapper>\n      {transaction && <div style={{ marginLeft: 'auto' }}>- {formatBalance(transaction.value)} ETH</div>}\n    </NotificationWrapper>\n  )\n}\n\nexport const NotificationsList = () => {\n  const { notifications } = useNotifications()\n  return (\n    <NotificationsWrapper>\n      <AnimatePresence initial={false}>\n        {notifications.map((notification) => {\n          if ('transaction' in notification)\n            return (\n              <NotificationElement\n                key={notification.id}\n                icon={notificationContent[notification.type].icon}\n                title={notificationContent[notification.type].title}\n                transaction={notification.transaction}\n                date={Date.now()}\n              />\n            )\n          else\n            return (\n              <NotificationElement\n                key={notification.id}\n                icon={notificationContent[notification.type].icon}\n                title={notificationContent[notification.type].title}\n                date={Date.now()}\n              />\n            )\n        })}\n      </AnimatePresence>\n    </NotificationsWrapper>\n  )\n}\n\nconst RequirmentCheck = styled(CheckIcon)`\n    color: blue;\n`\n\nconst NotificationText = styled(TextBold)`\n  font-size: 20px;\n  margin-bottom: 5px;\n`\n\nconst TransactionDetails = styled.div`\n  font-size: 14px;\n`\n\nconst NotificationWrapper = styled(motion.div)`\n  display: flex;\n  align-items: center;\n  background-color: ${Colors.White};\n  box-shadow: ${Shadows.notification};\n  width: 395px;\n  border-radius: 10px;\n  margin: 15px;\n  padding: 10px 20px 10px 20px;\n`\n\nconst NotificationsWrapper = styled.div`\n  position: fixed;\n  right: 24px;\n  bottom: 24px;\n`\n\nconst NotificationIconContainer = styled.div`\n  width: 60px;\n  height: 60px;\n  padding: 0px;\n  margin-right: 20px;\n`\n\nconst ListIconContainer = styled.div`\n  width: 48px;\n  height: 48px;\n  padding: 12px;\n  padding: 14px 16px 14px 12px;\n`\n\nconst ListElementWrapper = styled(motion.div)`\n  display: flex;\n`\n\nconst NotificationDetailsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 4px 0;\n`\n\nconst ListDetailsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 4px 0;\n`\n\nconst Table = styled.div`\n  max-height: 300px;\n  overflow: scroll;\n  padding: 12px;\n\n  & > * + * {\n    margin-top: 12px;\n  }\n`\n\nconst LinkIconWrapper = styled.div`\n  width: 12px;\n  height: 12px;\n  margin-left: 8px;\n`\n\nconst SmallContentBlock = styled(ContentBlock)`\n  padding: 0;\n`\n\nconst TitleRow = styled(TextBold)`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  border-bottom: ${Colors.Gray['300']} 1px solid;\n  padding: 16px;\n  font-size: 18px;\n`\n\nconst DateRow = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  text-align: end;\n  padding: 8px;\n`\n\nconst NotificationDate = styled(DateCell)`\n  margin-left: auto;\n`\n\nconst DateDisplay = styled.div`\n  font-size: 14px;\n`\nconst HourDisplay = styled.div`\n  font-size: 12px;\n  color: ${Colors.Gray['600']};\n`\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { Interface } from \"ethers/lib/utils\"\nimport ERC1155 from \"../abi/ERC1155.json\"\n\nimport VISORS from \"../abi/Visors.json\"\n\n\nconst ERC1155Interface = new Interface(ERC1155.abi);\nconst VISORSInterface = new Interface(VISORS.abi)\n\nexport { ERC1155, ERC1155Interface }\n\nexport { VISORS, VISORSInterface }\n\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useEthers, getExplorerAddressLink, useEtherBalance, useContractFunction, useContractCall } from '@usedapp/core'\nimport { TransactionsList } from '../Transactions/History'\nimport { formatEther } from '@ethersproject/units'\nimport { BigNumber, utils } from 'ethers'\nimport { Colors, Shadows, Transitions } from '../../global/styles'\nimport { ShareIcon } from '../Transactions/Icons'\nimport { motion } from 'framer-motion'\nimport { Link } from '../base/Link'\nimport { RequirementsList } from './BadgeRequirementsList'\nimport { Contract } from '@ethersproject/contracts'\nimport { useAppDispatch, useAppSelector } from '../../hooks'\nimport { updatedSelectedItem } from '../TokensList/SelectedItemSlice'\nimport { RANDOM_VISOR_COLORS } from '../../portalHooks/BadgeHelper'\nimport { ERC1155Interface } from '../../interfaces/interfaces'\nimport { formatUnits } from '@ethersproject/units'\nimport { Badge } from 'react-bootstrap'\n\n\nexport interface BadgeParams {\n  domainName: string,\n  name: string, \n  index: number,\n  description: string,\n  requirements: string[],\n  address: string | null,\n  chainName: string | null,\n  chainId: number,\n  tokenId: number,\n}\n\n\nconst formatter = new Intl.NumberFormat('en-us', {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n})\n\nconst formatBalance = (balance: BigNumber | undefined) =>\n  formatter.format(parseFloat(formatEther(balance ?? BigNumber.from('0'))))\n\nexport type BadgeOverviewModalProps = {\n  setShowModal: React.Dispatch<React.SetStateAction<boolean>>,\n  badgeParams: BadgeParams\n}\n\nexport const VisorsABI = [\n  \"function requestMint(uint256 visorId) public payable\",\n];\n\n\n\nexport const BadgeOverviewModal = ({ setShowModal, badgeParams }: BadgeOverviewModalProps) => {\n  const { account, chainId, library } = useEthers()\n  const balance = useEtherBalance(account)\n  const visorInterface = new utils.Interface(VisorsABI)\n  const signer = library?.getSigner();\n  let contract: Contract|null = null;\n  if (badgeParams.address && badgeParams.address !== undefined) {\n    contract =  new Contract(badgeParams.address, visorInterface, signer);\n  }  \n  else {\n    contract =  new Contract('0x0000000000000000000000000000000000000000', visorInterface, signer);\n  }\n\n  function useERC1155TokenBalance(contractAddress: (string|undefined|null),  account: (string|undefined|null), tokenId:  (number|undefined|null)): any[] {\n    const [tokenBalance] =\n      useContractCall(\n        account &&\n        contractAddress && {\n            abi: ERC1155Interface,\n            address: contractAddress,\n            method: 'balanceOf',\n            args: [account, tokenId],\n          }\n      ) ?? []\n    return tokenBalance\n  }\n\n  const tokenBalance = useERC1155TokenBalance(\n    badgeParams.address,\n    account,\n    badgeParams.tokenId,\n    );\n  const { send } = useContractFunction(contract, 'requestMint', { signer: signer,  transactionName: 'Mint' });\n\n  const dispatch = useAppDispatch();\n\n  const handleApplyBadgeToAvatar =(index: number| null, tokenId: number| null) =>  {\n    dispatch (updatedSelectedItem(\n      {\n        index: index,\n        balance: 0,\n        holders: 0,\n        name: 'noname',\n        address: 'noaddress',\n        color: tokenId === null ? RANDOM_VISOR_COLORS[0]: RANDOM_VISOR_COLORS[tokenId],\n        tokenId: tokenId\n      }\n    ));\n    \n  }\n\n  const doMint = async (visorId: number) => {\n    let overrides = {\n      value: utils.parseEther('0.1')\n    };\n    send([visorId],overrides);\n  }  \n  if (account && chainId) {\n    return (\n      <ModalBackground onClick={() => setShowModal(false)}>\n        <Modal\n          onClick={(e) => e.stopPropagation()}\n          layout\n          initial={{ opacity: 0, y: -50 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0 }}\n        >\n          <TitleRow>\n            Badge Details\n            <ClosingButton onClick={() => setShowModal(false)}>+</ClosingButton>\n          </TitleRow>\n          <DomainRow>\n            <Badge pill bg=\"success\">{badgeParams.domainName}</Badge>\n          </DomainRow>\n       \n          <AccountInfo>\n          {badgeParams && <AccountAddress>{badgeParams.name}</AccountAddress>}\n          {badgeParams && <p>Portal Item : <b>{badgeParams.description}</b></p>}\n          {(badgeParams && badgeParams.address) && <p>Network : <b>{badgeParams.chainName}</b> </p>}\n          {(badgeParams && badgeParams.address) && <p>Mint : <b>{badgeParams.address}</b> </p>}\n          {(badgeParams && badgeParams.address) && <p>Token ID  : <b>{badgeParams.tokenId}</b> </p>}\n\n          {       \n            (badgeParams && badgeParams.address) &&\n            <LinkWrapper>\n              <Link href={getExplorerAddressLink(badgeParams.address, badgeParams.chainId)} target=\"_blank\" rel=\"noopener noreferrer\">\n                Show on etherscan\n                <LinkIconWrapper>\n                  <ShareIcon />\n                </LinkIconWrapper>\n              </Link>\n              {window.isSecureContext && (\n                <Link onClick={() => console.log(navigator.clipboard.writeText(badgeParams.address ? badgeParams.address : ''))}>Copy to clipboard</Link>\n              )}\n            </LinkWrapper>\n            }\n          {tokenBalance && <BalanceWrapper>Balance : {formatUnits(tokenBalance,0)}</BalanceWrapper> }\n          {(badgeParams && badgeParams.address && tokenBalance) && <MintButton onClick={() => doMint(badgeParams.tokenId)} >Mint</MintButton>}   \n        \n          <ApplyButton onClick={() => handleApplyBadgeToAvatar(\n            badgeParams.index, \n            badgeParams.tokenId\n             )}>Apply Item</ApplyButton>\n          </AccountInfo>\n          <HistoryWrapper>\n  \n            <RequirementsList requirements={badgeParams.requirements}/>\n          </HistoryWrapper>\n        </Modal>\n      </ModalBackground>\n    )\n  } else {\n    setShowModal(false)\n    return <div />\n  }\n}\n\nexport const Button = styled.button`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 8px;\n  align-items: center;\n  padding: 5px;\n  width: fit-content;\n  height: 40px;\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  color: ${Colors.Black[900]};\n  border: 1px solid ${Colors.Black[900]};\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: ${Colors.Black[900]};\n    color: ${Colors.Yellow[100]};\n  }\n`\n\nconst MintButton = styled(Button)`\n  margin-bottom: 5px;\n  background-color: ${Colors.Yellow[100]};\n`\n\nconst ApplyButton = styled(Button)`\n  margin-bottom: 5px;\n  background-color: ${Colors.Gray[300]};\n`\n\nconst LinkWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 20px;\n`\n\nconst LinkIconWrapper = styled.div`\n  width: 12px;\n  height: 12px;\n`\n\nconst BalanceWrapper = styled.div`\n  margin-top: 12px;\n`\n\nconst HistoryWrapper = styled.div``\n\nconst AccountAddress = styled.p`\n  font-weight: 700;\n  margin-bottom: 10px;\n`\n\nconst ClosingButton = styled.button`\n  display: flex;\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  line-height: 1;\n  width: 24px;\n  height: 24px;\n  transform: rotate(45deg);\n  transition: ${Transitions.all};\n\n  &:hover {\n    color: ${Colors.Yellow[500]};\n  }\n`\n\nconst TitleRow = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  padding: 0.5em;\n  width: 100%;\n  font-size: 20px;\n`\nconst DomainRow = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 100%;\n  font-size: 15px;\n  padding-left: 0.5em;\n`\n\nconst AccountInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0.5em;\n  padding: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${Shadows.main};\n  background-color: ${Colors.White};\n`\n\nconst Modal = styled(motion.div)`\n  display: flex;\n  flex-direction: column;\n  height:fit-content;\n  background-color: white;\n  box-shadow: ${Shadows.main};\n  border-radius: 10px;\n  z-index: 3;\n  margin-top:6em;\n`\n\nconst ModalBackground = styled(motion.div)`\n  top: 0;\n  left: 0;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  margin: 0px;\n  z-index: 2;\n  background-color: rgba(235, 232, 223, 0.5);\n  display: flex;\n  justify-content: center;\n`\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { BorderRad } from '../../global/styles'\n\nexport function TokenSVGIcon({ src, alt }: { src: string; alt: string }) {\n  const [isIconError, setIconError] = useState(false)\n\n  return (\n    <>\n      {isIconError ? (\n        '🤷‍♂️'\n      ) : (\n          <SvgContainer>\n  <svg xmlns=\"http://www.w3.org/2000/svg\"  fill=\"currentColor\" className=\"bi bi-controller\" viewBox=\"0 0 16 16\">\n  <path d=\"M11.5 6.027a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-1.5 1.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm2.5-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-1.5 1.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm-6.5-3h1v1h1v1h-1v1h-1v-1h-1v-1h1v-1z\"/>\n  <path d=\"M3.051 3.26a.5.5 0 0 1 .354-.613l1.932-.518a.5.5 0 0 1 .62.39c.655-.079 1.35-.117 2.043-.117.72 0 1.443.041 2.12.126a.5.5 0 0 1 .622-.399l1.932.518a.5.5 0 0 1 .306.729c.14.09.266.19.373.297.408.408.78 1.05 1.095 1.772.32.733.599 1.591.805 2.466.206.875.34 1.78.364 2.606.024.816-.059 1.602-.328 2.21a1.42 1.42 0 0 1-1.445.83c-.636-.067-1.115-.394-1.513-.773-.245-.232-.496-.526-.739-.808-.126-.148-.25-.292-.368-.423-.728-.804-1.597-1.527-3.224-1.527-1.627 0-2.496.723-3.224 1.527-.119.131-.242.275-.368.423-.243.282-.494.575-.739.808-.398.38-.877.706-1.513.773a1.42 1.42 0 0 1-1.445-.83c-.27-.608-.352-1.395-.329-2.21.024-.826.16-1.73.365-2.606.206-.875.486-1.733.805-2.466.315-.722.687-1.364 1.094-1.772a2.34 2.34 0 0 1 .433-.335.504.504 0 0 1-.028-.079zm2.036.412c-.877.185-1.469.443-1.733.708-.276.276-.587.783-.885 1.465a13.748 13.748 0 0 0-.748 2.295 12.351 12.351 0 0 0-.339 2.406c-.022.755.062 1.368.243 1.776a.42.42 0 0 0 .426.24c.327-.034.61-.199.929-.502.212-.202.4-.423.615-.674.133-.156.276-.323.44-.504C4.861 9.969 5.978 9.027 8 9.027s3.139.942 3.965 1.855c.164.181.307.348.44.504.214.251.403.472.615.674.318.303.601.468.929.503a.42.42 0 0 0 .426-.241c.18-.408.265-1.02.243-1.776a12.354 12.354 0 0 0-.339-2.406 13.753 13.753 0 0 0-.748-2.295c-.298-.682-.61-1.19-.885-1.465-.264-.265-.856-.523-1.733-.708-.85-.179-1.877-.27-2.913-.27-1.036 0-2.063.091-2.913.27z\"/>\n</svg>\n      </SvgContainer>\n      )}\n    </>\n  )\n}\nconst SvgContainer = styled.div`\n  width: 70%;\n  height: 70%;\n  object-fit: contain;\n  color: #fff;\n  padding-top:0.5em;\n`","import { formatUnits } from '@ethersproject/units'\nimport { ChainId, CHAIN_NAMES, useEthers } from '@usedapp/core'\nimport React, { useState } from 'react'\nimport { Row,Spinner } from 'react-bootstrap'\nimport styled from 'styled-components'\nimport { Colors } from '../../global/styles'\nimport { MetaBadge } from '../../portalHooks/BadgeHelperTypes'\nimport { useBadgeList } from '../../portalHooks/useBadgeList'\nimport { TextBold } from '../../typography/Text'\nimport { BadgeOverviewModal, BadgeParams } from '../badge/BadgeOverviewModal'\nimport { TokenSVGIcon } from './TokenSVGIcon'\nimport { useSelector } from 'react-redux'\n\n\ndeclare const window: any;\n\nexport function TokensList() {\n\n  const { chainId, account, library } = useEthers();\n  const badges: MetaBadge[]| undefined = useBadgeList(account);\n\n  console.log('badges : ',badges)\n  const [showModal, setShowModal] = useState(false)\n  const [selectedBadgeParams, setSelectedBadgeParams] = useState<BadgeParams>()\n\n    const handleShowModal =(index: number, badge: MetaBadge) =>  {\n      if(!badge || !badge.ui){\n        return;\n      }\n      const chainId: ChainId = badge.ui.onChain ? badge.ui.onChain.chainId : 0;\n      setSelectedBadgeParams({\n        domainName: 'Meta Portal',\n        name: badge.ui.name,\n        description: badge.ui.description,\n        requirements: badge.ui.requirements,\n        address: badge.ui.onChain ? badge.ui.onChain.address : null,\n        tokenId: badge.ui.onChain ? badge.ui.onChain.tokenId : 0,\n        chainName: CHAIN_NAMES[chainId],\n        chainId: chainId,\n        index: index,\n      });\n\n      setShowModal(!showModal);\n    }\n\n    const item = useSelector((state: any) => {\n      return{\n      index: state.selectedItem.index,\n      balance: state.selectedItem.balance,\n      holders: state.selectedItem.holders,\n      name: state.selectedItem.name,\n      address: state.selectedItem.address,\n      color: state.selectedItem.color,\n      tokenId: state.selectedItem.tokenId,\n    }\n    })\n\n\n  return (\n    <div>\n      {\n      (showModal && selectedBadgeParams) && <BadgeOverviewModal setShowModal={setShowModal} badgeParams={selectedBadgeParams} />\n      }\n      {!badges ? (<Spinner animation=\"grow\" /> ): (\n        <BadgeContainer>\n        {badges && badges.map((badge: MetaBadge, idx:number) => {\n              return (\n         \n                    <TokenItem key={`SubSection-${idx}`}> \n                    <TokenIconContainer onClick={() => handleShowModal(idx, badge)}>\n                      <BadgeCreatorLogo>\n                        MPL\n                      </BadgeCreatorLogo>\n                      {(item.color && item.index === idx) && <BadgeApplied> \n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" color=\"#FFF4D4\" className=\"bi bi-check-square\" viewBox=\"0 0 16 16\">\n  <path d=\"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n  <path d=\"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.235.235 0 0 1 .02-.022z\"/>\n</svg>\n                      </BadgeApplied>}\n                      <TokenSVGIcon src={''} alt={''}></TokenSVGIcon>\n                      <TokenBalance> \n                        {formatUnits(10,0)}xp\n                      </TokenBalance>\n                    </TokenIconContainer>\n                        {badge.ui && <TokenName>{badge.ui.name}</TokenName>}                    \n                  </TokenItem>\n           \n          )})}\n        </BadgeContainer>\n    )}\n    </div>\n  )\n}\n\n\nconst BadgeContainer = styled.div`\ndisplay: flex;\nflex-flow: row wrap;\nheight: 100%;\n`\n\n\nexport const Button = styled.button`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 8px;\n  align-items: center;\n  width: fit-content;\n  height: 40px;\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  color: ${Colors.Black[900]};\n  border: 1px solid ${Colors.Black[900]};\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: ${Colors.Black[900]};\n    color: ${Colors.Yellow[100]};\n  }\n`\n\nconst MintButton = styled(Button)`\n  background-color: ${Colors.Yellow[100]};\n`\n\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`\n\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`\n\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n`\n\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`\n\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 12px;\n`\n\nconst BadgeApplied = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  padding:0.25em;\n  font-size: 12px;\n`\n\nconst BadgeCreatorLogo = styled(TextBold)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding:0.25em;\n  font-size: 12px;\n`\n","import { CHAIN_NAMES, useEthers } from '@usedapp/core'\nimport React, { useEffect } from 'react'\nimport { Badge, Form } from 'react-bootstrap'\nimport styled from 'styled-components'\nimport { AccountButton } from '../components/account/AccountButton'\nimport { ItemSelection } from '../components/ItemSelection/ItemSelection'\nimport { updatedSelectedItem } from '../components/TokensList/SelectedItemSlice'\nimport { TokensList } from '../components/TokensList/TokensList'\nimport { Shadows } from '../global/styles'\nimport { useAppDispatch } from '../hooks'\nimport { MetaBadge } from '../portalHooks/BadgeHelperTypes'\nimport { useBadgeList } from '../portalHooks/useBadgeList'\nimport { Text } from '../typography/Text'\n\n\n\n\nexport function BadgePage() {\n  const { chainId, account, library } = useEthers();\n  const badges: MetaBadge[]| undefined = useBadgeList(account);\n\n  const dispatch = useAppDispatch();\n\n  const handleApplyBadgeToAvatar =(index: number) =>  {  \n    dispatch (updatedSelectedItem(\n      {\n        index: index,\n        balance: 0,\n        holders: 0,\n        name: 'noname',\n        address: 'noaddress',\n        color: null,\n      }\n    ))\n  }\n\n  useEffect(() => {\n    // clearing badge selection when\n    // account ORR chainID changed\n    handleApplyBadgeToAvatar(0);\n\n  }, [account,chainId])\n\n  return (\n    <div>\n    { account ? (<BadgesPageContainer>\n\n      <BadgeListColumn>\n        <BadgeListHeaderRow>\n          <BadgeListHeaderInfoColumn>\n            <p>Badges based on <b>on-chain activity</b></p>\n            {chainId && <Badge pill bg=\"dark\">{CHAIN_NAMES[chainId]}</Badge>}          \n            </BadgeListHeaderInfoColumn>\n          <BadgeListHeaderDropdownColumn>\n            <Form.Select aria-label=\"Default select example\">\n              <option>Meta Portal</option>\n            </Form.Select>\n          </BadgeListHeaderDropdownColumn>\n        </BadgeListHeaderRow>\n        <BadgeListRow>\n          <TokensList />\n        </BadgeListRow>\n      </BadgeListColumn>\n\n      <AvatarColumn>\n        <AvatarHeaderRow>\n          <AvatarHeaderXPColumn>\n          { account && <Badge pill bg=\"light\" style={{color: 'black'}}>{badges ? (badges.length * 10): 0} XP</Badge>}          \n          </AvatarHeaderXPColumn>\n          <AvatarHeaderAccountSignInColumn>\n              <AccountButton />\n          </AvatarHeaderAccountSignInColumn>\n        </AvatarHeaderRow>\n        <AvatarRow>\n          <ItemSelection />\n        </AvatarRow>\n      </AvatarColumn>\n\n    </BadgesPageContainer>) : \n    (<BadgesPageContainer>\n      <Text style={{margin: '0.5em'}}> Connect browser wallet to access portal</Text>\n      <AccountButton />\n    </BadgesPageContainer>)\n  }\n  </div>\n  )\n}\n\nconst BadgesPageContainer = styled.div `\n  display: flex;\n  margin: 1em;\n  column-gap: 10px;\n  row-gap: 10px;\n\n  flex-flow: wrap-reverse;\n`\nconst BadgeListColumn = styled.div `\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1; \n  box-shadow: ${Shadows.main};\n  background-color: aliceblue;\n\n`\n\nconst AvatarColumn = styled.div `\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1; \n  background-color: aliceblue;\n  box-shadow: ${Shadows.main};\n`\n\nconst BadgeListHeaderRow = styled.div `\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 1.5em;\n  min-height: 60px;\n  padding: 0.5em;\n  `\n  \nconst BadgeListHeaderInfoColumn = styled.div `\n  flex-grow: 4; \n  `\n\nconst BadgeListHeaderDropdownColumn = styled.div `\n  flex-grow: 1; \n  `\nconst BadgeListRow = styled.div`\n  padding: 0.5em;\n  height: 500px;\n`\n\nconst AvatarHeaderRow = styled.div `\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 1.5em;\n  column-gap: 5px;\n  min-height: 60px;\n  padding: 0.5em;\n\n`\n\nconst AvatarRow = styled.div`\n  display:flex;\n  justify-content: center;\n  height: 500px;\n  padding: 0.5em;\n\n`\n\nconst AvatarHeaderXPColumn = styled.div `\n`\n\nconst AvatarHeaderAccountSignInColumn = styled.div `\n`\n","import React from 'react'\nimport { Redirect, Route, Switch } from 'react-router'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Page } from './components/base/base'\nimport { TopBar } from './components/TopBar'\nimport { NotificationsList } from './components/Transactions/History'\nimport { GlobalStyle } from './global/GlobalStyle'\nimport { BadgePage } from './pages/Badges'\n\nexport function App() {\n  return (\n    <Page>\n      <GlobalStyle />\n      <BrowserRouter>\n        <TopBar />\n        <Switch>\n          <Route exact path=\"/badges\" component={BadgePage} />\n          <Redirect exact from=\"/\" to=\"/badges\" />\n        </Switch>\n      </BrowserRouter>\n      <NotificationsList />\n    </Page>\n  )\n}\n","import { createSlice , PayloadAction} from '@reduxjs/toolkit'\nimport type { RootState } from '../../store'\n\n\n// Define a type for the slice state\ninterface CounterState {\n    value: number\n  }\n  \n  // Define the initial state using that type\n  const initialState: CounterState = {\n    value: 0,\n  }\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n        state.value += action.payload\n    },\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectCount = (state: RootState) => state.counter.value\n\nexport default counterSlice.reducer","import { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from './features/counter/counterSlice'\n\nimport selectedItemReducer from './components/TokensList/SelectedItemSlice'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    selectedItem: selectedItemReducer\n  },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChainId, Config, DAppProvider, MULTICALL_ADDRESSES } from '@usedapp/core'\nimport { App } from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {store} from './store'\nimport { Provider } from 'react-redux'\n\n\nconst config:Config = {\n  readOnlyChainId: ChainId.Mainnet,\n  readOnlyUrls: {\n    [ChainId.Mainnet]: 'https://mainnet.infura.io/v3/3165a249c65f4198bf57200109b8fadf',\n    [ChainId.Hardhat]: 'http://127.0.0.1:8545/'\n  },\n  supportedChains:[ChainId.Mainnet, ChainId.Kovan, ChainId.Hardhat, ChainId.Polygon, ChainId.Mumbai],\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <DAppProvider config={config}>\n      <App />\n    </DAppProvider>\n    </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}