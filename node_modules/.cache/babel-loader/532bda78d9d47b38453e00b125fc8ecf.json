{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { usePromiseTransaction } from '@usedapp/core/dist/esm/src/hooks/usePromiseTransaction';\nexport const useContractFunction = (contract, functionName, chainId, options) => {\n  _s();\n\n  const [events, setEvents] = useState(undefined);\n  const {\n    promiseTransaction,\n    state\n  } = usePromiseTransaction(chainId, options);\n  const send = useCallback(async function () {\n    const sendPromise = contract[functionName](...arguments).then(result => {\n      // Need to add chainId here to prevent \"TypeError: Unsupported Chain\" error message\n      result.chainId = chainId;\n      return result;\n    });\n    const receipt = await promiseTransaction(sendPromise);\n\n    if (receipt) {\n      if (receipt.logs && receipt.logs.length > 0) {\n        setEvents(receipt.logs.map(log => contract.interface.parseLog(log)));\n      } else {\n        setEvents([]);\n      }\n    }\n  }, [contract, functionName, options]);\n  return {\n    send,\n    state,\n    events\n  };\n};\n\n_s(useContractFunction, \"3yBJ0AXfi/xNnGPO9T+/J1XIEfQ=\", false, function () {\n  return [usePromiseTransaction];\n});","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/workarounds/useContractFunction.ts"],"names":["useCallback","useState","usePromiseTransaction","useContractFunction","contract","functionName","chainId","options","events","setEvents","undefined","promiseTransaction","state","send","sendPromise","then","result","receipt","logs","length","map","log","interface","parseLog"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,qBAAT,QAAsC,wDAAtC;AAGA,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,QADiC,EAEjCC,YAFiC,EAGjCC,OAHiC,EAIjCC,OAJiC,KAK9B;AAAA;;AACH,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAClCS,SADkC,CAApC;AAIA,QAAM;AAAEC,IAAAA,kBAAF;AAAsBC,IAAAA;AAAtB,MAAgCV,qBAAqB,CAACI,OAAD,EAAUC,OAAV,CAA3D;AAEA,QAAMM,IAAI,GAAGb,WAAW,CACtB,kBAA0B;AACxB,UAAMc,WAAW,GAAGV,QAAQ,CAACC,YAAD,CAAR,CAAuB,YAAvB,EAAgCU,IAAhC,CACjBC,MAAD,IAA+B;AAC7B;AACAA,MAAAA,MAAM,CAACV,OAAP,GAAiBA,OAAjB;AACA,aAAOU,MAAP;AACD,KALiB,CAApB;AAQA,UAAMC,OAAO,GAAG,MAAMN,kBAAkB,CAACG,WAAD,CAAxC;;AAEA,QAAIG,OAAJ,EAAa;AACX,UAAIA,OAAO,CAACC,IAAR,IAAgBD,OAAO,CAACC,IAAR,CAAaC,MAAb,GAAsB,CAA1C,EAA6C;AAC3CV,QAAAA,SAAS,CAACQ,OAAO,CAACC,IAAR,CAAaE,GAAb,CAAkBC,GAAD,IAASjB,QAAQ,CAACkB,SAAT,CAAmBC,QAAnB,CAA4BF,GAA5B,CAA1B,CAAD,CAAT;AACD,OAFD,MAEO;AACLZ,QAAAA,SAAS,CAAC,EAAD,CAAT;AACD;AACF;AACF,GAnBqB,EAoBtB,CAACL,QAAD,EAAWC,YAAX,EAAyBE,OAAzB,CApBsB,CAAxB;AAuBA,SAAO;AAAEM,IAAAA,IAAF;AAAQD,IAAAA,KAAR;AAAeJ,IAAAA;AAAf,GAAP;AACD,CApCM;;GAAML,mB;UAU2BD,qB","sourcesContent":["import { useCallback, useState } from 'react'\nimport { usePromiseTransaction } from '@usedapp/core/dist/esm/src/hooks/usePromiseTransaction'\nimport { Contract } from '@ethersproject/contracts'\n\nexport const useContractFunction = (\n  contract: Contract,\n  functionName: string,\n  chainId: number | undefined,\n  options?: { transactionName?: string }\n) => {\n  const [events, setEvents] = useState<Record<string, any> | undefined>(\n    undefined\n  )\n\n  const { promiseTransaction, state } = usePromiseTransaction(chainId, options)\n\n  const send = useCallback(\n    async (...args: any[]) => {\n      const sendPromise = contract[functionName](...args).then(\n        (result: any): Promise<any> => {\n          // Need to add chainId here to prevent \"TypeError: Unsupported Chain\" error message\n          result.chainId = chainId\n          return result\n        }\n      )\n\n      const receipt = await promiseTransaction(sendPromise)\n\n      if (receipt) {\n        if (receipt.logs && receipt.logs.length > 0) {\n          setEvents(receipt.logs.map((log) => contract.interface.parseLog(log)))\n        } else {\n          setEvents([])\n        }\n      }\n    },\n    [contract, functionName, options]\n  )\n\n  return { send, state, events }\n}"]},"metadata":{},"sourceType":"module"}