{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nconst ContactShadows = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    frames = Infinity,\n    opacity = 1,\n    width = 1,\n    height = 1,\n    blur = 1,\n    far = 10,\n    resolution = 256,\n    ...props\n  } = _ref;\n  const scene = useThree(_ref2 => {\n    let {\n      scene\n    } = _ref2;\n    return scene;\n  });\n  const gl = useThree(_ref3 => {\n    let {\n      gl\n    } = _ref3;\n    return gl;\n  });\n  const shadowCamera = React.useRef();\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height]);\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/@react-three/drei/core/ContactShadows.js"],"names":["_extends","React","THREE","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","forwardRef","ref","frames","Infinity","opacity","width","height","blur","far","resolution","props","scene","gl","shadowCamera","useRef","renderTarget","planeGeometry","depthMaterial","blurPlane","horizontalBlurMaterial","verticalBlurMaterial","renderTargetBlur","useMemo","WebGLRenderTarget","texture","generateMipmaps","PlaneBufferGeometry","rotateX","Math","PI","Mesh","MeshDepthMaterial","depthTest","depthWrite","onBeforeCompile","shader","fragmentShader","replace","ShaderMaterial","count","current","initialBackground","background","overrideMaterial","setRenderTarget","render","material","uniforms","tDiffuse","value","h","v","createElement","geometry","scale","rotation","map","transparent","args"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 256,\n  ...props\n}, ref) => {\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = React.useRef();\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height]);\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"]},"metadata":{},"sourceType":"module"}