{"ast":null,"code":"export let TransactionLevel;\n\n(function (TransactionLevel) {\n  TransactionLevel[TransactionLevel[\"Root\"] = 0] = \"Root\";\n  TransactionLevel[TransactionLevel[\"LogEvents\"] = 1] = \"LogEvents\";\n})(TransactionLevel || (TransactionLevel = {}));\n\nexport const parseResponseForItems = response => {\n  if (!response || !response.data || !response.data.data) {\n    return null;\n  }\n\n  return response.data.data.items;\n};\nexport const getSuccessfulTransactionCount = items => {\n  let successCount = 0;\n  items.forEach(item => {\n    if (item.successful === true) {\n      successCount++;\n    }\n  });\n  return successCount;\n};\nexport const parseForBadgesForTypes = values => {\n  return [...extractBadgesForBadgeCriteria('successfulTransactions', values[0]), ...extractBadgesForBadgeCriteria('accountCreation', 1)];\n};\nexport const extractBadgesForBadgeCriteria = (badgeType, valueAchieved) => {\n  let successCount = 0;\n  let extractedBadges = [];\n  ALL_BADGES['metaPortal'][badgeType]['greaterThan'].forEach(badgeItem => {\n    if (valueAchieved > badgeItem.value) {\n      extractedBadges.push(badgeItem);\n    }\n  });\n  return extractedBadges;\n};\nexport const RANDOM_VISOR_COLORS = ['black', 'white', 'grey', 'green', 'blue', 'hot-pink', 'purple', 'silver', 'bronze', 'gold'];\nexport const ALL_BADGES = {\n  metaPortal: {\n    accountCreation: {\n      greaterThan: [{\n        value: 0,\n        badgeName: 'Space Cadet'\n      }, {\n        value: 0,\n        badgeName: 'WAGMI Rank 1'\n      }]\n    },\n    successfulTransactions: {\n      greaterThan: [{\n        value: 25,\n        badgeName: 'Explorer Rank 1'\n      }, {\n        value: 50,\n        badgeName: 'Explorer Rank 2'\n      }, {\n        value: 75,\n        badgeName: 'Explorer Rank 3'\n      }, {\n        value: 100,\n        badgeName: 'Sky Captain Rank 1'\n      }]\n    }\n  }\n};\nexport const parseTransaction = (transaction, params) => {};\nexport const parseTransactionsForRules = transactions => {\n  const rules = [{\n    level: TransactionLevel.Root,\n    keys: [{\n      name: 'successful',\n      value: true\n    }],\n    useKeyValueMatching: true\n  }];\n};\nexport const getValueMatchCountForKey = (items, key, value) => {\n  let count = 0;\n  items.forEach(item => {\n    if (item[key] && item[key] === value) {\n      count++;\n    }\n  });\n  return count;\n};","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/BadgeHelper.ts"],"names":["TransactionLevel","parseResponseForItems","response","data","items","getSuccessfulTransactionCount","successCount","forEach","item","successful","parseForBadgesForTypes","values","extractBadgesForBadgeCriteria","badgeType","valueAchieved","extractedBadges","ALL_BADGES","badgeItem","value","push","RANDOM_VISOR_COLORS","metaPortal","accountCreation","greaterThan","badgeName","successfulTransactions","parseTransaction","transaction","params","parseTransactionsForRules","transactions","rules","level","Root","keys","name","useKeyValueMatching","getValueMatchCountForKey","key","count"],"mappings":"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","sourcesContent":["import { AxiosResponse } from \"axios\";\n\n\nexport enum TransactionLevel {\n  Root = 0,\n  LogEvents\n}\n\n\nexport interface ParseParams {\n  level: TransactionLevel,\n  keys: KeyValueObject[],\n  useKeyValueMatching: boolean,\n\n}\n\nexport interface KeyValueObject {\n  name: string,\n  value?: boolean|string|number;\n}\n\nexport const parseResponseForItems =(response: AxiosResponse): (any[]|null) => {\n    if(!response || !response.data || !response.data.data) {\n      return null;\n    }\n    return response.data.data.items;\n  }\n  \n  export const getSuccessfulTransactionCount =(items: any[]): number => {\n    let successCount = 0;\n    items.forEach((item) => {\n      if(item.successful === true) {\n        successCount++;\n      }\n    });\n    return successCount;\n  }\n  \n  \n  export const parseForBadgesForTypes =(values: number[]): any[] => {\n    return [\n      ...extractBadgesForBadgeCriteria('successfulTransactions',values[0]),\n      ...extractBadgesForBadgeCriteria('accountCreation',1)\n    ]\n  }\n  \n  \n  export const extractBadgesForBadgeCriteria = (badgeType: string, valueAchieved: number): any[] => {\n    let successCount = 0;\n    let extractedBadges: any[] = [];\n    \n    ALL_BADGES['metaPortal'][badgeType]['greaterThan'].forEach((badgeItem: any) => {\n      if(valueAchieved > badgeItem.value ) {\n        extractedBadges.push(badgeItem);\n      }\n    });\n    return extractedBadges;\n  }\n\n  export const RANDOM_VISOR_COLORS = [\n    'black',\n    'white',\n    'grey',\n    'green',\n    'blue',\n    'hot-pink',\n    'purple',\n    'silver',\n    'bronze',\n    'gold'\n  ]\n  \n  export const ALL_BADGES: any = {\n    metaPortal : {\n      accountCreation : {\n        greaterThan: [\n          {\n            value: 0,\n            badgeName: 'Space Cadet',\n          },\n          {\n            value: 0,\n            badgeName: 'WAGMI Rank 1',\n          },\n        ]\n      },\n      successfulTransactions : {\n  \n        greaterThan: [\n          {\n            value: 25,\n            badgeName: 'Explorer Rank 1',\n          },\n          {\n            value: 50,\n            badgeName: 'Explorer Rank 2',\n          },\n          {\n            value: 75,\n            badgeName: 'Explorer Rank 3',\n          },\n          {\n            value: 100,\n            badgeName: 'Sky Captain Rank 1',\n          }\n        ]\n      }\n    }\n  }\n\n\n  export const parseTransaction =(transaction: any, params: ParseParams) => {\n\n  }\n\n  export const parseTransactionsForRules =(transactions: any[]) => {\n\n    const rules: ParseParams[] = [\n      {\n        level: TransactionLevel.Root,\n        keys: [ {name: 'successful', value: true} ],\n        useKeyValueMatching: true\n      }\n    ]\n\n\n  }\n\n\n  export const getValueMatchCountForKey = (items: any[], key: string, value: any) =>  {\n      let count = 0;\n      items.forEach((item) => {\n        if(item[key] && item[key] === value) {\n          count++;\n        }\n      });\n      return count;\n  }"]},"metadata":{},"sourceType":"module"}