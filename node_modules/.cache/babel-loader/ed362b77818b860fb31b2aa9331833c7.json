{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { ShaderMaterial, UniformsUtils } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n  constructor(shader) {\n    let textureID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'tDiffuse';\n    super();\n\n    _defineProperty(this, \"textureID\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    this.textureID = textureID;\n\n    if (shader instanceof ShaderMaterial) {\n      this.uniforms = shader.uniforms;\n      this.material = shader;\n    } else {\n      this.uniforms = UniformsUtils.clone(shader.uniforms);\n      this.material = new ShaderMaterial({\n        defines: Object.assign({}, shader.defines),\n        uniforms: this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n      });\n    }\n\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    this.fsQuad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { ShaderPass };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/postprocessing/ShaderPass.js"],"names":["_defineProperty","ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","ShaderPass","constructor","shader","textureID","uniforms","material","clone","defines","Object","assign","vertexShader","fragmentShader","fsQuad","render","renderer","writeBuffer","readBuffer","value","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,OAA9C;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,WAArC;;AAEA,MAAMC,UAAN,SAAyBF,IAAzB,CAA8B;AAC5BG,EAAAA,WAAW,CAACC,MAAD,EAAiC;AAAA,QAAxBC,SAAwB,uEAAZ,UAAY;AAC1C;;AAEAR,IAAAA,eAAe,CAAC,IAAD,EAAO,WAAP,EAAoB,KAAK,CAAzB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAK,CAAxB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAK,CAAxB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;AAEA,SAAKQ,SAAL,GAAiBA,SAAjB;;AAEA,QAAID,MAAM,YAAYN,cAAtB,EAAsC;AACpC,WAAKQ,QAAL,GAAgBF,MAAM,CAACE,QAAvB;AACA,WAAKC,QAAL,GAAgBH,MAAhB;AACD,KAHD,MAGO;AACL,WAAKE,QAAL,GAAgBP,aAAa,CAACS,KAAd,CAAoBJ,MAAM,CAACE,QAA3B,CAAhB;AACA,WAAKC,QAAL,GAAgB,IAAIT,cAAJ,CAAmB;AACjCW,QAAAA,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,MAAM,CAACK,OAAzB,CADwB;AAEjCH,QAAAA,QAAQ,EAAE,KAAKA,QAFkB;AAGjCM,QAAAA,YAAY,EAAER,MAAM,CAACQ,YAHY;AAIjCC,QAAAA,cAAc,EAAET,MAAM,CAACS;AAJU,OAAnB,CAAhB;AAMD;;AAED,SAAKC,MAAL,GAAc,IAAIb,cAAJ,CAAmB,KAAKM,QAAxB,CAAd;AACD;;AAEDQ,EAAAA,MAAM,CAACC,QAAD,EAAWC,WAAX,EAAwBC,UAAxB,EAAoC;AACxC,QAAI,KAAKZ,QAAL,CAAc,KAAKD,SAAnB,CAAJ,EAAmC;AACjC,WAAKC,QAAL,CAAc,KAAKD,SAAnB,EAA8Bc,KAA9B,GAAsCD,UAAU,CAACE,OAAjD;AACD;;AAED,SAAKN,MAAL,CAAYP,QAAZ,GAAuB,KAAKA,QAA5B;;AAEA,QAAI,KAAKc,cAAT,EAAyB;AACvBL,MAAAA,QAAQ,CAACM,eAAT,CAAyB,IAAzB;AACA,WAAKR,MAAL,CAAYC,MAAZ,CAAmBC,QAAnB;AACD,KAHD,MAGO;AACLA,MAAAA,QAAQ,CAACM,eAAT,CAAyBL,WAAzB,EADK,CACkC;;AAEvC,UAAI,KAAKM,KAAT,EAAgBP,QAAQ,CAACO,KAAT,CAAeP,QAAQ,CAACQ,cAAxB,EAAwCR,QAAQ,CAACS,cAAjD,EAAiET,QAAQ,CAACU,gBAA1E;AAChB,WAAKZ,MAAL,CAAYC,MAAZ,CAAmBC,QAAnB;AACD;AACF;;AA9C2B;;AAkD9B,SAASd,UAAT","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { ShaderMaterial, UniformsUtils } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n  constructor(shader, textureID = 'tDiffuse') {\n    super();\n\n    _defineProperty(this, \"textureID\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    this.textureID = textureID;\n\n    if (shader instanceof ShaderMaterial) {\n      this.uniforms = shader.uniforms;\n      this.material = shader;\n    } else {\n      this.uniforms = UniformsUtils.clone(shader.uniforms);\n      this.material = new ShaderMaterial({\n        defines: Object.assign({}, shader.defines),\n        uniforms: this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n      });\n    }\n\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    this.fsQuad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { ShaderPass };\n"]},"metadata":{},"sourceType":"module"}