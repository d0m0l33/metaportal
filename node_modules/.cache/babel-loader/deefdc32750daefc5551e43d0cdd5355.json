{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute, LoaderUtils } from 'three';\n/**\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  const loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n *  } else { .... }\n *  const mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * const mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  const materials = [];\n *  const nGeometryGroups = geometry.groups.length;\n *\n *  const colorMap = ...; // Some logic to index colors.\n *\n *  for (let i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tconst material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  const mesh = new THREE.Mesh(geometry, materials);\n */\n\nclass STLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    function isBinary(data) {\n      const reader = new DataView(data);\n      const face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      const n_faces = reader.getUint32(80, true);\n      const expect = 80 + 32 / 8 + n_faces * face_size;\n\n      if (expect === reader.byteLength) {\n        return true;\n      } // An ASCII STL data must begin with 'solid ' as the first six bytes.\n      // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n      // plentiful.  So, check the first 5 bytes for 'solid'.\n      // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n      // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n      // Search for \"solid\" to start anywhere after those prefixes.\n      // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n\n      const solid = [115, 111, 108, 105, 100];\n\n      for (let off = 0; off < 5; off++) {\n        // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n        if (matchDataViewAt(solid, reader, off)) return false;\n      } // Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n\n      return true;\n    }\n\n    function matchDataViewAt(query, reader, offset) {\n      // Check if each byte in query matches the corresponding byte from the current offset\n      for (let i = 0, il = query.length; i < il; i++) {\n        if (query[i] !== reader.getUint8(offset + i, false)) return false;\n      }\n\n      return true;\n    }\n\n    function parseBinary(data) {\n      const reader = new DataView(data);\n      const faces = reader.getUint32(80, true);\n      let r,\n          g,\n          b,\n          hasColors = false,\n          colors;\n      let defaultR, defaultG, defaultB, alpha; // process STL header\n      // check for default color in header (\"COLOR=rgba\" sequence).\n\n      for (let index = 0; index < 80 - 10; index++) {\n        if (reader.getUint32(index, false) == 0x434f4c4f\n        /*COLO*/\n        && reader.getUint8(index + 4) == 0x52\n        /*'R'*/\n        && reader.getUint8(index + 5) == 0x3d\n        /*'='*/\n        ) {\n          hasColors = true;\n          colors = new Float32Array(faces * 3 * 3);\n          defaultR = reader.getUint8(index + 6) / 255;\n          defaultG = reader.getUint8(index + 7) / 255;\n          defaultB = reader.getUint8(index + 8) / 255;\n          alpha = reader.getUint8(index + 9) / 255;\n        }\n      }\n\n      const dataOffset = 84;\n      const faceLength = 12 * 4 + 2;\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array(faces * 3 * 3);\n      const normals = new Float32Array(faces * 3 * 3);\n\n      for (let face = 0; face < faces; face++) {\n        const start = dataOffset + face * faceLength;\n        const normalX = reader.getFloat32(start, true);\n        const normalY = reader.getFloat32(start + 4, true);\n        const normalZ = reader.getFloat32(start + 8, true);\n\n        if (hasColors) {\n          const packedColor = reader.getUint16(start + 48, true);\n\n          if ((packedColor & 0x8000) === 0) {\n            // facet has its own unique color\n            r = (packedColor & 0x1f) / 31;\n            g = (packedColor >> 5 & 0x1f) / 31;\n            b = (packedColor >> 10 & 0x1f) / 31;\n          } else {\n            r = defaultR;\n            g = defaultG;\n            b = defaultB;\n          }\n        }\n\n        for (let i = 1; i <= 3; i++) {\n          const vertexstart = start + i * 12;\n          const componentIdx = face * 3 * 3 + (i - 1) * 3;\n          vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n          vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n          vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n          normals[componentIdx] = normalX;\n          normals[componentIdx + 1] = normalY;\n          normals[componentIdx + 2] = normalZ;\n\n          if (hasColors) {\n            colors[componentIdx] = r;\n            colors[componentIdx + 1] = g;\n            colors[componentIdx + 2] = b;\n          }\n        }\n      }\n\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n\n      if (hasColors) {\n        geometry.setAttribute('color', new BufferAttribute(colors, 3));\n        geometry.hasColors = true;\n        geometry.alpha = alpha;\n      }\n\n      return geometry;\n    }\n\n    function parseASCII(data) {\n      const geometry = new BufferGeometry();\n      const patternSolid = /solid([\\s\\S]*?)endsolid/g;\n      const patternFace = /facet([\\s\\S]*?)endfacet/g;\n      let faceCounter = 0;\n      const patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n      const patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n      const patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n      const vertices = [];\n      const normals = [];\n      const normal = new Vector3();\n      let result;\n      let groupCount = 0;\n      let startVertex = 0;\n      let endVertex = 0;\n\n      while ((result = patternSolid.exec(data)) !== null) {\n        startVertex = endVertex;\n        const solid = result[0];\n\n        while ((result = patternFace.exec(solid)) !== null) {\n          let vertexCountPerFace = 0;\n          let normalCountPerFace = 0;\n          const text = result[0];\n\n          while ((result = patternNormal.exec(text)) !== null) {\n            normal.x = parseFloat(result[1]);\n            normal.y = parseFloat(result[2]);\n            normal.z = parseFloat(result[3]);\n            normalCountPerFace++;\n          }\n\n          while ((result = patternVertex.exec(text)) !== null) {\n            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n            normals.push(normal.x, normal.y, normal.z);\n            vertexCountPerFace++;\n            endVertex++;\n          } // every face have to own ONE valid normal\n\n\n          if (normalCountPerFace !== 1) {\n            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n          } // each face have to own THREE valid vertices\n\n\n          if (vertexCountPerFace !== 3) {\n            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n          }\n\n          faceCounter++;\n        }\n\n        const start = startVertex;\n        const count = endVertex - startVertex;\n        geometry.addGroup(start, count, groupCount);\n        groupCount++;\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      return geometry;\n    }\n\n    function ensureString(buffer) {\n      if (typeof buffer !== 'string') {\n        return LoaderUtils.decodeText(new Uint8Array(buffer));\n      }\n\n      return buffer;\n    }\n\n    function ensureBinary(buffer) {\n      if (typeof buffer === 'string') {\n        const array_buffer = new Uint8Array(buffer.length);\n\n        for (let i = 0; i < buffer.length; i++) {\n          array_buffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n        }\n\n        return array_buffer.buffer || array_buffer;\n      } else {\n        return buffer;\n      }\n    } // start\n\n\n    const binData = ensureBinary(data);\n    return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n  }\n\n}\n\nexport { STLLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/STLLoader.js"],"names":["Loader","FileLoader","BufferGeometry","BufferAttribute","Vector3","Float32BufferAttribute","LoaderUtils","STLLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","isBinary","reader","DataView","face_size","n_faces","getUint32","expect","byteLength","solid","off","matchDataViewAt","query","offset","i","il","length","getUint8","parseBinary","faces","r","g","b","hasColors","colors","defaultR","defaultG","defaultB","alpha","index","Float32Array","dataOffset","faceLength","geometry","vertices","normals","face","start","normalX","getFloat32","normalY","normalZ","packedColor","getUint16","vertexstart","componentIdx","setAttribute","parseASCII","patternSolid","patternFace","faceCounter","patternFloat","source","patternVertex","RegExp","patternNormal","normal","result","groupCount","startVertex","endVertex","exec","vertexCountPerFace","normalCountPerFace","x","parseFloat","y","z","push","count","addGroup","ensureString","buffer","decodeText","Uint8Array","ensureBinary","array_buffer","charCodeAt","binData"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute, LoaderUtils } from 'three';\n\n/**\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  const loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n *  } else { .... }\n *  const mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * const mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  const materials = [];\n *  const nGeometryGroups = geometry.groups.length;\n *\n *  const colorMap = ...; // Some logic to index colors.\n *\n *  for (let i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tconst material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  const mesh = new THREE.Mesh(geometry, materials);\n */\n\nclass STLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    function isBinary(data) {\n      const reader = new DataView(data);\n      const face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      const n_faces = reader.getUint32(80, true);\n      const expect = 80 + 32 / 8 + n_faces * face_size;\n\n      if (expect === reader.byteLength) {\n        return true;\n      } // An ASCII STL data must begin with 'solid ' as the first six bytes.\n      // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n      // plentiful.  So, check the first 5 bytes for 'solid'.\n      // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n      // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n      // Search for \"solid\" to start anywhere after those prefixes.\n      // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n\n      const solid = [115, 111, 108, 105, 100];\n\n      for (let off = 0; off < 5; off++) {\n        // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n        if (matchDataViewAt(solid, reader, off)) return false;\n      } // Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n\n      return true;\n    }\n\n    function matchDataViewAt(query, reader, offset) {\n      // Check if each byte in query matches the corresponding byte from the current offset\n      for (let i = 0, il = query.length; i < il; i++) {\n        if (query[i] !== reader.getUint8(offset + i, false)) return false;\n      }\n\n      return true;\n    }\n\n    function parseBinary(data) {\n      const reader = new DataView(data);\n      const faces = reader.getUint32(80, true);\n      let r,\n          g,\n          b,\n          hasColors = false,\n          colors;\n      let defaultR, defaultG, defaultB, alpha; // process STL header\n      // check for default color in header (\"COLOR=rgba\" sequence).\n\n      for (let index = 0; index < 80 - 10; index++) {\n        if (reader.getUint32(index, false) == 0x434f4c4f\n        /*COLO*/\n        && reader.getUint8(index + 4) == 0x52\n        /*'R'*/\n        && reader.getUint8(index + 5) == 0x3d\n        /*'='*/\n        ) {\n            hasColors = true;\n            colors = new Float32Array(faces * 3 * 3);\n            defaultR = reader.getUint8(index + 6) / 255;\n            defaultG = reader.getUint8(index + 7) / 255;\n            defaultB = reader.getUint8(index + 8) / 255;\n            alpha = reader.getUint8(index + 9) / 255;\n          }\n      }\n\n      const dataOffset = 84;\n      const faceLength = 12 * 4 + 2;\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array(faces * 3 * 3);\n      const normals = new Float32Array(faces * 3 * 3);\n\n      for (let face = 0; face < faces; face++) {\n        const start = dataOffset + face * faceLength;\n        const normalX = reader.getFloat32(start, true);\n        const normalY = reader.getFloat32(start + 4, true);\n        const normalZ = reader.getFloat32(start + 8, true);\n\n        if (hasColors) {\n          const packedColor = reader.getUint16(start + 48, true);\n\n          if ((packedColor & 0x8000) === 0) {\n            // facet has its own unique color\n            r = (packedColor & 0x1f) / 31;\n            g = (packedColor >> 5 & 0x1f) / 31;\n            b = (packedColor >> 10 & 0x1f) / 31;\n          } else {\n            r = defaultR;\n            g = defaultG;\n            b = defaultB;\n          }\n        }\n\n        for (let i = 1; i <= 3; i++) {\n          const vertexstart = start + i * 12;\n          const componentIdx = face * 3 * 3 + (i - 1) * 3;\n          vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n          vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n          vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n          normals[componentIdx] = normalX;\n          normals[componentIdx + 1] = normalY;\n          normals[componentIdx + 2] = normalZ;\n\n          if (hasColors) {\n            colors[componentIdx] = r;\n            colors[componentIdx + 1] = g;\n            colors[componentIdx + 2] = b;\n          }\n        }\n      }\n\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n\n      if (hasColors) {\n        geometry.setAttribute('color', new BufferAttribute(colors, 3));\n        geometry.hasColors = true;\n        geometry.alpha = alpha;\n      }\n\n      return geometry;\n    }\n\n    function parseASCII(data) {\n      const geometry = new BufferGeometry();\n      const patternSolid = /solid([\\s\\S]*?)endsolid/g;\n      const patternFace = /facet([\\s\\S]*?)endfacet/g;\n      let faceCounter = 0;\n      const patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n      const patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n      const patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n      const vertices = [];\n      const normals = [];\n      const normal = new Vector3();\n      let result;\n      let groupCount = 0;\n      let startVertex = 0;\n      let endVertex = 0;\n\n      while ((result = patternSolid.exec(data)) !== null) {\n        startVertex = endVertex;\n        const solid = result[0];\n\n        while ((result = patternFace.exec(solid)) !== null) {\n          let vertexCountPerFace = 0;\n          let normalCountPerFace = 0;\n          const text = result[0];\n\n          while ((result = patternNormal.exec(text)) !== null) {\n            normal.x = parseFloat(result[1]);\n            normal.y = parseFloat(result[2]);\n            normal.z = parseFloat(result[3]);\n            normalCountPerFace++;\n          }\n\n          while ((result = patternVertex.exec(text)) !== null) {\n            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n            normals.push(normal.x, normal.y, normal.z);\n            vertexCountPerFace++;\n            endVertex++;\n          } // every face have to own ONE valid normal\n\n\n          if (normalCountPerFace !== 1) {\n            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n          } // each face have to own THREE valid vertices\n\n\n          if (vertexCountPerFace !== 3) {\n            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n          }\n\n          faceCounter++;\n        }\n\n        const start = startVertex;\n        const count = endVertex - startVertex;\n        geometry.addGroup(start, count, groupCount);\n        groupCount++;\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      return geometry;\n    }\n\n    function ensureString(buffer) {\n      if (typeof buffer !== 'string') {\n        return LoaderUtils.decodeText(new Uint8Array(buffer));\n      }\n\n      return buffer;\n    }\n\n    function ensureBinary(buffer) {\n      if (typeof buffer === 'string') {\n        const array_buffer = new Uint8Array(buffer.length);\n\n        for (let i = 0; i < buffer.length; i++) {\n          array_buffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n        }\n\n        return array_buffer.buffer || array_buffer;\n      } else {\n        return buffer;\n      }\n    } // start\n\n\n    const binData = ensureBinary(data);\n    return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n  }\n\n}\n\nexport { STLLoader };\n"]},"metadata":{},"sourceType":"module"}