{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Quaternion, Matrix4 } from 'three';\nimport { CharsetEncoder } from 'mmd-parser';\n/**\n * Dependencies\n *  - mmd-parser https://github.com/takahirox/mmd-parser\n */\n\nvar MMDExporter = /*#__PURE__*/function () {\n  function MMDExporter() {\n    _classCallCheck(this, MMDExporter);\n\n    _defineProperty(this, \"u2sTable\", void 0);\n  }\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n\n\n  _createClass(MMDExporter, [{\n    key: \"parseVpd\",\n    value: function parseVpd(skin, outputShiftJis, useOriginalBones) {\n      if (skin.isSkinnedMesh !== true) {\n        console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\n        return null;\n      }\n\n      function toStringsFromNumber(num) {\n        if (Math.abs(num) < 1e-6) num = 0;\n        var a = num.toString();\n\n        if (a.indexOf('.') === -1) {\n          a += '.';\n        }\n\n        a += '000000';\n        var index = a.indexOf('.');\n        var d = a.slice(0, index);\n        var p = a.slice(index + 1, index + 7);\n        return d + '.' + p;\n      }\n\n      function toStringsFromArray(array) {\n        var a = [];\n\n        for (var i = 0, il = array.length; i < il; i++) {\n          a.push(toStringsFromNumber(array[i]));\n        }\n\n        return a.join(',');\n      }\n\n      skin.updateMatrixWorld(true);\n      var bones = skin.skeleton.bones;\n      var bones2 = this.getBindBones(skin);\n      var position = new Vector3();\n      var quaternion = new Quaternion();\n      var quaternion2 = new Quaternion();\n      var matrix = new Matrix4();\n      var array = [];\n      array.push('Vocaloid Pose Data file');\n      array.push('');\n      array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\n      array.push(bones.length + ';');\n      array.push('');\n\n      for (var i = 0, il = bones.length; i < il; i++) {\n        var bone = bones[i];\n        var bone2 = bones2[i];\n        /*\n         * use the bone matrix saved before solving IK.\n         * see CCDIKSolver for the detail.\n         */\n\n        if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\n          matrix.fromArray(bone.userData.ik.originalMatrix);\n        } else {\n          matrix.copy(bone.matrix);\n        }\n\n        position.setFromMatrixPosition(matrix);\n        quaternion.setFromRotationMatrix(matrix);\n        var pArray = position.sub(bone2.position).toArray();\n        var qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray(); // right to left\n\n        pArray[2] = -pArray[2];\n        qArray[0] = -qArray[0];\n        qArray[1] = -qArray[1];\n        array.push('Bone' + i + '{' + bone.name);\n        array.push('  ' + toStringsFromArray(pArray) + ';');\n        array.push('  ' + toStringsFromArray(qArray) + ';');\n        array.push('}');\n        array.push('');\n      }\n\n      array.push('');\n      var lines = array.join('\\n');\n      return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n    } // Unicode to Shift_JIS table\n\n  }, {\n    key: \"unicodeToShiftjis\",\n    value: function unicodeToShiftjis(str) {\n      if (this.u2sTable === undefined) {\n        var encoder = new CharsetEncoder(); // eslint-disable-line no-undef\n\n        var table = encoder.s2uTable;\n        this.u2sTable = {};\n        var keys = Object.keys(table);\n\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var key = keys[i];\n          var value = table[key];\n          this.u2sTable[value] = parseInt(key);\n        }\n      }\n\n      var array = [];\n\n      for (var _i = 0, _il = str.length; _i < _il; _i++) {\n        var code = str.charCodeAt(_i);\n        var _value = this.u2sTable[code];\n\n        if (_value === undefined) {\n          throw 'cannot convert charcode 0x' + code.toString(16);\n        } else if (_value > 0xff) {\n          array.push(_value >> 8 & 0xff);\n          array.push(_value & 0xff);\n        } else {\n          array.push(_value & 0xff);\n        }\n      }\n\n      return new Uint8Array(array);\n    }\n  }, {\n    key: \"getBindBones\",\n    value: function getBindBones(skin) {\n      // any more efficient ways?\n      var poseSkin = skin.clone();\n      poseSkin.pose();\n      return poseSkin.skeleton.bones;\n    }\n  }]);\n\n  return MMDExporter;\n}();\n\nexport { MMDExporter };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/exporters/MMDExporter.js"],"names":["_defineProperty","Vector3","Quaternion","Matrix4","CharsetEncoder","MMDExporter","skin","outputShiftJis","useOriginalBones","isSkinnedMesh","console","warn","toStringsFromNumber","num","Math","abs","a","toString","indexOf","index","d","slice","p","toStringsFromArray","array","i","il","length","push","join","updateMatrixWorld","bones","skeleton","bones2","getBindBones","position","quaternion","quaternion2","matrix","name","replace","bone","bone2","userData","ik","undefined","originalMatrix","fromArray","copy","setFromMatrixPosition","setFromRotationMatrix","pArray","sub","toArray","qArray","conjugate","multiply","lines","unicodeToShiftjis","str","u2sTable","encoder","table","s2uTable","keys","Object","key","value","parseInt","code","charCodeAt","Uint8Array","poseSkin","clone","pose"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Quaternion, Matrix4 } from 'three';\nimport { CharsetEncoder } from 'mmd-parser';\n\n/**\n * Dependencies\n *  - mmd-parser https://github.com/takahirox/mmd-parser\n */\n\nclass MMDExporter {\n  constructor() {\n    _defineProperty(this, \"u2sTable\", void 0);\n  }\n\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  parseVpd(skin, outputShiftJis, useOriginalBones) {\n    if (skin.isSkinnedMesh !== true) {\n      console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\n      return null;\n    }\n\n    function toStringsFromNumber(num) {\n      if (Math.abs(num) < 1e-6) num = 0;\n      let a = num.toString();\n\n      if (a.indexOf('.') === -1) {\n        a += '.';\n      }\n\n      a += '000000';\n      const index = a.indexOf('.');\n      const d = a.slice(0, index);\n      const p = a.slice(index + 1, index + 7);\n      return d + '.' + p;\n    }\n\n    function toStringsFromArray(array) {\n      const a = [];\n\n      for (let i = 0, il = array.length; i < il; i++) {\n        a.push(toStringsFromNumber(array[i]));\n      }\n\n      return a.join(',');\n    }\n\n    skin.updateMatrixWorld(true);\n    const bones = skin.skeleton.bones;\n    const bones2 = this.getBindBones(skin);\n    const position = new Vector3();\n    const quaternion = new Quaternion();\n    const quaternion2 = new Quaternion();\n    const matrix = new Matrix4();\n    const array = [];\n    array.push('Vocaloid Pose Data file');\n    array.push('');\n    array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\n    array.push(bones.length + ';');\n    array.push('');\n\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      const bone2 = bones2[i];\n      /*\n       * use the bone matrix saved before solving IK.\n       * see CCDIKSolver for the detail.\n       */\n\n      if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\n        matrix.fromArray(bone.userData.ik.originalMatrix);\n      } else {\n        matrix.copy(bone.matrix);\n      }\n\n      position.setFromMatrixPosition(matrix);\n      quaternion.setFromRotationMatrix(matrix);\n      const pArray = position.sub(bone2.position).toArray();\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray(); // right to left\n\n      pArray[2] = -pArray[2];\n      qArray[0] = -qArray[0];\n      qArray[1] = -qArray[1];\n      array.push('Bone' + i + '{' + bone.name);\n      array.push('  ' + toStringsFromArray(pArray) + ';');\n      array.push('  ' + toStringsFromArray(qArray) + ';');\n      array.push('}');\n      array.push('');\n    }\n\n    array.push('');\n    const lines = array.join('\\n');\n    return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n  } // Unicode to Shift_JIS table\n\n\n  unicodeToShiftjis(str) {\n    if (this.u2sTable === undefined) {\n      const encoder = new CharsetEncoder(); // eslint-disable-line no-undef\n\n      const table = encoder.s2uTable;\n      this.u2sTable = {};\n      const keys = Object.keys(table);\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        let key = keys[i];\n        const value = table[key];\n        this.u2sTable[value] = parseInt(key);\n      }\n    }\n\n    const array = [];\n\n    for (let i = 0, il = str.length; i < il; i++) {\n      const code = str.charCodeAt(i);\n      const value = this.u2sTable[code];\n\n      if (value === undefined) {\n        throw 'cannot convert charcode 0x' + code.toString(16);\n      } else if (value > 0xff) {\n        array.push(value >> 8 & 0xff);\n        array.push(value & 0xff);\n      } else {\n        array.push(value & 0xff);\n      }\n    }\n\n    return new Uint8Array(array);\n  }\n\n  getBindBones(skin) {\n    // any more efficient ways?\n    const poseSkin = skin.clone();\n    poseSkin.pose();\n    return poseSkin.skeleton.bones;\n  }\n\n}\n\nexport { MMDExporter };\n"]},"metadata":{},"sourceType":"module"}