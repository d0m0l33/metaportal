{"ast":null,"code":"import { Vector4, Vector3 } from 'three';\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\n/*\n\tFinds knot vector span.\n\n\tp : degree\n\tu : parametric value\n\tU : knot vector\n\n\treturns the span\n\t*/\n\nfunction findSpan(p, u, U) {\n  const n = U.length - p - 1;\n\n  if (u >= U[n]) {\n    return n - 1;\n  }\n\n  if (u <= U[p]) {\n    return p;\n  }\n\n  let low = p;\n  let high = n;\n  let mid = Math.floor((low + high) / 2);\n\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n\n    mid = Math.floor((low + high) / 2);\n  }\n\n  return mid;\n}\n/*\n\tCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tU    : knot vector\n\n\treturns array[p+1] with basis functions values.\n\t*/\n\n\nfunction calcBasisFunctions(span, u, p, U) {\n  const N = [];\n  const left = [];\n  const right = [];\n  N[0] = 1.0;\n\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0.0;\n\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      const temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    N[j] = saved;\n  }\n\n  return N;\n}\n/*\n\tCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\n\tp : degree of B-Spline\n\tU : knot vector\n\tP : control points (x, y, z, w)\n\tu : parametric point\n\n\treturns point for given u\n\t*/\n\n\nfunction calcBSplinePoint(p, U, P, u) {\n  const span = this.findSpan(p, u, U);\n  const N = this.calcBasisFunctions(span, u, p, U);\n  const C = new Vector4(0, 0, 0, 0);\n\n  for (let j = 0; j <= p; ++j) {\n    const point = P[span - p + j];\n    const Nj = N[j];\n    const wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n\n  return C;\n}\n/*\n\tCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tn    : number of derivatives to calculate\n\tU    : knot vector\n\n\treturns array[n+1][p+1] with basis functions derivatives\n\t*/\n\n\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  const zeroArr = [];\n\n  for (let i = 0; i <= p; ++i) zeroArr[i] = 0.0;\n\n  const ders = [];\n\n  for (let i = 0; i <= n; ++i) ders[i] = zeroArr.slice(0);\n\n  const ndu = [];\n\n  for (let i = 0; i <= p; ++i) ndu[i] = zeroArr.slice(0);\n\n  ndu[0][0] = 1.0;\n  const left = zeroArr.slice(0);\n  const right = zeroArr.slice(0);\n\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0.0;\n\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      ndu[j][r] = rv + lv;\n      const temp = ndu[r][j - 1] / ndu[j][r];\n      ndu[r][j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    ndu[j][j] = saved;\n  }\n\n  for (let j = 0; j <= p; ++j) {\n    ders[0][j] = ndu[j][p];\n  }\n\n  for (let r = 0; r <= p; ++r) {\n    let s1 = 0;\n    let s2 = 1;\n    const a = [];\n\n    for (let i = 0; i <= p; ++i) {\n      a[i] = zeroArr.slice(0);\n    }\n\n    a[0][0] = 1.0;\n\n    for (let k = 1; k <= n; ++k) {\n      let d = 0.0;\n      const rk = r - k;\n      const pk = p - k;\n\n      if (r >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n\n      const j1 = rk >= -1 ? 1 : -rk;\n      const j2 = r - 1 <= pk ? k - 1 : p - r;\n\n      for (let j = j1; j <= j2; ++j) {\n        a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];\n        d += a[s2][j] * ndu[rk + j][pk];\n      }\n\n      if (r <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];\n        d += a[s2][k] * ndu[r][pk];\n      }\n\n      ders[k][r] = d;\n      var j = s1;\n      s1 = s2;\n      s2 = j;\n    }\n  }\n\n  var r = p;\n\n  for (let k = 1; k <= n; ++k) {\n    for (let j = 0; j <= p; ++j) {\n      ders[k][j] *= r;\n    }\n\n    r *= p - k;\n  }\n\n  return ders;\n}\n/*\n\t\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\t\tp  : degree\n\t\tU  : knot vector\n\t\tP  : control points\n\t\tu  : Parametric points\n\t\tnd : number of derivatives\n\n\t\treturns array[d+1] with derivatives\n\t\t*/\n\n\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  const du = nd < p ? nd : p;\n  const CK = [];\n  const span = this.findSpan(p, u, U);\n  const nders = this.calcBasisFunctionDerivatives(span, u, p, du, U);\n  const Pw = [];\n\n  for (let i = 0; i < P.length; ++i) {\n    var point = P[i].clone();\n    const w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n\n  for (let k = 0; k <= du; ++k) {\n    var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n\n    for (let j = 1; j <= p; ++j) {\n      point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n\n    CK[k] = point;\n  }\n\n  for (let k = du + 1; k <= nd + 1; ++k) {\n    CK[k] = new Vector4(0, 0, 0);\n  }\n\n  return CK;\n}\n/*\n\tCalculate \"K over I\"\n\n\treturns k!/(i!(k-i)!)\n\t*/\n\n\nfunction calcKoverI(k, i) {\n  let nom = 1;\n\n  for (let j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n\n  let denom = 1;\n\n  for (let j = 2; j <= i; ++j) {\n    denom *= j;\n  }\n\n  for (let j = 2; j <= k - i; ++j) {\n    denom *= j;\n  }\n\n  return nom / denom;\n}\n/*\n\tCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\n\tPders : result of function calcBSplineDerivatives\n\n\treturns array with derivatives for rational curve.\n\t*/\n\n\nfunction calcRationalCurveDerivatives(Pders) {\n  const nd = Pders.length;\n  const Aders = [];\n  const wders = [];\n\n  for (let i = 0; i < nd; ++i) {\n    const point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n\n  const CK = [];\n\n  for (let k = 0; k < nd; ++k) {\n    const v = Aders[k].clone();\n\n    for (let i = 1; i <= k; ++i) {\n      v.sub(CK[k - i].clone().multiplyScalar(this.calcKoverI(k, i) * wders[i]));\n    }\n\n    CK[k] = v.divideScalar(wders[0]);\n  }\n\n  return CK;\n}\n/*\n\tCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\n\tp  : degree\n\tU  : knot vector\n\tP  : control points in homogeneous space\n\tu  : parametric points\n\tnd : number of derivatives\n\n\treturns array with derivatives.\n\t*/\n\n\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  const Pders = this.calcBSplineDerivatives(p, U, P, u, nd);\n  return this.calcRationalCurveDerivatives(Pders);\n}\n/*\n\tCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\n\tp1, p2 : degrees of B-Spline surface\n\tU1, U2 : knot vectors\n\tP      : control points (x, y, z, w)\n\tu, v   : parametric values\n\n\treturns point for given (u, v)\n\t*/\n\n\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  const uspan = this.findSpan(p, u, U);\n  const vspan = this.findSpan(q, v, V);\n  const Nu = this.calcBasisFunctions(uspan, u, p, U);\n  const Nv = this.calcBasisFunctions(vspan, v, q, V);\n  const temp = [];\n\n  for (let l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n\n    for (let k = 0; k <= p; ++k) {\n      const point = P[uspan - p + k][vspan - q + l].clone();\n      const w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n\n  const Sw = new Vector4(0, 0, 0, 0);\n\n  for (let l = 0; l <= q; ++l) {\n    Sw.add(temp[l].multiplyScalar(Nv[l]));\n  }\n\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\n\nexport { calcBSplineDerivatives, calcBSplinePoint, calcBasisFunctionDerivatives, calcBasisFunctions, calcKoverI, calcNURBSDerivatives, calcRationalCurveDerivatives, calcSurfacePoint, findSpan };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/curves/NURBSUtils.js"],"names":["Vector4","Vector3","findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","C","point","Nj","wNj","w","x","y","z","calcBasisFunctionDerivatives","zeroArr","i","ders","slice","ndu","s1","s2","a","k","d","rk","pk","j1","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","clone","multiplyScalar","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,OAAjC;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACzB,QAAMC,CAAC,GAAGD,CAAC,CAACE,MAAF,GAAWJ,CAAX,GAAe,CAAzB;;AAEA,MAAIC,CAAC,IAAIC,CAAC,CAACC,CAAD,CAAV,EAAe;AACb,WAAOA,CAAC,GAAG,CAAX;AACD;;AAED,MAAIF,CAAC,IAAIC,CAAC,CAACF,CAAD,CAAV,EAAe;AACb,WAAOA,CAAP;AACD;;AAED,MAAIK,GAAG,GAAGL,CAAV;AACA,MAAIM,IAAI,GAAGH,CAAX;AACA,MAAII,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,GAAG,GAAGC,IAAP,IAAe,CAA1B,CAAV;;AAEA,SAAOL,CAAC,GAAGC,CAAC,CAACK,GAAD,CAAL,IAAcN,CAAC,IAAIC,CAAC,CAACK,GAAG,GAAG,CAAP,CAA3B,EAAsC;AACpC,QAAIN,CAAC,GAAGC,CAAC,CAACK,GAAD,CAAT,EAAgB;AACdD,MAAAA,IAAI,GAAGC,GAAP;AACD,KAFD,MAEO;AACLF,MAAAA,GAAG,GAAGE,GAAN;AACD;;AAEDA,IAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,GAAG,GAAGC,IAAP,IAAe,CAA1B,CAAN;AACD;;AAED,SAAOC,GAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,kBAAT,CAA4BC,IAA5B,EAAkCV,CAAlC,EAAqCD,CAArC,EAAwCE,CAAxC,EAA2C;AACzC,QAAMU,CAAC,GAAG,EAAV;AACA,QAAMC,IAAI,GAAG,EAAb;AACA,QAAMC,KAAK,GAAG,EAAd;AACAF,EAAAA,CAAC,CAAC,CAAD,CAAD,GAAO,GAAP;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,CAArB,EAAwB,EAAEe,CAA1B,EAA6B;AAC3BF,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUd,CAAC,GAAGC,CAAC,CAACS,IAAI,GAAG,CAAP,GAAWI,CAAZ,CAAf;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWb,CAAC,CAACS,IAAI,GAAGI,CAAR,CAAD,GAAcd,CAAzB;AACA,QAAIe,KAAK,GAAG,GAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuB,EAAEE,CAAzB,EAA4B;AAC1B,YAAMC,EAAE,GAAGJ,KAAK,CAACG,CAAC,GAAG,CAAL,CAAhB;AACA,YAAME,EAAE,GAAGN,IAAI,CAACE,CAAC,GAAGE,CAAL,CAAf;AACA,YAAMG,IAAI,GAAGR,CAAC,CAACK,CAAD,CAAD,IAAQC,EAAE,GAAGC,EAAb,CAAb;AACAP,MAAAA,CAAC,CAACK,CAAD,CAAD,GAAOD,KAAK,GAAGE,EAAE,GAAGE,IAApB;AACAJ,MAAAA,KAAK,GAAGG,EAAE,GAAGC,IAAb;AACD;;AAEDR,IAAAA,CAAC,CAACG,CAAD,CAAD,GAAOC,KAAP;AACD;;AAED,SAAOJ,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASS,gBAAT,CAA0BrB,CAA1B,EAA6BE,CAA7B,EAAgCoB,CAAhC,EAAmCrB,CAAnC,EAAsC;AACpC,QAAMU,IAAI,GAAG,KAAKZ,QAAL,CAAcC,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,CAAb;AACA,QAAMU,CAAC,GAAG,KAAKF,kBAAL,CAAwBC,IAAxB,EAA8BV,CAA9B,EAAiCD,CAAjC,EAAoCE,CAApC,CAAV;AACA,QAAMqB,CAAC,GAAG,IAAI1B,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAV;;AAEA,OAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,CAArB,EAAwB,EAAEe,CAA1B,EAA6B;AAC3B,UAAMS,KAAK,GAAGF,CAAC,CAACX,IAAI,GAAGX,CAAP,GAAWe,CAAZ,CAAf;AACA,UAAMU,EAAE,GAAGb,CAAC,CAACG,CAAD,CAAZ;AACA,UAAMW,GAAG,GAAGF,KAAK,CAACG,CAAN,GAAUF,EAAtB;AACAF,IAAAA,CAAC,CAACK,CAAF,IAAOJ,KAAK,CAACI,CAAN,GAAUF,GAAjB;AACAH,IAAAA,CAAC,CAACM,CAAF,IAAOL,KAAK,CAACK,CAAN,GAAUH,GAAjB;AACAH,IAAAA,CAAC,CAACO,CAAF,IAAON,KAAK,CAACM,CAAN,GAAUJ,GAAjB;AACAH,IAAAA,CAAC,CAACI,CAAF,IAAOH,KAAK,CAACG,CAAN,GAAUF,EAAjB;AACD;;AAED,SAAOF,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASQ,4BAAT,CAAsCpB,IAAtC,EAA4CV,CAA5C,EAA+CD,CAA/C,EAAkDG,CAAlD,EAAqDD,CAArD,EAAwD;AACtD,QAAM8B,OAAO,GAAG,EAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIjC,CAArB,EAAwB,EAAEiC,CAA1B,EAA6BD,OAAO,CAACC,CAAD,CAAP,GAAa,GAAb;;AAE7B,QAAMC,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI9B,CAArB,EAAwB,EAAE8B,CAA1B,EAA6BC,IAAI,CAACD,CAAD,CAAJ,GAAUD,OAAO,CAACG,KAAR,CAAc,CAAd,CAAV;;AAE7B,QAAMC,GAAG,GAAG,EAAZ;;AAEA,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIjC,CAArB,EAAwB,EAAEiC,CAA1B,EAA6BG,GAAG,CAACH,CAAD,CAAH,GAASD,OAAO,CAACG,KAAR,CAAc,CAAd,CAAT;;AAE7BC,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAY,GAAZ;AACA,QAAMvB,IAAI,GAAGmB,OAAO,CAACG,KAAR,CAAc,CAAd,CAAb;AACA,QAAMrB,KAAK,GAAGkB,OAAO,CAACG,KAAR,CAAc,CAAd,CAAd;;AAEA,OAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,CAArB,EAAwB,EAAEe,CAA1B,EAA6B;AAC3BF,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUd,CAAC,GAAGC,CAAC,CAACS,IAAI,GAAG,CAAP,GAAWI,CAAZ,CAAf;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWb,CAAC,CAACS,IAAI,GAAGI,CAAR,CAAD,GAAcd,CAAzB;AACA,QAAIe,KAAK,GAAG,GAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuB,EAAEE,CAAzB,EAA4B;AAC1B,YAAMC,EAAE,GAAGJ,KAAK,CAACG,CAAC,GAAG,CAAL,CAAhB;AACA,YAAME,EAAE,GAAGN,IAAI,CAACE,CAAC,GAAGE,CAAL,CAAf;AACAmB,MAAAA,GAAG,CAACrB,CAAD,CAAH,CAAOE,CAAP,IAAYC,EAAE,GAAGC,EAAjB;AACA,YAAMC,IAAI,GAAGgB,GAAG,CAACnB,CAAD,CAAH,CAAOF,CAAC,GAAG,CAAX,IAAgBqB,GAAG,CAACrB,CAAD,CAAH,CAAOE,CAAP,CAA7B;AACAmB,MAAAA,GAAG,CAACnB,CAAD,CAAH,CAAOF,CAAP,IAAYC,KAAK,GAAGE,EAAE,GAAGE,IAAzB;AACAJ,MAAAA,KAAK,GAAGG,EAAE,GAAGC,IAAb;AACD;;AAEDgB,IAAAA,GAAG,CAACrB,CAAD,CAAH,CAAOA,CAAP,IAAYC,KAAZ;AACD;;AAED,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,CAArB,EAAwB,EAAEe,CAA1B,EAA6B;AAC3BmB,IAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQnB,CAAR,IAAaqB,GAAG,CAACrB,CAAD,CAAH,CAAOf,CAAP,CAAb;AACD;;AAED,OAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIjB,CAArB,EAAwB,EAAEiB,CAA1B,EAA6B;AAC3B,QAAIoB,EAAE,GAAG,CAAT;AACA,QAAIC,EAAE,GAAG,CAAT;AACA,UAAMC,CAAC,GAAG,EAAV;;AAEA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIjC,CAArB,EAAwB,EAAEiC,CAA1B,EAA6B;AAC3BM,MAAAA,CAAC,CAACN,CAAD,CAAD,GAAOD,OAAO,CAACG,KAAR,CAAc,CAAd,CAAP;AACD;;AAEDI,IAAAA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAU,GAAV;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIrC,CAArB,EAAwB,EAAEqC,CAA1B,EAA6B;AAC3B,UAAIC,CAAC,GAAG,GAAR;AACA,YAAMC,EAAE,GAAGzB,CAAC,GAAGuB,CAAf;AACA,YAAMG,EAAE,GAAG3C,CAAC,GAAGwC,CAAf;;AAEA,UAAIvB,CAAC,IAAIuB,CAAT,EAAY;AACVD,QAAAA,CAAC,CAACD,EAAD,CAAD,CAAM,CAAN,IAAWC,CAAC,CAACF,EAAD,CAAD,CAAM,CAAN,IAAWD,GAAG,CAACO,EAAE,GAAG,CAAN,CAAH,CAAYD,EAAZ,CAAtB;AACAD,QAAAA,CAAC,GAAGF,CAAC,CAACD,EAAD,CAAD,CAAM,CAAN,IAAWF,GAAG,CAACM,EAAD,CAAH,CAAQC,EAAR,CAAf;AACD;;AAED,YAAMC,EAAE,GAAGF,EAAE,IAAI,CAAC,CAAP,GAAW,CAAX,GAAe,CAACA,EAA3B;AACA,YAAMG,EAAE,GAAG5B,CAAC,GAAG,CAAJ,IAAS0B,EAAT,GAAcH,CAAC,GAAG,CAAlB,GAAsBxC,CAAC,GAAGiB,CAArC;;AAEA,WAAK,IAAIF,CAAC,GAAG6B,EAAb,EAAiB7B,CAAC,IAAI8B,EAAtB,EAA0B,EAAE9B,CAA5B,EAA+B;AAC7BwB,QAAAA,CAAC,CAACD,EAAD,CAAD,CAAMvB,CAAN,IAAW,CAACwB,CAAC,CAACF,EAAD,CAAD,CAAMtB,CAAN,IAAWwB,CAAC,CAACF,EAAD,CAAD,CAAMtB,CAAC,GAAG,CAAV,CAAZ,IAA4BqB,GAAG,CAACO,EAAE,GAAG,CAAN,CAAH,CAAYD,EAAE,GAAG3B,CAAjB,CAAvC;AACA0B,QAAAA,CAAC,IAAIF,CAAC,CAACD,EAAD,CAAD,CAAMvB,CAAN,IAAWqB,GAAG,CAACM,EAAE,GAAG3B,CAAN,CAAH,CAAY4B,EAAZ,CAAhB;AACD;;AAED,UAAI1B,CAAC,IAAI0B,EAAT,EAAa;AACXJ,QAAAA,CAAC,CAACD,EAAD,CAAD,CAAME,CAAN,IAAW,CAACD,CAAC,CAACF,EAAD,CAAD,CAAMG,CAAC,GAAG,CAAV,CAAD,GAAgBJ,GAAG,CAACO,EAAE,GAAG,CAAN,CAAH,CAAY1B,CAAZ,CAA3B;AACAwB,QAAAA,CAAC,IAAIF,CAAC,CAACD,EAAD,CAAD,CAAME,CAAN,IAAWJ,GAAG,CAACnB,CAAD,CAAH,CAAO0B,EAAP,CAAhB;AACD;;AAEDT,MAAAA,IAAI,CAACM,CAAD,CAAJ,CAAQvB,CAAR,IAAawB,CAAb;AACA,UAAI1B,CAAC,GAAGsB,EAAR;AACAA,MAAAA,EAAE,GAAGC,EAAL;AACAA,MAAAA,EAAE,GAAGvB,CAAL;AACD;AACF;;AAED,MAAIE,CAAC,GAAGjB,CAAR;;AAEA,OAAK,IAAIwC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIrC,CAArB,EAAwB,EAAEqC,CAA1B,EAA6B;AAC3B,SAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,CAArB,EAAwB,EAAEe,CAA1B,EAA6B;AAC3BmB,MAAAA,IAAI,CAACM,CAAD,CAAJ,CAAQzB,CAAR,KAAcE,CAAd;AACD;;AAEDA,IAAAA,CAAC,IAAIjB,CAAC,GAAGwC,CAAT;AACD;;AAED,SAAON,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASY,sBAAT,CAAgC9C,CAAhC,EAAmCE,CAAnC,EAAsCoB,CAAtC,EAAyCrB,CAAzC,EAA4C8C,EAA5C,EAAgD;AAC9C,QAAMC,EAAE,GAAGD,EAAE,GAAG/C,CAAL,GAAS+C,EAAT,GAAc/C,CAAzB;AACA,QAAMiD,EAAE,GAAG,EAAX;AACA,QAAMtC,IAAI,GAAG,KAAKZ,QAAL,CAAcC,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,CAAb;AACA,QAAMgD,KAAK,GAAG,KAAKnB,4BAAL,CAAkCpB,IAAlC,EAAwCV,CAAxC,EAA2CD,CAA3C,EAA8CgD,EAA9C,EAAkD9C,CAAlD,CAAd;AACA,QAAMiD,EAAE,GAAG,EAAX;;AAEA,OAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,CAAC,CAAClB,MAAtB,EAA8B,EAAE6B,CAAhC,EAAmC;AACjC,QAAIT,KAAK,GAAGF,CAAC,CAACW,CAAD,CAAD,CAAKmB,KAAL,EAAZ;AACA,UAAMzB,CAAC,GAAGH,KAAK,CAACG,CAAhB;AACAH,IAAAA,KAAK,CAACI,CAAN,IAAWD,CAAX;AACAH,IAAAA,KAAK,CAACK,CAAN,IAAWF,CAAX;AACAH,IAAAA,KAAK,CAACM,CAAN,IAAWH,CAAX;AACAwB,IAAAA,EAAE,CAAClB,CAAD,CAAF,GAAQT,KAAR;AACD;;AAED,OAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIQ,EAArB,EAAyB,EAAER,CAA3B,EAA8B;AAC5B,QAAIhB,KAAK,GAAG2B,EAAE,CAACxC,IAAI,GAAGX,CAAR,CAAF,CAAaoD,KAAb,GAAqBC,cAArB,CAAoCH,KAAK,CAACV,CAAD,CAAL,CAAS,CAAT,CAApC,CAAZ;;AAEA,SAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,CAArB,EAAwB,EAAEe,CAA1B,EAA6B;AAC3BS,MAAAA,KAAK,CAAC8B,GAAN,CAAUH,EAAE,CAACxC,IAAI,GAAGX,CAAP,GAAWe,CAAZ,CAAF,CAAiBqC,KAAjB,GAAyBC,cAAzB,CAAwCH,KAAK,CAACV,CAAD,CAAL,CAASzB,CAAT,CAAxC,CAAV;AACD;;AAEDkC,IAAAA,EAAE,CAACT,CAAD,CAAF,GAAQhB,KAAR;AACD;;AAED,OAAK,IAAIgB,CAAC,GAAGQ,EAAE,GAAG,CAAlB,EAAqBR,CAAC,IAAIO,EAAE,GAAG,CAA/B,EAAkC,EAAEP,CAApC,EAAuC;AACrCS,IAAAA,EAAE,CAACT,CAAD,CAAF,GAAQ,IAAI3C,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAR;AACD;;AAED,SAAOoD,EAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAEA,SAASM,UAAT,CAAoBf,CAApB,EAAuBP,CAAvB,EAA0B;AACxB,MAAIuB,GAAG,GAAG,CAAV;;AAEA,OAAK,IAAIzC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIyB,CAArB,EAAwB,EAAEzB,CAA1B,EAA6B;AAC3ByC,IAAAA,GAAG,IAAIzC,CAAP;AACD;;AAED,MAAI0C,KAAK,GAAG,CAAZ;;AAEA,OAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIkB,CAArB,EAAwB,EAAElB,CAA1B,EAA6B;AAC3B0C,IAAAA,KAAK,IAAI1C,CAAT;AACD;;AAED,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIyB,CAAC,GAAGP,CAAzB,EAA4B,EAAElB,CAA9B,EAAiC;AAC/B0C,IAAAA,KAAK,IAAI1C,CAAT;AACD;;AAED,SAAOyC,GAAG,GAAGC,KAAb;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,4BAAT,CAAsCC,KAAtC,EAA6C;AAC3C,QAAMZ,EAAE,GAAGY,KAAK,CAACvD,MAAjB;AACA,QAAMwD,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAI5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,EAApB,EAAwB,EAAEd,CAA1B,EAA6B;AAC3B,UAAMT,KAAK,GAAGmC,KAAK,CAAC1B,CAAD,CAAnB;AACA2B,IAAAA,KAAK,CAAC3B,CAAD,CAAL,GAAW,IAAInC,OAAJ,CAAY0B,KAAK,CAACI,CAAlB,EAAqBJ,KAAK,CAACK,CAA3B,EAA8BL,KAAK,CAACM,CAApC,CAAX;AACA+B,IAAAA,KAAK,CAAC5B,CAAD,CAAL,GAAWT,KAAK,CAACG,CAAjB;AACD;;AAED,QAAMsB,EAAE,GAAG,EAAX;;AAEA,OAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,EAApB,EAAwB,EAAEP,CAA1B,EAA6B;AAC3B,UAAMsB,CAAC,GAAGF,KAAK,CAACpB,CAAD,CAAL,CAASY,KAAT,EAAV;;AAEA,SAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIO,CAArB,EAAwB,EAAEP,CAA1B,EAA6B;AAC3B6B,MAAAA,CAAC,CAACC,GAAF,CAAMd,EAAE,CAACT,CAAC,GAAGP,CAAL,CAAF,CAAUmB,KAAV,GAAkBC,cAAlB,CAAiC,KAAKE,UAAL,CAAgBf,CAAhB,EAAmBP,CAAnB,IAAwB4B,KAAK,CAAC5B,CAAD,CAA9D,CAAN;AACD;;AAEDgB,IAAAA,EAAE,CAACT,CAAD,CAAF,GAAQsB,CAAC,CAACE,YAAF,CAAeH,KAAK,CAAC,CAAD,CAApB,CAAR;AACD;;AAED,SAAOZ,EAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASgB,oBAAT,CAA8BjE,CAA9B,EAAiCE,CAAjC,EAAoCoB,CAApC,EAAuCrB,CAAvC,EAA0C8C,EAA1C,EAA8C;AAC5C,QAAMY,KAAK,GAAG,KAAKb,sBAAL,CAA4B9C,CAA5B,EAA+BE,CAA/B,EAAkCoB,CAAlC,EAAqCrB,CAArC,EAAwC8C,EAAxC,CAAd;AACA,SAAO,KAAKW,4BAAL,CAAkCC,KAAlC,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASO,gBAAT,CAA0BlE,CAA1B,EAA6BmE,CAA7B,EAAgCjE,CAAhC,EAAmCkE,CAAnC,EAAsC9C,CAAtC,EAAyCrB,CAAzC,EAA4C6D,CAA5C,EAA+CO,MAA/C,EAAuD;AACrD,QAAMC,KAAK,GAAG,KAAKvE,QAAL,CAAcC,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,CAAd;AACA,QAAMqE,KAAK,GAAG,KAAKxE,QAAL,CAAcoE,CAAd,EAAiBL,CAAjB,EAAoBM,CAApB,CAAd;AACA,QAAMI,EAAE,GAAG,KAAK9D,kBAAL,CAAwB4D,KAAxB,EAA+BrE,CAA/B,EAAkCD,CAAlC,EAAqCE,CAArC,CAAX;AACA,QAAMuE,EAAE,GAAG,KAAK/D,kBAAL,CAAwB6D,KAAxB,EAA+BT,CAA/B,EAAkCK,CAAlC,EAAqCC,CAArC,CAAX;AACA,QAAMhD,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIsD,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,CAArB,EAAwB,EAAEO,CAA1B,EAA6B;AAC3BtD,IAAAA,IAAI,CAACsD,CAAD,CAAJ,GAAU,IAAI7E,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAV;;AAEA,SAAK,IAAI2C,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIxC,CAArB,EAAwB,EAAEwC,CAA1B,EAA6B;AAC3B,YAAMhB,KAAK,GAAGF,CAAC,CAACgD,KAAK,GAAGtE,CAAR,GAAYwC,CAAb,CAAD,CAAiB+B,KAAK,GAAGJ,CAAR,GAAYO,CAA7B,EAAgCtB,KAAhC,EAAd;AACA,YAAMzB,CAAC,GAAGH,KAAK,CAACG,CAAhB;AACAH,MAAAA,KAAK,CAACI,CAAN,IAAWD,CAAX;AACAH,MAAAA,KAAK,CAACK,CAAN,IAAWF,CAAX;AACAH,MAAAA,KAAK,CAACM,CAAN,IAAWH,CAAX;AACAP,MAAAA,IAAI,CAACsD,CAAD,CAAJ,CAAQpB,GAAR,CAAY9B,KAAK,CAAC6B,cAAN,CAAqBmB,EAAE,CAAChC,CAAD,CAAvB,CAAZ;AACD;AACF;;AAED,QAAMmC,EAAE,GAAG,IAAI9E,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAX;;AAEA,OAAK,IAAI6E,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,CAArB,EAAwB,EAAEO,CAA1B,EAA6B;AAC3BC,IAAAA,EAAE,CAACrB,GAAH,CAAOlC,IAAI,CAACsD,CAAD,CAAJ,CAAQrB,cAAR,CAAuBoB,EAAE,CAACC,CAAD,CAAzB,CAAP;AACD;;AAEDC,EAAAA,EAAE,CAACX,YAAH,CAAgBW,EAAE,CAAChD,CAAnB;AACA0C,EAAAA,MAAM,CAACO,GAAP,CAAWD,EAAE,CAAC/C,CAAd,EAAiB+C,EAAE,CAAC9C,CAApB,EAAuB8C,EAAE,CAAC7C,CAA1B;AACD;;AAED,SAASgB,sBAAT,EAAiCzB,gBAAjC,EAAmDU,4BAAnD,EAAiFrB,kBAAjF,EAAqG6C,UAArG,EAAiHU,oBAAjH,EAAuIP,4BAAvI,EAAqKQ,gBAArK,EAAuLnE,QAAvL","sourcesContent":["import { Vector4, Vector3 } from 'three';\n\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\n/*\n\tFinds knot vector span.\n\n\tp : degree\n\tu : parametric value\n\tU : knot vector\n\n\treturns the span\n\t*/\n\nfunction findSpan(p, u, U) {\n  const n = U.length - p - 1;\n\n  if (u >= U[n]) {\n    return n - 1;\n  }\n\n  if (u <= U[p]) {\n    return p;\n  }\n\n  let low = p;\n  let high = n;\n  let mid = Math.floor((low + high) / 2);\n\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n\n    mid = Math.floor((low + high) / 2);\n  }\n\n  return mid;\n}\n/*\n\tCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tU    : knot vector\n\n\treturns array[p+1] with basis functions values.\n\t*/\n\nfunction calcBasisFunctions(span, u, p, U) {\n  const N = [];\n  const left = [];\n  const right = [];\n  N[0] = 1.0;\n\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0.0;\n\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      const temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    N[j] = saved;\n  }\n\n  return N;\n}\n/*\n\tCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\n\tp : degree of B-Spline\n\tU : knot vector\n\tP : control points (x, y, z, w)\n\tu : parametric point\n\n\treturns point for given u\n\t*/\n\nfunction calcBSplinePoint(p, U, P, u) {\n  const span = this.findSpan(p, u, U);\n  const N = this.calcBasisFunctions(span, u, p, U);\n  const C = new Vector4(0, 0, 0, 0);\n\n  for (let j = 0; j <= p; ++j) {\n    const point = P[span - p + j];\n    const Nj = N[j];\n    const wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n\n  return C;\n}\n/*\n\tCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tn    : number of derivatives to calculate\n\tU    : knot vector\n\n\treturns array[n+1][p+1] with basis functions derivatives\n\t*/\n\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  const zeroArr = [];\n\n  for (let i = 0; i <= p; ++i) zeroArr[i] = 0.0;\n\n  const ders = [];\n\n  for (let i = 0; i <= n; ++i) ders[i] = zeroArr.slice(0);\n\n  const ndu = [];\n\n  for (let i = 0; i <= p; ++i) ndu[i] = zeroArr.slice(0);\n\n  ndu[0][0] = 1.0;\n  const left = zeroArr.slice(0);\n  const right = zeroArr.slice(0);\n\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0.0;\n\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      ndu[j][r] = rv + lv;\n      const temp = ndu[r][j - 1] / ndu[j][r];\n      ndu[r][j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    ndu[j][j] = saved;\n  }\n\n  for (let j = 0; j <= p; ++j) {\n    ders[0][j] = ndu[j][p];\n  }\n\n  for (let r = 0; r <= p; ++r) {\n    let s1 = 0;\n    let s2 = 1;\n    const a = [];\n\n    for (let i = 0; i <= p; ++i) {\n      a[i] = zeroArr.slice(0);\n    }\n\n    a[0][0] = 1.0;\n\n    for (let k = 1; k <= n; ++k) {\n      let d = 0.0;\n      const rk = r - k;\n      const pk = p - k;\n\n      if (r >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n\n      const j1 = rk >= -1 ? 1 : -rk;\n      const j2 = r - 1 <= pk ? k - 1 : p - r;\n\n      for (let j = j1; j <= j2; ++j) {\n        a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];\n        d += a[s2][j] * ndu[rk + j][pk];\n      }\n\n      if (r <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];\n        d += a[s2][k] * ndu[r][pk];\n      }\n\n      ders[k][r] = d;\n      var j = s1;\n      s1 = s2;\n      s2 = j;\n    }\n  }\n\n  var r = p;\n\n  for (let k = 1; k <= n; ++k) {\n    for (let j = 0; j <= p; ++j) {\n      ders[k][j] *= r;\n    }\n\n    r *= p - k;\n  }\n\n  return ders;\n}\n/*\n\t\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\t\tp  : degree\n\t\tU  : knot vector\n\t\tP  : control points\n\t\tu  : Parametric points\n\t\tnd : number of derivatives\n\n\t\treturns array[d+1] with derivatives\n\t\t*/\n\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  const du = nd < p ? nd : p;\n  const CK = [];\n  const span = this.findSpan(p, u, U);\n  const nders = this.calcBasisFunctionDerivatives(span, u, p, du, U);\n  const Pw = [];\n\n  for (let i = 0; i < P.length; ++i) {\n    var point = P[i].clone();\n    const w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n\n  for (let k = 0; k <= du; ++k) {\n    var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n\n    for (let j = 1; j <= p; ++j) {\n      point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n\n    CK[k] = point;\n  }\n\n  for (let k = du + 1; k <= nd + 1; ++k) {\n    CK[k] = new Vector4(0, 0, 0);\n  }\n\n  return CK;\n}\n/*\n\tCalculate \"K over I\"\n\n\treturns k!/(i!(k-i)!)\n\t*/\n\nfunction calcKoverI(k, i) {\n  let nom = 1;\n\n  for (let j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n\n  let denom = 1;\n\n  for (let j = 2; j <= i; ++j) {\n    denom *= j;\n  }\n\n  for (let j = 2; j <= k - i; ++j) {\n    denom *= j;\n  }\n\n  return nom / denom;\n}\n/*\n\tCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\n\tPders : result of function calcBSplineDerivatives\n\n\treturns array with derivatives for rational curve.\n\t*/\n\nfunction calcRationalCurveDerivatives(Pders) {\n  const nd = Pders.length;\n  const Aders = [];\n  const wders = [];\n\n  for (let i = 0; i < nd; ++i) {\n    const point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n\n  const CK = [];\n\n  for (let k = 0; k < nd; ++k) {\n    const v = Aders[k].clone();\n\n    for (let i = 1; i <= k; ++i) {\n      v.sub(CK[k - i].clone().multiplyScalar(this.calcKoverI(k, i) * wders[i]));\n    }\n\n    CK[k] = v.divideScalar(wders[0]);\n  }\n\n  return CK;\n}\n/*\n\tCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\n\tp  : degree\n\tU  : knot vector\n\tP  : control points in homogeneous space\n\tu  : parametric points\n\tnd : number of derivatives\n\n\treturns array with derivatives.\n\t*/\n\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  const Pders = this.calcBSplineDerivatives(p, U, P, u, nd);\n  return this.calcRationalCurveDerivatives(Pders);\n}\n/*\n\tCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\n\tp1, p2 : degrees of B-Spline surface\n\tU1, U2 : knot vectors\n\tP      : control points (x, y, z, w)\n\tu, v   : parametric values\n\n\treturns point for given (u, v)\n\t*/\n\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  const uspan = this.findSpan(p, u, U);\n  const vspan = this.findSpan(q, v, V);\n  const Nu = this.calcBasisFunctions(uspan, u, p, U);\n  const Nv = this.calcBasisFunctions(vspan, v, q, V);\n  const temp = [];\n\n  for (let l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n\n    for (let k = 0; k <= p; ++k) {\n      const point = P[uspan - p + k][vspan - q + l].clone();\n      const w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n\n  const Sw = new Vector4(0, 0, 0, 0);\n\n  for (let l = 0; l <= q; ++l) {\n    Sw.add(temp[l].multiplyScalar(Nv[l]));\n  }\n\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\n\nexport { calcBSplineDerivatives, calcBSplinePoint, calcBasisFunctionDerivatives, calcBasisFunctions, calcKoverI, calcNURBSDerivatives, calcRationalCurveDerivatives, calcSurfacePoint, findSpan };\n"]},"metadata":{},"sourceType":"module"}