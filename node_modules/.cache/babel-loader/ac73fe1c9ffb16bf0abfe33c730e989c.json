{"ast":null,"code":"import { ShaderPass } from './ShaderPass.js';\nconst LUTShader = {\n  defines: {\n    USE_3DTEXTURE: 1\n  },\n  uniforms: {\n    lut3d: {\n      value: null\n    },\n    lut: {\n      value: null\n    },\n    lutSize: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    intensity: {\n      value: 1.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n  fragmentShader:\n  /* glsl */\n  `\n\t\tprecision highp sampler3D;\n\n\t\tuniform float lutSize;\n\t\t#if USE_3DTEXTURE\n\t\tuniform sampler3D lut3d;\n\t\t#else\n\t\tuniform sampler2D lut;\n\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\n\n\t\t\tfloat sliceHeight = 1.0 / size;\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\n\n\t\t\t// Get the slices on either side of the sample\n\t\t\tfloat slice = rgb.b * size;\n\t\t\tfloat interp = fract( slice );\n\t\t\tfloat slice0 = slice - interp;\n\t\t\tfloat centeredInterp = interp - 0.5;\n\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\n\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\n\t\t\t// bleeding from adjacent slices.\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\n\n\t\t\tvec2 uv0 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice0 * sliceHeight + greenOffset\n\t\t\t);\n\t\t\tvec2 uv1 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice1 * sliceHeight + greenOffset\n\t\t\t);\n\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\n\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\n\n\t\t}\n\t\t#endif\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\t\t\t#if USE_3DTEXTURE\n\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\n\n\t\t\t#else\n\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`\n};\n\nclass LUTPass extends ShaderPass {\n  set lut(v) {\n    const material = this.material;\n\n    if (v !== this.lut) {\n      material.uniforms.lut3d.value = null;\n      material.uniforms.lut.value = null;\n\n      if (v) {\n        const is3dTextureDefine = v.isDataTexture3D ? 1 : 0;\n\n        if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n          material.defines.USE_3DTEXTURE = is3dTextureDefine;\n          material.needsUpdate = true;\n        }\n\n        material.uniforms.lutSize.value = v.image.width;\n\n        if (v.isDataTexture3D) {\n          material.uniforms.lut3d.value = v;\n        } else {\n          material.uniforms.lut.value = v;\n        }\n      }\n    }\n  }\n\n  get lut() {\n    return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n  }\n\n  set intensity(v) {\n    this.material.uniforms.intensity.value = v;\n  }\n\n  get intensity() {\n    return this.material.uniforms.intensity.value;\n  }\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(LUTShader);\n    this.lut = options.lut || null;\n    this.intensity = 'intensity' in options ? options.intensity : 1;\n  }\n\n}\n\nexport { LUTPass };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/postprocessing/LUTPass.js"],"names":["ShaderPass","LUTShader","defines","USE_3DTEXTURE","uniforms","lut3d","value","lut","lutSize","tDiffuse","intensity","vertexShader","fragmentShader","LUTPass","v","material","is3dTextureDefine","isDataTexture3D","needsUpdate","image","width","constructor","options"],"mappings":"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","sourcesContent":["import { ShaderPass } from './ShaderPass.js';\n\nconst LUTShader = {\n  defines: {\n    USE_3DTEXTURE: 1\n  },\n  uniforms: {\n    lut3d: {\n      value: null\n    },\n    lut: {\n      value: null\n    },\n    lutSize: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    intensity: {\n      value: 1.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n  fragmentShader:\n  /* glsl */\n  `\n\t\tprecision highp sampler3D;\n\n\t\tuniform float lutSize;\n\t\t#if USE_3DTEXTURE\n\t\tuniform sampler3D lut3d;\n\t\t#else\n\t\tuniform sampler2D lut;\n\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\n\n\t\t\tfloat sliceHeight = 1.0 / size;\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\n\n\t\t\t// Get the slices on either side of the sample\n\t\t\tfloat slice = rgb.b * size;\n\t\t\tfloat interp = fract( slice );\n\t\t\tfloat slice0 = slice - interp;\n\t\t\tfloat centeredInterp = interp - 0.5;\n\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\n\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\n\t\t\t// bleeding from adjacent slices.\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\n\n\t\t\tvec2 uv0 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice0 * sliceHeight + greenOffset\n\t\t\t);\n\t\t\tvec2 uv1 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice1 * sliceHeight + greenOffset\n\t\t\t);\n\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\n\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\n\n\t\t}\n\t\t#endif\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\t\t\t#if USE_3DTEXTURE\n\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\n\n\t\t\t#else\n\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`\n};\n\nclass LUTPass extends ShaderPass {\n  set lut(v) {\n    const material = this.material;\n\n    if (v !== this.lut) {\n      material.uniforms.lut3d.value = null;\n      material.uniforms.lut.value = null;\n\n      if (v) {\n        const is3dTextureDefine = v.isDataTexture3D ? 1 : 0;\n\n        if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n          material.defines.USE_3DTEXTURE = is3dTextureDefine;\n          material.needsUpdate = true;\n        }\n\n        material.uniforms.lutSize.value = v.image.width;\n\n        if (v.isDataTexture3D) {\n          material.uniforms.lut3d.value = v;\n        } else {\n          material.uniforms.lut.value = v;\n        }\n      }\n    }\n  }\n\n  get lut() {\n    return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n  }\n\n  set intensity(v) {\n    this.material.uniforms.intensity.value = v;\n  }\n\n  get intensity() {\n    return this.material.uniforms.intensity.value;\n  }\n\n  constructor(options = {}) {\n    super(LUTShader);\n    this.lut = options.lut || null;\n    this.intensity = 'intensity' in options ? options.intensity : 1;\n  }\n\n}\n\nexport { LUTPass };\n"]},"metadata":{},"sourceType":"module"}