{"ast":null,"code":"import { BufferAttribute } from 'three';\nimport { MeshBVHNode } from './MeshBVHNode.js';\nimport { getLongestEdgeIndex, computeSurfaceArea, copyBounds, unionBounds } from '../utils/ArrayBoxUtilities.js';\nimport { CENTER, AVERAGE, SAH, TRIANGLE_INTERSECT_COST, TRAVERSAL_COST, BYTES_PER_NODE, FLOAT32_EPSILON, IS_LEAFNODE_FLAG } from './Constants.js';\n\nfunction ensureIndex(geo, options) {\n  if (!geo.index) {\n    const vertexCount = geo.attributes.position.count;\n    const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n    let index;\n\n    if (vertexCount > 65535) {\n      index = new Uint32Array(new BufferConstructor(4 * vertexCount));\n    } else {\n      index = new Uint16Array(new BufferConstructor(2 * vertexCount));\n    }\n\n    geo.setIndex(new BufferAttribute(index, 1));\n\n    for (let i = 0; i < vertexCount; i++) {\n      index[i] = i;\n    }\n  }\n} // Computes the set of { offset, count } ranges which need independent BVH roots. Each\n// region in the geometry index that belongs to a different set of material groups requires\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\n// with triangle indices belongs to another group. For example, if the groups were like this:\n//\n// [-------------------------------------------------------------]\n// |__________________|\n//   g0 = [0, 20]  |______________________||_____________________|\n//                      g1 = [16, 40]           g2 = [41, 60]\n//\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\n\n\nfunction getRootIndexRanges(geo) {\n  if (!geo.groups || !geo.groups.length) {\n    return [{\n      offset: 0,\n      count: geo.index.count / 3\n    }];\n  }\n\n  const ranges = [];\n  const rangeBoundaries = new Set();\n\n  for (const group of geo.groups) {\n    rangeBoundaries.add(group.start);\n    rangeBoundaries.add(group.start + group.count);\n  } // note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n\n\n  const sortedBoundaries = Array.from(rangeBoundaries.values()).sort((a, b) => a - b);\n\n  for (let i = 0; i < sortedBoundaries.length - 1; i++) {\n    const start = sortedBoundaries[i],\n          end = sortedBoundaries[i + 1];\n    ranges.push({\n      offset: start / 3,\n      count: (end - start) / 3\n    });\n  }\n\n  return ranges;\n} // computes the union of the bounds of all of the given triangles and puts the resulting box in target. If\n// centroidTarget is provided then a bounding box is computed for the centroids of the triangles, as well.\n// These are computed together to avoid redundant accesses to bounds array.\n\n\nfunction getBounds(triangleBounds, offset, count, target) {\n  let centroidTarget = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  let minx = Infinity;\n  let miny = Infinity;\n  let minz = Infinity;\n  let maxx = -Infinity;\n  let maxy = -Infinity;\n  let maxz = -Infinity;\n  let cminx = Infinity;\n  let cminy = Infinity;\n  let cminz = Infinity;\n  let cmaxx = -Infinity;\n  let cmaxy = -Infinity;\n  let cmaxz = -Infinity;\n  const includeCentroid = centroidTarget !== null;\n\n  for (let i = offset * 6, end = (offset + count) * 6; i < end; i += 6) {\n    const cx = triangleBounds[i + 0];\n    const hx = triangleBounds[i + 1];\n    const lx = cx - hx;\n    const rx = cx + hx;\n    if (lx < minx) minx = lx;\n    if (rx > maxx) maxx = rx;\n    if (includeCentroid && cx < cminx) cminx = cx;\n    if (includeCentroid && cx > cmaxx) cmaxx = cx;\n    const cy = triangleBounds[i + 2];\n    const hy = triangleBounds[i + 3];\n    const ly = cy - hy;\n    const ry = cy + hy;\n    if (ly < miny) miny = ly;\n    if (ry > maxy) maxy = ry;\n    if (includeCentroid && cy < cminy) cminy = cy;\n    if (includeCentroid && cy > cmaxy) cmaxy = cy;\n    const cz = triangleBounds[i + 4];\n    const hz = triangleBounds[i + 5];\n    const lz = cz - hz;\n    const rz = cz + hz;\n    if (lz < minz) minz = lz;\n    if (rz > maxz) maxz = rz;\n    if (includeCentroid && cz < cminz) cminz = cz;\n    if (includeCentroid && cz > cmaxz) cmaxz = cz;\n  }\n\n  target[0] = minx;\n  target[1] = miny;\n  target[2] = minz;\n  target[3] = maxx;\n  target[4] = maxy;\n  target[5] = maxz;\n\n  if (includeCentroid) {\n    centroidTarget[0] = cminx;\n    centroidTarget[1] = cminy;\n    centroidTarget[2] = cminz;\n    centroidTarget[3] = cmaxx;\n    centroidTarget[4] = cmaxy;\n    centroidTarget[5] = cmaxz;\n  }\n} // A stand alone function for retrieving the centroid bounds.\n\n\nfunction getCentroidBounds(triangleBounds, offset, count, centroidTarget) {\n  let cminx = Infinity;\n  let cminy = Infinity;\n  let cminz = Infinity;\n  let cmaxx = -Infinity;\n  let cmaxy = -Infinity;\n  let cmaxz = -Infinity;\n\n  for (let i = offset * 6, end = (offset + count) * 6; i < end; i += 6) {\n    const cx = triangleBounds[i + 0];\n    if (cx < cminx) cminx = cx;\n    if (cx > cmaxx) cmaxx = cx;\n    const cy = triangleBounds[i + 2];\n    if (cy < cminy) cminy = cy;\n    if (cy > cmaxy) cmaxy = cy;\n    const cz = triangleBounds[i + 4];\n    if (cz < cminz) cminz = cz;\n    if (cz > cmaxz) cmaxz = cz;\n  }\n\n  centroidTarget[0] = cminx;\n  centroidTarget[1] = cminy;\n  centroidTarget[2] = cminz;\n  centroidTarget[3] = cmaxx;\n  centroidTarget[4] = cmaxy;\n  centroidTarget[5] = cmaxz;\n} // reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\n\n\nfunction partition(index, triangleBounds, offset, count, split) {\n  let left = offset;\n  let right = offset + count - 1;\n  const pos = split.pos;\n  const axisOffset = split.axis * 2; // hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\n  while (true) {\n    while (left <= right && triangleBounds[left * 6 + axisOffset] < pos) {\n      left++;\n    } // if a triangle center lies on the partition plane it is considered to be on the right side\n\n\n    while (left <= right && triangleBounds[right * 6 + axisOffset] >= pos) {\n      right--;\n    }\n\n    if (left < right) {\n      // we need to swap all of the information associated with the triangles at index\n      // left and right; that's the verts in the geometry index, the bounds,\n      // and perhaps the SAH planes\n      for (let i = 0; i < 3; i++) {\n        let t0 = index[left * 3 + i];\n        index[left * 3 + i] = index[right * 3 + i];\n        index[right * 3 + i] = t0;\n        let t1 = triangleBounds[left * 6 + i * 2 + 0];\n        triangleBounds[left * 6 + i * 2 + 0] = triangleBounds[right * 6 + i * 2 + 0];\n        triangleBounds[right * 6 + i * 2 + 0] = t1;\n        let t2 = triangleBounds[left * 6 + i * 2 + 1];\n        triangleBounds[left * 6 + i * 2 + 1] = triangleBounds[right * 6 + i * 2 + 1];\n        triangleBounds[right * 6 + i * 2 + 1] = t2;\n      }\n\n      left++;\n      right--;\n    } else {\n      return left;\n    }\n  }\n}\n\nconst BIN_COUNT = 32;\nconst sahBins = new Array(BIN_COUNT).fill().map(() => {\n  return {\n    count: 0,\n    bounds: new Float32Array(6),\n    rightCacheBounds: new Float32Array(6),\n    candidate: 0\n  };\n});\nconst leftBounds = new Float32Array(6);\n\nfunction getOptimalSplit(nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy) {\n  let axis = -1;\n  let pos = 0; // Center\n\n  if (strategy === CENTER) {\n    axis = getLongestEdgeIndex(centroidBoundingData);\n\n    if (axis !== -1) {\n      pos = (centroidBoundingData[axis] + centroidBoundingData[axis + 3]) / 2;\n    }\n  } else if (strategy === AVERAGE) {\n    axis = getLongestEdgeIndex(nodeBoundingData);\n\n    if (axis !== -1) {\n      pos = getAverage(triangleBounds, offset, count, axis);\n    }\n  } else if (strategy === SAH) {\n    const rootSurfaceArea = computeSurfaceArea(nodeBoundingData);\n    let bestCost = TRIANGLE_INTERSECT_COST * count; // iterate over all axes\n\n    const cStart = offset * 6;\n    const cEnd = (offset + count) * 6;\n\n    for (let a = 0; a < 3; a++) {\n      const axisLeft = centroidBoundingData[a];\n      const axisRight = centroidBoundingData[a + 3];\n      const axisLength = axisRight - axisLeft;\n      const binWidth = axisLength / BIN_COUNT; // reset the bins\n\n      for (let i = 0; i < BIN_COUNT; i++) {\n        const bin = sahBins[i];\n        bin.count = 0;\n        bin.candidate = axisLeft + binWidth + i * binWidth;\n        const bounds = bin.bounds;\n\n        for (let d = 0; d < 3; d++) {\n          bounds[d] = Infinity;\n          bounds[d + 3] = -Infinity;\n        }\n      } // iterate over all center positions\n\n\n      for (let c = cStart; c < cEnd; c += 6) {\n        const triCenter = triangleBounds[c + 2 * a];\n        const relativeCenter = triCenter - axisLeft; // in the partition function if the centroid lies on the split plane then it is\n        // considered to be on the right side of the split\n\n        let binIndex = ~~(relativeCenter / binWidth);\n        if (binIndex >= BIN_COUNT) binIndex = BIN_COUNT - 1;\n        const bin = sahBins[binIndex];\n        bin.count++;\n        const bounds = bin.bounds;\n\n        for (let d = 0; d < 3; d++) {\n          const tCenter = triangleBounds[c + 2 * d];\n          const tHalf = triangleBounds[c + 2 * d + 1];\n          const tMin = tCenter - tHalf;\n          const tMax = tCenter + tHalf;\n\n          if (tMin < bounds[d]) {\n            bounds[d] = tMin;\n          }\n\n          if (tMax > bounds[d + 3]) {\n            bounds[d + 3] = tMax;\n          }\n        }\n      } // cache the unioned bounds from right to left so we don't have to regenerate them each time\n\n\n      const lastBin = sahBins[BIN_COUNT - 1];\n      copyBounds(lastBin.bounds, lastBin.rightCacheBounds);\n\n      for (let i = BIN_COUNT - 2; i >= 0; i--) {\n        const bin = sahBins[i];\n        const nextBin = sahBins[i + 1];\n        unionBounds(bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds);\n      }\n\n      let leftCount = 0;\n\n      for (let i = 0; i < BIN_COUNT - 1; i++) {\n        const bin = sahBins[i];\n        const binCount = bin.count;\n        const bounds = bin.bounds;\n        const nextBin = sahBins[i + 1];\n        const rightBounds = nextBin.rightCacheBounds; // dont do anything with the bounds if the new bounds have no triangles\n\n        if (binCount !== 0) {\n          if (leftCount === 0) {\n            copyBounds(bounds, leftBounds);\n          } else {\n            unionBounds(bounds, leftBounds, leftBounds);\n          }\n        }\n\n        leftCount += binCount; // check the cost of this split\n\n        let leftProb = 0;\n        let rightProb = 0;\n\n        if (leftCount !== 0) {\n          leftProb = computeSurfaceArea(leftBounds) / rootSurfaceArea;\n        }\n\n        const rightCount = count - leftCount;\n\n        if (rightCount !== 0) {\n          rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;\n        }\n\n        const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);\n\n        if (cost < bestCost) {\n          axis = a;\n          bestCost = cost;\n          pos = bin.candidate;\n        }\n      }\n    }\n  } else {\n    console.warn(`MeshBVH: Invalid build strategy value ${strategy} used.`);\n  }\n\n  return {\n    axis,\n    pos\n  };\n} // returns the average coordinate on the specified axis of the all the provided triangles\n\n\nfunction getAverage(triangleBounds, offset, count, axis) {\n  let avg = 0;\n\n  for (let i = offset, end = offset + count; i < end; i++) {\n    avg += triangleBounds[i * 6 + axis * 2];\n  }\n\n  return avg / count;\n} // precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n// result is an array of size tris.length * 6 where triangle i maps to a\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n// representing the center and half-extent in each dimension of triangle i\n\n\nfunction computeTriangleBounds(geo, fullBounds) {\n  const posAttr = geo.attributes.position;\n  const posArr = posAttr.array;\n  const index = geo.index.array;\n  const triCount = index.length / 3;\n  const triangleBounds = new Float32Array(triCount * 6); // support for an interleaved position buffer\n\n  const bufferOffset = posAttr.offset || 0;\n  let stride = 3;\n\n  if (posAttr.isInterleavedBufferAttribute) {\n    stride = posAttr.data.stride;\n  }\n\n  for (let tri = 0; tri < triCount; tri++) {\n    const tri3 = tri * 3;\n    const tri6 = tri * 6;\n    const ai = index[tri3 + 0] * stride + bufferOffset;\n    const bi = index[tri3 + 1] * stride + bufferOffset;\n    const ci = index[tri3 + 2] * stride + bufferOffset;\n\n    for (let el = 0; el < 3; el++) {\n      const a = posArr[ai + el];\n      const b = posArr[bi + el];\n      const c = posArr[ci + el];\n      let min = a;\n      if (b < min) min = b;\n      if (c < min) min = c;\n      let max = a;\n      if (b > max) max = b;\n      if (c > max) max = c; // Increase the bounds size by float32 epsilon to avoid precision errors when\n      // converting to 32 bit float. Scale the epsilon by the size of the numbers being\n      // worked with.\n\n      const halfExtents = (max - min) / 2;\n      const el2 = el * 2;\n      triangleBounds[tri6 + el2 + 0] = min + halfExtents;\n      triangleBounds[tri6 + el2 + 1] = halfExtents + (Math.abs(min) + halfExtents) * FLOAT32_EPSILON;\n      if (min < fullBounds[el]) fullBounds[el] = min;\n      if (max > fullBounds[el + 3]) fullBounds[el + 3] = max;\n    }\n  }\n\n  return triangleBounds;\n}\n\nexport function buildTree(geo, options) {\n  // either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n  // recording the offset and count of its triangles and writing them into the reordered geometry index.\n  function splitNode(node, offset, count) {\n    let centroidBoundingData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let depth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n    if (!reachedMaxDepth && depth >= maxDepth) {\n      reachedMaxDepth = true;\n\n      if (verbose) {\n        console.warn(`MeshBVH: Max depth of ${maxDepth} reached when generating BVH. Consider increasing maxDepth.`);\n        console.warn(geo);\n      }\n    } // early out if we've met our capacity\n\n\n    if (count <= maxLeafTris || depth >= maxDepth) {\n      node.offset = offset;\n      node.count = count;\n      return node;\n    } // Find where to split the volume\n\n\n    const split = getOptimalSplit(node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy);\n\n    if (split.axis === -1) {\n      node.offset = offset;\n      node.count = count;\n      return node;\n    }\n\n    const splitOffset = partition(indexArray, triangleBounds, offset, count, split); // create the two new child nodes\n\n    if (splitOffset === offset || splitOffset === offset + count) {\n      node.offset = offset;\n      node.count = count;\n    } else {\n      node.splitAxis = split.axis; // create the left child and compute its bounding box\n\n      const left = new MeshBVHNode();\n      const lstart = offset;\n      const lcount = splitOffset - offset;\n      node.left = left;\n      left.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData);\n      splitNode(left, lstart, lcount, cacheCentroidBoundingData, depth + 1); // repeat for right\n\n      const right = new MeshBVHNode();\n      const rstart = splitOffset;\n      const rcount = count - lcount;\n      node.right = right;\n      right.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData);\n      splitNode(right, rstart, rcount, cacheCentroidBoundingData, depth + 1);\n    }\n\n    return node;\n  }\n\n  ensureIndex(geo, options); // Compute the full bounds of the geometry at the same time as triangle bounds because\n  // we'll need it for the root bounds in the case with no groups and it should be fast here.\n  // We can't use the geometrying bounding box if it's available because it may be out of date.\n\n  const fullBounds = new Float32Array(6);\n  const cacheCentroidBoundingData = new Float32Array(6);\n  const triangleBounds = computeTriangleBounds(geo, fullBounds);\n  const indexArray = geo.index.array;\n  const maxDepth = options.maxDepth;\n  const verbose = options.verbose;\n  const maxLeafTris = options.maxLeafTris;\n  const strategy = options.strategy;\n  let reachedMaxDepth = false;\n  const roots = [];\n  const ranges = getRootIndexRanges(geo);\n\n  if (ranges.length === 1) {\n    const range = ranges[0];\n    const root = new MeshBVHNode();\n    root.boundingData = fullBounds;\n    getCentroidBounds(triangleBounds, range.offset, range.count, cacheCentroidBoundingData);\n    splitNode(root, range.offset, range.count, cacheCentroidBoundingData);\n    roots.push(root);\n  } else {\n    for (let range of ranges) {\n      const root = new MeshBVHNode();\n      root.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData);\n      splitNode(root, range.offset, range.count, cacheCentroidBoundingData);\n      roots.push(root);\n    }\n  }\n\n  return roots;\n}\nexport function buildPackedTree(geo, options) {\n  // boundingData  \t\t\t\t: 6 float32\n  // right / offset \t\t\t\t: 1 uint32\n  // splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\n  const roots = buildTree(geo, options);\n  let float32Array;\n  let uint32Array;\n  let uint16Array;\n  const packedRoots = [];\n  const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\n  for (let i = 0; i < roots.length; i++) {\n    const root = roots[i];\n    let nodeCount = countNodes(root);\n    const buffer = new BufferConstructor(BYTES_PER_NODE * nodeCount);\n    float32Array = new Float32Array(buffer);\n    uint32Array = new Uint32Array(buffer);\n    uint16Array = new Uint16Array(buffer);\n    populateBuffer(0, root);\n    packedRoots.push(buffer);\n  }\n\n  return packedRoots;\n\n  function countNodes(node) {\n    if (node.count) {\n      return 1;\n    } else {\n      return 1 + countNodes(node.left) + countNodes(node.right);\n    }\n  }\n\n  function populateBuffer(byteOffset, node) {\n    const stride4Offset = byteOffset / 4;\n    const stride2Offset = byteOffset / 2;\n    const isLeaf = !!node.count;\n    const boundingData = node.boundingData;\n\n    for (let i = 0; i < 6; i++) {\n      float32Array[stride4Offset + i] = boundingData[i];\n    }\n\n    if (isLeaf) {\n      const offset = node.offset;\n      const count = node.count;\n      uint32Array[stride4Offset + 6] = offset;\n      uint16Array[stride2Offset + 14] = count;\n      uint16Array[stride2Offset + 15] = IS_LEAFNODE_FLAG;\n      return byteOffset + BYTES_PER_NODE;\n    } else {\n      const left = node.left;\n      const right = node.right;\n      const splitAxis = node.splitAxis;\n      let nextUnusedPointer;\n      nextUnusedPointer = populateBuffer(byteOffset + BYTES_PER_NODE, left);\n\n      if (nextUnusedPointer / 4 > Math.pow(2, 32)) {\n        throw new Error('MeshBVH: Cannot store child pointer greater than 32 bits.');\n      }\n\n      uint32Array[stride4Offset + 6] = nextUnusedPointer / 4;\n      nextUnusedPointer = populateBuffer(nextUnusedPointer, right);\n      uint32Array[stride4Offset + 7] = splitAxis;\n      return nextUnusedPointer;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-mesh-bvh/src/core/buildFunctions.js"],"names":["BufferAttribute","MeshBVHNode","getLongestEdgeIndex","computeSurfaceArea","copyBounds","unionBounds","CENTER","AVERAGE","SAH","TRIANGLE_INTERSECT_COST","TRAVERSAL_COST","BYTES_PER_NODE","FLOAT32_EPSILON","IS_LEAFNODE_FLAG","ensureIndex","geo","options","index","vertexCount","attributes","position","count","BufferConstructor","useSharedArrayBuffer","SharedArrayBuffer","ArrayBuffer","Uint32Array","Uint16Array","setIndex","i","getRootIndexRanges","groups","length","offset","ranges","rangeBoundaries","Set","group","add","start","sortedBoundaries","Array","from","values","sort","a","b","end","push","getBounds","triangleBounds","target","centroidTarget","minx","Infinity","miny","minz","maxx","maxy","maxz","cminx","cminy","cminz","cmaxx","cmaxy","cmaxz","includeCentroid","cx","hx","lx","rx","cy","hy","ly","ry","cz","hz","lz","rz","getCentroidBounds","partition","split","left","right","pos","axisOffset","axis","t0","t1","t2","BIN_COUNT","sahBins","fill","map","bounds","Float32Array","rightCacheBounds","candidate","leftBounds","getOptimalSplit","nodeBoundingData","centroidBoundingData","strategy","getAverage","rootSurfaceArea","bestCost","cStart","cEnd","axisLeft","axisRight","axisLength","binWidth","bin","d","c","triCenter","relativeCenter","binIndex","tCenter","tHalf","tMin","tMax","lastBin","nextBin","leftCount","binCount","rightBounds","leftProb","rightProb","rightCount","cost","console","warn","avg","computeTriangleBounds","fullBounds","posAttr","posArr","array","triCount","bufferOffset","stride","isInterleavedBufferAttribute","data","tri","tri3","tri6","ai","bi","ci","el","min","max","halfExtents","el2","Math","abs","buildTree","splitNode","node","depth","reachedMaxDepth","maxDepth","verbose","maxLeafTris","boundingData","splitOffset","indexArray","splitAxis","lstart","lcount","cacheCentroidBoundingData","rstart","rcount","roots","range","root","buildPackedTree","float32Array","uint32Array","uint16Array","packedRoots","nodeCount","countNodes","buffer","populateBuffer","byteOffset","stride4Offset","stride2Offset","isLeaf","nextUnusedPointer","pow","Error"],"mappings":"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","sourcesContent":["import { BufferAttribute } from 'three';\r\nimport { MeshBVHNode } from './MeshBVHNode.js';\r\nimport { getLongestEdgeIndex, computeSurfaceArea, copyBounds, unionBounds } from '../utils/ArrayBoxUtilities.js';\r\nimport {\r\n\tCENTER, AVERAGE, SAH, TRIANGLE_INTERSECT_COST, TRAVERSAL_COST,\r\n\tBYTES_PER_NODE, FLOAT32_EPSILON, IS_LEAFNODE_FLAG,\r\n} from './Constants.js';\r\n\r\nfunction ensureIndex( geo, options ) {\r\n\r\n\tif ( ! geo.index ) {\r\n\r\n\t\tconst vertexCount = geo.attributes.position.count;\r\n\t\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\r\n\t\tlet index;\r\n\t\tif ( vertexCount > 65535 ) {\r\n\r\n\t\t\tindex = new Uint32Array( new BufferConstructor( 4 * vertexCount ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tindex = new Uint16Array( new BufferConstructor( 2 * vertexCount ) );\r\n\r\n\t\t}\r\n\r\n\t\tgeo.setIndex( new BufferAttribute( index, 1 ) );\r\n\r\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\r\n\r\n\t\t\tindex[ i ] = i;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Computes the set of { offset, count } ranges which need independent BVH roots. Each\r\n// region in the geometry index that belongs to a different set of material groups requires\r\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\r\n// with triangle indices belongs to another group. For example, if the groups were like this:\r\n//\r\n// [-------------------------------------------------------------]\r\n// |__________________|\r\n//   g0 = [0, 20]  |______________________||_____________________|\r\n//                      g1 = [16, 40]           g2 = [41, 60]\r\n//\r\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\r\nfunction getRootIndexRanges( geo ) {\r\n\r\n\tif ( ! geo.groups || ! geo.groups.length ) {\r\n\r\n\t\treturn [ { offset: 0, count: geo.index.count / 3 } ];\r\n\r\n\t}\r\n\r\n\tconst ranges = [];\r\n\tconst rangeBoundaries = new Set();\r\n\tfor ( const group of geo.groups ) {\r\n\r\n\t\trangeBoundaries.add( group.start );\r\n\t\trangeBoundaries.add( group.start + group.count );\r\n\r\n\t}\r\n\r\n\t// note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\r\n\tconst sortedBoundaries = Array.from( rangeBoundaries.values() ).sort( ( a, b ) => a - b );\r\n\tfor ( let i = 0; i < sortedBoundaries.length - 1; i ++ ) {\r\n\r\n\t\tconst start = sortedBoundaries[ i ], end = sortedBoundaries[ i + 1 ];\r\n\t\tranges.push( { offset: ( start / 3 ), count: ( end - start ) / 3 } );\r\n\r\n\t}\r\n\r\n\treturn ranges;\r\n\r\n}\r\n\r\n// computes the union of the bounds of all of the given triangles and puts the resulting box in target. If\r\n// centroidTarget is provided then a bounding box is computed for the centroids of the triangles, as well.\r\n// These are computed together to avoid redundant accesses to bounds array.\r\nfunction getBounds( triangleBounds, offset, count, target, centroidTarget = null ) {\r\n\r\n\tlet minx = Infinity;\r\n\tlet miny = Infinity;\r\n\tlet minz = Infinity;\r\n\tlet maxx = - Infinity;\r\n\tlet maxy = - Infinity;\r\n\tlet maxz = - Infinity;\r\n\r\n\tlet cminx = Infinity;\r\n\tlet cminy = Infinity;\r\n\tlet cminz = Infinity;\r\n\tlet cmaxx = - Infinity;\r\n\tlet cmaxy = - Infinity;\r\n\tlet cmaxz = - Infinity;\r\n\r\n\tconst includeCentroid = centroidTarget !== null;\r\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\r\n\r\n\t\tconst cx = triangleBounds[ i + 0 ];\r\n\t\tconst hx = triangleBounds[ i + 1 ];\r\n\t\tconst lx = cx - hx;\r\n\t\tconst rx = cx + hx;\r\n\t\tif ( lx < minx ) minx = lx;\r\n\t\tif ( rx > maxx ) maxx = rx;\r\n\t\tif ( includeCentroid && cx < cminx ) cminx = cx;\r\n\t\tif ( includeCentroid && cx > cmaxx ) cmaxx = cx;\r\n\r\n\t\tconst cy = triangleBounds[ i + 2 ];\r\n\t\tconst hy = triangleBounds[ i + 3 ];\r\n\t\tconst ly = cy - hy;\r\n\t\tconst ry = cy + hy;\r\n\t\tif ( ly < miny ) miny = ly;\r\n\t\tif ( ry > maxy ) maxy = ry;\r\n\t\tif ( includeCentroid && cy < cminy ) cminy = cy;\r\n\t\tif ( includeCentroid && cy > cmaxy ) cmaxy = cy;\r\n\r\n\t\tconst cz = triangleBounds[ i + 4 ];\r\n\t\tconst hz = triangleBounds[ i + 5 ];\r\n\t\tconst lz = cz - hz;\r\n\t\tconst rz = cz + hz;\r\n\t\tif ( lz < minz ) minz = lz;\r\n\t\tif ( rz > maxz ) maxz = rz;\r\n\t\tif ( includeCentroid && cz < cminz ) cminz = cz;\r\n\t\tif ( includeCentroid && cz > cmaxz ) cmaxz = cz;\r\n\r\n\t}\r\n\r\n\ttarget[ 0 ] = minx;\r\n\ttarget[ 1 ] = miny;\r\n\ttarget[ 2 ] = minz;\r\n\r\n\ttarget[ 3 ] = maxx;\r\n\ttarget[ 4 ] = maxy;\r\n\ttarget[ 5 ] = maxz;\r\n\r\n\tif ( includeCentroid ) {\r\n\r\n\t\tcentroidTarget[ 0 ] = cminx;\r\n\t\tcentroidTarget[ 1 ] = cminy;\r\n\t\tcentroidTarget[ 2 ] = cminz;\r\n\r\n\t\tcentroidTarget[ 3 ] = cmaxx;\r\n\t\tcentroidTarget[ 4 ] = cmaxy;\r\n\t\tcentroidTarget[ 5 ] = cmaxz;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// A stand alone function for retrieving the centroid bounds.\r\nfunction getCentroidBounds( triangleBounds, offset, count, centroidTarget ) {\r\n\r\n\tlet cminx = Infinity;\r\n\tlet cminy = Infinity;\r\n\tlet cminz = Infinity;\r\n\tlet cmaxx = - Infinity;\r\n\tlet cmaxy = - Infinity;\r\n\tlet cmaxz = - Infinity;\r\n\r\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\r\n\r\n\t\tconst cx = triangleBounds[ i + 0 ];\r\n\t\tif ( cx < cminx ) cminx = cx;\r\n\t\tif ( cx > cmaxx ) cmaxx = cx;\r\n\r\n\t\tconst cy = triangleBounds[ i + 2 ];\r\n\t\tif ( cy < cminy ) cminy = cy;\r\n\t\tif ( cy > cmaxy ) cmaxy = cy;\r\n\r\n\t\tconst cz = triangleBounds[ i + 4 ];\r\n\t\tif ( cz < cminz ) cminz = cz;\r\n\t\tif ( cz > cmaxz ) cmaxz = cz;\r\n\r\n\t}\r\n\r\n\tcentroidTarget[ 0 ] = cminx;\r\n\tcentroidTarget[ 1 ] = cminy;\r\n\tcentroidTarget[ 2 ] = cminz;\r\n\r\n\tcentroidTarget[ 3 ] = cmaxx;\r\n\tcentroidTarget[ 4 ] = cmaxy;\r\n\tcentroidTarget[ 5 ] = cmaxz;\r\n\r\n}\r\n\r\n\r\n// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\r\n// will be on the left and elements on the right side of the split will be on the right. returns the index\r\n// of the first element on the right side, or offset + count if there are no elements on the right side.\r\nfunction partition( index, triangleBounds, offset, count, split ) {\r\n\r\n\tlet left = offset;\r\n\tlet right = offset + count - 1;\r\n\tconst pos = split.pos;\r\n\tconst axisOffset = split.axis * 2;\r\n\r\n\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\r\n\twhile ( true ) {\r\n\r\n\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\r\n\r\n\t\t\tleft ++;\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\r\n\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\r\n\r\n\t\t\tright --;\r\n\r\n\t\t}\r\n\r\n\t\tif ( left < right ) {\r\n\r\n\t\t\t// we need to swap all of the information associated with the triangles at index\r\n\t\t\t// left and right; that's the verts in the geometry index, the bounds,\r\n\t\t\t// and perhaps the SAH planes\r\n\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\tlet t0 = index[ left * 3 + i ];\r\n\t\t\t\tindex[ left * 3 + i ] = index[ right * 3 + i ];\r\n\t\t\t\tindex[ right * 3 + i ] = t0;\r\n\r\n\t\t\t\tlet t1 = triangleBounds[ left * 6 + i * 2 + 0 ];\r\n\t\t\t\ttriangleBounds[ left * 6 + i * 2 + 0 ] = triangleBounds[ right * 6 + i * 2 + 0 ];\r\n\t\t\t\ttriangleBounds[ right * 6 + i * 2 + 0 ] = t1;\r\n\r\n\t\t\t\tlet t2 = triangleBounds[ left * 6 + i * 2 + 1 ];\r\n\t\t\t\ttriangleBounds[ left * 6 + i * 2 + 1 ] = triangleBounds[ right * 6 + i * 2 + 1 ];\r\n\t\t\t\ttriangleBounds[ right * 6 + i * 2 + 1 ] = t2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tleft ++;\r\n\t\t\tright --;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn left;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst BIN_COUNT = 32;\r\nconst sahBins = new Array( BIN_COUNT ).fill().map( () => {\r\n\r\n\treturn {\r\n\r\n\t\tcount: 0,\r\n\t\tbounds: new Float32Array( 6 ),\r\n\t\trightCacheBounds: new Float32Array( 6 ),\r\n\t\tcandidate: 0,\r\n\r\n\t};\r\n\r\n} );\r\nconst leftBounds = new Float32Array( 6 );\r\n\r\nfunction getOptimalSplit( nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy ) {\r\n\r\n\tlet axis = - 1;\r\n\tlet pos = 0;\r\n\r\n\t// Center\r\n\tif ( strategy === CENTER ) {\r\n\r\n\t\taxis = getLongestEdgeIndex( centroidBoundingData );\r\n\t\tif ( axis !== - 1 ) {\r\n\r\n\t\t\tpos = ( centroidBoundingData[ axis ] + centroidBoundingData[ axis + 3 ] ) / 2;\r\n\r\n\t\t}\r\n\r\n\t} else if ( strategy === AVERAGE ) {\r\n\r\n\t\taxis = getLongestEdgeIndex( nodeBoundingData );\r\n\t\tif ( axis !== - 1 ) {\r\n\r\n\t\t\tpos = getAverage( triangleBounds, offset, count, axis );\r\n\r\n\t\t}\r\n\r\n\t} else if ( strategy === SAH ) {\r\n\r\n\t\tconst rootSurfaceArea = computeSurfaceArea( nodeBoundingData );\r\n\t\tlet bestCost = TRIANGLE_INTERSECT_COST * count;\r\n\r\n\t\t// iterate over all axes\r\n\t\tconst cStart = offset * 6;\r\n\t\tconst cEnd = ( offset + count ) * 6;\r\n\t\tfor ( let a = 0; a < 3; a ++ ) {\r\n\r\n\t\t\tconst axisLeft = centroidBoundingData[ a ];\r\n\t\t\tconst axisRight = centroidBoundingData[ a + 3 ];\r\n\t\t\tconst axisLength = axisRight - axisLeft;\r\n\t\t\tconst binWidth = axisLength / BIN_COUNT;\r\n\r\n\t\t\t// reset the bins\r\n\t\t\tfor ( let i = 0; i < BIN_COUNT; i ++ ) {\r\n\r\n\t\t\t\tconst bin = sahBins[ i ];\r\n\t\t\t\tbin.count = 0;\r\n\t\t\t\tbin.candidate = axisLeft + binWidth + i * binWidth;\r\n\r\n\t\t\t\tconst bounds = bin.bounds;\r\n\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\r\n\r\n\t\t\t\t\tbounds[ d ] = Infinity;\r\n\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// iterate over all center positions\r\n\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\r\n\r\n\t\t\t\tconst triCenter = triangleBounds[ c + 2 * a ];\r\n\t\t\t\tconst relativeCenter = triCenter - axisLeft;\r\n\r\n\t\t\t\t// in the partition function if the centroid lies on the split plane then it is\r\n\t\t\t\t// considered to be on the right side of the split\r\n\t\t\t\tlet binIndex = ~ ~ ( relativeCenter / binWidth );\r\n\t\t\t\tif ( binIndex >= BIN_COUNT ) binIndex = BIN_COUNT - 1;\r\n\r\n\t\t\t\tconst bin = sahBins[ binIndex ];\r\n\t\t\t\tbin.count ++;\r\n\r\n\t\t\t\tconst bounds = bin.bounds;\r\n\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\r\n\r\n\t\t\t\t\tconst tCenter = triangleBounds[ c + 2 * d ];\r\n\t\t\t\t\tconst tHalf = triangleBounds[ c + 2 * d + 1 ];\r\n\r\n\t\t\t\t\tconst tMin = tCenter - tHalf;\r\n\t\t\t\t\tconst tMax = tCenter + tHalf;\r\n\r\n\t\t\t\t\tif ( tMin < bounds[ d ] ) {\r\n\r\n\t\t\t\t\t\tbounds[ d ] = tMin;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( tMax > bounds[ d + 3 ] ) {\r\n\r\n\t\t\t\t\t\tbounds[ d + 3 ] = tMax;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// cache the unioned bounds from right to left so we don't have to regenerate them each time\r\n\t\t\tconst lastBin = sahBins[ BIN_COUNT - 1 ];\r\n\t\t\tcopyBounds( lastBin.bounds, lastBin.rightCacheBounds );\r\n\t\t\tfor ( let i = BIN_COUNT - 2; i >= 0; i -- ) {\r\n\r\n\t\t\t\tconst bin = sahBins[ i ];\r\n\t\t\t\tconst nextBin = sahBins[ i + 1 ];\r\n\t\t\t\tunionBounds( bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tfor ( let i = 0; i < BIN_COUNT - 1; i ++ ) {\r\n\r\n\t\t\t\tconst bin = sahBins[ i ];\r\n\t\t\t\tconst binCount = bin.count;\r\n\t\t\t\tconst bounds = bin.bounds;\r\n\r\n\t\t\t\tconst nextBin = sahBins[ i + 1 ];\r\n\t\t\t\tconst rightBounds = nextBin.rightCacheBounds;\r\n\r\n\t\t\t\t// dont do anything with the bounds if the new bounds have no triangles\r\n\t\t\t\tif ( binCount !== 0 ) {\r\n\r\n\t\t\t\t\tif ( leftCount === 0 ) {\r\n\r\n\t\t\t\t\t\tcopyBounds( bounds, leftBounds );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tunionBounds( bounds, leftBounds, leftBounds );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tleftCount += binCount;\r\n\r\n\t\t\t\t// check the cost of this split\r\n\t\t\t\tlet leftProb = 0;\r\n\t\t\t\tlet rightProb = 0;\r\n\r\n\t\t\t\tif ( leftCount !== 0 ) {\r\n\r\n\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst rightCount = count - leftCount;\r\n\t\t\t\tif ( rightCount !== 0 ) {\r\n\r\n\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\r\n\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif ( cost < bestCost ) {\r\n\r\n\t\t\t\t\taxis = a;\r\n\t\t\t\t\tbestCost = cost;\r\n\t\t\t\t\tpos = bin.candidate;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( `MeshBVH: Invalid build strategy value ${ strategy } used.` );\r\n\r\n\t}\r\n\r\n\treturn { axis, pos };\r\n\r\n}\r\n\r\n// returns the average coordinate on the specified axis of the all the provided triangles\r\nfunction getAverage( triangleBounds, offset, count, axis ) {\r\n\r\n\tlet avg = 0;\r\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\tavg += triangleBounds[ i * 6 + axis * 2 ];\r\n\r\n\t}\r\n\r\n\treturn avg / count;\r\n\r\n}\r\n\r\n// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\r\n// result is an array of size tris.length * 6 where triangle i maps to a\r\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\r\n// representing the center and half-extent in each dimension of triangle i\r\nfunction computeTriangleBounds( geo, fullBounds ) {\r\n\r\n\tconst posAttr = geo.attributes.position;\r\n\tconst posArr = posAttr.array;\r\n\tconst index = geo.index.array;\r\n\tconst triCount = index.length / 3;\r\n\tconst triangleBounds = new Float32Array( triCount * 6 );\r\n\r\n\t// support for an interleaved position buffer\r\n\tconst bufferOffset = posAttr.offset || 0;\r\n\tlet stride = 3;\r\n\tif ( posAttr.isInterleavedBufferAttribute ) {\r\n\r\n\t\tstride = posAttr.data.stride;\r\n\r\n\t}\r\n\r\n\tfor ( let tri = 0; tri < triCount; tri ++ ) {\r\n\r\n\t\tconst tri3 = tri * 3;\r\n\t\tconst tri6 = tri * 6;\r\n\t\tconst ai = index[ tri3 + 0 ] * stride + bufferOffset;\r\n\t\tconst bi = index[ tri3 + 1 ] * stride + bufferOffset;\r\n\t\tconst ci = index[ tri3 + 2 ] * stride + bufferOffset;\r\n\r\n\t\tfor ( let el = 0; el < 3; el ++ ) {\r\n\r\n\t\t\tconst a = posArr[ ai + el ];\r\n\t\t\tconst b = posArr[ bi + el ];\r\n\t\t\tconst c = posArr[ ci + el ];\r\n\r\n\t\t\tlet min = a;\r\n\t\t\tif ( b < min ) min = b;\r\n\t\t\tif ( c < min ) min = c;\r\n\r\n\t\t\tlet max = a;\r\n\t\t\tif ( b > max ) max = b;\r\n\t\t\tif ( c > max ) max = c;\r\n\r\n\t\t\t// Increase the bounds size by float32 epsilon to avoid precision errors when\r\n\t\t\t// converting to 32 bit float. Scale the epsilon by the size of the numbers being\r\n\t\t\t// worked with.\r\n\t\t\tconst halfExtents = ( max - min ) / 2;\r\n\t\t\tconst el2 = el * 2;\r\n\t\t\ttriangleBounds[ tri6 + el2 + 0 ] = min + halfExtents;\r\n\t\t\ttriangleBounds[ tri6 + el2 + 1 ] = halfExtents + ( Math.abs( min ) + halfExtents ) * FLOAT32_EPSILON;\r\n\r\n\t\t\tif ( min < fullBounds[ el ] ) fullBounds[ el ] = min;\r\n\t\t\tif ( max > fullBounds[ el + 3 ] ) fullBounds[ el + 3 ] = max;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn triangleBounds;\r\n\r\n}\r\n\r\nexport function buildTree( geo, options ) {\r\n\r\n\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\r\n\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\r\n\tfunction splitNode( node, offset, count, centroidBoundingData = null, depth = 0 ) {\r\n\r\n\t\tif ( ! reachedMaxDepth && depth >= maxDepth ) {\r\n\r\n\t\t\treachedMaxDepth = true;\r\n\t\t\tif ( verbose ) {\r\n\r\n\t\t\t\tconsole.warn( `MeshBVH: Max depth of ${ maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\r\n\t\t\t\tconsole.warn( geo );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// early out if we've met our capacity\r\n\t\tif ( count <= maxLeafTris || depth >= maxDepth ) {\r\n\r\n\t\t\tnode.offset = offset;\r\n\t\t\tnode.count = count;\r\n\t\t\treturn node;\r\n\r\n\t\t}\r\n\r\n\t\t// Find where to split the volume\r\n\t\tconst split = getOptimalSplit( node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy );\r\n\t\tif ( split.axis === - 1 ) {\r\n\r\n\t\t\tnode.offset = offset;\r\n\t\t\tnode.count = count;\r\n\t\t\treturn node;\r\n\r\n\t\t}\r\n\r\n\t\tconst splitOffset = partition( indexArray, triangleBounds, offset, count, split );\r\n\r\n\t\t// create the two new child nodes\r\n\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\r\n\r\n\t\t\tnode.offset = offset;\r\n\t\t\tnode.count = count;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnode.splitAxis = split.axis;\r\n\r\n\t\t\t// create the left child and compute its bounding box\r\n\t\t\tconst left = new MeshBVHNode();\r\n\t\t\tconst lstart = offset;\r\n\t\t\tconst lcount = splitOffset - offset;\r\n\t\t\tnode.left = left;\r\n\t\t\tleft.boundingData = new Float32Array( 6 );\r\n\r\n\t\t\tgetBounds( triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData );\r\n\t\t\tsplitNode( left, lstart, lcount, cacheCentroidBoundingData, depth + 1 );\r\n\r\n\t\t\t// repeat for right\r\n\t\t\tconst right = new MeshBVHNode();\r\n\t\t\tconst rstart = splitOffset;\r\n\t\t\tconst rcount = count - lcount;\r\n\t\t\tnode.right = right;\r\n\t\t\tright.boundingData = new Float32Array( 6 );\r\n\r\n\t\t\tgetBounds( triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData );\r\n\t\t\tsplitNode( right, rstart, rcount, cacheCentroidBoundingData, depth + 1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tensureIndex( geo, options );\r\n\r\n\t// Compute the full bounds of the geometry at the same time as triangle bounds because\r\n\t// we'll need it for the root bounds in the case with no groups and it should be fast here.\r\n\t// We can't use the geometrying bounding box if it's available because it may be out of date.\r\n\tconst fullBounds = new Float32Array( 6 );\r\n\tconst cacheCentroidBoundingData = new Float32Array( 6 );\r\n\tconst triangleBounds = computeTriangleBounds( geo, fullBounds );\r\n\tconst indexArray = geo.index.array;\r\n\tconst maxDepth = options.maxDepth;\r\n\tconst verbose = options.verbose;\r\n\tconst maxLeafTris = options.maxLeafTris;\r\n\tconst strategy = options.strategy;\r\n\tlet reachedMaxDepth = false;\r\n\r\n\tconst roots = [];\r\n\tconst ranges = getRootIndexRanges( geo );\r\n\r\n\tif ( ranges.length === 1 ) {\r\n\r\n\t\tconst range = ranges[ 0 ];\r\n\t\tconst root = new MeshBVHNode();\r\n\t\troot.boundingData = fullBounds;\r\n\t\tgetCentroidBounds( triangleBounds, range.offset, range.count, cacheCentroidBoundingData );\r\n\r\n\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\r\n\t\troots.push( root );\r\n\r\n\t} else {\r\n\r\n\t\tfor ( let range of ranges ) {\r\n\r\n\t\t\tconst root = new MeshBVHNode();\r\n\t\t\troot.boundingData = new Float32Array( 6 );\r\n\t\t\tgetBounds( triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData );\r\n\r\n\t\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\r\n\t\t\troots.push( root );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn roots;\r\n\r\n}\r\n\r\nexport function buildPackedTree( geo, options ) {\r\n\r\n\t// boundingData  \t\t\t\t: 6 float32\r\n\t// right / offset \t\t\t\t: 1 uint32\r\n\t// splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\r\n\tconst roots = buildTree( geo, options );\r\n\r\n\tlet float32Array;\r\n\tlet uint32Array;\r\n\tlet uint16Array;\r\n\tconst packedRoots = [];\r\n\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\r\n\tfor ( let i = 0; i < roots.length; i ++ ) {\r\n\r\n\t\tconst root = roots[ i ];\r\n\t\tlet nodeCount = countNodes( root );\r\n\r\n\t\tconst buffer = new BufferConstructor( BYTES_PER_NODE * nodeCount );\r\n\t\tfloat32Array = new Float32Array( buffer );\r\n\t\tuint32Array = new Uint32Array( buffer );\r\n\t\tuint16Array = new Uint16Array( buffer );\r\n\t\tpopulateBuffer( 0, root );\r\n\t\tpackedRoots.push( buffer );\r\n\r\n\t}\r\n\r\n\treturn packedRoots;\r\n\r\n\tfunction countNodes( node ) {\r\n\r\n\t\tif ( node.count ) {\r\n\r\n\t\t\treturn 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn 1 + countNodes( node.left ) + countNodes( node.right );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction populateBuffer( byteOffset, node ) {\r\n\r\n\t\tconst stride4Offset = byteOffset / 4;\r\n\t\tconst stride2Offset = byteOffset / 2;\r\n\t\tconst isLeaf = ! ! node.count;\r\n\t\tconst boundingData = node.boundingData;\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tfloat32Array[ stride4Offset + i ] = boundingData[ i ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( isLeaf ) {\r\n\r\n\t\t\tconst offset = node.offset;\r\n\t\t\tconst count = node.count;\r\n\t\t\tuint32Array[ stride4Offset + 6 ] = offset;\r\n\t\t\tuint16Array[ stride2Offset + 14 ] = count;\r\n\t\t\tuint16Array[ stride2Offset + 15 ] = IS_LEAFNODE_FLAG;\r\n\t\t\treturn byteOffset + BYTES_PER_NODE;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst left = node.left;\r\n\t\t\tconst right = node.right;\r\n\t\t\tconst splitAxis = node.splitAxis;\r\n\r\n\t\t\tlet nextUnusedPointer;\r\n\t\t\tnextUnusedPointer = populateBuffer( byteOffset + BYTES_PER_NODE, left );\r\n\r\n\t\t\tif ( ( nextUnusedPointer / 4 ) > Math.pow( 2, 32 ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'MeshBVH: Cannot store child pointer greater than 32 bits.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuint32Array[ stride4Offset + 6 ] = nextUnusedPointer / 4;\r\n\t\t\tnextUnusedPointer = populateBuffer( nextUnusedPointer, right );\r\n\r\n\t\t\tuint32Array[ stride4Offset + 7 ] = splitAxis;\r\n\t\t\treturn nextUnusedPointer;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}