{"ast":null,"code":"import _slicedToArray from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { Raycaster, Camera } from 'three';\nimport { useThree, applyProps } from '@react-three/fiber';\n\nfunction useCamera(camera, props) {\n  var mouse = useThree(function (state) {\n    return state.mouse;\n  });\n\n  var _React$useState = React.useState(function () {\n    var raycaster = new Raycaster();\n    /**\n     * applyProps is an internal method of r3f and\n     * therefore requires its first arg to be an\n     * \"Instance\" a term used with the Reconciler\n     * so we have an expect error to mask this\n     */\n    // @ts-expect-error\n\n    /**\n     * applyProps is an internal method of r3f and\n     * therefore requires its first arg to be an\n     * \"Instance\" a term used with the Reconciler\n     * so we have an expect error to mask this\n     */\n    // @ts-expect-error\n    if (props) applyProps(raycaster, props, {});\n    return function (_, intersects) {\n      raycaster.setFromCamera(mouse, camera instanceof Camera ? camera : camera.current);\n      var rc = this.constructor.prototype.raycast.bind(this);\n      if (rc) rc(raycaster, intersects);\n    };\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      raycast = _React$useState2[0];\n\n  return raycast;\n}\n\nexport { useCamera };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/@react-three/drei/core/useCamera.js"],"names":["React","Raycaster","Camera","useThree","applyProps","useCamera","camera","props","mouse","state","useState","raycaster","_","intersects","setFromCamera","current","rc","constructor","prototype","raycast","bind"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,oBAArC;;AAEA,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkC;AAChC,MAAMC,KAAK,GAAGL,QAAQ,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACD,KAAV;AAAA,GAAN,CAAtB;;AACA,wBAAkBR,KAAK,CAACU,QAAN,CAAe,YAAM;AACrC,QAAMC,SAAS,GAAG,IAAIV,SAAJ,EAAlB;AACA;AACJ;AACA;AACA;AACA;AACA;AACI;;AANA;AACJ;AACA;AACA;AACA;AACA;AACI;AAEA,QAAIM,KAAJ,EAAWH,UAAU,CAACO,SAAD,EAAYJ,KAAZ,EAAmB,EAAnB,CAAV;AACX,WAAO,UAAUK,CAAV,EAAaC,UAAb,EAAyB;AAC9BF,MAAAA,SAAS,CAACG,aAAV,CAAwBN,KAAxB,EAA+BF,MAAM,YAAYJ,MAAlB,GAA2BI,MAA3B,GAAoCA,MAAM,CAACS,OAA1E;AACA,UAAMC,EAAE,GAAG,KAAKC,WAAL,CAAiBC,SAAjB,CAA2BC,OAA3B,CAAmCC,IAAnC,CAAwC,IAAxC,CAAX;AACA,UAAIJ,EAAJ,EAAQA,EAAE,CAACL,SAAD,EAAYE,UAAZ,CAAF;AACT,KAJD;AAKD,GAhBiB,CAAlB;AAAA;AAAA,MAAOM,OAAP;;AAiBA,SAAOA,OAAP;AACD;;AAED,SAASd,SAAT","sourcesContent":["import * as React from 'react';\nimport { Raycaster, Camera } from 'three';\nimport { useThree, applyProps } from '@react-three/fiber';\n\nfunction useCamera(camera, props) {\n  const mouse = useThree(state => state.mouse);\n  const [raycast] = React.useState(() => {\n    const raycaster = new Raycaster();\n    /**\n     * applyProps is an internal method of r3f and\n     * therefore requires its first arg to be an\n     * \"Instance\" a term used with the Reconciler\n     * so we have an expect error to mask this\n     */\n    // @ts-expect-error\n\n    if (props) applyProps(raycaster, props, {});\n    return function (_, intersects) {\n      raycaster.setFromCamera(mouse, camera instanceof Camera ? camera : camera.current);\n      const rc = this.constructor.prototype.raycast.bind(this);\n      if (rc) rc(raycaster, intersects);\n    };\n  });\n  return raycast;\n}\n\nexport { useCamera };\n"]},"metadata":{},"sourceType":"module"}