import { DepthTexture, DepthFormat, UnsignedShortType } from 'three';
import * as React from 'react';
import { useThree, useFrame } from '@react-three/fiber';
import { useFBO } from './useFBO.js';

const DepthBuffer = /*#__PURE__*/React.forwardRef(({
  size = 256
}, ref) => {
  React.useEffect(() => {
    console.warn('DepthBuffer has been deprecated and will be removed next major. Replace it with useDepthBuffer(size)!');
  }, []);
  const dpr = useThree(state => state.viewport.dpr);
  const {
    width,
    height
  } = useThree(state => state.size);
  const w = size || width * dpr;
  const h = size || height * dpr;
  const depthConfig = React.useMemo(() => {
    const depthTexture = new DepthTexture(w, h);
    depthTexture.format = DepthFormat;
    depthTexture.type = UnsignedShortType;
    return {
      depthTexture
    };
  }, [w, h]);
  const depthFBO = useFBO(w, h, depthConfig);
  React.useImperativeHandle(ref, () => depthFBO == null ? void 0 : depthFBO.depthTexture);
  return useFrame(state => {
    state.gl.setRenderTarget(depthFBO);
    state.gl.render(state.scene, state.camera);
    state.gl.setRenderTarget(null);
  });
});

export { DepthBuffer };
