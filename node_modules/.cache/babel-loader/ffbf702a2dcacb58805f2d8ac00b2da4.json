{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { BufferGeometry, Mesh, Points } from 'three';\n/**\n * Export draco compressed files from threejs geometry objects.\n *\n * Draco files are compressed and usually are smaller than conventional 3D file formats.\n *\n * The exporter receives a options object containing\n *  - decodeSpeed, indicates how to tune the encoder regarding decode speed (0 gives better speed but worst quality)\n *  - encodeSpeed, indicates how to tune the encoder parameters (0 gives better speed but worst quality)\n *  - encoderMethod\n *  - quantization, indicates the presision of each type of data stored in the draco file in the order (POSITION, NORMAL, COLOR, TEX_COORD, GENERIC)\n *  - exportUvs\n *  - exportNormals\n */\n\nclass DRACOExporter {\n  // Encoder methods\n  // Geometry type\n  // Attribute type\n  parse(object) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      decodeSpeed: 5,\n      encodeSpeed: 5,\n      encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n      quantization: [16, 8, 8, 8, 8],\n      exportUvs: true,\n      exportNormals: true,\n      exportColor: false\n    };\n\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error('DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.');\n    }\n\n    if (DracoEncoderModule === undefined) {\n      throw new Error('THREE.DRACOExporter: required the draco_encoder to work.');\n    }\n\n    const geometry = object.geometry;\n    const dracoEncoder = DracoEncoderModule();\n    const encoder = new dracoEncoder.Encoder();\n    let builder;\n    let dracoObject;\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.');\n    }\n\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder();\n      dracoObject = new dracoEncoder.Mesh();\n      const vertices = geometry.getAttribute('position'); // @ts-expect-error\n\n      builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      const faces = geometry.getIndex();\n\n      if (faces !== null) {\n        // @ts-expect-error\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n      } else {\n        const faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n\n        for (let i = 0; i < faces.length; i++) {\n          faces[i] = i;\n        }\n\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces);\n      }\n\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute('normal');\n\n        if (normals !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n        }\n      }\n\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute('uv');\n\n        if (uvs !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n        }\n      }\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n\n        if (colors !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      // @ts-expect-error\n      builder = new dracoEncoder.PointCloudBuilder(); // @ts-expect-error\n\n      dracoObject = new dracoEncoder.PointCloud();\n      const vertices = geometry.getAttribute('position');\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n\n        if (colors !== undefined) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else {\n      throw new Error('DRACOExporter: Unsupported object type.');\n    } //Compress using draco encoder\n\n\n    const encodedData = new dracoEncoder.DracoInt8Array(); //Sets the desired encoding and decoding speed for the given options from 0 (slowest speed, but the best compression) to 10 (fastest, but the worst compression).\n\n    const encodeSpeed = options.encodeSpeed !== undefined ? options.encodeSpeed : 5;\n    const decodeSpeed = options.decodeSpeed !== undefined ? options.decodeSpeed : 5;\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed); // Sets the desired encoding method for a given geometry.\n\n    if (options.encoderMethod !== undefined) {\n      encoder.SetEncodingMethod(options.encoderMethod);\n    } // Sets the quantization (number of bits used to represent) compression options for a named attribute.\n    // The attribute values will be quantized in a box defined by the maximum extent of the attribute values.\n\n\n    if (options.quantization !== undefined) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== undefined) {\n          encoder.SetAttributeQuantization(i, options.quantization[i]);\n        }\n      }\n    }\n\n    let length;\n\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n    } else {\n      // @ts-expect-error\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n    }\n\n    dracoEncoder.destroy(dracoObject);\n\n    if (length === 0) {\n      throw new Error('THREE.DRACOExporter: Draco encoding failed.');\n    } //Copy encoded data to buffer.\n\n\n    const outputData = new Int8Array(new ArrayBuffer(length));\n\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i);\n    }\n\n    dracoEncoder.destroy(encodedData);\n    dracoEncoder.destroy(encoder);\n    dracoEncoder.destroy(builder);\n    return outputData;\n  }\n\n}\n\n_defineProperty(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n\n_defineProperty(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n\n_defineProperty(DRACOExporter, \"POINT_CLOUD\", 0);\n\n_defineProperty(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n\n_defineProperty(DRACOExporter, \"INVALID\", -1);\n\n_defineProperty(DRACOExporter, \"POSITION\", 0);\n\n_defineProperty(DRACOExporter, \"NORMAL\", 1);\n\n_defineProperty(DRACOExporter, \"COLOR\", 2);\n\n_defineProperty(DRACOExporter, \"TEX_COORD\", 3);\n\n_defineProperty(DRACOExporter, \"GENERIC\", 4);\n\nexport { DRACOExporter };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/exporters/DRACOExporter.js"],"names":["_defineProperty","BufferGeometry","Mesh","Points","DRACOExporter","parse","object","options","decodeSpeed","encodeSpeed","encoderMethod","MESH_EDGEBREAKER_ENCODING","quantization","exportUvs","exportNormals","exportColor","isBufferGeometry","Error","DracoEncoderModule","undefined","geometry","dracoEncoder","encoder","Encoder","builder","dracoObject","isMesh","MeshBuilder","vertices","getAttribute","AddFloatAttributeToMesh","POSITION","count","itemSize","array","faces","getIndex","AddFacesToMesh","Uint32Array","Uint16Array","i","length","normals","NORMAL","uvs","TEX_COORD","colors","COLOR","isPoints","PointCloudBuilder","PointCloud","AddFloatAttribute","encodedData","DracoInt8Array","SetSpeedOptions","SetEncodingMethod","SetAttributeQuantization","EncodeMeshToDracoBuffer","EncodePointCloudToDracoBuffer","destroy","outputData","Int8Array","ArrayBuffer","GetValue"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { BufferGeometry, Mesh, Points } from 'three';\n\n/**\n * Export draco compressed files from threejs geometry objects.\n *\n * Draco files are compressed and usually are smaller than conventional 3D file formats.\n *\n * The exporter receives a options object containing\n *  - decodeSpeed, indicates how to tune the encoder regarding decode speed (0 gives better speed but worst quality)\n *  - encodeSpeed, indicates how to tune the encoder parameters (0 gives better speed but worst quality)\n *  - encoderMethod\n *  - quantization, indicates the presision of each type of data stored in the draco file in the order (POSITION, NORMAL, COLOR, TEX_COORD, GENERIC)\n *  - exportUvs\n *  - exportNormals\n */\n\nclass DRACOExporter {\n  // Encoder methods\n  // Geometry type\n  // Attribute type\n  parse(object, options = {\n    decodeSpeed: 5,\n    encodeSpeed: 5,\n    encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n    quantization: [16, 8, 8, 8, 8],\n    exportUvs: true,\n    exportNormals: true,\n    exportColor: false\n  }) {\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error('DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.');\n    }\n\n    if (DracoEncoderModule === undefined) {\n      throw new Error('THREE.DRACOExporter: required the draco_encoder to work.');\n    }\n\n    const geometry = object.geometry;\n    const dracoEncoder = DracoEncoderModule();\n    const encoder = new dracoEncoder.Encoder();\n    let builder;\n    let dracoObject;\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.');\n    }\n\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder();\n      dracoObject = new dracoEncoder.Mesh();\n      const vertices = geometry.getAttribute('position'); // @ts-expect-error\n\n      builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      const faces = geometry.getIndex();\n\n      if (faces !== null) {\n        // @ts-expect-error\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n      } else {\n        const faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n\n        for (let i = 0; i < faces.length; i++) {\n          faces[i] = i;\n        }\n\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces);\n      }\n\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute('normal');\n\n        if (normals !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n        }\n      }\n\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute('uv');\n\n        if (uvs !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n        }\n      }\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n\n        if (colors !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      // @ts-expect-error\n      builder = new dracoEncoder.PointCloudBuilder(); // @ts-expect-error\n\n      dracoObject = new dracoEncoder.PointCloud();\n      const vertices = geometry.getAttribute('position');\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n\n        if (colors !== undefined) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else {\n      throw new Error('DRACOExporter: Unsupported object type.');\n    } //Compress using draco encoder\n\n\n    const encodedData = new dracoEncoder.DracoInt8Array(); //Sets the desired encoding and decoding speed for the given options from 0 (slowest speed, but the best compression) to 10 (fastest, but the worst compression).\n\n    const encodeSpeed = options.encodeSpeed !== undefined ? options.encodeSpeed : 5;\n    const decodeSpeed = options.decodeSpeed !== undefined ? options.decodeSpeed : 5;\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed); // Sets the desired encoding method for a given geometry.\n\n    if (options.encoderMethod !== undefined) {\n      encoder.SetEncodingMethod(options.encoderMethod);\n    } // Sets the quantization (number of bits used to represent) compression options for a named attribute.\n    // The attribute values will be quantized in a box defined by the maximum extent of the attribute values.\n\n\n    if (options.quantization !== undefined) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== undefined) {\n          encoder.SetAttributeQuantization(i, options.quantization[i]);\n        }\n      }\n    }\n\n    let length;\n\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n    } else {\n      // @ts-expect-error\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n    }\n\n    dracoEncoder.destroy(dracoObject);\n\n    if (length === 0) {\n      throw new Error('THREE.DRACOExporter: Draco encoding failed.');\n    } //Copy encoded data to buffer.\n\n\n    const outputData = new Int8Array(new ArrayBuffer(length));\n\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i);\n    }\n\n    dracoEncoder.destroy(encodedData);\n    dracoEncoder.destroy(encoder);\n    dracoEncoder.destroy(builder);\n    return outputData;\n  }\n\n}\n\n_defineProperty(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n\n_defineProperty(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n\n_defineProperty(DRACOExporter, \"POINT_CLOUD\", 0);\n\n_defineProperty(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n\n_defineProperty(DRACOExporter, \"INVALID\", -1);\n\n_defineProperty(DRACOExporter, \"POSITION\", 0);\n\n_defineProperty(DRACOExporter, \"NORMAL\", 1);\n\n_defineProperty(DRACOExporter, \"COLOR\", 2);\n\n_defineProperty(DRACOExporter, \"TEX_COORD\", 3);\n\n_defineProperty(DRACOExporter, \"GENERIC\", 4);\n\nexport { DRACOExporter };\n"]},"metadata":{},"sourceType":"module"}