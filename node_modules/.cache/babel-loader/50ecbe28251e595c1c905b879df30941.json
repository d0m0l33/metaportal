{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTokenType = exports.hasExtendingTokensTypesMapProperty = exports.hasExtendingTokensTypesProperty = exports.hasCategoriesProperty = exports.hasShortKeyProperty = exports.singleAssignCategoriesToksMap = exports.assignCategoriesMapProp = exports.assignCategoriesTokensProp = exports.assignTokenDefaultProps = exports.expandCategories = exports.augmentTokenTypes = exports.tokenIdxToClass = exports.tokenShortNameIdx = exports.tokenStructuredMatcherNoCategories = exports.tokenStructuredMatcher = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nfunction tokenStructuredMatcher(tokInstance, tokConstructor) {\n  var instanceType = tokInstance.tokenTypeIdx;\n\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true;\n  }\n}\n\nexports.tokenStructuredMatcher = tokenStructuredMatcher; // Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\n\nfunction tokenStructuredMatcherNoCategories(token, tokType) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexports.tokenStructuredMatcherNoCategories = tokenStructuredMatcherNoCategories;\nexports.tokenShortNameIdx = 1;\nexports.tokenIdxToClass = {};\n\nfunction augmentTokenTypes(tokenTypes) {\n  // collect the parent Token Types as well.\n  var tokenTypesAndParents = expandCategories(tokenTypes); // add required tokenType and categoryMatches properties\n\n  assignTokenDefaultProps(tokenTypesAndParents); // fill up the categoryMatches\n\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n  (0, utils_1.forEach)(tokenTypesAndParents, function (tokType) {\n    tokType.isParent = tokType.categoryMatches.length > 0;\n  });\n}\n\nexports.augmentTokenTypes = augmentTokenTypes;\n\nfunction expandCategories(tokenTypes) {\n  var result = (0, utils_1.cloneArr)(tokenTypes);\n  var categories = tokenTypes;\n  var searching = true;\n\n  while (searching) {\n    categories = (0, utils_1.compact)((0, utils_1.flatten)((0, utils_1.map)(categories, function (currTokType) {\n      return currTokType.CATEGORIES;\n    })));\n    var newCategories = (0, utils_1.difference)(categories, result);\n    result = result.concat(newCategories);\n\n    if ((0, utils_1.isEmpty)(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n\n  return result;\n}\n\nexports.expandCategories = expandCategories;\n\nfunction assignTokenDefaultProps(tokenTypes) {\n  (0, utils_1.forEach)(tokenTypes, function (currTokType) {\n    if (!hasShortKeyProperty(currTokType)) {\n      exports.tokenIdxToClass[exports.tokenShortNameIdx] = currTokType;\n      currTokType.tokenTypeIdx = exports.tokenShortNameIdx++;\n    } // CATEGORIES? : TokenType | TokenType[]\n\n\n    if (hasCategoriesProperty(currTokType) && !(0, utils_1.isArray)(currTokType.CATEGORIES) // &&\n    // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexports.assignTokenDefaultProps = assignTokenDefaultProps;\n\nfunction assignCategoriesTokensProp(tokenTypes) {\n  (0, utils_1.forEach)(tokenTypes, function (currTokType) {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    (0, utils_1.forEach)(currTokType.categoryMatchesMap, function (val, key) {\n      currTokType.categoryMatches.push(exports.tokenIdxToClass[key].tokenTypeIdx);\n    });\n  });\n}\n\nexports.assignCategoriesTokensProp = assignCategoriesTokensProp;\n\nfunction assignCategoriesMapProp(tokenTypes) {\n  (0, utils_1.forEach)(tokenTypes, function (currTokType) {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexports.assignCategoriesMapProp = assignCategoriesMapProp;\n\nfunction singleAssignCategoriesToksMap(path, nextNode) {\n  (0, utils_1.forEach)(path, function (pathNode) {\n    nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n  });\n  (0, utils_1.forEach)(nextNode.CATEGORIES, function (nextCategory) {\n    var newPath = path.concat(nextNode); // avoids infinite loops due to cyclic categories.\n\n    if (!(0, utils_1.contains)(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexports.singleAssignCategoriesToksMap = singleAssignCategoriesToksMap;\n\nfunction hasShortKeyProperty(tokType) {\n  return (0, utils_1.has)(tokType, \"tokenTypeIdx\");\n}\n\nexports.hasShortKeyProperty = hasShortKeyProperty;\n\nfunction hasCategoriesProperty(tokType) {\n  return (0, utils_1.has)(tokType, \"CATEGORIES\");\n}\n\nexports.hasCategoriesProperty = hasCategoriesProperty;\n\nfunction hasExtendingTokensTypesProperty(tokType) {\n  return (0, utils_1.has)(tokType, \"categoryMatches\");\n}\n\nexports.hasExtendingTokensTypesProperty = hasExtendingTokensTypesProperty;\n\nfunction hasExtendingTokensTypesMapProperty(tokType) {\n  return (0, utils_1.has)(tokType, \"categoryMatchesMap\");\n}\n\nexports.hasExtendingTokensTypesMapProperty = hasExtendingTokensTypesMapProperty;\n\nfunction isTokenType(tokType) {\n  return (0, utils_1.has)(tokType, \"tokenTypeIdx\");\n}\n\nexports.isTokenType = isTokenType;","map":{"version":3,"sources":["../../../src/scan/tokens.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTokenType = exports.hasExtendingTokensTypesMapProperty = exports.hasExtendingTokensTypesProperty = exports.hasCategoriesProperty = exports.hasShortKeyProperty = exports.singleAssignCategoriesToksMap = exports.assignCategoriesMapProp = exports.assignCategoriesTokensProp = exports.assignTokenDefaultProps = exports.expandCategories = exports.augmentTokenTypes = exports.tokenIdxToClass = exports.tokenShortNameIdx = exports.tokenStructuredMatcherNoCategories = exports.tokenStructuredMatcher = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nfunction tokenStructuredMatcher(tokInstance, tokConstructor) {\n    var instanceType = tokInstance.tokenTypeIdx;\n    if (instanceType === tokConstructor.tokenTypeIdx) {\n        return true;\n    }\n    else {\n        return (tokConstructor.isParent === true &&\n            tokConstructor.categoryMatchesMap[instanceType] === true);\n    }\n}\nexports.tokenStructuredMatcher = tokenStructuredMatcher;\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nfunction tokenStructuredMatcherNoCategories(token, tokType) {\n    return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\nexports.tokenStructuredMatcherNoCategories = tokenStructuredMatcherNoCategories;\nexports.tokenShortNameIdx = 1;\nexports.tokenIdxToClass = {};\nfunction augmentTokenTypes(tokenTypes) {\n    // collect the parent Token Types as well.\n    var tokenTypesAndParents = expandCategories(tokenTypes);\n    // add required tokenType and categoryMatches properties\n    assignTokenDefaultProps(tokenTypesAndParents);\n    // fill up the categoryMatches\n    assignCategoriesMapProp(tokenTypesAndParents);\n    assignCategoriesTokensProp(tokenTypesAndParents);\n    (0, utils_1.forEach)(tokenTypesAndParents, function (tokType) {\n        tokType.isParent = tokType.categoryMatches.length > 0;\n    });\n}\nexports.augmentTokenTypes = augmentTokenTypes;\nfunction expandCategories(tokenTypes) {\n    var result = (0, utils_1.cloneArr)(tokenTypes);\n    var categories = tokenTypes;\n    var searching = true;\n    while (searching) {\n        categories = (0, utils_1.compact)((0, utils_1.flatten)((0, utils_1.map)(categories, function (currTokType) { return currTokType.CATEGORIES; })));\n        var newCategories = (0, utils_1.difference)(categories, result);\n        result = result.concat(newCategories);\n        if ((0, utils_1.isEmpty)(newCategories)) {\n            searching = false;\n        }\n        else {\n            categories = newCategories;\n        }\n    }\n    return result;\n}\nexports.expandCategories = expandCategories;\nfunction assignTokenDefaultProps(tokenTypes) {\n    (0, utils_1.forEach)(tokenTypes, function (currTokType) {\n        if (!hasShortKeyProperty(currTokType)) {\n            exports.tokenIdxToClass[exports.tokenShortNameIdx] = currTokType;\n            currTokType.tokenTypeIdx = exports.tokenShortNameIdx++;\n        }\n        // CATEGORIES? : TokenType | TokenType[]\n        if (hasCategoriesProperty(currTokType) &&\n            !(0, utils_1.isArray)(currTokType.CATEGORIES)\n        // &&\n        // !isUndefined(currTokType.CATEGORIES.PATTERN)\n        ) {\n            currTokType.CATEGORIES = [currTokType.CATEGORIES];\n        }\n        if (!hasCategoriesProperty(currTokType)) {\n            currTokType.CATEGORIES = [];\n        }\n        if (!hasExtendingTokensTypesProperty(currTokType)) {\n            currTokType.categoryMatches = [];\n        }\n        if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n            currTokType.categoryMatchesMap = {};\n        }\n    });\n}\nexports.assignTokenDefaultProps = assignTokenDefaultProps;\nfunction assignCategoriesTokensProp(tokenTypes) {\n    (0, utils_1.forEach)(tokenTypes, function (currTokType) {\n        // avoid duplications\n        currTokType.categoryMatches = [];\n        (0, utils_1.forEach)(currTokType.categoryMatchesMap, function (val, key) {\n            currTokType.categoryMatches.push(exports.tokenIdxToClass[key].tokenTypeIdx);\n        });\n    });\n}\nexports.assignCategoriesTokensProp = assignCategoriesTokensProp;\nfunction assignCategoriesMapProp(tokenTypes) {\n    (0, utils_1.forEach)(tokenTypes, function (currTokType) {\n        singleAssignCategoriesToksMap([], currTokType);\n    });\n}\nexports.assignCategoriesMapProp = assignCategoriesMapProp;\nfunction singleAssignCategoriesToksMap(path, nextNode) {\n    (0, utils_1.forEach)(path, function (pathNode) {\n        nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n    });\n    (0, utils_1.forEach)(nextNode.CATEGORIES, function (nextCategory) {\n        var newPath = path.concat(nextNode);\n        // avoids infinite loops due to cyclic categories.\n        if (!(0, utils_1.contains)(newPath, nextCategory)) {\n            singleAssignCategoriesToksMap(newPath, nextCategory);\n        }\n    });\n}\nexports.singleAssignCategoriesToksMap = singleAssignCategoriesToksMap;\nfunction hasShortKeyProperty(tokType) {\n    return (0, utils_1.has)(tokType, \"tokenTypeIdx\");\n}\nexports.hasShortKeyProperty = hasShortKeyProperty;\nfunction hasCategoriesProperty(tokType) {\n    return (0, utils_1.has)(tokType, \"CATEGORIES\");\n}\nexports.hasCategoriesProperty = hasCategoriesProperty;\nfunction hasExtendingTokensTypesProperty(tokType) {\n    return (0, utils_1.has)(tokType, \"categoryMatches\");\n}\nexports.hasExtendingTokensTypesProperty = hasExtendingTokensTypesProperty;\nfunction hasExtendingTokensTypesMapProperty(tokType) {\n    return (0, utils_1.has)(tokType, \"categoryMatchesMap\");\n}\nexports.hasExtendingTokensTypesMapProperty = hasExtendingTokensTypesMapProperty;\nfunction isTokenType(tokType) {\n    return (0, utils_1.has)(tokType, \"tokenTypeIdx\");\n}\nexports.isTokenType = isTokenType;\n//# sourceMappingURL=tokens.js.map"]},"metadata":{},"sourceType":"script"}