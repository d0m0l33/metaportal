{"ast":null,"code":"import { PerspectiveCamera, ShaderMaterial, Scene, OrthographicCamera, WebGLRenderTarget, UniformsUtils, Mesh, PlaneGeometry, LinearFilter, RGBFormat } from 'three';\nimport { BokehDepthShader, BokehShader2 } from '../shaders/BokehShader2.js';\n\nclass CinematicCamera extends PerspectiveCamera {\n  constructor(fov, aspect, near, far) {\n    super(fov, aspect, near, far);\n    this.type = 'CinematicCamera';\n    this.postprocessing = {\n      enabled: true\n    };\n    this.shaderSettings = {\n      rings: 3,\n      samples: 4\n    };\n    const depthShader = BokehDepthShader;\n    this.materialDepth = new ShaderMaterial({\n      uniforms: depthShader.uniforms,\n      vertexShader: depthShader.vertexShader,\n      fragmentShader: depthShader.fragmentShader\n    });\n    this.materialDepth.uniforms['mNear'].value = near;\n    this.materialDepth.uniforms['mFar'].value = far; // In case of cinematicCamera, having a default lens set is important\n\n    this.setLens();\n    this.initPostProcessing();\n  } // providing fnumber and coc(Circle of Confusion) as extra arguments\n\n\n  setLens(focalLength, filmGauge, fNumber, coc) {\n    // In case of cinematicCamera, having a default lens set is important\n    if (focalLength === undefined) focalLength = 35;\n    if (filmGauge !== undefined) this.filmGauge = filmGauge;\n    this.setFocalLength(focalLength); // if fnumber and coc are not provided, cinematicCamera tries to act as a basic PerspectiveCamera\n\n    if (fNumber === undefined) fNumber = 8;\n    if (coc === undefined) coc = 0.019;\n    this.fNumber = fNumber;\n    this.coc = coc; // fNumber is focalLength by aperture\n\n    this.aperture = focalLength / this.fNumber; // hyperFocal is required to calculate depthOfField when a lens tries to focus at a distance with given fNumber and focalLength\n\n    this.hyperFocal = focalLength * focalLength / (this.aperture * this.coc);\n  }\n\n  linearize(depth) {\n    const zfar = this.far;\n    const znear = this.near;\n    return -zfar * znear / (depth * (zfar - znear) - zfar);\n  }\n\n  smoothstep(near, far, depth) {\n    const x = this.saturate((depth - near) / (far - near));\n    return x * x * (3 - 2 * x);\n  }\n\n  saturate(x) {\n    return Math.max(0, Math.min(1, x));\n  } // function for focusing at a distance from the camera\n\n\n  focusAt(focusDistance) {\n    if (focusDistance === undefined) focusDistance = 20;\n    const focalLength = this.getFocalLength(); // distance from the camera (normal to frustrum) to focus on\n\n    this.focus = focusDistance; // the nearest point from the camera which is in focus (unused)\n\n    this.nearPoint = this.hyperFocal * this.focus / (this.hyperFocal + (this.focus - focalLength)); // the farthest point from the camera which is in focus (unused)\n\n    this.farPoint = this.hyperFocal * this.focus / (this.hyperFocal - (this.focus - focalLength)); // the gap or width of the space in which is everything is in focus (unused)\n\n    this.depthOfField = this.farPoint - this.nearPoint; // Considering minimum distance of focus for a standard lens (unused)\n\n    if (this.depthOfField < 0) this.depthOfField = 0;\n    this.sdistance = this.smoothstep(this.near, this.far, this.focus);\n    this.ldistance = this.linearize(1 - this.sdistance);\n    this.postprocessing.bokeh_uniforms['focalDepth'].value = this.ldistance;\n  }\n\n  initPostProcessing() {\n    if (this.postprocessing.enabled) {\n      this.postprocessing.scene = new Scene();\n      this.postprocessing.camera = new OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, -10000, 10000);\n      this.postprocessing.scene.add(this.postprocessing.camera);\n      const pars = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBFormat\n      };\n      this.postprocessing.rtTextureDepth = new WebGLRenderTarget(window.innerWidth, window.innerHeight, pars);\n      this.postprocessing.rtTextureColor = new WebGLRenderTarget(window.innerWidth, window.innerHeight, pars);\n      const bokeh_shader = BokehShader2;\n      this.postprocessing.bokeh_uniforms = UniformsUtils.clone(bokeh_shader.uniforms);\n      this.postprocessing.bokeh_uniforms['tColor'].value = this.postprocessing.rtTextureColor.texture;\n      this.postprocessing.bokeh_uniforms['tDepth'].value = this.postprocessing.rtTextureDepth.texture;\n      this.postprocessing.bokeh_uniforms['manualdof'].value = 0;\n      this.postprocessing.bokeh_uniforms['shaderFocus'].value = 0;\n      this.postprocessing.bokeh_uniforms['fstop'].value = 2.8;\n      this.postprocessing.bokeh_uniforms['showFocus'].value = 1;\n      this.postprocessing.bokeh_uniforms['focalDepth'].value = 0.1; //console.log( this.postprocessing.bokeh_uniforms[ \"focalDepth\" ].value );\n\n      this.postprocessing.bokeh_uniforms['znear'].value = this.near;\n      this.postprocessing.bokeh_uniforms['zfar'].value = this.near;\n      this.postprocessing.bokeh_uniforms['textureWidth'].value = window.innerWidth;\n      this.postprocessing.bokeh_uniforms['textureHeight'].value = window.innerHeight;\n      this.postprocessing.materialBokeh = new ShaderMaterial({\n        uniforms: this.postprocessing.bokeh_uniforms,\n        vertexShader: bokeh_shader.vertexShader,\n        fragmentShader: bokeh_shader.fragmentShader,\n        defines: {\n          RINGS: this.shaderSettings.rings,\n          SAMPLES: this.shaderSettings.samples,\n          DEPTH_PACKING: 1\n        }\n      });\n      this.postprocessing.quad = new Mesh(new PlaneGeometry(window.innerWidth, window.innerHeight), this.postprocessing.materialBokeh);\n      this.postprocessing.quad.position.z = -500;\n      this.postprocessing.scene.add(this.postprocessing.quad);\n    }\n  }\n\n  renderCinematic(scene, renderer) {\n    if (this.postprocessing.enabled) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      renderer.clear(); // Render scene into texture\n\n      scene.overrideMaterial = null;\n      renderer.setRenderTarget(this.postprocessing.rtTextureColor);\n      renderer.clear();\n      renderer.render(scene, this); // Render depth into texture\n\n      scene.overrideMaterial = this.materialDepth;\n      renderer.setRenderTarget(this.postprocessing.rtTextureDepth);\n      renderer.clear();\n      renderer.render(scene, this); // Render bokeh composite\n\n      renderer.setRenderTarget(null);\n      renderer.render(this.postprocessing.scene, this.postprocessing.camera);\n      renderer.setRenderTarget(currentRenderTarget);\n    }\n  }\n\n}\n\nexport { CinematicCamera };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/cameras/CinematicCamera.js"],"names":["PerspectiveCamera","ShaderMaterial","Scene","OrthographicCamera","WebGLRenderTarget","UniformsUtils","Mesh","PlaneGeometry","LinearFilter","RGBFormat","BokehDepthShader","BokehShader2","CinematicCamera","constructor","fov","aspect","near","far","type","postprocessing","enabled","shaderSettings","rings","samples","depthShader","materialDepth","uniforms","vertexShader","fragmentShader","value","setLens","initPostProcessing","focalLength","filmGauge","fNumber","coc","undefined","setFocalLength","aperture","hyperFocal","linearize","depth","zfar","znear","smoothstep","x","saturate","Math","max","min","focusAt","focusDistance","getFocalLength","focus","nearPoint","farPoint","depthOfField","sdistance","ldistance","bokeh_uniforms","scene","camera","window","innerWidth","innerHeight","add","pars","minFilter","magFilter","format","rtTextureDepth","rtTextureColor","bokeh_shader","clone","texture","materialBokeh","defines","RINGS","SAMPLES","DEPTH_PACKING","quad","position","z","renderCinematic","renderer","currentRenderTarget","getRenderTarget","clear","overrideMaterial","setRenderTarget","render"],"mappings":"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","sourcesContent":["import { PerspectiveCamera, ShaderMaterial, Scene, OrthographicCamera, WebGLRenderTarget, UniformsUtils, Mesh, PlaneGeometry, LinearFilter, RGBFormat } from 'three';\nimport { BokehDepthShader, BokehShader2 } from '../shaders/BokehShader2.js';\n\nclass CinematicCamera extends PerspectiveCamera {\n  constructor(fov, aspect, near, far) {\n    super(fov, aspect, near, far);\n    this.type = 'CinematicCamera';\n    this.postprocessing = {\n      enabled: true\n    };\n    this.shaderSettings = {\n      rings: 3,\n      samples: 4\n    };\n    const depthShader = BokehDepthShader;\n    this.materialDepth = new ShaderMaterial({\n      uniforms: depthShader.uniforms,\n      vertexShader: depthShader.vertexShader,\n      fragmentShader: depthShader.fragmentShader\n    });\n    this.materialDepth.uniforms['mNear'].value = near;\n    this.materialDepth.uniforms['mFar'].value = far; // In case of cinematicCamera, having a default lens set is important\n\n    this.setLens();\n    this.initPostProcessing();\n  } // providing fnumber and coc(Circle of Confusion) as extra arguments\n\n\n  setLens(focalLength, filmGauge, fNumber, coc) {\n    // In case of cinematicCamera, having a default lens set is important\n    if (focalLength === undefined) focalLength = 35;\n    if (filmGauge !== undefined) this.filmGauge = filmGauge;\n    this.setFocalLength(focalLength); // if fnumber and coc are not provided, cinematicCamera tries to act as a basic PerspectiveCamera\n\n    if (fNumber === undefined) fNumber = 8;\n    if (coc === undefined) coc = 0.019;\n    this.fNumber = fNumber;\n    this.coc = coc; // fNumber is focalLength by aperture\n\n    this.aperture = focalLength / this.fNumber; // hyperFocal is required to calculate depthOfField when a lens tries to focus at a distance with given fNumber and focalLength\n\n    this.hyperFocal = focalLength * focalLength / (this.aperture * this.coc);\n  }\n\n  linearize(depth) {\n    const zfar = this.far;\n    const znear = this.near;\n    return -zfar * znear / (depth * (zfar - znear) - zfar);\n  }\n\n  smoothstep(near, far, depth) {\n    const x = this.saturate((depth - near) / (far - near));\n    return x * x * (3 - 2 * x);\n  }\n\n  saturate(x) {\n    return Math.max(0, Math.min(1, x));\n  } // function for focusing at a distance from the camera\n\n\n  focusAt(focusDistance) {\n    if (focusDistance === undefined) focusDistance = 20;\n    const focalLength = this.getFocalLength(); // distance from the camera (normal to frustrum) to focus on\n\n    this.focus = focusDistance; // the nearest point from the camera which is in focus (unused)\n\n    this.nearPoint = this.hyperFocal * this.focus / (this.hyperFocal + (this.focus - focalLength)); // the farthest point from the camera which is in focus (unused)\n\n    this.farPoint = this.hyperFocal * this.focus / (this.hyperFocal - (this.focus - focalLength)); // the gap or width of the space in which is everything is in focus (unused)\n\n    this.depthOfField = this.farPoint - this.nearPoint; // Considering minimum distance of focus for a standard lens (unused)\n\n    if (this.depthOfField < 0) this.depthOfField = 0;\n    this.sdistance = this.smoothstep(this.near, this.far, this.focus);\n    this.ldistance = this.linearize(1 - this.sdistance);\n    this.postprocessing.bokeh_uniforms['focalDepth'].value = this.ldistance;\n  }\n\n  initPostProcessing() {\n    if (this.postprocessing.enabled) {\n      this.postprocessing.scene = new Scene();\n      this.postprocessing.camera = new OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, -10000, 10000);\n      this.postprocessing.scene.add(this.postprocessing.camera);\n      const pars = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBFormat\n      };\n      this.postprocessing.rtTextureDepth = new WebGLRenderTarget(window.innerWidth, window.innerHeight, pars);\n      this.postprocessing.rtTextureColor = new WebGLRenderTarget(window.innerWidth, window.innerHeight, pars);\n      const bokeh_shader = BokehShader2;\n      this.postprocessing.bokeh_uniforms = UniformsUtils.clone(bokeh_shader.uniforms);\n      this.postprocessing.bokeh_uniforms['tColor'].value = this.postprocessing.rtTextureColor.texture;\n      this.postprocessing.bokeh_uniforms['tDepth'].value = this.postprocessing.rtTextureDepth.texture;\n      this.postprocessing.bokeh_uniforms['manualdof'].value = 0;\n      this.postprocessing.bokeh_uniforms['shaderFocus'].value = 0;\n      this.postprocessing.bokeh_uniforms['fstop'].value = 2.8;\n      this.postprocessing.bokeh_uniforms['showFocus'].value = 1;\n      this.postprocessing.bokeh_uniforms['focalDepth'].value = 0.1; //console.log( this.postprocessing.bokeh_uniforms[ \"focalDepth\" ].value );\n\n      this.postprocessing.bokeh_uniforms['znear'].value = this.near;\n      this.postprocessing.bokeh_uniforms['zfar'].value = this.near;\n      this.postprocessing.bokeh_uniforms['textureWidth'].value = window.innerWidth;\n      this.postprocessing.bokeh_uniforms['textureHeight'].value = window.innerHeight;\n      this.postprocessing.materialBokeh = new ShaderMaterial({\n        uniforms: this.postprocessing.bokeh_uniforms,\n        vertexShader: bokeh_shader.vertexShader,\n        fragmentShader: bokeh_shader.fragmentShader,\n        defines: {\n          RINGS: this.shaderSettings.rings,\n          SAMPLES: this.shaderSettings.samples,\n          DEPTH_PACKING: 1\n        }\n      });\n      this.postprocessing.quad = new Mesh(new PlaneGeometry(window.innerWidth, window.innerHeight), this.postprocessing.materialBokeh);\n      this.postprocessing.quad.position.z = -500;\n      this.postprocessing.scene.add(this.postprocessing.quad);\n    }\n  }\n\n  renderCinematic(scene, renderer) {\n    if (this.postprocessing.enabled) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      renderer.clear(); // Render scene into texture\n\n      scene.overrideMaterial = null;\n      renderer.setRenderTarget(this.postprocessing.rtTextureColor);\n      renderer.clear();\n      renderer.render(scene, this); // Render depth into texture\n\n      scene.overrideMaterial = this.materialDepth;\n      renderer.setRenderTarget(this.postprocessing.rtTextureDepth);\n      renderer.clear();\n      renderer.render(scene, this); // Render bokeh composite\n\n      renderer.setRenderTarget(null);\n      renderer.render(this.postprocessing.scene, this.postprocessing.camera);\n      renderer.setRenderTarget(currentRenderTarget);\n    }\n  }\n\n}\n\nexport { CinematicCamera };\n"]},"metadata":{},"sourceType":"module"}