{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateRedundantMethods = exports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar lang_extensions_1 = require(\"../../lang/lang_extensions\");\n\nfunction defaultVisit(ctx, param) {\n  var childrenNames = (0, utils_1.keys)(ctx);\n  var childrenNamesLength = childrenNames.length;\n\n  for (var i = 0; i < childrenNamesLength; i++) {\n    var currChildName = childrenNames[i];\n    var currChildArray = ctx[currChildName];\n    var currChildArrayLength = currChildArray.length;\n\n    for (var j = 0; j < currChildArrayLength; j++) {\n      var currChild = currChildArray[j]; // distinction between Tokens Children and CstNode children\n\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  } // defaultVisit does not support generic out param\n\n\n  return undefined;\n}\n\nexports.defaultVisit = defaultVisit;\n\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n  var derivedConstructor = function () {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemantics\");\n  var semanticProto = {\n    visit: function (cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if ((0, utils_1.isArray)(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      } // enables passing optional CstNodes concisely.\n\n\n      if ((0, utils_1.isUndefined)(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n    validateVisitor: function () {\n      var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n\n      if (!(0, utils_1.isEmpty)(semanticDefinitionErrors)) {\n        var errorMessages = (0, utils_1.map)(semanticDefinitionErrors, function (currDefError) {\n          return currDefError.msg;\n        });\n        throw Error(\"Errors Detected in CST Visitor <\" + (0, lang_extensions_1.functionName)(this.constructor) + \">:\\n\\t\" + (\"\" + errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n      }\n    }\n  };\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  derivedConstructor._RULE_NAMES = ruleNames;\n  return derivedConstructor;\n}\n\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\n\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n  var derivedConstructor = function () {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n  var withDefaultsProto = Object.create(baseConstructor.prototype);\n  (0, utils_1.forEach)(ruleNames, function (ruleName) {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  return derivedConstructor;\n}\n\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\nvar CstVisitorDefinitionError;\n\n(function (CstVisitorDefinitionError) {\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\n\nfunction validateVisitor(visitorInstance, ruleNames) {\n  var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n  var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n  return missingErrors.concat(redundantErrors);\n}\n\nexports.validateVisitor = validateVisitor;\n\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n  var errors = (0, utils_1.map)(ruleNames, function (currRuleName) {\n    if (!(0, utils_1.isFunction)(visitorInstance[currRuleName])) {\n      return {\n        msg: \"Missing visitor method: <\" + currRuleName + \"> on \" + (0, lang_extensions_1.functionName)(visitorInstance.constructor) + \" CST Visitor.\",\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      };\n    }\n  });\n  return (0, utils_1.compact)(errors);\n}\n\nexports.validateMissingCstMethods = validateMissingCstMethods;\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\n\nfunction validateRedundantMethods(visitorInstance, ruleNames) {\n  var errors = [];\n\n  for (var prop in visitorInstance) {\n    if ((0, utils_1.isFunction)(visitorInstance[prop]) && !(0, utils_1.contains)(VALID_PROP_NAMES, prop) && !(0, utils_1.contains)(ruleNames, prop)) {\n      errors.push({\n        msg: \"Redundant visitor method: <\" + prop + \"> on \" + (0, lang_extensions_1.functionName)(visitorInstance.constructor) + \" CST Visitor\\n\" + \"There is no Grammar Rule corresponding to this method's name.\\n\",\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      });\n    }\n  }\n\n  return errors;\n}\n\nexports.validateRedundantMethods = validateRedundantMethods;","map":{"version":3,"sources":["../../../../src/parse/cst/cst_visitor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateRedundantMethods = exports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nvar lang_extensions_1 = require(\"../../lang/lang_extensions\");\nfunction defaultVisit(ctx, param) {\n    var childrenNames = (0, utils_1.keys)(ctx);\n    var childrenNamesLength = childrenNames.length;\n    for (var i = 0; i < childrenNamesLength; i++) {\n        var currChildName = childrenNames[i];\n        var currChildArray = ctx[currChildName];\n        var currChildArrayLength = currChildArray.length;\n        for (var j = 0; j < currChildArrayLength; j++) {\n            var currChild = currChildArray[j];\n            // distinction between Tokens Children and CstNode children\n            if (currChild.tokenTypeIdx === undefined) {\n                this[currChild.name](currChild.children, param);\n            }\n        }\n    }\n    // defaultVisit does not support generic out param\n    return undefined;\n}\nexports.defaultVisit = defaultVisit;\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemantics\");\n    var semanticProto = {\n        visit: function (cstNode, param) {\n            // enables writing more concise visitor methods when CstNode has only a single child\n            if ((0, utils_1.isArray)(cstNode)) {\n                // A CST Node's children dictionary can never have empty arrays as values\n                // If a key is defined there will be at least one element in the corresponding value array.\n                cstNode = cstNode[0];\n            }\n            // enables passing optional CstNodes concisely.\n            if ((0, utils_1.isUndefined)(cstNode)) {\n                return undefined;\n            }\n            return this[cstNode.name](cstNode.children, param);\n        },\n        validateVisitor: function () {\n            var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n            if (!(0, utils_1.isEmpty)(semanticDefinitionErrors)) {\n                var errorMessages = (0, utils_1.map)(semanticDefinitionErrors, function (currDefError) { return currDefError.msg; });\n                throw Error(\"Errors Detected in CST Visitor <\" + (0, lang_extensions_1.functionName)(this.constructor) + \">:\\n\\t\" + (\"\" + errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n            }\n        }\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n}\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    var withDefaultsProto = Object.create(baseConstructor.prototype);\n    (0, utils_1.forEach)(ruleNames, function (ruleName) {\n        withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n}\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\nvar CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\nfunction validateVisitor(visitorInstance, ruleNames) {\n    var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n    return missingErrors.concat(redundantErrors);\n}\nexports.validateVisitor = validateVisitor;\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n    var errors = (0, utils_1.map)(ruleNames, function (currRuleName) {\n        if (!(0, utils_1.isFunction)(visitorInstance[currRuleName])) {\n            return {\n                msg: \"Missing visitor method: <\" + currRuleName + \"> on \" + (0, lang_extensions_1.functionName)(visitorInstance.constructor) + \" CST Visitor.\",\n                type: CstVisitorDefinitionError.MISSING_METHOD,\n                methodName: currRuleName\n            };\n        }\n    });\n    return (0, utils_1.compact)(errors);\n}\nexports.validateMissingCstMethods = validateMissingCstMethods;\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\nfunction validateRedundantMethods(visitorInstance, ruleNames) {\n    var errors = [];\n    for (var prop in visitorInstance) {\n        if ((0, utils_1.isFunction)(visitorInstance[prop]) &&\n            !(0, utils_1.contains)(VALID_PROP_NAMES, prop) &&\n            !(0, utils_1.contains)(ruleNames, prop)) {\n            errors.push({\n                msg: \"Redundant visitor method: <\" + prop + \"> on \" + (0, lang_extensions_1.functionName)(visitorInstance.constructor) + \" CST Visitor\\n\" +\n                    \"There is no Grammar Rule corresponding to this method's name.\\n\",\n                type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n                methodName: prop\n            });\n        }\n    }\n    return errors;\n}\nexports.validateRedundantMethods = validateRedundantMethods;\n//# sourceMappingURL=cst_visitor.js.map"]},"metadata":{},"sourceType":"script"}