{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { getSuccessfulTransactionCount, parseForBadgesForTypes, parseResponseForItems } from './BadgeHelper';\nimport { useEthers } from '@usedapp/core';\nimport { getTransactionsFor } from './TransactionsAPI';\nexport function useBadgeList(signerAddress, overrideChainId, tags) {\n  _s();\n\n  const {\n    account,\n    chainId: providerChainId\n  } = useEthers();\n  const [badges, setBadges] = useState();\n  const chainId = overrideChainId || providerChainId;\n  useEffect(() => {\n    getTransactionsFor(signerAddress).then(async response => {\n      if (response) {\n        const items = parseResponseForItems(response);\n        console.log(response);\n\n        if (items) {\n          const successCount = getSuccessfulTransactionCount(items);\n          const badges = parseForBadgesForTypes([successCount]);\n          setBadges(badges);\n        } else {\n          // should do something with this case\n          // in theory there should always be the defalt badge\n          // if an account is connected\n          setBadges(undefined);\n        }\n      } else {\n        const errorMessage = 'Couldnt fetch transaction data';\n        return Promise.reject(new Error(errorMessage));\n      }\n    }).catch(err => {\n      console.log(err);\n      setBadges(undefined);\n    });\n  }, [account]);\n  return badges;\n}\n\n_s(useBadgeList, \"T+5dwzrdNVeW0wP7rX4IoBz6/xU=\", false, function () {\n  return [useEthers];\n});","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/portalHooks/useBadgeList.ts"],"names":["useEffect","useState","getSuccessfulTransactionCount","parseForBadgesForTypes","parseResponseForItems","useEthers","getTransactionsFor","useBadgeList","signerAddress","overrideChainId","tags","account","chainId","providerChainId","badges","setBadges","then","response","items","console","log","successCount","undefined","errorMessage","Promise","reject","Error","catch","err"],"mappings":";;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,6BAAT,EAAwCC,sBAAxC,EAAgEC,qBAAhE,QAA6F,eAA7F;AACA,SAAkBC,SAAlB,QAAmC,eAAnC;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AAOA,OAAO,SAASC,YAAT,CAAsBC,aAAtB,EAA4DC,eAA5D,EAAuFC,IAAvF,EAAwG;AAAA;;AAC7G,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAO,EAAEC;AAApB,MAAwCR,SAAS,EAAvD;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBd,QAAQ,EAApC;AACA,QAAMW,OAAO,GAAGH,eAAe,IAAII,eAAnC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,kBAAkB,CAACE,aAAD,CAAlB,CACGQ,IADH,CACQ,MAAOC,QAAP,IAAoB;AACxB,UAAIA,QAAJ,EAAc;AACV,cAAMC,KAAK,GAAGd,qBAAqB,CAACa,QAAD,CAAnC;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;;AACA,YAAGC,KAAH,EAAU;AACN,gBAAMG,YAAY,GAAGnB,6BAA6B,CAACgB,KAAD,CAAlD;AACA,gBAAMJ,MAAM,GAAGX,sBAAsB,CAAC,CAACkB,YAAD,CAAD,CAArC;AACAN,UAAAA,SAAS,CAACD,MAAD,CAAT;AACH,SAJD,MAIO;AACH;AACA;AACA;AACAC,UAAAA,SAAS,CAACO,SAAD,CAAT;AACH;AACJ,OAbD,MAaO;AACL,cAAMC,YAAY,GAAG,gCAArB;AACA,eAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAUH,YAAV,CAAf,CAAP;AACD;AACF,KAnBH,EAoBGI,KApBH,CAoBUC,GAAD,IAAS;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACAb,MAAAA,SAAS,CAACO,SAAD,CAAT;AACD,KAvBH;AAwBD,GAzBQ,EAyBN,CAACX,OAAD,CAzBM,CAAT;AA0BA,SAAOG,MAAP;AACD;;GAhCeP,Y;UACgCF,S","sourcesContent":["import axios, { AxiosResponse } from 'axios'\nimport { useEffect, useState } from 'react'\nimport { getSuccessfulTransactionCount, parseForBadgesForTypes, parseResponseForItems } from './BadgeHelper'\nimport { ChainId, useEthers } from '@usedapp/core'\nimport { getTransactionsFor } from './TransactionsAPI'\n\ninterface Badge {\n    badgeName: string \n    value: number\n  }\n\nexport function useBadgeList(signerAddress: string|null|undefined, overrideChainId?: ChainId, tags?: string[]) {\n  const { account, chainId: providerChainId } = useEthers()\n  const [badges, setBadges] = useState<Badge[]>()\n  const chainId = overrideChainId || providerChainId\n\n  useEffect(() => {\n    getTransactionsFor(signerAddress)\n      .then(async (response) => {\n        if (response) {\n            const items = parseResponseForItems(response);\n            console.log(response)\n            if(items) {\n                const successCount = getSuccessfulTransactionCount(items);\n                const badges = parseForBadgesForTypes([successCount]);\n                setBadges(badges);\n            } else {\n                // should do something with this case\n                // in theory there should always be the defalt badge\n                // if an account is connected\n                setBadges(undefined);\n            }\n        } else {\n          const errorMessage = 'Couldnt fetch transaction data';\n          return Promise.reject(new Error(errorMessage))\n        }\n      })\n      .catch((err) => {\n        console.log(err)\n        setBadges(undefined)\n      })\n  }, [account])\n  return badges\n}\n"]},"metadata":{},"sourceType":"module"}