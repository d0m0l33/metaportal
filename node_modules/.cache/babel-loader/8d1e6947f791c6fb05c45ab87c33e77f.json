{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { MeshStandardMaterial } from 'three';\n\nvar MeshReflectorMaterial = /*#__PURE__*/function (_MeshStandardMaterial) {\n  _inherits(MeshReflectorMaterial, _MeshStandardMaterial);\n\n  var _super = _createSuper(MeshReflectorMaterial);\n\n  function MeshReflectorMaterial() {\n    var _this;\n\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, MeshReflectorMaterial);\n\n    _this = _super.call(this, parameters);\n    _this._debug = {\n      value: 0\n    };\n    _this._tDepth = {\n      value: null\n    };\n    _this._distortionMap = {\n      value: null\n    };\n    _this._tDiffuse = {\n      value: null\n    };\n    _this._u_mipmap_0 = {\n      value: null\n    };\n    _this._u_mipmap_1 = {\n      value: null\n    };\n    _this._u_mipmap_2 = {\n      value: null\n    };\n    _this._u_mipmap_3 = {\n      value: null\n    };\n    _this._u_mipmap_4 = {\n      value: null\n    };\n    _this._u_mipmap_5 = {\n      value: null\n    };\n    _this._u_mipmap_6 = {\n      value: null\n    };\n    _this._u_mipmap_7 = {\n      value: null\n    };\n    _this._u_mipmap_res_0 = {\n      value: null\n    };\n    _this._u_mipmap_res_1 = {\n      value: null\n    };\n    _this._u_mipmap_res_2 = {\n      value: null\n    };\n    _this._u_mipmap_res_3 = {\n      value: null\n    };\n    _this._u_mipmap_res_4 = {\n      value: null\n    };\n    _this._u_mipmap_res_5 = {\n      value: null\n    };\n    _this._u_mipmap_res_6 = {\n      value: null\n    };\n    _this._u_mipmap_res_7 = {\n      value: null\n    };\n    _this._textureMatrix = {\n      value: null\n    };\n    _this._mirror = {\n      value: 0.0\n    };\n    _this._mixBlur = {\n      value: 0.0\n    };\n    _this._blurStrength = {\n      value: 0.5\n    };\n    _this._minDepthThreshold = {\n      value: 0.9\n    };\n    _this._maxDepthThreshold = {\n      value: 1\n    };\n    _this._depthScale = {\n      value: 0\n    };\n    _this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    _this._distortion = {\n      value: 1\n    };\n\n    _this.setValues(parameters);\n\n    return _this;\n  }\n\n  _createClass(MeshReflectorMaterial, [{\n    key: \"onBeforeCompile\",\n    value: function onBeforeCompile(shader) {\n      var _shader$defines;\n\n      if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n        shader.defines.USE_UV = '';\n      }\n\n      shader.uniforms.debug = this._debug;\n      shader.uniforms.tDiffuse = this._tDiffuse;\n      shader.uniforms.tDepth = this._tDepth;\n      shader.uniforms.distortionMap = this._distortionMap;\n      shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n      shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n      shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n      shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n      shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n      shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n      shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n      shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n      shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n      shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n      shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n      shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n      shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n      shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n      shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n      shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n      shader.uniforms.textureMatrix = this._textureMatrix;\n      shader.uniforms.mirror = this._mirror;\n      shader.uniforms.mixBlur = this._mixBlur;\n      shader.uniforms.mixStrength = this._blurStrength;\n      shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n      shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n      shader.uniforms.depthScale = this._depthScale;\n      shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n      shader.uniforms.distortion = this._distortion;\n      shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \".concat(shader.vertexShader);\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n      shader.fragmentShader = \"\\n        uniform int debug;\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDepth;\\n        uniform sampler2D distortionMap;\\n        uniform sampler2D u_mipmap_0;\\n        uniform sampler2D u_mipmap_1;\\n        uniform sampler2D u_mipmap_2;\\n        uniform sampler2D u_mipmap_3;\\n        uniform sampler2D u_mipmap_4;\\n        uniform sampler2D u_mipmap_5;\\n        uniform sampler2D u_mipmap_6;\\n        uniform sampler2D u_mipmap_7;\\n        uniform vec2 u_mipmap_res_0;\\n        uniform vec2 u_mipmap_res_1;\\n        uniform vec2 u_mipmap_res_2;\\n        uniform vec2 u_mipmap_res_3;\\n        uniform vec2 u_mipmap_res_4;\\n        uniform vec2 u_mipmap_res_5;\\n        uniform vec2 u_mipmap_res_6;\\n        uniform vec2 u_mipmap_res_7;\\n        uniform float distortion;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec4 my_vUv;  \\n        \\n        // from http://www.java-gaming.org/index.php?topic=35123.0\\n        vec4 cubic( float v ) {\\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\\n          vec4 s = n * n * n;\\n          float x = s.x;\\n          float y = s.y - 4.0 * s.x;\\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\\n          float w = 6.0 - x - y - z;\\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\\n        }\\n        \\n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\\n          vec2 invTexSize = 1.0 / texSize;\\n          texCoords = texCoords * texSize - 0.5;\\n          vec2 fxy = fract( texCoords );\\n          texCoords -= fxy;\\n\\n          vec4 xcubic = cubic( fxy.x );\\n          vec4 ycubic = cubic( fxy.y );\\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\\n\\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\\n          offset *= invTexSize.xxyy;\\n        \\n          vec4 sample0 = texture2D( sampler, offset.xz);\\n          vec4 sample1 = texture2D( sampler, offset.yz);\\n          vec4 sample2 = texture2D( sampler, offset.xw);\\n          vec4 sample3 = texture2D( sampler, offset.yw);\\n        \\n          float sx = s.x / ( s.x + s.y );\\n          float sy = s.z / ( s.z + s.w );\\n\\n          return mix(\\n            mix(\\n              sample3,\\n              sample2,\\n              sx\\n            ),\\n            mix(\\n              sample1,\\n              sample0,\\n              sx\\n            ),\\n            sy\\n          );\\n        }\\n\\n\\n        \".concat(shader.fragmentShader);\n      shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n    \\n      float depthFactor = 1.0;\\n      float distortionFactor = 0.0;\\n      vec3 my_normal = vec3(0.0);\\n      float reflectorRoughnessFactor = roughness;\\n      vec3 coord = my_vUv.xyz / my_vUv.w;\\n\\n      #ifdef USE_DISTORTION\\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\\n      #endif\\n\\n      #ifdef USE_NORMALMAP\\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\\n      #endif\\n\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n\\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\\n      proj_vUv.x += distortionFactor;\\n      proj_vUv.y += distortionFactor;\\n      \\n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\\n\\n      #ifdef USE_DEPTH\\n        vec4 depth = texture2D(tDepth, proj_vUv);\\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n        depthFactor *= depthScale;\\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\\n      #endif\\n\\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\\n      vec4 mixedColor;\\n\\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\\n      if (_lod < 1.) {\\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        mixedColor = mix(one, two, _lod);\\n      } else if (_lod < 2.) {\\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        mixedColor = mix(one, two, _lod - 1.0);\\n      } else if (_lod < 3.) {\\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        mixedColor = mix(one, two, _lod - 2.0);\\n      } else if (_lod < 4.) {\\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        mixedColor = mix(one, two, _lod - 3.0);\\n      } else if (_lod < 5.) {\\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        mixedColor = mix(one, two, _lod - 4.0);\\n      } else if (_lod < 6.) {\\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        mixedColor = mix(one, two, _lod - 5.0);\\n      } else if (_lod < 7.) {\\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, two, _lod - 6.0);\\n      } else {\\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, baseColor, _lod - 7.0);\\n      }\\n\\n      mixedColor.rgb *= depthFactor;\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \\n      diffuseColor = sRGBToLinear(diffuseColor);\\n\\n      if (debug == 1) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\\n      }\\n      if (debug == 2) {\\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\\n      }\\n      if (debug == 3) {\\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\\n      }\\n      if (debug == 4) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\\n      }\\n      \");\n    }\n  }, {\n    key: \"tDiffuse\",\n    get: function get() {\n      return this._tDiffuse.value;\n    },\n    set: function set(v) {\n      this._tDiffuse.value = v;\n    }\n  }, {\n    key: \"tDepth\",\n    get: function get() {\n      return this._tDepth.value;\n    },\n    set: function set(v) {\n      this._tDepth.value = v;\n    }\n  }, {\n    key: \"distortionMap\",\n    get: function get() {\n      return this._distortionMap.value;\n    },\n    set: function set(v) {\n      this._distortionMap.value = v;\n    }\n  }, {\n    key: \"u_mipmap_0\",\n    get: function get() {\n      return this._u_mipmap_0.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_0.value = v;\n    }\n  }, {\n    key: \"u_mipmap_1\",\n    get: function get() {\n      return this._u_mipmap_1.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_1.value = v;\n    }\n  }, {\n    key: \"u_mipmap_2\",\n    get: function get() {\n      return this._u_mipmap_2.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_2.value = v;\n    }\n  }, {\n    key: \"u_mipmap_3\",\n    get: function get() {\n      return this._u_mipmap_3.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_3.value = v;\n    }\n  }, {\n    key: \"u_mipmap_4\",\n    get: function get() {\n      return this._u_mipmap_4.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_4.value = v;\n    }\n  }, {\n    key: \"u_mipmap_5\",\n    get: function get() {\n      return this._u_mipmap_5.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_5.value = v;\n    }\n  }, {\n    key: \"u_mipmap_6\",\n    get: function get() {\n      return this._u_mipmap_6.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_6.value = v;\n    }\n  }, {\n    key: \"u_mipmap_7\",\n    get: function get() {\n      return this._u_mipmap_7.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_7.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_0\",\n    get: function get() {\n      return this._u_mipmap_res_0.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_0.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_1\",\n    get: function get() {\n      return this._u_mipmap_res_1.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_1.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_2\",\n    get: function get() {\n      return this._u_mipmap_res_2.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_2.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_3\",\n    get: function get() {\n      return this._u_mipmap_res_3.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_3.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_4\",\n    get: function get() {\n      return this._u_mipmap_res_4.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_4.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_5\",\n    get: function get() {\n      return this._u_mipmap_res_5.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_5.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_6\",\n    get: function get() {\n      return this._u_mipmap_res_6.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_6.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_7\",\n    get: function get() {\n      return this._u_mipmap_res_7.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_7.value = v;\n    }\n  }, {\n    key: \"textureMatrix\",\n    get: function get() {\n      return this._textureMatrix.value;\n    },\n    set: function set(v) {\n      this._textureMatrix.value = v;\n    }\n  }, {\n    key: \"mirror\",\n    get: function get() {\n      return this._mirror.value;\n    },\n    set: function set(v) {\n      this._mirror.value = v;\n    }\n  }, {\n    key: \"mixBlur\",\n    get: function get() {\n      return this._mixBlur.value;\n    },\n    set: function set(v) {\n      this._mixBlur.value = v;\n    }\n  }, {\n    key: \"mixStrength\",\n    get: function get() {\n      return this._blurStrength.value;\n    },\n    set: function set(v) {\n      this._blurStrength.value = v;\n    }\n  }, {\n    key: \"minDepthThreshold\",\n    get: function get() {\n      return this._minDepthThreshold.value;\n    },\n    set: function set(v) {\n      this._minDepthThreshold.value = v;\n    }\n  }, {\n    key: \"maxDepthThreshold\",\n    get: function get() {\n      return this._maxDepthThreshold.value;\n    },\n    set: function set(v) {\n      this._maxDepthThreshold.value = v;\n    }\n  }, {\n    key: \"depthScale\",\n    get: function get() {\n      return this._depthScale.value;\n    },\n    set: function set(v) {\n      this._depthScale.value = v;\n    }\n  }, {\n    key: \"debug\",\n    get: function get() {\n      return this._debug.value;\n    },\n    set: function set(v) {\n      this._debug.value = v;\n    }\n  }, {\n    key: \"depthToBlurRatioBias\",\n    get: function get() {\n      return this._depthToBlurRatioBias.value;\n    },\n    set: function set(v) {\n      this._depthToBlurRatioBias.value = v;\n    }\n  }, {\n    key: \"distortion\",\n    get: function get() {\n      return this._distortion.value;\n    },\n    set: function set(v) {\n      this._distortion.value = v;\n    }\n  }]);\n\n  return MeshReflectorMaterial;\n}(MeshStandardMaterial);\n\nexport { MeshReflectorMaterial };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"names":["MeshStandardMaterial","MeshReflectorMaterial","parameters","_debug","value","_tDepth","_distortionMap","_tDiffuse","_u_mipmap_0","_u_mipmap_1","_u_mipmap_2","_u_mipmap_3","_u_mipmap_4","_u_mipmap_5","_u_mipmap_6","_u_mipmap_7","_u_mipmap_res_0","_u_mipmap_res_1","_u_mipmap_res_2","_u_mipmap_res_3","_u_mipmap_res_4","_u_mipmap_res_5","_u_mipmap_res_6","_u_mipmap_res_7","_textureMatrix","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","setValues","shader","_shader$defines","defines","USE_UV","uniforms","debug","tDiffuse","tDepth","distortionMap","u_mipmap_0","u_mipmap_1","u_mipmap_2","u_mipmap_3","u_mipmap_4","u_mipmap_5","u_mipmap_6","u_mipmap_7","u_mipmap_res_0","u_mipmap_res_1","u_mipmap_res_2","u_mipmap_res_3","u_mipmap_res_4","u_mipmap_res_5","u_mipmap_res_6","u_mipmap_res_7","textureMatrix","mirror","mixBlur","mixStrength","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","distortion","vertexShader","replace","fragmentShader","v"],"mappings":";;;;AAAA,SAASA,oBAAT,QAAqC,OAArC;;IAEMC,qB;;;;;AACJ,mCAA6B;AAAA;;AAAA,QAAjBC,UAAiB,uEAAJ,EAAI;;AAAA;;AAC3B,8BAAMA,UAAN;AACA,UAAKC,MAAL,GAAc;AACZC,MAAAA,KAAK,EAAE;AADK,KAAd;AAGA,UAAKC,OAAL,GAAe;AACbD,MAAAA,KAAK,EAAE;AADM,KAAf;AAGA,UAAKE,cAAL,GAAsB;AACpBF,MAAAA,KAAK,EAAE;AADa,KAAtB;AAGA,UAAKG,SAAL,GAAiB;AACfH,MAAAA,KAAK,EAAE;AADQ,KAAjB;AAGA,UAAKI,WAAL,GAAmB;AACjBJ,MAAAA,KAAK,EAAE;AADU,KAAnB;AAGA,UAAKK,WAAL,GAAmB;AACjBL,MAAAA,KAAK,EAAE;AADU,KAAnB;AAGA,UAAKM,WAAL,GAAmB;AACjBN,MAAAA,KAAK,EAAE;AADU,KAAnB;AAGA,UAAKO,WAAL,GAAmB;AACjBP,MAAAA,KAAK,EAAE;AADU,KAAnB;AAGA,UAAKQ,WAAL,GAAmB;AACjBR,MAAAA,KAAK,EAAE;AADU,KAAnB;AAGA,UAAKS,WAAL,GAAmB;AACjBT,MAAAA,KAAK,EAAE;AADU,KAAnB;AAGA,UAAKU,WAAL,GAAmB;AACjBV,MAAAA,KAAK,EAAE;AADU,KAAnB;AAGA,UAAKW,WAAL,GAAmB;AACjBX,MAAAA,KAAK,EAAE;AADU,KAAnB;AAGA,UAAKY,eAAL,GAAuB;AACrBZ,MAAAA,KAAK,EAAE;AADc,KAAvB;AAGA,UAAKa,eAAL,GAAuB;AACrBb,MAAAA,KAAK,EAAE;AADc,KAAvB;AAGA,UAAKc,eAAL,GAAuB;AACrBd,MAAAA,KAAK,EAAE;AADc,KAAvB;AAGA,UAAKe,eAAL,GAAuB;AACrBf,MAAAA,KAAK,EAAE;AADc,KAAvB;AAGA,UAAKgB,eAAL,GAAuB;AACrBhB,MAAAA,KAAK,EAAE;AADc,KAAvB;AAGA,UAAKiB,eAAL,GAAuB;AACrBjB,MAAAA,KAAK,EAAE;AADc,KAAvB;AAGA,UAAKkB,eAAL,GAAuB;AACrBlB,MAAAA,KAAK,EAAE;AADc,KAAvB;AAGA,UAAKmB,eAAL,GAAuB;AACrBnB,MAAAA,KAAK,EAAE;AADc,KAAvB;AAGA,UAAKoB,cAAL,GAAsB;AACpBpB,MAAAA,KAAK,EAAE;AADa,KAAtB;AAGA,UAAKqB,OAAL,GAAe;AACbrB,MAAAA,KAAK,EAAE;AADM,KAAf;AAGA,UAAKsB,QAAL,GAAgB;AACdtB,MAAAA,KAAK,EAAE;AADO,KAAhB;AAGA,UAAKuB,aAAL,GAAqB;AACnBvB,MAAAA,KAAK,EAAE;AADY,KAArB;AAGA,UAAKwB,kBAAL,GAA0B;AACxBxB,MAAAA,KAAK,EAAE;AADiB,KAA1B;AAGA,UAAKyB,kBAAL,GAA0B;AACxBzB,MAAAA,KAAK,EAAE;AADiB,KAA1B;AAGA,UAAK0B,WAAL,GAAmB;AACjB1B,MAAAA,KAAK,EAAE;AADU,KAAnB;AAGA,UAAK2B,qBAAL,GAA6B;AAC3B3B,MAAAA,KAAK,EAAE;AADoB,KAA7B;AAGA,UAAK4B,WAAL,GAAmB;AACjB5B,MAAAA,KAAK,EAAE;AADU,KAAnB;;AAGA,UAAK6B,SAAL,CAAe/B,UAAf;;AAzF2B;AA0F5B;;;;WAED,yBAAgBgC,MAAhB,EAAwB;AACtB,UAAIC,eAAJ;;AAEA,UAAI,EAAE,CAACA,eAAe,GAAGD,MAAM,CAACE,OAA1B,KAAsC,IAAtC,IAA8CD,eAAe,CAACE,MAAhE,CAAJ,EAA6E;AAC3EH,QAAAA,MAAM,CAACE,OAAP,CAAeC,MAAf,GAAwB,EAAxB;AACD;;AAEDH,MAAAA,MAAM,CAACI,QAAP,CAAgBC,KAAhB,GAAwB,KAAKpC,MAA7B;AACA+B,MAAAA,MAAM,CAACI,QAAP,CAAgBE,QAAhB,GAA2B,KAAKjC,SAAhC;AACA2B,MAAAA,MAAM,CAACI,QAAP,CAAgBG,MAAhB,GAAyB,KAAKpC,OAA9B;AACA6B,MAAAA,MAAM,CAACI,QAAP,CAAgBI,aAAhB,GAAgC,KAAKpC,cAArC;AACA4B,MAAAA,MAAM,CAACI,QAAP,CAAgBK,UAAhB,GAA6B,KAAKnC,WAAlC;AACA0B,MAAAA,MAAM,CAACI,QAAP,CAAgBM,UAAhB,GAA6B,KAAKnC,WAAlC;AACAyB,MAAAA,MAAM,CAACI,QAAP,CAAgBO,UAAhB,GAA6B,KAAKnC,WAAlC;AACAwB,MAAAA,MAAM,CAACI,QAAP,CAAgBQ,UAAhB,GAA6B,KAAKnC,WAAlC;AACAuB,MAAAA,MAAM,CAACI,QAAP,CAAgBS,UAAhB,GAA6B,KAAKnC,WAAlC;AACAsB,MAAAA,MAAM,CAACI,QAAP,CAAgBU,UAAhB,GAA6B,KAAKnC,WAAlC;AACAqB,MAAAA,MAAM,CAACI,QAAP,CAAgBW,UAAhB,GAA6B,KAAKnC,WAAlC;AACAoB,MAAAA,MAAM,CAACI,QAAP,CAAgBY,UAAhB,GAA6B,KAAKnC,WAAlC;AACAmB,MAAAA,MAAM,CAACI,QAAP,CAAgBa,cAAhB,GAAiC,KAAKnC,eAAtC;AACAkB,MAAAA,MAAM,CAACI,QAAP,CAAgBc,cAAhB,GAAiC,KAAKnC,eAAtC;AACAiB,MAAAA,MAAM,CAACI,QAAP,CAAgBe,cAAhB,GAAiC,KAAKnC,eAAtC;AACAgB,MAAAA,MAAM,CAACI,QAAP,CAAgBgB,cAAhB,GAAiC,KAAKnC,eAAtC;AACAe,MAAAA,MAAM,CAACI,QAAP,CAAgBiB,cAAhB,GAAiC,KAAKnC,eAAtC;AACAc,MAAAA,MAAM,CAACI,QAAP,CAAgBkB,cAAhB,GAAiC,KAAKnC,eAAtC;AACAa,MAAAA,MAAM,CAACI,QAAP,CAAgBmB,cAAhB,GAAiC,KAAKnC,eAAtC;AACAY,MAAAA,MAAM,CAACI,QAAP,CAAgBoB,cAAhB,GAAiC,KAAKnC,eAAtC;AACAW,MAAAA,MAAM,CAACI,QAAP,CAAgBqB,aAAhB,GAAgC,KAAKnC,cAArC;AACAU,MAAAA,MAAM,CAACI,QAAP,CAAgBsB,MAAhB,GAAyB,KAAKnC,OAA9B;AACAS,MAAAA,MAAM,CAACI,QAAP,CAAgBuB,OAAhB,GAA0B,KAAKnC,QAA/B;AACAQ,MAAAA,MAAM,CAACI,QAAP,CAAgBwB,WAAhB,GAA8B,KAAKnC,aAAnC;AACAO,MAAAA,MAAM,CAACI,QAAP,CAAgByB,iBAAhB,GAAoC,KAAKnC,kBAAzC;AACAM,MAAAA,MAAM,CAACI,QAAP,CAAgB0B,iBAAhB,GAAoC,KAAKnC,kBAAzC;AACAK,MAAAA,MAAM,CAACI,QAAP,CAAgB2B,UAAhB,GAA6B,KAAKnC,WAAlC;AACAI,MAAAA,MAAM,CAACI,QAAP,CAAgB4B,oBAAhB,GAAuC,KAAKnC,qBAA5C;AACAG,MAAAA,MAAM,CAACI,QAAP,CAAgB6B,UAAhB,GAA6B,KAAKnC,WAAlC;AACAE,MAAAA,MAAM,CAACkC,YAAP,6FAGIlC,MAAM,CAACkC,YAHX;AAIAlC,MAAAA,MAAM,CAACkC,YAAP,GAAsBlC,MAAM,CAACkC,YAAP,CAAoBC,OAApB,CAA4B,2BAA5B,0KAAtB;AAGAnC,MAAAA,MAAM,CAACoC,cAAP,8tFAkFMpC,MAAM,CAACoC,cAlFb;AAmFApC,MAAAA,MAAM,CAACoC,cAAP,GAAwBpC,MAAM,CAACoC,cAAP,CAAsBD,OAAtB,CAA8B,iCAA9B,ysHAAxB;AAyFD;;;SAED,eAAe;AACb,aAAO,KAAK9D,SAAL,CAAeH,KAAtB;AACD,K;SAED,aAAamE,CAAb,EAAgB;AACd,WAAKhE,SAAL,CAAeH,KAAf,GAAuBmE,CAAvB;AACD;;;SAED,eAAa;AACX,aAAO,KAAKlE,OAAL,CAAaD,KAApB;AACD,K;SAED,aAAWmE,CAAX,EAAc;AACZ,WAAKlE,OAAL,CAAaD,KAAb,GAAqBmE,CAArB;AACD;;;SAED,eAAoB;AAClB,aAAO,KAAKjE,cAAL,CAAoBF,KAA3B;AACD,K;SAED,aAAkBmE,CAAlB,EAAqB;AACnB,WAAKjE,cAAL,CAAoBF,KAApB,GAA4BmE,CAA5B;AACD;;;SAED,eAAiB;AACf,aAAO,KAAK/D,WAAL,CAAiBJ,KAAxB;AACD,K;SAED,aAAemE,CAAf,EAAkB;AAChB,WAAK/D,WAAL,CAAiBJ,KAAjB,GAAyBmE,CAAzB;AACD;;;SAED,eAAiB;AACf,aAAO,KAAK9D,WAAL,CAAiBL,KAAxB;AACD,K;SAED,aAAemE,CAAf,EAAkB;AAChB,WAAK9D,WAAL,CAAiBL,KAAjB,GAAyBmE,CAAzB;AACD;;;SAED,eAAiB;AACf,aAAO,KAAK7D,WAAL,CAAiBN,KAAxB;AACD,K;SAED,aAAemE,CAAf,EAAkB;AAChB,WAAK7D,WAAL,CAAiBN,KAAjB,GAAyBmE,CAAzB;AACD;;;SAED,eAAiB;AACf,aAAO,KAAK5D,WAAL,CAAiBP,KAAxB;AACD,K;SAED,aAAemE,CAAf,EAAkB;AAChB,WAAK5D,WAAL,CAAiBP,KAAjB,GAAyBmE,CAAzB;AACD;;;SAED,eAAiB;AACf,aAAO,KAAK3D,WAAL,CAAiBR,KAAxB;AACD,K;SAED,aAAemE,CAAf,EAAkB;AAChB,WAAK3D,WAAL,CAAiBR,KAAjB,GAAyBmE,CAAzB;AACD;;;SAED,eAAiB;AACf,aAAO,KAAK1D,WAAL,CAAiBT,KAAxB;AACD,K;SAED,aAAemE,CAAf,EAAkB;AAChB,WAAK1D,WAAL,CAAiBT,KAAjB,GAAyBmE,CAAzB;AACD;;;SAED,eAAiB;AACf,aAAO,KAAKzD,WAAL,CAAiBV,KAAxB;AACD,K;SAED,aAAemE,CAAf,EAAkB;AAChB,WAAKzD,WAAL,CAAiBV,KAAjB,GAAyBmE,CAAzB;AACD;;;SAED,eAAiB;AACf,aAAO,KAAKxD,WAAL,CAAiBX,KAAxB;AACD,K;SAED,aAAemE,CAAf,EAAkB;AAChB,WAAKxD,WAAL,CAAiBX,KAAjB,GAAyBmE,CAAzB;AACD;;;SAED,eAAqB;AACnB,aAAO,KAAKvD,eAAL,CAAqBZ,KAA5B;AACD,K;SAED,aAAmBmE,CAAnB,EAAsB;AACpB,WAAKvD,eAAL,CAAqBZ,KAArB,GAA6BmE,CAA7B;AACD;;;SAED,eAAqB;AACnB,aAAO,KAAKtD,eAAL,CAAqBb,KAA5B;AACD,K;SAED,aAAmBmE,CAAnB,EAAsB;AACpB,WAAKtD,eAAL,CAAqBb,KAArB,GAA6BmE,CAA7B;AACD;;;SAED,eAAqB;AACnB,aAAO,KAAKrD,eAAL,CAAqBd,KAA5B;AACD,K;SAED,aAAmBmE,CAAnB,EAAsB;AACpB,WAAKrD,eAAL,CAAqBd,KAArB,GAA6BmE,CAA7B;AACD;;;SAED,eAAqB;AACnB,aAAO,KAAKpD,eAAL,CAAqBf,KAA5B;AACD,K;SAED,aAAmBmE,CAAnB,EAAsB;AACpB,WAAKpD,eAAL,CAAqBf,KAArB,GAA6BmE,CAA7B;AACD;;;SAED,eAAqB;AACnB,aAAO,KAAKnD,eAAL,CAAqBhB,KAA5B;AACD,K;SAED,aAAmBmE,CAAnB,EAAsB;AACpB,WAAKnD,eAAL,CAAqBhB,KAArB,GAA6BmE,CAA7B;AACD;;;SAED,eAAqB;AACnB,aAAO,KAAKlD,eAAL,CAAqBjB,KAA5B;AACD,K;SAED,aAAmBmE,CAAnB,EAAsB;AACpB,WAAKlD,eAAL,CAAqBjB,KAArB,GAA6BmE,CAA7B;AACD;;;SAED,eAAqB;AACnB,aAAO,KAAKjD,eAAL,CAAqBlB,KAA5B;AACD,K;SAED,aAAmBmE,CAAnB,EAAsB;AACpB,WAAKjD,eAAL,CAAqBlB,KAArB,GAA6BmE,CAA7B;AACD;;;SAED,eAAqB;AACnB,aAAO,KAAKhD,eAAL,CAAqBnB,KAA5B;AACD,K;SAED,aAAmBmE,CAAnB,EAAsB;AACpB,WAAKhD,eAAL,CAAqBnB,KAArB,GAA6BmE,CAA7B;AACD;;;SAED,eAAoB;AAClB,aAAO,KAAK/C,cAAL,CAAoBpB,KAA3B;AACD,K;SAED,aAAkBmE,CAAlB,EAAqB;AACnB,WAAK/C,cAAL,CAAoBpB,KAApB,GAA4BmE,CAA5B;AACD;;;SAED,eAAa;AACX,aAAO,KAAK9C,OAAL,CAAarB,KAApB;AACD,K;SAED,aAAWmE,CAAX,EAAc;AACZ,WAAK9C,OAAL,CAAarB,KAAb,GAAqBmE,CAArB;AACD;;;SAED,eAAc;AACZ,aAAO,KAAK7C,QAAL,CAActB,KAArB;AACD,K;SAED,aAAYmE,CAAZ,EAAe;AACb,WAAK7C,QAAL,CAActB,KAAd,GAAsBmE,CAAtB;AACD;;;SAED,eAAkB;AAChB,aAAO,KAAK5C,aAAL,CAAmBvB,KAA1B;AACD,K;SAED,aAAgBmE,CAAhB,EAAmB;AACjB,WAAK5C,aAAL,CAAmBvB,KAAnB,GAA2BmE,CAA3B;AACD;;;SAED,eAAwB;AACtB,aAAO,KAAK3C,kBAAL,CAAwBxB,KAA/B;AACD,K;SAED,aAAsBmE,CAAtB,EAAyB;AACvB,WAAK3C,kBAAL,CAAwBxB,KAAxB,GAAgCmE,CAAhC;AACD;;;SAED,eAAwB;AACtB,aAAO,KAAK1C,kBAAL,CAAwBzB,KAA/B;AACD,K;SAED,aAAsBmE,CAAtB,EAAyB;AACvB,WAAK1C,kBAAL,CAAwBzB,KAAxB,GAAgCmE,CAAhC;AACD;;;SAED,eAAiB;AACf,aAAO,KAAKzC,WAAL,CAAiB1B,KAAxB;AACD,K;SAED,aAAemE,CAAf,EAAkB;AAChB,WAAKzC,WAAL,CAAiB1B,KAAjB,GAAyBmE,CAAzB;AACD;;;SAED,eAAY;AACV,aAAO,KAAKpE,MAAL,CAAYC,KAAnB;AACD,K;SAED,aAAUmE,CAAV,EAAa;AACX,WAAKpE,MAAL,CAAYC,KAAZ,GAAoBmE,CAApB;AACD;;;SAED,eAA2B;AACzB,aAAO,KAAKxC,qBAAL,CAA2B3B,KAAlC;AACD,K;SAED,aAAyBmE,CAAzB,EAA4B;AAC1B,WAAKxC,qBAAL,CAA2B3B,KAA3B,GAAmCmE,CAAnC;AACD;;;SAED,eAAiB;AACf,aAAO,KAAKvC,WAAL,CAAiB5B,KAAxB;AACD,K;SAED,aAAemE,CAAf,EAAkB;AAChB,WAAKvC,WAAL,CAAiB5B,KAAjB,GAAyBmE,CAAzB;AACD;;;;EA5hBiCvE,oB;;AAgiBpC,SAASC,qBAAT","sourcesContent":["import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._debug = {\n      value: 0\n    };\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._u_mipmap_0 = {\n      value: null\n    };\n    this._u_mipmap_1 = {\n      value: null\n    };\n    this._u_mipmap_2 = {\n      value: null\n    };\n    this._u_mipmap_3 = {\n      value: null\n    };\n    this._u_mipmap_4 = {\n      value: null\n    };\n    this._u_mipmap_5 = {\n      value: null\n    };\n    this._u_mipmap_6 = {\n      value: null\n    };\n    this._u_mipmap_7 = {\n      value: null\n    };\n    this._u_mipmap_res_0 = {\n      value: null\n    };\n    this._u_mipmap_res_1 = {\n      value: null\n    };\n    this._u_mipmap_res_2 = {\n      value: null\n    };\n    this._u_mipmap_res_3 = {\n      value: null\n    };\n    this._u_mipmap_res_4 = {\n      value: null\n    };\n    this._u_mipmap_res_5 = {\n      value: null\n    };\n    this._u_mipmap_res_6 = {\n      value: null\n    };\n    this._u_mipmap_res_7 = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform int debug;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform sampler2D u_mipmap_0;\n        uniform sampler2D u_mipmap_1;\n        uniform sampler2D u_mipmap_2;\n        uniform sampler2D u_mipmap_3;\n        uniform sampler2D u_mipmap_4;\n        uniform sampler2D u_mipmap_5;\n        uniform sampler2D u_mipmap_6;\n        uniform sampler2D u_mipmap_7;\n        uniform vec2 u_mipmap_res_0;\n        uniform vec2 u_mipmap_res_1;\n        uniform vec2 u_mipmap_res_2;\n        uniform vec2 u_mipmap_res_3;\n        uniform vec2 u_mipmap_res_4;\n        uniform vec2 u_mipmap_res_5;\n        uniform vec2 u_mipmap_res_6;\n        uniform vec2 u_mipmap_res_7;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;  \n        \n        // from http://www.java-gaming.org/index.php?topic=35123.0\n        vec4 cubic( float v ) {\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\n          vec4 s = n * n * n;\n          float x = s.x;\n          float y = s.y - 4.0 * s.x;\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\n          float w = 6.0 - x - y - z;\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\n        }\n        \n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\n          vec2 invTexSize = 1.0 / texSize;\n          texCoords = texCoords * texSize - 0.5;\n          vec2 fxy = fract( texCoords );\n          texCoords -= fxy;\n\n          vec4 xcubic = cubic( fxy.x );\n          vec4 ycubic = cubic( fxy.y );\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\n\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\n          offset *= invTexSize.xxyy;\n        \n          vec4 sample0 = texture2D( sampler, offset.xz);\n          vec4 sample1 = texture2D( sampler, offset.yz);\n          vec4 sample2 = texture2D( sampler, offset.xw);\n          vec4 sample3 = texture2D( sampler, offset.yw);\n        \n          float sx = s.x / ( s.x + s.y );\n          float sy = s.z / ( s.z + s.w );\n\n          return mix(\n            mix(\n              sample3,\n              sample2,\n              sx\n            ),\n            mix(\n              sample1,\n              sample0,\n              sx\n            ),\n            sy\n          );\n        }\n\n\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n    \n      float depthFactor = 1.0;\n      float distortionFactor = 0.0;\n      vec3 my_normal = vec3(0.0);\n      float reflectorRoughnessFactor = roughness;\n      vec3 coord = my_vUv.xyz / my_vUv.w;\n\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      #ifdef USE_NORMALMAP\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\n      #endif\n\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\n      proj_vUv.x += distortionFactor;\n      proj_vUv.y += distortionFactor;\n      \n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2D(tDepth, proj_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\n      #endif\n\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\n      vec4 mixedColor;\n\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\n      if (_lod < 1.) {\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        mixedColor = mix(one, two, _lod);\n      } else if (_lod < 2.) {\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        mixedColor = mix(one, two, _lod - 1.0);\n      } else if (_lod < 3.) {\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        mixedColor = mix(one, two, _lod - 2.0);\n      } else if (_lod < 4.) {\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        mixedColor = mix(one, two, _lod - 3.0);\n      } else if (_lod < 5.) {\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        mixedColor = mix(one, two, _lod - 4.0);\n      } else if (_lod < 6.) {\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        mixedColor = mix(one, two, _lod - 5.0);\n      } else if (_lod < 7.) {\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, two, _lod - 6.0);\n      } else {\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, baseColor, _lod - 7.0);\n      }\n\n      mixedColor.rgb *= depthFactor;\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \n      diffuseColor = sRGBToLinear(diffuseColor);\n\n      if (debug == 1) {\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\n      }\n      if (debug == 2) {\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\n      }\n      if (debug == 3) {\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\n      }\n      if (debug == 4) {\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\n      }\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get u_mipmap_0() {\n    return this._u_mipmap_0.value;\n  }\n\n  set u_mipmap_0(v) {\n    this._u_mipmap_0.value = v;\n  }\n\n  get u_mipmap_1() {\n    return this._u_mipmap_1.value;\n  }\n\n  set u_mipmap_1(v) {\n    this._u_mipmap_1.value = v;\n  }\n\n  get u_mipmap_2() {\n    return this._u_mipmap_2.value;\n  }\n\n  set u_mipmap_2(v) {\n    this._u_mipmap_2.value = v;\n  }\n\n  get u_mipmap_3() {\n    return this._u_mipmap_3.value;\n  }\n\n  set u_mipmap_3(v) {\n    this._u_mipmap_3.value = v;\n  }\n\n  get u_mipmap_4() {\n    return this._u_mipmap_4.value;\n  }\n\n  set u_mipmap_4(v) {\n    this._u_mipmap_4.value = v;\n  }\n\n  get u_mipmap_5() {\n    return this._u_mipmap_5.value;\n  }\n\n  set u_mipmap_5(v) {\n    this._u_mipmap_5.value = v;\n  }\n\n  get u_mipmap_6() {\n    return this._u_mipmap_6.value;\n  }\n\n  set u_mipmap_6(v) {\n    this._u_mipmap_6.value = v;\n  }\n\n  get u_mipmap_7() {\n    return this._u_mipmap_7.value;\n  }\n\n  set u_mipmap_7(v) {\n    this._u_mipmap_7.value = v;\n  }\n\n  get u_mipmap_res_0() {\n    return this._u_mipmap_res_0.value;\n  }\n\n  set u_mipmap_res_0(v) {\n    this._u_mipmap_res_0.value = v;\n  }\n\n  get u_mipmap_res_1() {\n    return this._u_mipmap_res_1.value;\n  }\n\n  set u_mipmap_res_1(v) {\n    this._u_mipmap_res_1.value = v;\n  }\n\n  get u_mipmap_res_2() {\n    return this._u_mipmap_res_2.value;\n  }\n\n  set u_mipmap_res_2(v) {\n    this._u_mipmap_res_2.value = v;\n  }\n\n  get u_mipmap_res_3() {\n    return this._u_mipmap_res_3.value;\n  }\n\n  set u_mipmap_res_3(v) {\n    this._u_mipmap_res_3.value = v;\n  }\n\n  get u_mipmap_res_4() {\n    return this._u_mipmap_res_4.value;\n  }\n\n  set u_mipmap_res_4(v) {\n    this._u_mipmap_res_4.value = v;\n  }\n\n  get u_mipmap_res_5() {\n    return this._u_mipmap_res_5.value;\n  }\n\n  set u_mipmap_res_5(v) {\n    this._u_mipmap_res_5.value = v;\n  }\n\n  get u_mipmap_res_6() {\n    return this._u_mipmap_res_6.value;\n  }\n\n  set u_mipmap_res_6(v) {\n    this._u_mipmap_res_6.value = v;\n  }\n\n  get u_mipmap_res_7() {\n    return this._u_mipmap_res_7.value;\n  }\n\n  set u_mipmap_res_7(v) {\n    this._u_mipmap_res_7.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"]},"metadata":{},"sourceType":"module"}