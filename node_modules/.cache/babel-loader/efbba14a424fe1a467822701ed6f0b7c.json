{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, NumberKeyframeTrack, AnimationClip, BufferAttribute } from 'three';\n/**\n * MDD is a special format that stores a position for every vertex in a model for every frame in an animation.\n * Similar to BVH, it can be used to transfer animation data between different 3D applications or engines.\n *\n * MDD stores its data in binary format (big endian) in the following way:\n *\n * number of frames (a single uint32)\n * number of vertices (a single uint32)\n * time values for each frame (sequence of float32)\n * vertex data for each frame (sequence of float32)\n */\n\nvar MDDLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(MDDLoader, _Loader);\n\n  var _super = _createSuper(MDDLoader);\n\n  function MDDLoader(manager) {\n    _classCallCheck(this, MDDLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(MDDLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.load(url, function (data) {\n        onLoad(scope.parse(data));\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var view = new DataView(data);\n      var totalFrames = view.getUint32(0);\n      var totalPoints = view.getUint32(4);\n      var offset = 8; // animation clip\n\n      var times = new Float32Array(totalFrames);\n      var values = new Float32Array(totalFrames * totalFrames).fill(0);\n\n      for (var i = 0; i < totalFrames; i++) {\n        times[i] = view.getFloat32(offset);\n        offset += 4;\n        values[totalFrames * i + i] = 1;\n      }\n\n      var track = new NumberKeyframeTrack('.morphTargetInfluences', times, values);\n      var clip = new AnimationClip('default', times[times.length - 1], [track]); // morph targets\n\n      var morphTargets = [];\n\n      for (var _i = 0; _i < totalFrames; _i++) {\n        var morphTarget = new Float32Array(totalPoints * 3);\n\n        for (var j = 0; j < totalPoints; j++) {\n          var stride = j * 3;\n          morphTarget[stride + 0] = view.getFloat32(offset);\n          offset += 4; // x\n\n          morphTarget[stride + 1] = view.getFloat32(offset);\n          offset += 4; // y\n\n          morphTarget[stride + 2] = view.getFloat32(offset);\n          offset += 4; // z\n        }\n\n        var attribute = new BufferAttribute(morphTarget, 3);\n        attribute.name = 'morph_' + _i;\n        morphTargets.push(attribute);\n      }\n\n      return {\n        morphTargets: morphTargets,\n        clip: clip\n      };\n    }\n  }]);\n\n  return MDDLoader;\n}(Loader);\n\nexport { MDDLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/MDDLoader.js"],"names":["Loader","FileLoader","NumberKeyframeTrack","AnimationClip","BufferAttribute","MDDLoader","manager","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","load","data","parse","view","DataView","totalFrames","getUint32","totalPoints","offset","times","Float32Array","values","fill","i","getFloat32","track","clip","length","morphTargets","morphTarget","j","stride","attribute","name","push"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, NumberKeyframeTrack, AnimationClip, BufferAttribute } from 'three';\n\n/**\n * MDD is a special format that stores a position for every vertex in a model for every frame in an animation.\n * Similar to BVH, it can be used to transfer animation data between different 3D applications or engines.\n *\n * MDD stores its data in binary format (big endian) in the following way:\n *\n * number of frames (a single uint32)\n * number of vertices (a single uint32)\n * time values for each frame (sequence of float32)\n * vertex data for each frame (sequence of float32)\n */\n\nclass MDDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (data) {\n      onLoad(scope.parse(data));\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    const view = new DataView(data);\n    const totalFrames = view.getUint32(0);\n    const totalPoints = view.getUint32(4);\n    let offset = 8; // animation clip\n\n    const times = new Float32Array(totalFrames);\n    const values = new Float32Array(totalFrames * totalFrames).fill(0);\n\n    for (let i = 0; i < totalFrames; i++) {\n      times[i] = view.getFloat32(offset);\n      offset += 4;\n      values[totalFrames * i + i] = 1;\n    }\n\n    const track = new NumberKeyframeTrack('.morphTargetInfluences', times, values);\n    const clip = new AnimationClip('default', times[times.length - 1], [track]); // morph targets\n\n    const morphTargets = [];\n\n    for (let i = 0; i < totalFrames; i++) {\n      const morphTarget = new Float32Array(totalPoints * 3);\n\n      for (let j = 0; j < totalPoints; j++) {\n        const stride = j * 3;\n        morphTarget[stride + 0] = view.getFloat32(offset);\n        offset += 4; // x\n\n        morphTarget[stride + 1] = view.getFloat32(offset);\n        offset += 4; // y\n\n        morphTarget[stride + 2] = view.getFloat32(offset);\n        offset += 4; // z\n      }\n\n      const attribute = new BufferAttribute(morphTarget, 3);\n      attribute.name = 'morph_' + i;\n      morphTargets.push(attribute);\n    }\n\n    return {\n      morphTargets: morphTargets,\n      clip: clip\n    };\n  }\n\n}\n\nexport { MDDLoader };\n"]},"metadata":{},"sourceType":"module"}