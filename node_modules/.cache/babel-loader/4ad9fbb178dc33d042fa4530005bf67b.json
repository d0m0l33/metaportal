{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';// Define the initial state using that type\nvar initialState={value:0};export var counterSlice=createSlice({name:'counter',initialState:initialState,reducers:{increment:function increment(state){// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\nstate.value+=1;},decrement:function decrement(state){state.value-=1;},incrementByAmount:function incrementByAmount(state,action){state.value+=action.payload;}}});var _counterSlice$actions=counterSlice.actions,increment=_counterSlice$actions.increment,decrement=_counterSlice$actions.decrement,incrementByAmount=_counterSlice$actions.incrementByAmount;// Other code such as selectors can use the imported `RootState` type\nexport{increment,decrement,incrementByAmount};export var selectCount=function selectCount(state){return state.counter.value;};export default counterSlice.reducer;","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/features/counter/counterSlice.ts"],"names":["createSlice","initialState","value","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA2C,kBAA3C,CASE;AACA,GAAMC,CAAAA,YAA0B,CAAG,CACjCC,KAAK,CAAE,CAD0B,CAAnC,CAIF,MAAO,IAAMC,CAAAA,YAAY,CAAGH,WAAW,CAAC,CACtCI,IAAI,CAAE,SADgC,CAEtCH,YAAY,CAAZA,YAFsC,CAItCI,QAAQ,CAAE,CACRC,SAAS,CAAE,mBAACC,KAAD,CAAW,CACpB;AACA;AACA;AACA;AACAA,KAAK,CAACL,KAAN,EAAe,CAAf,CACD,CAPO,CAQRM,SAAS,CAAE,mBAACD,KAAD,CAAW,CACpBA,KAAK,CAACL,KAAN,EAAe,CAAf,CACD,CAVO,CAWRO,iBAAiB,CAAE,2BAACF,KAAD,CAAQG,MAAR,CAA0C,CACzDH,KAAK,CAACL,KAAN,EAAeQ,MAAM,CAACC,OAAtB,CACH,CAbO,CAJ4B,CAAD,CAAhC,CAqBA,0BAAoDR,YAAY,CAACS,OAAjE,CAAQN,SAAR,uBAAQA,SAAR,CAAmBE,SAAnB,uBAAmBA,SAAnB,CAA8BC,iBAA9B,uBAA8BA,iBAA9B,CAEP;8CACA,MAAO,IAAMI,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACN,KAAD,QAAsBA,CAAAA,KAAK,CAACO,OAAN,CAAcZ,KAApC,EAApB,CAEP,cAAeC,CAAAA,YAAY,CAACY,OAA5B","sourcesContent":["import { createSlice , PayloadAction} from '@reduxjs/toolkit'\nimport type { RootState } from '../../store'\n\n\n// Define a type for the slice state\ninterface CounterState {\n    value: number\n  }\n  \n  // Define the initial state using that type\n  const initialState: CounterState = {\n    value: 0,\n  }\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n        state.value += action.payload\n    },\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectCount = (state: RootState) => state.counter.value\n\nexport default counterSlice.reducer"]},"metadata":{},"sourceType":"module"}