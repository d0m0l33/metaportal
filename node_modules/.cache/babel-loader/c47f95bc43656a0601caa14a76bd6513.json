{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector2, WebGLRenderTarget, Clock, LinearFilter, RGBAFormat } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass, ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"_pixelRatio\", void 0);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"renderTarget1\", void 0);\n\n    _defineProperty(this, \"renderTarget2\", void 0);\n\n    _defineProperty(this, \"writeBuffer\", void 0);\n\n    _defineProperty(this, \"readBuffer\", void 0);\n\n    _defineProperty(this, \"renderToScreen\", void 0);\n\n    _defineProperty(this, \"passes\", []);\n\n    _defineProperty(this, \"copyPass\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n\n  reset(renderTarget) {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n\n}\n\nexport { EffectComposer };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/postprocessing/EffectComposer.js"],"names":["_defineProperty","Vector2","WebGLRenderTarget","Clock","LinearFilter","RGBAFormat","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","constructor","renderer","renderTarget","undefined","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","console","error","copyPass","clock","swapBuffers","tmp","addPass","pass","passes","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector2, WebGLRenderTarget, Clock, LinearFilter, RGBAFormat } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass, ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"_pixelRatio\", void 0);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"renderTarget1\", void 0);\n\n    _defineProperty(this, \"renderTarget2\", void 0);\n\n    _defineProperty(this, \"writeBuffer\", void 0);\n\n    _defineProperty(this, \"readBuffer\", void 0);\n\n    _defineProperty(this, \"renderToScreen\", void 0);\n\n    _defineProperty(this, \"passes\", []);\n\n    _defineProperty(this, \"copyPass\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n\n  reset(renderTarget) {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n\n}\n\nexport { EffectComposer };\n"]},"metadata":{},"sourceType":"module"}