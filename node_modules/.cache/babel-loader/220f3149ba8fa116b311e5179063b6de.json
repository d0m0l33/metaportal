{"ast":null,"code":"import { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.libraryPath = '';\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = '';\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = {};\n    this.materials = [];\n  }\n\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this.decodeObjects(buffer, url).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  }\n\n  debug() {\n    console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n  }\n\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n\n    const objectPending = this._getWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++; //hmmm\n\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          buffer\n        }, [buffer]); //this.debug();\n      });\n    }).then(message => this._createGeometry(message.data)); // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID); //this.debug();\n\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      url: url,\n      promise: objectPending\n    });\n\n    return objectPending;\n  }\n\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, '').then(onLoad).catch(onError);\n  }\n\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m;\n      }\n    }\n\n    this.materials.push(material);\n    return material;\n  }\n\n  _createMaterial(material) {\n    if (material === undefined) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: 'default',\n        side: 2\n      });\n    }\n\n    const _diffuseColor = material.diffuseColor;\n    const diffusecolor = new Color(_diffuseColor.r / 255.0, _diffuseColor.g / 255.0, _diffuseColor.b / 255.0);\n\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1;\n      diffusecolor.g = 1;\n      diffusecolor.b = 1;\n    } // console.log( material );\n\n\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1.0 - material.transparency\n    });\n    const textureLoader = new TextureLoader();\n\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n\n        switch (texture.type) {\n          case 'Diffuse':\n            mat.map = map;\n            break;\n\n          case 'Bump':\n            mat.bumpMap = map;\n            break;\n\n          case 'Transparency':\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n\n          case 'Emap':\n            mat.envMap = map;\n            break;\n        }\n      }\n    }\n\n    return mat;\n  }\n\n  _createGeometry(data) {\n    // console.log(data);\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData['layers'] = data.layers;\n    object.userData['groups'] = data.groups;\n    object.userData['settings'] = data.settings;\n    object.userData['objectType'] = 'File3dm';\n    object.userData['materials'] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n\n      switch (obj.objectType) {\n        case 'InstanceDefinition':\n          instanceDefinitions.push(obj);\n          break;\n\n        case 'InstanceReference':\n          instanceReferences.push(obj);\n          break;\n\n        default:\n          let _object;\n\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex];\n\n            let material = this._createMaterial(rMaterial);\n\n            material = this._compareMaterials(material);\n            _object = this._createObject(obj, material);\n          } else {\n            const material = this._createMaterial();\n\n            _object = this._createObject(obj, material);\n          }\n\n          if (_object === undefined) {\n            continue;\n          }\n\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n\n          break;\n      }\n    }\n\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      } // Currently clones geometry and does not take advantage of instancing\n\n\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(xf[0], xf[1], xf[2], xf[3], xf[4], xf[5], xf[6], xf[7], xf[8], xf[9], xf[10], xf[11], xf[12], xf[13], xf[14], xf[15]);\n          iRefObject.applyMatrix4(matrix);\n\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n\n          object.add(iRefObject);\n        }\n      }\n    }\n\n    object.userData['materials'] = this.materials;\n    return object;\n  }\n\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n\n    let geometry, material, _color, color;\n\n    switch (obj.objectType) {\n      case 'Point':\n      case 'PointSet':\n        geometry = loader.parse(obj.geometry);\n\n        if (geometry.attributes.hasOwnProperty('color')) {\n          material = new PointsMaterial({\n            vertexColors: true,\n            sizeAttenuation: false,\n            size: 2\n          });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          material = new PointsMaterial({\n            color: color,\n            sizeAttenuation: false,\n            size: 2\n          });\n        }\n\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData['attributes'] = attributes;\n        points.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n\n        return points;\n\n      case 'Mesh':\n      case 'Extrusion':\n      case 'SubD':\n      case 'Brep':\n        if (obj.geometry === null) return;\n        geometry = loader.parse(obj.geometry);\n\n        if (geometry.attributes.hasOwnProperty('color')) {\n          mat.vertexColors = true;\n        }\n\n        if (mat === null) {\n          mat = this._createMaterial();\n          mat = this._compareMaterials(mat);\n        }\n\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData['attributes'] = attributes;\n        mesh.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n\n        return mesh;\n\n      case 'Curve':\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n        material = new LineBasicMaterial({\n          color: color\n        });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData['attributes'] = attributes;\n        lines.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n\n        return lines;\n\n      case 'TextDot':\n        geometry = obj.geometry;\n        const ctx = document.createElement('canvas').getContext('2d');\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + 'px';\n        ctx.canvas.style.height = height + 'px';\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = 'white';\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({\n          map: texture,\n          depthTest: false\n        });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1.0);\n        sprite.userData['attributes'] = attributes;\n        sprite.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n\n        return sprite;\n\n      case 'Light':\n        geometry = obj.geometry;\n        let light;\n\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isPointLight) {\n          light = new PointLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight();\n          const width = Math.abs(geometry.width[2]);\n          const height = Math.abs(geometry.length[0]);\n          light.position.set(geometry.location[0] - height / 2, geometry.location[1], geometry.location[2] - width / 2);\n          light.height = height;\n          light.width = width;\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.angle = geometry.spotAngleRadians;\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isLinearLight) {\n          console.warn('THREE.3DMLoader:  No conversion exists for linear lights.');\n          return;\n        }\n\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          light.color = color;\n          light.userData['attributes'] = attributes;\n          light.userData['objectType'] = obj.objectType;\n        }\n\n        return light;\n    }\n  }\n\n  _initLibrary() {\n    if (!this.libraryPending) {\n      // Load rhino3dm wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('rhino3dm.js', resolve, undefined, reject);\n      }); // Load rhino3dm WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType('arraybuffer');\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('rhino3dm.wasm', resolve, undefined, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(_ref => {\n        let [jsContent, binaryContent] = _ref;\n        //this.libraryBinary = binaryContent;\n        this.libraryConfig.wasmBinary = binaryContent;\n        const fn = Rhino3dmWorker.toString();\n        const body = ['/* rhino3dm.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n\n    return this.libraryPending;\n  }\n\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          libraryConfig: this.libraryConfig\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* WEB WORKER */\n\n\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          /* Like Basis Loader */\n          RhinoModule = {\n            wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule); // eslint-disable-line no-undef\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n\n      case 'decode':\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer);\n          self.postMessage({\n            type: 'decode',\n            id: message.id,\n            data\n          });\n        });\n        break;\n    }\n  };\n\n  function decodeObjects(rhino, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = []; //Handle objects\n\n    const objs = doc.objects();\n    const cnt = objs.count;\n\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n\n      const object = extractObjectData(_object, doc);\n\n      _object.delete();\n\n      if (object) {\n        objects.push(object);\n      }\n    } // Handle instance definitions\n    // console.log( `Instance Definitions Count: ${doc.instanceDefinitions().count()}` );\n\n\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: 'InstanceDefinition'\n      });\n    } // Handle materials\n\n\n    const textureTypes = [// rhino.TextureType.Bitmap,\n    rhino.TextureType.Diffuse, rhino.TextureType.Bump, rhino.TextureType.Transparency, rhino.TextureType.Opacity, rhino.TextureType.Emap];\n    const pbrTextureTypes = [rhino.TextureType.PBR_BaseColor, rhino.TextureType.PBR_Subsurface, rhino.TextureType.PBR_SubsurfaceScattering, rhino.TextureType.PBR_SubsurfaceScatteringRadius, rhino.TextureType.PBR_Metallic, rhino.TextureType.PBR_Specular, rhino.TextureType.PBR_SpecularTint, rhino.TextureType.PBR_Roughness, rhino.TextureType.PBR_Anisotropic, rhino.TextureType.PBR_Anisotropic_Rotation, rhino.TextureType.PBR_Sheen, rhino.TextureType.PBR_SheenTint, rhino.TextureType.PBR_Clearcoat, rhino.TextureType.PBR_ClearcoatBump, rhino.TextureType.PBR_ClearcoatRoughness, rhino.TextureType.PBR_OpacityIor, rhino.TextureType.PBR_OpacityRoughness, rhino.TextureType.PBR_Emission, rhino.TextureType.PBR_AmbientOcclusion, rhino.TextureType.PBR_Displacement];\n\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i);\n\n      const _pbrMaterial = _material.physicallyBased();\n\n      let material = extractProperties(_material);\n      const textures = [];\n\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j]);\n\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          const texture = {\n            type: textureType\n          };\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n\n          if (image) {\n            texture.image = 'data:image/png;base64,' + image;\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`);\n            texture.image = null;\n          }\n\n          textures.push(texture);\n\n          _texture.delete();\n        }\n      }\n\n      material.textures = textures;\n\n      if (_pbrMaterial.supported) {\n        console.log('pbr true');\n\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j]);\n\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n            let textureType = textureTypes[j].constructor.name;\n            textureType = textureType.substring(12, textureType.length);\n            const texture = {\n              type: textureType,\n              image: 'data:image/png;base64,' + image\n            };\n            textures.push(texture);\n\n            _texture.delete();\n          }\n        }\n\n        const pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n\n      materials.push(material);\n\n      _material.delete();\n\n      _pbrMaterial.delete();\n    } // Handle layers\n\n\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i);\n\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n\n      _layer.delete();\n    } // Handle views\n\n\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i);\n\n      const view = extractProperties(_view);\n      views.push(view);\n\n      _view.delete();\n    } // Handle named views\n\n\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i);\n\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n\n      _namedView.delete();\n    } // Handle groups\n\n\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i);\n\n      const group = extractProperties(_group);\n      groups.push(group);\n\n      _group.delete();\n    } // Handle settings\n\n\n    const settings = extractProperties(doc.settings()); //TODO: Handle other document stuff like dimstyles, instance definitions, bitmaps etc.\n    // Handle dimstyles\n    // console.log( `Dimstyle Count: ${doc.dimstyles().count()}` );\n    // Handle bitmaps\n    // console.log( `Bitmap Count: ${doc.bitmaps().count()}` );\n    // Handle strings -- this seems to be broken at the moment in rhino3dm\n    // console.log( `Document Strings Count: ${doc.strings().count()}` );\n\n    /*\n    for( var i = 0; i < doc.strings().count(); i++ ){\n    var _string= doc.strings().get( i );\n    console.log(_string);\n    var string = extractProperties( _group );\n    strings.push( string );\n    _string.delete();\n    }\n    */\n\n    doc.delete();\n    return {\n      objects,\n      materials,\n      layers,\n      views,\n      namedViews,\n      groups,\n      settings\n    };\n  }\n\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n\n    const _attributes = object.attributes();\n\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh; // skip instance definition objects\n    //if( _attributes.isInstanceDefinitionObject ) { continue; }\n    // TODO: handle other geometry types\n\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [];\n\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [pt[0], pt[1], pt[2]];\n\n        const _color = _attributes.drawColor(doc);\n\n        color.itemSize = 3;\n        color.type = 'Float32Array';\n        color.array = [_color.r / 255.0, _color.g / 255.0, _color.b / 255.0];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n\n        mesh = new rhino.Mesh();\n\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n\n          if (_mesh) {\n            mesh.append(_mesh);\n\n            _mesh.delete();\n          }\n\n          face.delete();\n        }\n\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n\n        mesh.delete();\n        break;\n\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n\n      case rhino.ObjectType.SubD:\n        // TODO: precalculate resulting vertices and faces and warn on excessive results\n        _geometry.subdivide(3);\n\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      /*\n      case rhino.ObjectType.Annotation:\n      case rhino.ObjectType.Hatch:\n      case rhino.ObjectType.ClipPlane:\n      */\n\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`);\n        break;\n    }\n\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry,\n        attributes,\n        objectType\n      };\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`);\n    }\n  }\n\n  function extractProperties(object) {\n    const result = {};\n\n    for (const property in object) {\n      const value = object[property];\n\n      if (typeof value !== 'function') {\n        if (typeof value === 'object' && value !== null && value.hasOwnProperty('constructor')) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else {\n          result[property] = value;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount; // alternative to this hardcoded version: https://stackoverflow.com/a/18499923/2179399\n    }\n\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n\n      pLine.delete();\n      return rc;\n    }\n\n    const domain = curve.domain;\n    const divisions = pointCount - 1.0;\n\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]); // Duplicated from THREE.Vector3\n      // How to pass imports to worker?\n\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n\n    rc = ts.map(t => curve.pointAt(t));\n    return rc;\n  }\n}\n\nexport { Rhino3dmLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/three-stdlib/loaders/3DMLoader.js"],"names":["Loader","FileLoader","MeshStandardMaterial","Color","TextureLoader","Object3D","Matrix4","BufferGeometryLoader","DirectionalLight","PointLight","RectAreaLight","Vector3","SpotLight","CanvasTexture","LinearFilter","ClampToEdgeWrapping","SpriteMaterial","Sprite","LineBasicMaterial","Line","Mesh","PointsMaterial","Points","_taskCache","WeakMap","Rhino3dmLoader","constructor","manager","libraryPath","libraryPending","libraryBinary","libraryConfig","url","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","materials","setLibraryPath","path","setWorkerLimit","load","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","buffer","has","cachedTask","get","promise","then","catch","decodeObjects","debug","console","log","map","worker","_taskLoad","taskID","taskCost","byteLength","objectPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","data","_releaseTask","set","parse","_compareMaterials","material","mat","name","color","r","g","b","i","length","m","_mat","JSON","stringify","push","_createMaterial","undefined","metalness","side","_diffuseColor","diffuseColor","diffusecolor","transparent","transparency","opacity","textureLoader","textures","texture","image","bumpMap","alphaMap","envMap","object","instanceDefinitionObjects","instanceDefinitions","instanceReferences","userData","layers","groups","settings","objects","obj","attributes","objectType","_object","materialIndex","rMaterial","_createObject","layer","layerIndex","visible","isInstanceDefinitionObject","add","iDef","j","objectIds","objId","p","idoId","iRef","geometry","parentIdefId","iRefObject","xf","xform","array","matrix","applyMatrix4","clone","_color","hasOwnProperty","vertexColors","sizeAttenuation","size","drawColor","points","mesh","castShadow","castsShadows","receiveShadow","receivesShadows","lines","ctx","document","createElement","getContext","font","fontHeight","fontFace","width","measureText","text","height","window","devicePixelRatio","canvas","style","setTransform","textBaseline","textAlign","fillStyle","a","fillRect","fillText","minFilter","wrapS","wrapT","depthTest","sprite","position","point","scale","light","isDirectionalLight","location","target","direction","shadow","normalBias","isPointLight","isRectangularLight","Math","abs","lookAt","isSpotLight","angle","spotAngleRadians","isLinearLight","warn","intensity","diffuse","_initLibrary","jsLoader","jsContent","binaryLoader","binaryContent","all","wasmBinary","fn","Rhino3dmWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","onmessage","e","error","sort","dispose","terminate","rhino","RhinoModule","onRuntimeInitialized","rhino3dm","self","arr","Uint8Array","doc","File3dm","fromByteArray","views","namedViews","objs","cnt","count","extractObjectData","delete","idef","idefAttributes","extractProperties","getObjectIds","textureTypes","TextureType","Diffuse","Bump","Transparency","Opacity","Emap","pbrTextureTypes","PBR_BaseColor","PBR_Subsurface","PBR_SubsurfaceScattering","PBR_SubsurfaceScatteringRadius","PBR_Metallic","PBR_Specular","PBR_SpecularTint","PBR_Roughness","PBR_Anisotropic","PBR_Anisotropic_Rotation","PBR_Sheen","PBR_SheenTint","PBR_Clearcoat","PBR_ClearcoatBump","PBR_ClearcoatRoughness","PBR_OpacityIor","PBR_OpacityRoughness","PBR_Emission","PBR_AmbientOcclusion","PBR_Displacement","_material","_pbrMaterial","physicallyBased","_texture","getTexture","textureType","getEmbeddedFileAsBase64","fileName","supported","pbMaterialProperties","Object","assign","_layer","_view","view","_namedView","namedView","_group","group","_geometry","_attributes","ObjectType","Curve","pts","curveToPoints","itemSize","Point","pt","PointSet","toThreejsJSON","Brep","faces","faceIndex","face","_mesh","getMesh","MeshType","Any","append","compact","Extrusion","TextDot","Light","InstanceReference","toFloatArray","SubD","subdivide","createFromSubDControlNet","groupCount","groupIds","getGroupList","userStringCount","userStrings","getUserStrings","result","property","value","curve","pointLimit","pointCount","rc","ts","LineCurve","pointAtStart","pointAtEnd","PolylineCurve","PolyCurve","segmentCount","segment","segmentCurve","segmentArray","concat","ArcCurve","floor","angleDegrees","NurbsCurve","degree","pLine","tryGetPolyline","domain","divisions","t","tan","tangentAt","prevTan","slice","tS","ptS","denominator","sqrt","PI","theta","x","y","z","acos","max","min","pointAt"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.libraryPath = '';\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = '';\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = {};\n    this.materials = [];\n  }\n\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this.decodeObjects(buffer, url).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  }\n\n  debug() {\n    console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n  }\n\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n\n    const objectPending = this._getWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++; //hmmm\n\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          buffer\n        }, [buffer]); //this.debug();\n      });\n    }).then(message => this._createGeometry(message.data)); // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID); //this.debug();\n\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      url: url,\n      promise: objectPending\n    });\n\n    return objectPending;\n  }\n\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, '').then(onLoad).catch(onError);\n  }\n\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m;\n      }\n    }\n\n    this.materials.push(material);\n    return material;\n  }\n\n  _createMaterial(material) {\n    if (material === undefined) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: 'default',\n        side: 2\n      });\n    }\n\n    const _diffuseColor = material.diffuseColor;\n    const diffusecolor = new Color(_diffuseColor.r / 255.0, _diffuseColor.g / 255.0, _diffuseColor.b / 255.0);\n\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1;\n      diffusecolor.g = 1;\n      diffusecolor.b = 1;\n    } // console.log( material );\n\n\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1.0 - material.transparency\n    });\n    const textureLoader = new TextureLoader();\n\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n\n        switch (texture.type) {\n          case 'Diffuse':\n            mat.map = map;\n            break;\n\n          case 'Bump':\n            mat.bumpMap = map;\n            break;\n\n          case 'Transparency':\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n\n          case 'Emap':\n            mat.envMap = map;\n            break;\n        }\n      }\n    }\n\n    return mat;\n  }\n\n  _createGeometry(data) {\n    // console.log(data);\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData['layers'] = data.layers;\n    object.userData['groups'] = data.groups;\n    object.userData['settings'] = data.settings;\n    object.userData['objectType'] = 'File3dm';\n    object.userData['materials'] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n\n      switch (obj.objectType) {\n        case 'InstanceDefinition':\n          instanceDefinitions.push(obj);\n          break;\n\n        case 'InstanceReference':\n          instanceReferences.push(obj);\n          break;\n\n        default:\n          let _object;\n\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex];\n\n            let material = this._createMaterial(rMaterial);\n\n            material = this._compareMaterials(material);\n            _object = this._createObject(obj, material);\n          } else {\n            const material = this._createMaterial();\n\n            _object = this._createObject(obj, material);\n          }\n\n          if (_object === undefined) {\n            continue;\n          }\n\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n\n          break;\n      }\n    }\n\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      } // Currently clones geometry and does not take advantage of instancing\n\n\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(xf[0], xf[1], xf[2], xf[3], xf[4], xf[5], xf[6], xf[7], xf[8], xf[9], xf[10], xf[11], xf[12], xf[13], xf[14], xf[15]);\n          iRefObject.applyMatrix4(matrix);\n\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n\n          object.add(iRefObject);\n        }\n      }\n    }\n\n    object.userData['materials'] = this.materials;\n    return object;\n  }\n\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n\n    let geometry, material, _color, color;\n\n    switch (obj.objectType) {\n      case 'Point':\n      case 'PointSet':\n        geometry = loader.parse(obj.geometry);\n\n        if (geometry.attributes.hasOwnProperty('color')) {\n          material = new PointsMaterial({\n            vertexColors: true,\n            sizeAttenuation: false,\n            size: 2\n          });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          material = new PointsMaterial({\n            color: color,\n            sizeAttenuation: false,\n            size: 2\n          });\n        }\n\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData['attributes'] = attributes;\n        points.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n\n        return points;\n\n      case 'Mesh':\n      case 'Extrusion':\n      case 'SubD':\n      case 'Brep':\n        if (obj.geometry === null) return;\n        geometry = loader.parse(obj.geometry);\n\n        if (geometry.attributes.hasOwnProperty('color')) {\n          mat.vertexColors = true;\n        }\n\n        if (mat === null) {\n          mat = this._createMaterial();\n          mat = this._compareMaterials(mat);\n        }\n\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData['attributes'] = attributes;\n        mesh.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n\n        return mesh;\n\n      case 'Curve':\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n        material = new LineBasicMaterial({\n          color: color\n        });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData['attributes'] = attributes;\n        lines.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n\n        return lines;\n\n      case 'TextDot':\n        geometry = obj.geometry;\n        const ctx = document.createElement('canvas').getContext('2d');\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + 'px';\n        ctx.canvas.style.height = height + 'px';\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = 'white';\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({\n          map: texture,\n          depthTest: false\n        });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1.0);\n        sprite.userData['attributes'] = attributes;\n        sprite.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n\n        return sprite;\n\n      case 'Light':\n        geometry = obj.geometry;\n        let light;\n\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isPointLight) {\n          light = new PointLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight();\n          const width = Math.abs(geometry.width[2]);\n          const height = Math.abs(geometry.length[0]);\n          light.position.set(geometry.location[0] - height / 2, geometry.location[1], geometry.location[2] - width / 2);\n          light.height = height;\n          light.width = width;\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.angle = geometry.spotAngleRadians;\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isLinearLight) {\n          console.warn('THREE.3DMLoader:  No conversion exists for linear lights.');\n          return;\n        }\n\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          light.color = color;\n          light.userData['attributes'] = attributes;\n          light.userData['objectType'] = obj.objectType;\n        }\n\n        return light;\n    }\n  }\n\n  _initLibrary() {\n    if (!this.libraryPending) {\n      // Load rhino3dm wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('rhino3dm.js', resolve, undefined, reject);\n      }); // Load rhino3dm WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType('arraybuffer');\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('rhino3dm.wasm', resolve, undefined, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        //this.libraryBinary = binaryContent;\n        this.libraryConfig.wasmBinary = binaryContent;\n        const fn = Rhino3dmWorker.toString();\n        const body = ['/* rhino3dm.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n\n    return this.libraryPending;\n  }\n\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          libraryConfig: this.libraryConfig\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* WEB WORKER */\n\n\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          /* Like Basis Loader */\n          RhinoModule = {\n            wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule); // eslint-disable-line no-undef\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n\n      case 'decode':\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer);\n          self.postMessage({\n            type: 'decode',\n            id: message.id,\n            data\n          });\n        });\n        break;\n    }\n  };\n\n  function decodeObjects(rhino, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = []; //Handle objects\n\n    const objs = doc.objects();\n    const cnt = objs.count;\n\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n\n      const object = extractObjectData(_object, doc);\n\n      _object.delete();\n\n      if (object) {\n        objects.push(object);\n      }\n    } // Handle instance definitions\n    // console.log( `Instance Definitions Count: ${doc.instanceDefinitions().count()}` );\n\n\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: 'InstanceDefinition'\n      });\n    } // Handle materials\n\n\n    const textureTypes = [// rhino.TextureType.Bitmap,\n    rhino.TextureType.Diffuse, rhino.TextureType.Bump, rhino.TextureType.Transparency, rhino.TextureType.Opacity, rhino.TextureType.Emap];\n    const pbrTextureTypes = [rhino.TextureType.PBR_BaseColor, rhino.TextureType.PBR_Subsurface, rhino.TextureType.PBR_SubsurfaceScattering, rhino.TextureType.PBR_SubsurfaceScatteringRadius, rhino.TextureType.PBR_Metallic, rhino.TextureType.PBR_Specular, rhino.TextureType.PBR_SpecularTint, rhino.TextureType.PBR_Roughness, rhino.TextureType.PBR_Anisotropic, rhino.TextureType.PBR_Anisotropic_Rotation, rhino.TextureType.PBR_Sheen, rhino.TextureType.PBR_SheenTint, rhino.TextureType.PBR_Clearcoat, rhino.TextureType.PBR_ClearcoatBump, rhino.TextureType.PBR_ClearcoatRoughness, rhino.TextureType.PBR_OpacityIor, rhino.TextureType.PBR_OpacityRoughness, rhino.TextureType.PBR_Emission, rhino.TextureType.PBR_AmbientOcclusion, rhino.TextureType.PBR_Displacement];\n\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i);\n\n      const _pbrMaterial = _material.physicallyBased();\n\n      let material = extractProperties(_material);\n      const textures = [];\n\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j]);\n\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          const texture = {\n            type: textureType\n          };\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n\n          if (image) {\n            texture.image = 'data:image/png;base64,' + image;\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`);\n            texture.image = null;\n          }\n\n          textures.push(texture);\n\n          _texture.delete();\n        }\n      }\n\n      material.textures = textures;\n\n      if (_pbrMaterial.supported) {\n        console.log('pbr true');\n\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j]);\n\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n            let textureType = textureTypes[j].constructor.name;\n            textureType = textureType.substring(12, textureType.length);\n            const texture = {\n              type: textureType,\n              image: 'data:image/png;base64,' + image\n            };\n            textures.push(texture);\n\n            _texture.delete();\n          }\n        }\n\n        const pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n\n      materials.push(material);\n\n      _material.delete();\n\n      _pbrMaterial.delete();\n    } // Handle layers\n\n\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i);\n\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n\n      _layer.delete();\n    } // Handle views\n\n\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i);\n\n      const view = extractProperties(_view);\n      views.push(view);\n\n      _view.delete();\n    } // Handle named views\n\n\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i);\n\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n\n      _namedView.delete();\n    } // Handle groups\n\n\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i);\n\n      const group = extractProperties(_group);\n      groups.push(group);\n\n      _group.delete();\n    } // Handle settings\n\n\n    const settings = extractProperties(doc.settings()); //TODO: Handle other document stuff like dimstyles, instance definitions, bitmaps etc.\n    // Handle dimstyles\n    // console.log( `Dimstyle Count: ${doc.dimstyles().count()}` );\n    // Handle bitmaps\n    // console.log( `Bitmap Count: ${doc.bitmaps().count()}` );\n    // Handle strings -- this seems to be broken at the moment in rhino3dm\n    // console.log( `Document Strings Count: ${doc.strings().count()}` );\n\n    /*\n    for( var i = 0; i < doc.strings().count(); i++ ){\n    var _string= doc.strings().get( i );\n    console.log(_string);\n    var string = extractProperties( _group );\n    strings.push( string );\n    _string.delete();\n    }\n    */\n\n    doc.delete();\n    return {\n      objects,\n      materials,\n      layers,\n      views,\n      namedViews,\n      groups,\n      settings\n    };\n  }\n\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n\n    const _attributes = object.attributes();\n\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh; // skip instance definition objects\n    //if( _attributes.isInstanceDefinitionObject ) { continue; }\n    // TODO: handle other geometry types\n\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [];\n\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [pt[0], pt[1], pt[2]];\n\n        const _color = _attributes.drawColor(doc);\n\n        color.itemSize = 3;\n        color.type = 'Float32Array';\n        color.array = [_color.r / 255.0, _color.g / 255.0, _color.b / 255.0];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n\n        mesh = new rhino.Mesh();\n\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n\n          if (_mesh) {\n            mesh.append(_mesh);\n\n            _mesh.delete();\n          }\n\n          face.delete();\n        }\n\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n\n        mesh.delete();\n        break;\n\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n\n      case rhino.ObjectType.SubD:\n        // TODO: precalculate resulting vertices and faces and warn on excessive results\n        _geometry.subdivide(3);\n\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      /*\n      case rhino.ObjectType.Annotation:\n      case rhino.ObjectType.Hatch:\n      case rhino.ObjectType.ClipPlane:\n      */\n\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`);\n        break;\n    }\n\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry,\n        attributes,\n        objectType\n      };\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`);\n    }\n  }\n\n  function extractProperties(object) {\n    const result = {};\n\n    for (const property in object) {\n      const value = object[property];\n\n      if (typeof value !== 'function') {\n        if (typeof value === 'object' && value !== null && value.hasOwnProperty('constructor')) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else {\n          result[property] = value;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount; // alternative to this hardcoded version: https://stackoverflow.com/a/18499923/2179399\n    }\n\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n\n      pLine.delete();\n      return rc;\n    }\n\n    const domain = curve.domain;\n    const divisions = pointCount - 1.0;\n\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]); // Duplicated from THREE.Vector3\n      // How to pass imports to worker?\n\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n\n    rc = ts.map(t => curve.pointAt(t));\n    return rc;\n  }\n}\n\nexport { Rhino3dmLoader };\n"]},"metadata":{},"sourceType":"module"}