{"ast":null,"code":"import { Curve, Vector4, Vector3 } from 'three';\nimport { calcBSplinePoint, calcNURBSDerivatives } from './NURBSUtils.js';\n/**\n * NURBS curve object\n *\n * Derives from Curve, overriding getPoint and getTangent.\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n *\n **/\n\nclass NURBSCurve extends Curve {\n  constructor(degree, knots\n  /* array of reals */\n  , controlPoints\n  /* array of Vector(2|3|4) */\n  , startKnot\n  /* index in knots */\n  , endKnot\n  /* index in knots */\n  ) {\n    super();\n    this.degree = degree;\n    this.knots = knots;\n    this.controlPoints = []; // Used by periodic NURBS to remove hidden spans\n\n    this.startKnot = startKnot || 0;\n    this.endKnot = endKnot || this.knots.length - 1;\n\n    for (let i = 0; i < controlPoints.length; ++i) {\n      // ensure Vector4 for control points\n      const point = controlPoints[i];\n      this.controlPoints[i] = new Vector4(point.x, point.y, point.z, point.w);\n    }\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    const u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]); // linear mapping t->u\n    // following results in (wx, wy, wz, w) homogeneous point\n\n    const hpoint = calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);\n\n    if (hpoint.w != 1.0) {\n      // project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\n      hpoint.divideScalar(hpoint.w);\n    }\n\n    return point.set(hpoint.x, hpoint.y, hpoint.z);\n  }\n\n  getTangent(t, optionalTarget) {\n    const tangent = optionalTarget || new Vector3();\n    const u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);\n    const ders = calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);\n    tangent.copy(ders[1]).normalize();\n    return tangent;\n  }\n\n}\n\nexport { NURBSCurve };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/three-stdlib/curves/NURBSCurve.js"],"names":["Curve","Vector4","Vector3","calcBSplinePoint","calcNURBSDerivatives","NURBSCurve","constructor","degree","knots","controlPoints","startKnot","endKnot","length","i","point","x","y","z","w","getPoint","t","optionalTarget","u","hpoint","divideScalar","set","getTangent","tangent","ders","copy","normalize"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,OAAhB,EAAyBC,OAAzB,QAAwC,OAAxC;AACA,SAASC,gBAAT,EAA2BC,oBAA3B,QAAuD,iBAAvD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAN,SAAyBL,KAAzB,CAA+B;AAC7BM,EAAAA,WAAW,CAACC,MAAD,EAASC;AACpB;AADW,IAETC;AACF;AAHW,IAITC;AACF;AALW,IAMTC;AACF;AAPW,IAQT;AACA;AACA,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,aAAL,GAAqB,EAArB,CAJA,CAIyB;;AAEzB,SAAKC,SAAL,GAAiBA,SAAS,IAAI,CAA9B;AACA,SAAKC,OAAL,GAAeA,OAAO,IAAI,KAAKH,KAAL,CAAWI,MAAX,GAAoB,CAA9C;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,aAAa,CAACG,MAAlC,EAA0C,EAAEC,CAA5C,EAA+C;AAC7C;AACA,YAAMC,KAAK,GAAGL,aAAa,CAACI,CAAD,CAA3B;AACA,WAAKJ,aAAL,CAAmBI,CAAnB,IAAwB,IAAIZ,OAAJ,CAAYa,KAAK,CAACC,CAAlB,EAAqBD,KAAK,CAACE,CAA3B,EAA8BF,KAAK,CAACG,CAApC,EAAuCH,KAAK,CAACI,CAA7C,CAAxB;AACD;AACF;;AAEDC,EAAAA,QAAQ,CAACC,CAAD,EAAIC,cAAJ,EAAoB;AAC1B,UAAMP,KAAK,GAAGO,cAAc,IAAI,IAAInB,OAAJ,EAAhC;AACA,UAAMoB,CAAC,GAAG,KAAKd,KAAL,CAAW,KAAKE,SAAhB,IAA6BU,CAAC,IAAI,KAAKZ,KAAL,CAAW,KAAKG,OAAhB,IAA2B,KAAKH,KAAL,CAAW,KAAKE,SAAhB,CAA/B,CAAxC,CAF0B,CAE0E;AACpG;;AAEA,UAAMa,MAAM,GAAGpB,gBAAgB,CAAC,KAAKI,MAAN,EAAc,KAAKC,KAAnB,EAA0B,KAAKC,aAA/B,EAA8Ca,CAA9C,CAA/B;;AAEA,QAAIC,MAAM,CAACL,CAAP,IAAY,GAAhB,EAAqB;AACnB;AACAK,MAAAA,MAAM,CAACC,YAAP,CAAoBD,MAAM,CAACL,CAA3B;AACD;;AAED,WAAOJ,KAAK,CAACW,GAAN,CAAUF,MAAM,CAACR,CAAjB,EAAoBQ,MAAM,CAACP,CAA3B,EAA8BO,MAAM,CAACN,CAArC,CAAP;AACD;;AAEDS,EAAAA,UAAU,CAACN,CAAD,EAAIC,cAAJ,EAAoB;AAC5B,UAAMM,OAAO,GAAGN,cAAc,IAAI,IAAInB,OAAJ,EAAlC;AACA,UAAMoB,CAAC,GAAG,KAAKd,KAAL,CAAW,CAAX,IAAgBY,CAAC,IAAI,KAAKZ,KAAL,CAAW,KAAKA,KAAL,CAAWI,MAAX,GAAoB,CAA/B,IAAoC,KAAKJ,KAAL,CAAW,CAAX,CAAxC,CAA3B;AACA,UAAMoB,IAAI,GAAGxB,oBAAoB,CAAC,KAAKG,MAAN,EAAc,KAAKC,KAAnB,EAA0B,KAAKC,aAA/B,EAA8Ca,CAA9C,EAAiD,CAAjD,CAAjC;AACAK,IAAAA,OAAO,CAACE,IAAR,CAAaD,IAAI,CAAC,CAAD,CAAjB,EAAsBE,SAAtB;AACA,WAAOH,OAAP;AACD;;AA9C4B;;AAkD/B,SAAStB,UAAT","sourcesContent":["import { Curve, Vector4, Vector3 } from 'three';\nimport { calcBSplinePoint, calcNURBSDerivatives } from './NURBSUtils.js';\n\n/**\n * NURBS curve object\n *\n * Derives from Curve, overriding getPoint and getTangent.\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n *\n **/\n\nclass NURBSCurve extends Curve {\n  constructor(degree, knots\n  /* array of reals */\n  , controlPoints\n  /* array of Vector(2|3|4) */\n  , startKnot\n  /* index in knots */\n  , endKnot\n  /* index in knots */\n  ) {\n    super();\n    this.degree = degree;\n    this.knots = knots;\n    this.controlPoints = []; // Used by periodic NURBS to remove hidden spans\n\n    this.startKnot = startKnot || 0;\n    this.endKnot = endKnot || this.knots.length - 1;\n\n    for (let i = 0; i < controlPoints.length; ++i) {\n      // ensure Vector4 for control points\n      const point = controlPoints[i];\n      this.controlPoints[i] = new Vector4(point.x, point.y, point.z, point.w);\n    }\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    const u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]); // linear mapping t->u\n    // following results in (wx, wy, wz, w) homogeneous point\n\n    const hpoint = calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);\n\n    if (hpoint.w != 1.0) {\n      // project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\n      hpoint.divideScalar(hpoint.w);\n    }\n\n    return point.set(hpoint.x, hpoint.y, hpoint.z);\n  }\n\n  getTangent(t, optionalTarget) {\n    const tangent = optionalTarget || new Vector3();\n    const u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);\n    const ders = calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);\n    tangent.copy(ders[1]).normalize();\n    return tangent;\n  }\n\n}\n\nexport { NURBSCurve };\n"]},"metadata":{},"sourceType":"module"}