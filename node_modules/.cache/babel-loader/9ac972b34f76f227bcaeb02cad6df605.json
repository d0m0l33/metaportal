{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { errors } from 'ethers';\n\nconst isDroppedAndReplaced = e => (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\n\nexport function usePromiseTransaction(chainId, options) {\n  const [state, setState] = useState({\n    status: 'None'\n  });\n  const {\n    addTransaction\n  } = useTransactionsContext();\n  const {\n    addNotification\n  } = useNotificationsContext();\n  const promiseTransaction = useCallback(async transactionPromise => {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (!chainId) return;\n    let transaction = undefined;\n\n    try {\n      transaction = await transactionPromise;\n      setState({\n        transaction,\n        status: 'Mining',\n        chainId\n      });\n      addTransaction({\n        transaction: Object.assign(Object.assign({}, transaction), {\n          chainId: chainId\n        }),\n        submittedAt: Date.now(),\n        transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n      });\n      const receipt = await transaction.wait();\n      setState({\n        receipt,\n        transaction,\n        status: 'Success',\n        chainId\n      });\n      return receipt;\n    } catch (e) {\n      const errorMessage = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : e.reason) !== null && _c !== void 0 ? _c : (_d = e.data) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : e.message;\n\n      if (transaction) {\n        const droppedAndReplaced = isDroppedAndReplaced(e);\n\n        if (droppedAndReplaced) {\n          const status = e.receipt.status === 0 ? 'Fail' : 'Success';\n          const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n          addNotification({\n            notification: {\n              type,\n              submittedAt: Date.now(),\n              transaction: e.replacement,\n              receipt: e.receipt,\n              transactionName: (_f = e.replacement) === null || _f === void 0 ? void 0 : _f.transactionName,\n              originalTransaction: transaction\n            },\n            chainId\n          });\n          setState({\n            status,\n            transaction: e.replacement,\n            originalTransaction: transaction,\n            receipt: e.receipt,\n            errorMessage,\n            chainId\n          });\n        } else {\n          setState({\n            status: 'Fail',\n            transaction,\n            receipt: e.receipt,\n            errorMessage,\n            chainId\n          });\n        }\n      } else {\n        setState({\n          status: 'Exception',\n          errorMessage,\n          chainId\n        });\n      }\n\n      return undefined;\n    }\n  }, [chainId, setState, addTransaction, options]);\n  return {\n    promiseTransaction,\n    state\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/usePromiseTransaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { errors } from 'ethers';\nconst isDroppedAndReplaced = (e) => (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\nexport function usePromiseTransaction(chainId, options) {\n    const [state, setState] = useState({ status: 'None' });\n    const { addTransaction } = useTransactionsContext();\n    const { addNotification } = useNotificationsContext();\n    const promiseTransaction = useCallback(async (transactionPromise) => {\n        var _a, _b, _c, _d, _e, _f;\n        if (!chainId)\n            return;\n        let transaction = undefined;\n        try {\n            transaction = await transactionPromise;\n            setState({ transaction, status: 'Mining', chainId });\n            addTransaction({\n                transaction: Object.assign(Object.assign({}, transaction), { chainId: chainId }),\n                submittedAt: Date.now(),\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n            });\n            const receipt = await transaction.wait();\n            setState({ receipt, transaction, status: 'Success', chainId });\n            return receipt;\n        }\n        catch (e) {\n            const errorMessage = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : e.reason) !== null && _c !== void 0 ? _c : (_d = e.data) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : e.message;\n            if (transaction) {\n                const droppedAndReplaced = isDroppedAndReplaced(e);\n                if (droppedAndReplaced) {\n                    const status = e.receipt.status === 0 ? 'Fail' : 'Success';\n                    const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n                    addNotification({\n                        notification: {\n                            type,\n                            submittedAt: Date.now(),\n                            transaction: e.replacement,\n                            receipt: e.receipt,\n                            transactionName: (_f = e.replacement) === null || _f === void 0 ? void 0 : _f.transactionName,\n                            originalTransaction: transaction,\n                        },\n                        chainId,\n                    });\n                    setState({\n                        status,\n                        transaction: e.replacement,\n                        originalTransaction: transaction,\n                        receipt: e.receipt,\n                        errorMessage,\n                        chainId,\n                    });\n                }\n                else {\n                    setState({ status: 'Fail', transaction, receipt: e.receipt, errorMessage, chainId });\n                }\n            }\n            else {\n                setState({ status: 'Exception', errorMessage, chainId });\n            }\n            return undefined;\n        }\n    }, [chainId, setState, addTransaction, options]);\n    return { promiseTransaction, state };\n}\n//# sourceMappingURL=usePromiseTransaction.js.map"]},"metadata":{},"sourceType":"module"}