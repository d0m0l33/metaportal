{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { UniformsUtils, WebGLRenderTarget, LinearFilter, NearestFilter, RGBAFormat, ShaderMaterial, MeshBasicMaterial } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\n\nclass AfterimagePass extends Pass {\n  constructor() {\n    let damp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.96;\n    let shader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AfterimageShader;\n    super();\n\n    _defineProperty(this, \"shader\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    _defineProperty(this, \"textureComp\", void 0);\n\n    _defineProperty(this, \"textureOld\", void 0);\n\n    _defineProperty(this, \"shaderMaterial\", void 0);\n\n    _defineProperty(this, \"compFsQuad\", void 0);\n\n    _defineProperty(this, \"copyFsQuad\", void 0);\n\n    this.shader = shader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.uniforms['damp'].value = damp;\n    this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    this.shaderMaterial = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: this.shader.vertexShader,\n      fragmentShader: this.shader.fragmentShader\n    });\n    this.compFsQuad = new FullScreenQuad(this.shaderMaterial);\n    let material = new MeshBasicMaterial();\n    this.copyFsQuad = new FullScreenQuad(material);\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms['tOld'].value = this.textureOld.texture;\n    this.uniforms['tNew'].value = readBuffer.texture;\n    renderer.setRenderTarget(this.textureComp);\n    this.compFsQuad.render(renderer);\n    this.copyFsQuad.material.map = this.textureComp.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.copyFsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.copyFsQuad.render(renderer);\n    } // Swap buffers.\n\n\n    let temp = this.textureOld;\n    this.textureOld = this.textureComp;\n    this.textureComp = temp; // Now textureOld contains the latest image, ready for the next frame.\n  }\n\n  setSize(width, height) {\n    this.textureComp.setSize(width, height);\n    this.textureOld.setSize(width, height);\n  }\n\n}\n\nexport { AfterimagePass };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/postprocessing/AfterimagePass.js"],"names":["_defineProperty","UniformsUtils","WebGLRenderTarget","LinearFilter","NearestFilter","RGBAFormat","ShaderMaterial","MeshBasicMaterial","Pass","FullScreenQuad","AfterimageShader","AfterimagePass","constructor","damp","shader","uniforms","clone","value","textureComp","window","innerWidth","innerHeight","minFilter","magFilter","format","textureOld","shaderMaterial","vertexShader","fragmentShader","compFsQuad","material","copyFsQuad","render","renderer","writeBuffer","readBuffer","texture","setRenderTarget","map","renderToScreen","clear","temp","setSize","width","height"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { UniformsUtils, WebGLRenderTarget, LinearFilter, NearestFilter, RGBAFormat, ShaderMaterial, MeshBasicMaterial } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\n\nclass AfterimagePass extends Pass {\n  constructor(damp = 0.96, shader = AfterimageShader) {\n    super();\n\n    _defineProperty(this, \"shader\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    _defineProperty(this, \"textureComp\", void 0);\n\n    _defineProperty(this, \"textureOld\", void 0);\n\n    _defineProperty(this, \"shaderMaterial\", void 0);\n\n    _defineProperty(this, \"compFsQuad\", void 0);\n\n    _defineProperty(this, \"copyFsQuad\", void 0);\n\n    this.shader = shader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.uniforms['damp'].value = damp;\n    this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    this.shaderMaterial = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: this.shader.vertexShader,\n      fragmentShader: this.shader.fragmentShader\n    });\n    this.compFsQuad = new FullScreenQuad(this.shaderMaterial);\n    let material = new MeshBasicMaterial();\n    this.copyFsQuad = new FullScreenQuad(material);\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms['tOld'].value = this.textureOld.texture;\n    this.uniforms['tNew'].value = readBuffer.texture;\n    renderer.setRenderTarget(this.textureComp);\n    this.compFsQuad.render(renderer);\n    this.copyFsQuad.material.map = this.textureComp.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.copyFsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.copyFsQuad.render(renderer);\n    } // Swap buffers.\n\n\n    let temp = this.textureOld;\n    this.textureOld = this.textureComp;\n    this.textureComp = temp; // Now textureOld contains the latest image, ready for the next frame.\n  }\n\n  setSize(width, height) {\n    this.textureComp.setSize(width, height);\n    this.textureOld.setSize(width, height);\n  }\n\n}\n\nexport { AfterimagePass };\n"]},"metadata":{},"sourceType":"module"}