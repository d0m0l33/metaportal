{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, BufferGeometry, BufferAttribute } from 'three';\n\nvar _taskCache = new WeakMap();\n\nvar DRACOLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(DRACOLoader, _Loader);\n\n  var _super = _createSuper(DRACOLoader);\n\n  function DRACOLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, DRACOLoader);\n\n    _this = _super.call(this, manager);\n    _this.decoderPath = '';\n    _this.decoderConfig = {};\n    _this.decoderBinary = null;\n    _this.decoderPending = null;\n    _this.workerLimit = 4;\n    _this.workerPool = [];\n    _this.workerNextTaskID = 1;\n    _this.workerSourceURL = '';\n    _this.defaultAttributeIDs = {\n      position: 'POSITION',\n      normal: 'NORMAL',\n      color: 'COLOR',\n      uv: 'TEX_COORD'\n    };\n    _this.defaultAttributeTypes = {\n      position: 'Float32Array',\n      normal: 'Float32Array',\n      color: 'Float32Array',\n      uv: 'Float32Array'\n    };\n    return _this;\n  }\n\n  _createClass(DRACOLoader, [{\n    key: \"setDecoderPath\",\n    value: function setDecoderPath(path) {\n      this.decoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setDecoderConfig\",\n    value: function setDecoderConfig(config) {\n      this.decoderConfig = config;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(workerLimit) {\n      this.workerLimit = workerLimit;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this2 = this;\n\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (buffer) {\n        var taskConfig = {\n          attributeIDs: _this2.defaultAttributeIDs,\n          attributeTypes: _this2.defaultAttributeTypes,\n          useUniqueIDs: false\n        };\n\n        _this2.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n      }, onProgress, onError);\n    }\n    /** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\n  }, {\n    key: \"decodeDracoFile\",\n    value: function decodeDracoFile(buffer, callback, attributeIDs, attributeTypes) {\n      var taskConfig = {\n        attributeIDs: attributeIDs || this.defaultAttributeIDs,\n        attributeTypes: attributeTypes || this.defaultAttributeTypes,\n        useUniqueIDs: !!attributeIDs\n      };\n      this.decodeGeometry(buffer, taskConfig).then(callback);\n    }\n  }, {\n    key: \"decodeGeometry\",\n    value: function decodeGeometry(buffer, taskConfig) {\n      var _this3 = this;\n\n      // TODO: For backward-compatibility, support 'attributeTypes' objects containing\n      // references (rather than names) to typed array constructors. These must be\n      // serialized before sending them to the worker.\n      for (var attribute in taskConfig.attributeTypes) {\n        var type = taskConfig.attributeTypes[attribute];\n\n        if (type.BYTES_PER_ELEMENT !== undefined) {\n          taskConfig.attributeTypes[attribute] = type.name;\n        }\n      } //\n\n\n      var taskKey = JSON.stringify(taskConfig); // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n\n      if (_taskCache.has(buffer)) {\n        var cachedTask = _taskCache.get(buffer);\n\n        if (cachedTask.key === taskKey) {\n          return cachedTask.promise;\n        } else if (buffer.byteLength === 0) {\n          // Technically, it would be possible to wait for the previous task to complete,\n          // transfer the buffer back, and decode again with the second configuration. That\n          // is complex, and I don't know of any reason to decode a Draco buffer twice in\n          // different ways, so this is left unimplemented.\n          throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');\n        }\n      } //\n\n\n      var worker;\n      var taskID = this.workerNextTaskID++;\n      var taskCost = buffer.byteLength; // Obtain a worker and assign a task, and construct a geometry instance\n      // when the task completes.\n\n      var geometryPending = this._getWorker(taskID, taskCost).then(function (_worker) {\n        worker = _worker;\n        return new Promise(function (resolve, reject) {\n          worker._callbacks[taskID] = {\n            resolve: resolve,\n            reject: reject\n          };\n          worker.postMessage({\n            type: 'decode',\n            id: taskID,\n            taskConfig: taskConfig,\n            buffer: buffer\n          }, [buffer]); // this.debug();\n        });\n      }).then(function (message) {\n        return _this3._createGeometry(message.geometry);\n      }); // Remove task from the task list.\n      // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n      geometryPending.catch(function () {\n        return true;\n      }).then(function () {\n        if (worker && taskID) {\n          _this3._releaseTask(worker, taskID); // this.debug();\n\n        }\n      }); // Cache the task result.\n\n      _taskCache.set(buffer, {\n        key: taskKey,\n        promise: geometryPending\n      });\n\n      return geometryPending;\n    }\n  }, {\n    key: \"_createGeometry\",\n    value: function _createGeometry(geometryData) {\n      var geometry = new BufferGeometry();\n\n      if (geometryData.index) {\n        geometry.setIndex(new BufferAttribute(geometryData.index.array, 1));\n      }\n\n      for (var i = 0; i < geometryData.attributes.length; i++) {\n        var attribute = geometryData.attributes[i];\n        var name = attribute.name;\n        var array = attribute.array;\n        var itemSize = attribute.itemSize;\n        geometry.setAttribute(name, new BufferAttribute(array, itemSize));\n      }\n\n      return geometry;\n    }\n  }, {\n    key: \"_loadLibrary\",\n    value: function _loadLibrary(url, responseType) {\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.decoderPath);\n      loader.setResponseType(responseType);\n      loader.setWithCredentials(this.withCredentials);\n      return new Promise(function (resolve, reject) {\n        loader.load(url, resolve, undefined, reject);\n      });\n    }\n  }, {\n    key: \"preload\",\n    value: function preload() {\n      this._initDecoder();\n\n      return this;\n    }\n  }, {\n    key: \"_initDecoder\",\n    value: function _initDecoder() {\n      var _this4 = this;\n\n      if (this.decoderPending) return this.decoderPending;\n      var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n      var librariesPending = [];\n\n      if (useJS) {\n        librariesPending.push(this._loadLibrary('draco_decoder.js', 'text'));\n      } else {\n        librariesPending.push(this._loadLibrary('draco_wasm_wrapper.js', 'text'));\n        librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));\n      }\n\n      this.decoderPending = Promise.all(librariesPending).then(function (libraries) {\n        var jsContent = libraries[0];\n\n        if (!useJS) {\n          _this4.decoderConfig.wasmBinary = libraries[1];\n        }\n\n        var fn = DRACOWorker.toString();\n        var body = ['/* draco decoder */', jsContent, '', '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n      return this.decoderPending;\n    }\n  }, {\n    key: \"_getWorker\",\n    value: function _getWorker(taskID, taskCost) {\n      var _this5 = this;\n\n      return this._initDecoder().then(function () {\n        if (_this5.workerPool.length < _this5.workerLimit) {\n          var _worker2 = new Worker(_this5.workerSourceURL);\n\n          _worker2._callbacks = {};\n          _worker2._taskCosts = {};\n          _worker2._taskLoad = 0;\n\n          _worker2.postMessage({\n            type: 'init',\n            decoderConfig: _this5.decoderConfig\n          });\n\n          _worker2.onmessage = function (e) {\n            var message = e.data;\n\n            switch (message.type) {\n              case 'decode':\n                _worker2._callbacks[message.id].resolve(message);\n\n                break;\n\n              case 'error':\n                _worker2._callbacks[message.id].reject(message);\n\n                break;\n\n              default:\n                console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n            }\n          };\n\n          _this5.workerPool.push(_worker2);\n        } else {\n          _this5.workerPool.sort(function (a, b) {\n            return a._taskLoad > b._taskLoad ? -1 : 1;\n          });\n        }\n\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\n        worker._taskCosts[taskID] = taskCost;\n        worker._taskLoad += taskCost;\n        return worker;\n      });\n    }\n  }, {\n    key: \"_releaseTask\",\n    value: function _releaseTask(worker, taskID) {\n      worker._taskLoad -= worker._taskCosts[taskID];\n      delete worker._callbacks[taskID];\n      delete worker._taskCosts[taskID];\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      console.log('Task load: ', this.workerPool.map(function (worker) {\n        return worker._taskLoad;\n      }));\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.workerPool.length; ++i) {\n        this.workerPool[i].terminate();\n      }\n\n      this.workerPool.length = 0;\n      return this;\n    }\n  }]);\n\n  return DRACOLoader;\n}(Loader);\n/* WEB WORKER */\n\n\nfunction DRACOWorker() {\n  var decoderConfig;\n  var decoderPending;\n\n  onmessage = function onmessage(e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        decoderConfig = message.decoderConfig;\n        decoderPending = new Promise(function (resolve\n        /*, reject*/\n        ) {\n          decoderConfig.onModuleLoaded = function (draco) {\n            // Module is Promise-like. Wrap before resolving to avoid loop.\n            resolve({\n              draco: draco\n            });\n          };\n\n          DracoDecoderModule(decoderConfig); // eslint-disable-line no-undef\n        });\n        break;\n\n      case 'decode':\n        var buffer = message.buffer;\n        var taskConfig = message.taskConfig;\n        decoderPending.then(function (module) {\n          var draco = module.draco;\n          var decoder = new draco.Decoder();\n          var decoderBuffer = new draco.DecoderBuffer();\n          decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n\n          try {\n            var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n            var buffers = geometry.attributes.map(function (attr) {\n              return attr.array.buffer;\n            });\n            if (geometry.index) buffers.push(geometry.index.array.buffer);\n            self.postMessage({\n              type: 'decode',\n              id: message.id,\n              geometry: geometry\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          } finally {\n            draco.destroy(decoderBuffer);\n            draco.destroy(decoder);\n          }\n        });\n        break;\n    }\n  };\n\n  function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n    var attributeIDs = taskConfig.attributeIDs;\n    var attributeTypes = taskConfig.attributeTypes;\n    var dracoGeometry;\n    var decodingStatus;\n    var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      dracoGeometry = new draco.Mesh();\n      decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n    } else if (geometryType === draco.POINT_CLOUD) {\n      dracoGeometry = new draco.PointCloud();\n      decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n    } else {\n      throw new Error('THREE.DRACOLoader: Unexpected geometry type.');\n    }\n\n    if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n      throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());\n    }\n\n    var geometry = {\n      index: null,\n      attributes: []\n    }; // Gather all vertex attributes.\n\n    for (var attributeName in attributeIDs) {\n      var attributeType = self[attributeTypes[attributeName]];\n      var attribute = void 0;\n      var attributeID = void 0; // A Draco file may be created with default vertex attributes, whose attribute IDs\n      // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n      // a Draco file may contain a custom set of attributes, identified by known unique\n      // IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\n      if (taskConfig.useUniqueIDs) {\n        attributeID = attributeIDs[attributeName];\n        attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n      } else {\n        attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n        if (attributeID === -1) continue;\n        attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n      }\n\n      geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n    } // Add index.\n\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      geometry.index = decodeIndex(draco, decoder, dracoGeometry);\n    }\n\n    draco.destroy(dracoGeometry);\n    return geometry;\n  }\n\n  function decodeIndex(draco, decoder, dracoGeometry) {\n    var numFaces = dracoGeometry.num_faces();\n    var numIndices = numFaces * 3;\n    var byteLength = numIndices * 4;\n\n    var ptr = draco._malloc(byteLength);\n\n    decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n    var index = new Uint32Array(draco.HEAPF32.buffer, ptr, numIndices).slice();\n\n    draco._free(ptr);\n\n    return {\n      array: index,\n      itemSize: 1\n    };\n  }\n\n  function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n    var numComponents = attribute.num_components();\n    var numPoints = dracoGeometry.num_points();\n    var numValues = numPoints * numComponents;\n    var byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n    var dataType = getDracoDataType(draco, attributeType);\n\n    var ptr = draco._malloc(byteLength);\n\n    decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, dataType, byteLength, ptr);\n    var array = new attributeType(draco.HEAPF32.buffer, ptr, numValues).slice();\n\n    draco._free(ptr);\n\n    return {\n      name: attributeName,\n      array: array,\n      itemSize: numComponents\n    };\n  }\n\n  function getDracoDataType(draco, attributeType) {\n    switch (attributeType) {\n      case Float32Array:\n        return draco.DT_FLOAT32;\n\n      case Int8Array:\n        return draco.DT_INT8;\n\n      case Int16Array:\n        return draco.DT_INT16;\n\n      case Int32Array:\n        return draco.DT_INT32;\n\n      case Uint8Array:\n        return draco.DT_UINT8;\n\n      case Uint16Array:\n        return draco.DT_UINT16;\n\n      case Uint32Array:\n        return draco.DT_UINT32;\n    }\n  }\n}\n\nexport { DRACOLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/DRACOLoader.js"],"names":["Loader","FileLoader","BufferGeometry","BufferAttribute","_taskCache","WeakMap","DRACOLoader","manager","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","position","normal","color","uv","defaultAttributeTypes","path","config","url","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","buffer","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","then","catch","callback","attribute","type","BYTES_PER_ELEMENT","undefined","name","taskKey","JSON","stringify","has","cachedTask","get","key","promise","byteLength","Error","worker","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","_createGeometry","geometry","_releaseTask","set","geometryData","index","setIndex","array","i","attributes","length","itemSize","setAttribute","responseType","_initDecoder","useJS","WebAssembly","librariesPending","push","_loadLibrary","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","e","data","console","error","sort","a","b","log","map","terminate","onModuleLoaded","draco","DracoDecoderModule","module","decoder","Decoder","decoderBuffer","DecoderBuffer","Init","Int8Array","buffers","attr","self","destroy","dracoGeometry","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeName","attributeType","attributeID","GetAttributeByUniqueId","GetAttributeId","GetAttribute","decodeAttribute","decodeIndex","numFaces","num_faces","numIndices","_malloc","GetTrianglesUInt32Array","Uint32Array","HEAPF32","slice","_free","numComponents","num_components","numPoints","num_points","numValues","dataType","getDracoDataType","GetAttributeDataArrayForAllPoints","Float32Array","DT_FLOAT32","DT_INT8","Int16Array","DT_INT16","Int32Array","DT_INT32","Uint8Array","DT_UINT8","Uint16Array","DT_UINT16","DT_UINT32"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, BufferGeometry, BufferAttribute } from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass DRACOLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.decoderPath = '';\n    this.decoderConfig = {};\n    this.decoderBinary = null;\n    this.decoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.defaultAttributeIDs = {\n      position: 'POSITION',\n      normal: 'NORMAL',\n      color: 'COLOR',\n      uv: 'TEX_COORD'\n    };\n    this.defaultAttributeTypes = {\n      position: 'Float32Array',\n      normal: 'Float32Array',\n      color: 'Float32Array',\n      uv: 'Float32Array'\n    };\n  }\n\n  setDecoderPath(path) {\n    this.decoderPath = path;\n    return this;\n  }\n\n  setDecoderConfig(config) {\n    this.decoderConfig = config;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      const taskConfig = {\n        attributeIDs: this.defaultAttributeIDs,\n        attributeTypes: this.defaultAttributeTypes,\n        useUniqueIDs: false\n      };\n      this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  }\n  /** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\n\n  decodeDracoFile(buffer, callback, attributeIDs, attributeTypes) {\n    const taskConfig = {\n      attributeIDs: attributeIDs || this.defaultAttributeIDs,\n      attributeTypes: attributeTypes || this.defaultAttributeTypes,\n      useUniqueIDs: !!attributeIDs\n    };\n    this.decodeGeometry(buffer, taskConfig).then(callback);\n  }\n\n  decodeGeometry(buffer, taskConfig) {\n    // TODO: For backward-compatibility, support 'attributeTypes' objects containing\n    // references (rather than names) to typed array constructors. These must be\n    // serialized before sending them to the worker.\n    for (const attribute in taskConfig.attributeTypes) {\n      const type = taskConfig.attributeTypes[attribute];\n\n      if (type.BYTES_PER_ELEMENT !== undefined) {\n        taskConfig.attributeTypes[attribute] = type.name;\n      }\n    } //\n\n\n    const taskKey = JSON.stringify(taskConfig); // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n    // again from this thread.\n\n    if (_taskCache.has(buffer)) {\n      const cachedTask = _taskCache.get(buffer);\n\n      if (cachedTask.key === taskKey) {\n        return cachedTask.promise;\n      } else if (buffer.byteLength === 0) {\n        // Technically, it would be possible to wait for the previous task to complete,\n        // transfer the buffer back, and decode again with the second configuration. That\n        // is complex, and I don't know of any reason to decode a Draco buffer twice in\n        // different ways, so this is left unimplemented.\n        throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');\n      }\n    } //\n\n\n    let worker;\n    const taskID = this.workerNextTaskID++;\n    const taskCost = buffer.byteLength; // Obtain a worker and assign a task, and construct a geometry instance\n    // when the task completes.\n\n    const geometryPending = this._getWorker(taskID, taskCost).then(_worker => {\n      worker = _worker;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          taskConfig,\n          buffer\n        }, [buffer]); // this.debug();\n      });\n    }).then(message => this._createGeometry(message.geometry)); // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    geometryPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID); // this.debug();\n\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      key: taskKey,\n      promise: geometryPending\n    });\n\n    return geometryPending;\n  }\n\n  _createGeometry(geometryData) {\n    const geometry = new BufferGeometry();\n\n    if (geometryData.index) {\n      geometry.setIndex(new BufferAttribute(geometryData.index.array, 1));\n    }\n\n    for (let i = 0; i < geometryData.attributes.length; i++) {\n      const attribute = geometryData.attributes[i];\n      const name = attribute.name;\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      geometry.setAttribute(name, new BufferAttribute(array, itemSize));\n    }\n\n    return geometry;\n  }\n\n  _loadLibrary(url, responseType) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.decoderPath);\n    loader.setResponseType(responseType);\n    loader.setWithCredentials(this.withCredentials);\n    return new Promise((resolve, reject) => {\n      loader.load(url, resolve, undefined, reject);\n    });\n  }\n\n  preload() {\n    this._initDecoder();\n\n    return this;\n  }\n\n  _initDecoder() {\n    if (this.decoderPending) return this.decoderPending;\n    const useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n    const librariesPending = [];\n\n    if (useJS) {\n      librariesPending.push(this._loadLibrary('draco_decoder.js', 'text'));\n    } else {\n      librariesPending.push(this._loadLibrary('draco_wasm_wrapper.js', 'text'));\n      librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));\n    }\n\n    this.decoderPending = Promise.all(librariesPending).then(libraries => {\n      const jsContent = libraries[0];\n\n      if (!useJS) {\n        this.decoderConfig.wasmBinary = libraries[1];\n      }\n\n      const fn = DRACOWorker.toString();\n      const body = ['/* draco decoder */', jsContent, '', '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n      this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n    });\n    return this.decoderPending;\n  }\n\n  _getWorker(taskID, taskCost) {\n    return this._initDecoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          decoderConfig: this.decoderConfig\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskCosts[taskID] = taskCost;\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n\n  debug() {\n    console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* WEB WORKER */\n\n\nfunction DRACOWorker() {\n  let decoderConfig;\n  let decoderPending;\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        decoderConfig = message.decoderConfig;\n        decoderPending = new Promise(function (resolve\n        /*, reject*/\n        ) {\n          decoderConfig.onModuleLoaded = function (draco) {\n            // Module is Promise-like. Wrap before resolving to avoid loop.\n            resolve({\n              draco: draco\n            });\n          };\n\n          DracoDecoderModule(decoderConfig); // eslint-disable-line no-undef\n        });\n        break;\n\n      case 'decode':\n        const buffer = message.buffer;\n        const taskConfig = message.taskConfig;\n        decoderPending.then(module => {\n          const draco = module.draco;\n          const decoder = new draco.Decoder();\n          const decoderBuffer = new draco.DecoderBuffer();\n          decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n\n          try {\n            const geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n            const buffers = geometry.attributes.map(attr => attr.array.buffer);\n            if (geometry.index) buffers.push(geometry.index.array.buffer);\n            self.postMessage({\n              type: 'decode',\n              id: message.id,\n              geometry\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          } finally {\n            draco.destroy(decoderBuffer);\n            draco.destroy(decoder);\n          }\n        });\n        break;\n    }\n  };\n\n  function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n    const attributeIDs = taskConfig.attributeIDs;\n    const attributeTypes = taskConfig.attributeTypes;\n    let dracoGeometry;\n    let decodingStatus;\n    const geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      dracoGeometry = new draco.Mesh();\n      decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n    } else if (geometryType === draco.POINT_CLOUD) {\n      dracoGeometry = new draco.PointCloud();\n      decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n    } else {\n      throw new Error('THREE.DRACOLoader: Unexpected geometry type.');\n    }\n\n    if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n      throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());\n    }\n\n    const geometry = {\n      index: null,\n      attributes: []\n    }; // Gather all vertex attributes.\n\n    for (const attributeName in attributeIDs) {\n      const attributeType = self[attributeTypes[attributeName]];\n      let attribute;\n      let attributeID; // A Draco file may be created with default vertex attributes, whose attribute IDs\n      // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n      // a Draco file may contain a custom set of attributes, identified by known unique\n      // IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\n      if (taskConfig.useUniqueIDs) {\n        attributeID = attributeIDs[attributeName];\n        attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n      } else {\n        attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n        if (attributeID === -1) continue;\n        attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n      }\n\n      geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n    } // Add index.\n\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      geometry.index = decodeIndex(draco, decoder, dracoGeometry);\n    }\n\n    draco.destroy(dracoGeometry);\n    return geometry;\n  }\n\n  function decodeIndex(draco, decoder, dracoGeometry) {\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    const byteLength = numIndices * 4;\n\n    const ptr = draco._malloc(byteLength);\n\n    decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n    const index = new Uint32Array(draco.HEAPF32.buffer, ptr, numIndices).slice();\n\n    draco._free(ptr);\n\n    return {\n      array: index,\n      itemSize: 1\n    };\n  }\n\n  function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n    const numComponents = attribute.num_components();\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n    const byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n    const dataType = getDracoDataType(draco, attributeType);\n\n    const ptr = draco._malloc(byteLength);\n\n    decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, dataType, byteLength, ptr);\n    const array = new attributeType(draco.HEAPF32.buffer, ptr, numValues).slice();\n\n    draco._free(ptr);\n\n    return {\n      name: attributeName,\n      array: array,\n      itemSize: numComponents\n    };\n  }\n\n  function getDracoDataType(draco, attributeType) {\n    switch (attributeType) {\n      case Float32Array:\n        return draco.DT_FLOAT32;\n\n      case Int8Array:\n        return draco.DT_INT8;\n\n      case Int16Array:\n        return draco.DT_INT16;\n\n      case Int32Array:\n        return draco.DT_INT32;\n\n      case Uint8Array:\n        return draco.DT_UINT8;\n\n      case Uint16Array:\n        return draco.DT_UINT16;\n\n      case Uint32Array:\n        return draco.DT_UINT32;\n    }\n  }\n}\n\nexport { DRACOLoader };\n"]},"metadata":{},"sourceType":"module"}