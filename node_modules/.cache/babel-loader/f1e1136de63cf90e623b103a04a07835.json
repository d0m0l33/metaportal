{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\nexport var SeparatingAxisTriangle = /*#__PURE__*/function (_Triangle) {\n  _inherits(SeparatingAxisTriangle, _Triangle);\n\n  var _super = _createSuper(SeparatingAxisTriangle);\n\n  function SeparatingAxisTriangle() {\n    var _this;\n\n    _classCallCheck(this, SeparatingAxisTriangle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isSeparatingAxisTriangle = true;\n    _this.satAxes = new Array(4).fill().map(function () {\n      return new Vector3();\n    });\n    _this.satBounds = new Array(4).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    _this.points = [_this.a, _this.b, _this.c];\n    _this.sphere = new Sphere();\n    _this.plane = new Plane();\n    _this.needsUpdate = false;\n    return _this;\n  }\n\n  _createClass(SeparatingAxisTriangle, [{\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere) {\n      return sphereIntersectTriangle(sphere, this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var a = this.a;\n      var b = this.b;\n      var c = this.c;\n      var points = this.points;\n      var satAxes = this.satAxes;\n      var satBounds = this.satBounds;\n      var axis0 = satAxes[0];\n      var sab0 = satBounds[0];\n      this.getNormal(axis0);\n      sab0.setFromPoints(axis0, points);\n      var axis1 = satAxes[1];\n      var sab1 = satBounds[1];\n      axis1.subVectors(a, b);\n      sab1.setFromPoints(axis1, points);\n      var axis2 = satAxes[2];\n      var sab2 = satBounds[2];\n      axis2.subVectors(b, c);\n      sab2.setFromPoints(axis2, points);\n      var axis3 = satAxes[3];\n      var sab3 = satBounds[3];\n      axis3.subVectors(c, a);\n      sab3.setFromPoints(axis3, points);\n      this.sphere.setFromPoints(this.points);\n      this.plane.setFromNormalAndCoplanarPoint(axis0, a);\n      this.needsUpdate = false;\n    }\n  }]);\n\n  return SeparatingAxisTriangle;\n}(Triangle);\n\nSeparatingAxisTriangle.prototype.closestPointToSegment = function () {\n  var point1 = new Vector3();\n  var point2 = new Vector3();\n  var edge = new Line3();\n  return function distanceToSegment(segment) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var start = segment.start,\n        end = segment.end;\n    var points = this.points;\n    var distSq;\n    var closestDistanceSq = Infinity; // check the triangle edges\n\n    for (var i = 0; i < 3; i++) {\n      var nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      closestPointsSegmentToSegment(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n    } // check end points\n\n\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(start);\n    }\n\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(end);\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.intersectsTriangle = function () {\n  var saTri2 = new SeparatingAxisTriangle();\n  var arr1 = new Array(3);\n  var arr2 = new Array(3);\n  var cachedSatBounds = new SeparatingAxisBounds();\n  var cachedSatBounds2 = new SeparatingAxisBounds();\n  var cachedAxis = new Vector3();\n  var dir1 = new Vector3();\n  var dir2 = new Vector3();\n  var tempDir = new Vector3();\n  var edge = new Line3();\n  var edge1 = new Line3();\n  var edge2 = new Line3(); // TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n  // be a line contained by both triangles if not a different special case somehow represented in the return result.\n\n  return function intersectsTriangle(other) {\n    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (!other.isSeparatingAxisTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    } else if (other.needsUpdate) {\n      other.update();\n    }\n\n    var satBounds1 = this.satBounds;\n    var satAxes1 = this.satAxes;\n    arr2[0] = other.a;\n    arr2[1] = other.b;\n    arr2[2] = other.c;\n\n    for (var i = 0; i < 4; i++) {\n      var sb = satBounds1[i];\n      var sa = satAxes1[i];\n      cachedSatBounds.setFromPoints(sa, arr2);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    var satBounds2 = other.satBounds;\n    var satAxes2 = other.satAxes;\n    arr1[0] = this.a;\n    arr1[1] = this.b;\n    arr1[2] = this.c;\n\n    for (var _i = 0; _i < 4; _i++) {\n      var _sb = satBounds2[_i];\n      var _sa = satAxes2[_i];\n      cachedSatBounds.setFromPoints(_sa, arr1);\n      if (_sb.isSeparated(cachedSatBounds)) return false;\n    } // check crossed axes\n\n\n    for (var _i2 = 0; _i2 < 4; _i2++) {\n      var sa1 = satAxes1[_i2];\n\n      for (var i2 = 0; i2 < 4; i2++) {\n        var sa2 = satAxes2[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, arr1);\n        cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n\n    if (target) {\n      var plane1 = this.plane;\n      var plane2 = other.plane;\n\n      if (Math.abs(plane1.normal.dot(plane2.normal)) > 1.0 - 1e-10) {\n        // TODO find two points that intersect on the edges and make that the result\n        console.warn('SeparatingAxisTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.');\n        target.start.set(0, 0, 0);\n        target.end.set(0, 0, 0);\n      } else {\n        // find the edge that intersects the other triangle plane\n        var points1 = this.points;\n        var found1 = false;\n\n        for (var _i3 = 0; _i3 < 3; _i3++) {\n          var p1 = points1[_i3];\n          var p2 = points1[(_i3 + 1) % 3];\n          edge.start.copy(p1);\n          edge.end.copy(p2);\n\n          if (plane2.intersectLine(edge, found1 ? edge1.start : edge1.end)) {\n            if (found1) {\n              break;\n            }\n\n            found1 = true;\n          }\n        } // find the other triangles edge that intersects this plane\n\n\n        var points2 = other.points;\n        var found2 = false;\n\n        for (var _i4 = 0; _i4 < 3; _i4++) {\n          var _p = points2[_i4];\n          var _p2 = points2[(_i4 + 1) % 3];\n          edge.start.copy(_p);\n          edge.end.copy(_p2);\n\n          if (plane1.intersectLine(edge, found2 ? edge2.start : edge2.end)) {\n            if (found2) {\n              break;\n            }\n\n            found2 = true;\n          }\n        } // find swap the second edge so both lines are running the same direction\n\n\n        edge1.delta(dir1);\n        edge2.delta(dir2);\n\n        if (dir1.dot(dir2) < 0) {\n          var tmp = edge2.start;\n          edge2.start = edge2.end;\n          edge2.end = tmp;\n        }\n\n        tempDir.subVectors(edge1.start, edge2.start);\n\n        if (tempDir.dot(dir1) > 0) {\n          target.start.copy(edge1.start);\n        } else {\n          target.start.copy(edge2.start);\n        }\n\n        tempDir.subVectors(edge1.end, edge2.end);\n\n        if (tempDir.dot(dir1) < 0) {\n          target.end.copy(edge1.end);\n        } else {\n          target.end.copy(edge2.end);\n        }\n      }\n    }\n\n    return true;\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToPoint = function () {\n  var target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToTriangle = function () {\n  var point = new Vector3();\n  var point2 = new Vector3();\n  var cornerFields = ['a', 'b', 'c'];\n  var line1 = new Line3();\n  var line2 = new Line3();\n  return function distanceToTriangle(other) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var lineTarget = target1 || target2 ? line1 : null;\n\n    if (this.intersectsTriangle(other, lineTarget)) {\n      if (target1 || target2) {\n        if (target1) lineTarget.getCenter(target1);\n        if (target2) lineTarget.getCenter(target2);\n      }\n\n      return 0;\n    }\n\n    var closestDistanceSq = Infinity; // check all point distances\n\n    for (var i = 0; i < 3; i++) {\n      var dist = void 0;\n      var field = cornerFields[i];\n      var otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(otherVec);\n      }\n\n      var thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(thisVec);\n        if (target2) target2.copy(point);\n      }\n    }\n\n    for (var _i5 = 0; _i5 < 3; _i5++) {\n      var f11 = cornerFields[_i5];\n      var f12 = cornerFields[(_i5 + 1) % 3];\n      line1.set(this[f11], this[f12]);\n\n      for (var i2 = 0; i2 < 3; i2++) {\n        var f21 = cornerFields[i2];\n        var f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        closestPointsSegmentToSegment(line1, line2, point, point2);\n\n        var _dist = point.distanceToSquared(point2);\n\n        if (_dist < closestDistanceSq) {\n          closestDistanceSq = _dist;\n          if (target1) target1.copy(point);\n          if (target2) target2.copy(point2);\n        }\n      }\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-mesh-bvh/src/math/SeparatingAxisTriangle.js"],"names":["Triangle","Vector3","Line3","Sphere","Plane","SeparatingAxisBounds","closestPointsSegmentToSegment","sphereIntersectTriangle","SeparatingAxisTriangle","args","isSeparatingAxisTriangle","satAxes","Array","fill","map","satBounds","points","a","b","c","sphere","plane","needsUpdate","axis0","sab0","getNormal","setFromPoints","axis1","sab1","subVectors","axis2","sab2","axis3","sab3","setFromNormalAndCoplanarPoint","prototype","closestPointToSegment","point1","point2","edge","distanceToSegment","segment","target1","target2","start","end","distSq","closestDistanceSq","Infinity","i","nexti","copy","distanceToSquared","closestPointToPoint","Math","sqrt","intersectsTriangle","saTri2","arr1","arr2","cachedSatBounds","cachedSatBounds2","cachedAxis","dir1","dir2","tempDir","edge1","edge2","other","target","update","satBounds1","satAxes1","sb","sa","isSeparated","satBounds2","satAxes2","sa1","i2","sa2","crossVectors","plane1","plane2","abs","normal","dot","console","warn","set","points1","found1","p1","p2","intersectLine","points2","found2","delta","tmp","distanceToPoint","point","distanceTo","distanceToTriangle","cornerFields","line1","line2","lineTarget","getCenter","dist","field","otherVec","thisVec","f11","f12","f21","f22"],"mappings":"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","sourcesContent":["import { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\r\n\r\nexport class SeparatingAxisTriangle extends Triangle {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isSeparatingAxisTriangle = true;\r\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.points = [ this.a, this.b, this.c ];\r\n\t\tthis.sphere = new Sphere();\r\n\t\tthis.plane = new Plane();\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphereIntersectTriangle( sphere, this );\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst a = this.a;\r\n\t\tconst b = this.b;\r\n\t\tconst c = this.c;\r\n\t\tconst points = this.points;\r\n\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst satBounds = this.satBounds;\r\n\r\n\t\tconst axis0 = satAxes[ 0 ];\r\n\t\tconst sab0 = satBounds[ 0 ];\r\n\t\tthis.getNormal( axis0 );\r\n\t\tsab0.setFromPoints( axis0, points );\r\n\r\n\t\tconst axis1 = satAxes[ 1 ];\r\n\t\tconst sab1 = satBounds[ 1 ];\r\n\t\taxis1.subVectors( a, b );\r\n\t\tsab1.setFromPoints( axis1, points );\r\n\r\n\t\tconst axis2 = satAxes[ 2 ];\r\n\t\tconst sab2 = satBounds[ 2 ];\r\n\t\taxis2.subVectors( b, c );\r\n\t\tsab2.setFromPoints( axis2, points );\r\n\r\n\t\tconst axis3 = satAxes[ 3 ];\r\n\t\tconst sab3 = satBounds[ 3 ];\r\n\t\taxis3.subVectors( c, a );\r\n\t\tsab3.setFromPoints( axis3, points );\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\t\tthis.plane.setFromNormalAndCoplanarPoint( axis0, a );\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisTriangle.prototype.closestPointToSegment = ( function () {\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst edge = new Line3();\r\n\r\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\r\n\r\n\t\tconst { start, end } = segment;\r\n\t\tconst points = this.points;\r\n\t\tlet distSq;\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check the triangle edges\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst nexti = ( i + 1 ) % 3;\r\n\t\t\tedge.start.copy( points[ i ] );\r\n\t\t\tedge.end.copy( points[ nexti ] );\r\n\r\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\r\n\r\n\t\t\tdistSq = point1.distanceToSquared( point2 );\r\n\t\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = distSq;\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check end points\r\n\t\tthis.closestPointToPoint( start, point1 );\r\n\t\tdistSq = start.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( start );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closestPointToPoint( end, point1 );\r\n\t\tdistSq = end.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( end );\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nSeparatingAxisTriangle.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri2 = new SeparatingAxisTriangle();\r\n\tconst arr1 = new Array( 3 );\r\n\tconst arr2 = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\tconst dir1 = new Vector3();\r\n\tconst dir2 = new Vector3();\r\n\tconst tempDir = new Vector3();\r\n\tconst edge = new Line3();\r\n\tconst edge1 = new Line3();\r\n\tconst edge2 = new Line3();\r\n\r\n\t// TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\r\n\t// be a line contained by both triangles if not a different special case somehow represented in the return result.\r\n\treturn function intersectsTriangle( other, target = null ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! other.isSeparatingAxisTriangle ) {\r\n\r\n\t\t\tsaTri2.copy( other );\r\n\t\t\tsaTri2.update();\r\n\t\t\tother = saTri2;\r\n\r\n\t\t} else if ( other.needsUpdate ) {\r\n\r\n\t\t\tother.update();\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds1 = this.satBounds;\r\n\t\tconst satAxes1 = this.satAxes;\r\n\t\tarr2[ 0 ] = other.a;\r\n\t\tarr2[ 1 ] = other.b;\r\n\t\tarr2[ 2 ] = other.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds2 = other.satBounds;\r\n\t\tconst satAxes2 = other.satAxes;\r\n\t\tarr1[ 0 ] = this.a;\r\n\t\tarr1[ 1 ] = this.b;\r\n\t\tarr1[ 2 ] = this.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = satAxes2[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( target ) {\r\n\r\n\t\t\tconst plane1 = this.plane;\r\n\t\t\tconst plane2 = other.plane;\r\n\r\n\t\t\tif ( Math.abs( plane1.normal.dot( plane2.normal ) ) > 1.0 - 1e-10 ) {\r\n\r\n\t\t\t\t// TODO find two points that intersect on the edges and make that the result\r\n\t\t\t\tconsole.warn( 'SeparatingAxisTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.' );\r\n\t\t\t\ttarget.start.set( 0, 0, 0 );\r\n\t\t\t\ttarget.end.set( 0, 0, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// find the edge that intersects the other triangle plane\r\n\t\t\t\tconst points1 = this.points;\r\n\t\t\t\tlet found1 = false;\r\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tconst p1 = points1[ i ];\r\n\t\t\t\t\tconst p2 = points1[ ( i + 1 ) % 3 ];\r\n\r\n\t\t\t\t\tedge.start.copy( p1 );\r\n\t\t\t\t\tedge.end.copy( p2 );\r\n\r\n\t\t\t\t\tif ( plane2.intersectLine( edge, found1 ? edge1.start : edge1.end ) ) {\r\n\r\n\t\t\t\t\t\tif ( found1 ) {\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfound1 = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// find the other triangles edge that intersects this plane\r\n\t\t\t\tconst points2 = other.points;\r\n\t\t\t\tlet found2 = false;\r\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tconst p1 = points2[ i ];\r\n\t\t\t\t\tconst p2 = points2[ ( i + 1 ) % 3 ];\r\n\r\n\t\t\t\t\tedge.start.copy( p1 );\r\n\t\t\t\t\tedge.end.copy( p2 );\r\n\r\n\t\t\t\t\tif ( plane1.intersectLine( edge, found2 ? edge2.start : edge2.end ) ) {\r\n\r\n\t\t\t\t\t\tif ( found2 ) {\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfound2 = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// find swap the second edge so both lines are running the same direction\r\n\t\t\t\tedge1.delta( dir1 );\r\n\t\t\t\tedge2.delta( dir2 );\r\n\r\n\r\n\t\t\t\tif ( dir1.dot( dir2 ) < 0 ) {\r\n\r\n\t\t\t\t\tlet tmp = edge2.start;\r\n\t\t\t\t\tedge2.start = edge2.end;\r\n\t\t\t\t\tedge2.end = tmp;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttempDir.subVectors( edge1.start, edge2.start );\r\n\t\t\t\tif ( tempDir.dot( dir1 ) > 0 ) {\r\n\r\n\t\t\t\t\ttarget.start.copy( edge1.start );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttarget.start.copy( edge2.start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttempDir.subVectors( edge1.end, edge2.end );\r\n\t\t\t\tif ( tempDir.dot( dir1 ) < 0 ) {\r\n\r\n\t\t\t\t\ttarget.end.copy( edge1.end );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttarget.end.copy( edge2.end );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToTriangle = ( function () {\r\n\r\n\tconst point = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst cornerFields = [ 'a', 'b', 'c' ];\r\n\tconst line1 = new Line3();\r\n\tconst line2 = new Line3();\r\n\r\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\r\n\r\n\t\tconst lineTarget = target1 || target2 ? line1 : null;\r\n\t\tif ( this.intersectsTriangle( other, lineTarget ) ) {\r\n\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tif ( target1 ) lineTarget.getCenter( target1 );\r\n\t\t\t\tif ( target2 ) lineTarget.getCenter( target2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check all point distances\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tlet dist;\r\n\t\t\tconst field = cornerFields[ i ];\r\n\t\t\tconst otherVec = other[ field ];\r\n\t\t\tthis.closestPointToPoint( otherVec, point );\r\n\r\n\t\t\tdist = otherVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst thisVec = this[ field ];\r\n\t\t\tother.closestPointToPoint( thisVec, point );\r\n\r\n\t\t\tdist = thisVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\r\n\t\t\t\tif ( target2 ) target2.copy( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst f11 = cornerFields[ i ];\r\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\r\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\r\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\r\n\r\n\t\t\t\tconst f21 = cornerFields[ i2 ];\r\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\r\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\r\n\r\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\r\n\r\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n"]},"metadata":{},"sourceType":"module"}