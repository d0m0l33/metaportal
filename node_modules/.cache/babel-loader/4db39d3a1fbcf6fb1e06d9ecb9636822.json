{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, LineBasicMaterial, Group, Euler, BufferGeometry, Float32BufferAttribute, LineSegments } from 'three';\n/**\n * GCodeLoader is used to load gcode files usually used for 3D printing or CNC applications.\n *\n * Gcode files are composed by commands used by machines to create objects.\n *\n * @class GCodeLoader\n * @param {Manager} manager Loading manager.\n */\n\nvar GCodeLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(GCodeLoader, _Loader);\n\n  var _super = _createSuper(GCodeLoader);\n\n  function GCodeLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, GCodeLoader);\n\n    _this = _super.call(this, manager);\n    _this.splitLayer = false;\n    return _this;\n  }\n\n  _createClass(GCodeLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var state = {\n        x: 0,\n        y: 0,\n        z: 0,\n        e: 0,\n        f: 0,\n        extruding: false,\n        relative: false\n      };\n      var layers = [];\n      var currentLayer = undefined;\n      var pathMaterial = new LineBasicMaterial({\n        color: 0xff0000\n      });\n      pathMaterial.name = 'path';\n      var extrudingMaterial = new LineBasicMaterial({\n        color: 0x00ff00\n      });\n      extrudingMaterial.name = 'extruded';\n\n      function newLayer(line) {\n        currentLayer = {\n          vertex: [],\n          pathVertex: [],\n          z: line.z\n        };\n        layers.push(currentLayer);\n      } //Create lie segment between p1 and p2\n\n\n      function addSegment(p1, p2) {\n        if (currentLayer === undefined) {\n          newLayer(p1);\n        }\n\n        if (state.extruding) {\n          currentLayer.vertex.push(p1.x, p1.y, p1.z);\n          currentLayer.vertex.push(p2.x, p2.y, p2.z);\n        } else {\n          currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n          currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n        }\n      }\n\n      function delta(v1, v2) {\n        return state.relative ? v2 : v2 - v1;\n      }\n\n      function absolute(v1, v2) {\n        return state.relative ? v1 + v2 : v2;\n      }\n\n      var lines = data.replace(/;.+/g, '').split('\\n');\n\n      var _loop = function _loop(i) {\n        var tokens = lines[i].split(' ');\n        var cmd = tokens[0].toUpperCase(); //Argumments\n\n        var args = {};\n        tokens.splice(1).forEach(function (token) {\n          if (token[0] !== undefined) {\n            var key = token[0].toLowerCase();\n            var value = parseFloat(token.substring(1));\n            args[key] = value;\n          }\n        }); //Process commands\n        //G0/G1 â€“ Linear Movement\n\n        if (cmd === 'G0' || cmd === 'G1') {\n          var line = {\n            x: args.x !== undefined ? absolute(state.x, args.x) : state.x,\n            y: args.y !== undefined ? absolute(state.y, args.y) : state.y,\n            z: args.z !== undefined ? absolute(state.z, args.z) : state.z,\n            e: args.e !== undefined ? absolute(state.e, args.e) : state.e,\n            f: args.f !== undefined ? absolute(state.f, args.f) : state.f\n          }; //Layer change detection is or made by watching Z, it's made by watching when we extrude at a new Z position\n\n          if (delta(state.e, line.e) > 0) {\n            line.extruding = delta(state.e, line.e) > 0;\n\n            if (currentLayer == undefined || line.z != currentLayer.z) {\n              newLayer(line);\n            }\n          }\n\n          addSegment(state, line);\n          state = line;\n        } else if (cmd === 'G2' || cmd === 'G3') ;else if (cmd === 'G90') {\n          //G90: Set to Absolute Positioning\n          state.relative = false;\n        } else if (cmd === 'G91') {\n          //G91: Set to state.relative Positioning\n          state.relative = true;\n        } else if (cmd === 'G92') {\n          //G92: Set Position\n          var _line = state;\n          _line.x = args.x !== undefined ? args.x : _line.x;\n          _line.y = args.y !== undefined ? args.y : _line.y;\n          _line.z = args.z !== undefined ? args.z : _line.z;\n          _line.e = args.e !== undefined ? args.e : _line.e;\n          state = _line;\n        } else ;\n      };\n\n      for (var i = 0; i < lines.length; i++) {\n        _loop(i);\n      }\n\n      function addObject(vertex, extruding, i) {\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', new Float32BufferAttribute(vertex, 3));\n        var segments = new LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n        segments.name = 'layer' + i;\n        object.add(segments);\n      }\n\n      var object = new Group();\n      object.name = 'gcode';\n\n      if (this.splitLayer) {\n        for (var _i = 0; _i < layers.length; _i++) {\n          var layer = layers[_i];\n          addObject(layer.vertex, true, _i);\n          addObject(layer.pathVertex, false, _i);\n        }\n      } else {\n        var vertex = [],\n            pathVertex = [];\n\n        for (var _i2 = 0; _i2 < layers.length; _i2++) {\n          var _layer = layers[_i2];\n          var layerVertex = _layer.vertex;\n          var layerPathVertex = _layer.pathVertex;\n\n          for (var j = 0; j < layerVertex.length; j++) {\n            vertex.push(layerVertex[j]);\n          }\n\n          for (var _j = 0; _j < layerPathVertex.length; _j++) {\n            pathVertex.push(layerPathVertex[_j]);\n          }\n        }\n\n        addObject(vertex, true, layers.length);\n        addObject(pathVertex, false, layers.length);\n      }\n\n      object.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n      return object;\n    }\n  }]);\n\n  return GCodeLoader;\n}(Loader);\n\nexport { GCodeLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/GCodeLoader.js"],"names":["Loader","FileLoader","LineBasicMaterial","Group","Euler","BufferGeometry","Float32BufferAttribute","LineSegments","GCodeLoader","manager","splitLayer","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","data","state","x","y","z","f","extruding","relative","layers","currentLayer","undefined","pathMaterial","color","name","extrudingMaterial","newLayer","line","vertex","pathVertex","push","addSegment","p1","p2","delta","v1","v2","absolute","lines","replace","split","i","tokens","cmd","toUpperCase","args","splice","forEach","token","key","toLowerCase","value","parseFloat","substring","length","addObject","geometry","setAttribute","segments","object","add","layer","layerVertex","layerPathVertex","j","quaternion","setFromEuler","Math","PI"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, LineBasicMaterial, Group, Euler, BufferGeometry, Float32BufferAttribute, LineSegments } from 'three';\n\n/**\n * GCodeLoader is used to load gcode files usually used for 3D printing or CNC applications.\n *\n * Gcode files are composed by commands used by machines to create objects.\n *\n * @class GCodeLoader\n * @param {Manager} manager Loading manager.\n */\n\nclass GCodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.splitLayer = false;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    let state = {\n      x: 0,\n      y: 0,\n      z: 0,\n      e: 0,\n      f: 0,\n      extruding: false,\n      relative: false\n    };\n    let layers = [];\n    let currentLayer = undefined;\n    const pathMaterial = new LineBasicMaterial({\n      color: 0xff0000\n    });\n    pathMaterial.name = 'path';\n    const extrudingMaterial = new LineBasicMaterial({\n      color: 0x00ff00\n    });\n    extrudingMaterial.name = 'extruded';\n\n    function newLayer(line) {\n      currentLayer = {\n        vertex: [],\n        pathVertex: [],\n        z: line.z\n      };\n      layers.push(currentLayer);\n    } //Create lie segment between p1 and p2\n\n\n    function addSegment(p1, p2) {\n      if (currentLayer === undefined) {\n        newLayer(p1);\n      }\n\n      if (state.extruding) {\n        currentLayer.vertex.push(p1.x, p1.y, p1.z);\n        currentLayer.vertex.push(p2.x, p2.y, p2.z);\n      } else {\n        currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n        currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n      }\n    }\n\n    function delta(v1, v2) {\n      return state.relative ? v2 : v2 - v1;\n    }\n\n    function absolute(v1, v2) {\n      return state.relative ? v1 + v2 : v2;\n    }\n\n    let lines = data.replace(/;.+/g, '').split('\\n');\n\n    for (let i = 0; i < lines.length; i++) {\n      let tokens = lines[i].split(' ');\n      let cmd = tokens[0].toUpperCase(); //Argumments\n\n      let args = {};\n      tokens.splice(1).forEach(function (token) {\n        if (token[0] !== undefined) {\n          let key = token[0].toLowerCase();\n          let value = parseFloat(token.substring(1));\n          args[key] = value;\n        }\n      }); //Process commands\n      //G0/G1 â€“ Linear Movement\n\n      if (cmd === 'G0' || cmd === 'G1') {\n        let line = {\n          x: args.x !== undefined ? absolute(state.x, args.x) : state.x,\n          y: args.y !== undefined ? absolute(state.y, args.y) : state.y,\n          z: args.z !== undefined ? absolute(state.z, args.z) : state.z,\n          e: args.e !== undefined ? absolute(state.e, args.e) : state.e,\n          f: args.f !== undefined ? absolute(state.f, args.f) : state.f\n        }; //Layer change detection is or made by watching Z, it's made by watching when we extrude at a new Z position\n\n        if (delta(state.e, line.e) > 0) {\n          line.extruding = delta(state.e, line.e) > 0;\n\n          if (currentLayer == undefined || line.z != currentLayer.z) {\n            newLayer(line);\n          }\n        }\n\n        addSegment(state, line);\n        state = line;\n      } else if (cmd === 'G2' || cmd === 'G3') ; else if (cmd === 'G90') {\n        //G90: Set to Absolute Positioning\n        state.relative = false;\n      } else if (cmd === 'G91') {\n        //G91: Set to state.relative Positioning\n        state.relative = true;\n      } else if (cmd === 'G92') {\n        //G92: Set Position\n        let line = state;\n        line.x = args.x !== undefined ? args.x : line.x;\n        line.y = args.y !== undefined ? args.y : line.y;\n        line.z = args.z !== undefined ? args.z : line.z;\n        line.e = args.e !== undefined ? args.e : line.e;\n        state = line;\n      } else ;\n    }\n\n    function addObject(vertex, extruding, i) {\n      let geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertex, 3));\n      let segments = new LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n      segments.name = 'layer' + i;\n      object.add(segments);\n    }\n\n    const object = new Group();\n    object.name = 'gcode';\n\n    if (this.splitLayer) {\n      for (let i = 0; i < layers.length; i++) {\n        let layer = layers[i];\n        addObject(layer.vertex, true, i);\n        addObject(layer.pathVertex, false, i);\n      }\n    } else {\n      const vertex = [],\n            pathVertex = [];\n\n      for (let i = 0; i < layers.length; i++) {\n        let layer = layers[i];\n        let layerVertex = layer.vertex;\n        let layerPathVertex = layer.pathVertex;\n\n        for (let j = 0; j < layerVertex.length; j++) {\n          vertex.push(layerVertex[j]);\n        }\n\n        for (let j = 0; j < layerPathVertex.length; j++) {\n          pathVertex.push(layerPathVertex[j]);\n        }\n      }\n\n      addObject(vertex, true, layers.length);\n      addObject(pathVertex, false, layers.length);\n    }\n\n    object.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    return object;\n  }\n\n}\n\nexport { GCodeLoader };\n"]},"metadata":{},"sourceType":"module"}