{"ast":null,"code":"import { CompressedTextureLoader } from 'three';\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nclass KTXLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  parse(buffer, loadMipmaps) {\n    const ktx = new KhronosTextureContainer(buffer, 1);\n    return {\n      mipmaps: ktx.mipmaps(loadMipmaps),\n      width: ktx.pixelWidth,\n      height: ktx.pixelHeight,\n      format: ktx.glInternalFormat,\n      isCubemap: ktx.numberOfFaces === 6,\n      mipmapCount: ktx.numberOfMipmapLevels\n    };\n  }\n\n}\n\nconst HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n// load types\n\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n//const COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n//const TEX_2D = 2; // uses a gl.texImage2D()\n//const TEX_3D = 3; // uses a gl.texImage3D()\n\nclass KhronosTextureContainer {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  constructor(arrayBuffer, facesExpected\n  /*, threeDExpected, textureArrayExpected */\n  ) {\n    this.arrayBuffer = arrayBuffer; // Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n    // '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n    // 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\n    const identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n\n    if (identifier[0] !== 0xab || identifier[1] !== 0x4b || identifier[2] !== 0x54 || identifier[3] !== 0x58 || identifier[4] !== 0x20 || identifier[5] !== 0x31 || identifier[6] !== 0x31 || identifier[7] !== 0xbb || identifier[8] !== 0x0d || identifier[9] !== 0x0a || identifier[10] !== 0x1a || identifier[11] !== 0x0a) {\n      console.error('texture missing KTX identifier');\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      console.warn('only compressed formats currently supported');\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn('only 2D textures currently supported');\n      return;\n    }\n\n    if (this.numberOfArrayElements !== 0) {\n      console.warn('texture arrays not currently supported');\n      return;\n    }\n\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n\n    this.loadType = COMPRESSED_2D;\n  }\n\n  mipmaps(loadMipmaps) {\n    const mipmaps = []; // initialize width & height for level 1\n\n    let dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n    let width = this.pixelWidth;\n    let height = this.pixelHeight;\n    const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n    for (let level = 0; level < mipmapCount; level++) {\n      const imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n      dataOffset += 4; // size of the image + 4 for the imageSize field\n\n      for (let face = 0; face < this.numberOfFaces; face++) {\n        const byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n        mipmaps.push({\n          data: byteArray,\n          width: width,\n          height: height\n        });\n        dataOffset += imageSize;\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n\n    return mipmaps;\n  }\n\n}\n\nexport { KTXLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/KTXLoader.js"],"names":["CompressedTextureLoader","KTXLoader","constructor","manager","parse","buffer","loadMipmaps","ktx","KhronosTextureContainer","mipmaps","width","pixelWidth","height","pixelHeight","format","glInternalFormat","isCubemap","numberOfFaces","mipmapCount","numberOfMipmapLevels","HEADER_LEN","COMPRESSED_2D","arrayBuffer","facesExpected","identifier","Uint8Array","console","error","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","endianness","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","warn","Math","max","loadType","dataOffset","level","imageSize","Int32Array","face","byteArray","push","data"],"mappings":"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","sourcesContent":["import { CompressedTextureLoader } from 'three';\n\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nclass KTXLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  parse(buffer, loadMipmaps) {\n    const ktx = new KhronosTextureContainer(buffer, 1);\n    return {\n      mipmaps: ktx.mipmaps(loadMipmaps),\n      width: ktx.pixelWidth,\n      height: ktx.pixelHeight,\n      format: ktx.glInternalFormat,\n      isCubemap: ktx.numberOfFaces === 6,\n      mipmapCount: ktx.numberOfMipmapLevels\n    };\n  }\n\n}\n\nconst HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n// load types\n\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n//const COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n//const TEX_2D = 2; // uses a gl.texImage2D()\n//const TEX_3D = 3; // uses a gl.texImage3D()\n\nclass KhronosTextureContainer {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  constructor(arrayBuffer, facesExpected\n  /*, threeDExpected, textureArrayExpected */\n  ) {\n    this.arrayBuffer = arrayBuffer; // Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n    // '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n    // 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\n    const identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n\n    if (identifier[0] !== 0xab || identifier[1] !== 0x4b || identifier[2] !== 0x54 || identifier[3] !== 0x58 || identifier[4] !== 0x20 || identifier[5] !== 0x31 || identifier[6] !== 0x31 || identifier[7] !== 0xbb || identifier[8] !== 0x0d || identifier[9] !== 0x0a || identifier[10] !== 0x1a || identifier[11] !== 0x0a) {\n      console.error('texture missing KTX identifier');\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      console.warn('only compressed formats currently supported');\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn('only 2D textures currently supported');\n      return;\n    }\n\n    if (this.numberOfArrayElements !== 0) {\n      console.warn('texture arrays not currently supported');\n      return;\n    }\n\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n\n    this.loadType = COMPRESSED_2D;\n  }\n\n  mipmaps(loadMipmaps) {\n    const mipmaps = []; // initialize width & height for level 1\n\n    let dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n    let width = this.pixelWidth;\n    let height = this.pixelHeight;\n    const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n    for (let level = 0; level < mipmapCount; level++) {\n      const imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n      dataOffset += 4; // size of the image + 4 for the imageSize field\n\n      for (let face = 0; face < this.numberOfFaces; face++) {\n        const byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n        mipmaps.push({\n          data: byteArray,\n          width: width,\n          height: height\n        });\n        dataOffset += imageSize;\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n\n    return mipmaps;\n  }\n\n}\n\nexport { KTXLoader };\n"]},"metadata":{},"sourceType":"module"}