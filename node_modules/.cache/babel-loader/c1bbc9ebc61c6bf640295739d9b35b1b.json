{"ast":null,"code":"import { Vector3, Matrix3, LineSegments, BufferGeometry, LineBasicMaterial, Float32BufferAttribute } from 'three';\n\nconst _v1 = new Vector3();\n\nconst _v2 = new Vector3();\n\nconst _normalMatrix = new Matrix3();\n\nclass VertexNormalsHelper extends LineSegments {\n  constructor(object, size, hex) {\n    const geometry = new BufferGeometry();\n    const color = hex !== undefined ? hex : 0xff0000;\n    super(geometry, new LineBasicMaterial({\n      color,\n      toneMapped: false\n    }));\n    this.object = object;\n    this.size = size !== undefined ? size : 0.1;\n    let nNormals = 0;\n    const objGeometry = this.object.geometry;\n\n    if (objGeometry && objGeometry.isGeometry) {\n      console.error('THREE.VertexNormalsHelper no longer supports Geometry. Use BufferGeometry instead.');\n      return;\n    } else if (objGeometry && objGeometry.isBufferGeometry) {\n      nNormals = objGeometry.attributes.normal.count;\n    } //\n\n\n    const positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);\n    geometry.setAttribute('position', positions);\n    this.type = 'VertexNormalsHelper'; //\n\n    this.matrixAutoUpdate = false;\n    this.update();\n  }\n\n  update() {\n    this.object.updateMatrixWorld(true);\n\n    _normalMatrix.getNormalMatrix(this.object.matrixWorld);\n\n    const matrixWorld = this.object.matrixWorld;\n    const position = this.geometry.attributes.position; //\n\n    const objGeometry = this.object.geometry;\n\n    if (objGeometry && objGeometry.isGeometry) {\n      console.error('THREE.VertexNormalsHelper no longer supports Geometry. Use BufferGeometry instead.');\n      return;\n    } else if (objGeometry && objGeometry.isBufferGeometry) {\n      const objPos = objGeometry.attributes.position;\n      const objNorm = objGeometry.attributes.normal;\n      let idx = 0; // for simplicity, ignore index and drawcalls, and render every normal\n\n      for (let j = 0, jl = objPos.count; j < jl; j++) {\n        _v1.set(objPos.getX(j), objPos.getY(j), objPos.getZ(j)).applyMatrix4(matrixWorld);\n\n        _v2.set(objNorm.getX(j), objNorm.getY(j), objNorm.getZ(j));\n\n        _v2.applyMatrix3(_normalMatrix).normalize().multiplyScalar(this.size).add(_v1);\n\n        position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n        idx = idx + 1;\n        position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n        idx = idx + 1;\n      }\n    }\n\n    position.needsUpdate = true;\n  }\n\n}\n\nexport { VertexNormalsHelper };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/helpers/VertexNormalsHelper.js"],"names":["Vector3","Matrix3","LineSegments","BufferGeometry","LineBasicMaterial","Float32BufferAttribute","_v1","_v2","_normalMatrix","VertexNormalsHelper","constructor","object","size","hex","geometry","color","undefined","toneMapped","nNormals","objGeometry","isGeometry","console","error","isBufferGeometry","attributes","normal","count","positions","setAttribute","type","matrixAutoUpdate","update","updateMatrixWorld","getNormalMatrix","matrixWorld","position","objPos","objNorm","idx","j","jl","set","getX","getY","getZ","applyMatrix4","applyMatrix3","normalize","multiplyScalar","add","setXYZ","x","y","z","needsUpdate"],"mappings":"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","sourcesContent":["import { Vector3, Matrix3, LineSegments, BufferGeometry, LineBasicMaterial, Float32BufferAttribute } from 'three';\n\nconst _v1 = new Vector3();\n\nconst _v2 = new Vector3();\n\nconst _normalMatrix = new Matrix3();\n\nclass VertexNormalsHelper extends LineSegments {\n  constructor(object, size, hex) {\n    const geometry = new BufferGeometry();\n    const color = hex !== undefined ? hex : 0xff0000;\n    super(geometry, new LineBasicMaterial({\n      color,\n      toneMapped: false\n    }));\n    this.object = object;\n    this.size = size !== undefined ? size : 0.1;\n    let nNormals = 0;\n    const objGeometry = this.object.geometry;\n\n    if (objGeometry && objGeometry.isGeometry) {\n      console.error('THREE.VertexNormalsHelper no longer supports Geometry. Use BufferGeometry instead.');\n      return;\n    } else if (objGeometry && objGeometry.isBufferGeometry) {\n      nNormals = objGeometry.attributes.normal.count;\n    } //\n\n\n    const positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);\n    geometry.setAttribute('position', positions);\n    this.type = 'VertexNormalsHelper'; //\n\n    this.matrixAutoUpdate = false;\n    this.update();\n  }\n\n  update() {\n    this.object.updateMatrixWorld(true);\n\n    _normalMatrix.getNormalMatrix(this.object.matrixWorld);\n\n    const matrixWorld = this.object.matrixWorld;\n    const position = this.geometry.attributes.position; //\n\n    const objGeometry = this.object.geometry;\n\n    if (objGeometry && objGeometry.isGeometry) {\n      console.error('THREE.VertexNormalsHelper no longer supports Geometry. Use BufferGeometry instead.');\n      return;\n    } else if (objGeometry && objGeometry.isBufferGeometry) {\n      const objPos = objGeometry.attributes.position;\n      const objNorm = objGeometry.attributes.normal;\n      let idx = 0; // for simplicity, ignore index and drawcalls, and render every normal\n\n      for (let j = 0, jl = objPos.count; j < jl; j++) {\n        _v1.set(objPos.getX(j), objPos.getY(j), objPos.getZ(j)).applyMatrix4(matrixWorld);\n\n        _v2.set(objNorm.getX(j), objNorm.getY(j), objNorm.getZ(j));\n\n        _v2.applyMatrix3(_normalMatrix).normalize().multiplyScalar(this.size).add(_v1);\n\n        position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n        idx = idx + 1;\n        position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n        idx = idx + 1;\n      }\n    }\n\n    position.needsUpdate = true;\n  }\n\n}\n\nexport { VertexNormalsHelper };\n"]},"metadata":{},"sourceType":"module"}