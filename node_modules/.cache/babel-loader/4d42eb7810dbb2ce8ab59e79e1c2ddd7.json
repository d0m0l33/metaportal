{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n// Define the initial state using that type\nconst initialState = {\n  value: 0\n};\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions; // Other code such as selectors can use the imported `RootState` type\n\nexport const selectCount = state => state.counter.value;\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/features/counter/counterSlice.ts"],"names":["createSlice","initialState","value","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AASE;AACA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,KAAK,EAAE;AAD0B,CAAnC;AAIF,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC;AACtCI,EAAAA,IAAI,EAAE,SADgC;AAEtCH,EAAAA,YAFsC;AAItCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACL,KAAN,IAAe,CAAf;AACD,KAPO;AAQRM,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACL,KAAN,IAAe,CAAf;AACD,KAVO;AAWRO,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAA0C;AACzDH,MAAAA,KAAK,CAACL,KAAN,IAAeQ,MAAM,CAACC,OAAtB;AACH;AAbO;AAJ4B,CAAD,CAAhC;AAqBP,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CN,YAAY,CAACS,OAAjE,C,CAEP;;AACA,OAAO,MAAMC,WAAW,GAAIN,KAAD,IAAsBA,KAAK,CAACO,OAAN,CAAcZ,KAAxD;AAEP,eAAeC,YAAY,CAACY,OAA5B","sourcesContent":["import { createSlice , PayloadAction} from '@reduxjs/toolkit'\nimport type { RootState } from '../../store'\n\n\n// Define a type for the slice state\ninterface CounterState {\n    value: number\n  }\n  \n  // Define the initial state using that type\n  const initialState: CounterState = {\n    value: 0,\n  }\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n        state.value += action.payload\n    },\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectCount = (state: RootState) => state.counter.value\n\nexport default counterSlice.reducer"]},"metadata":{},"sourceType":"module"}