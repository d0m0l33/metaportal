{"ast":null,"code":"import * as React from 'react';\nimport { addEffect, addAfterEffect } from '@react-three/fiber';\n\nfunction useIntersect(onChange) {\n  const ref = React.useRef(null);\n  const check = React.useRef(false);\n  const temp = React.useRef(false);\n  React.useEffect(() => {\n    const obj = ref.current;\n\n    if (obj) {\n      // Stamp out frustum check pre-emptively\n      const unsub1 = addEffect(() => {\n        check.current = false;\n        return true;\n      }); // If the object is inside the frustum three will call onRender\n\n      const oldOnRender = obj.onBeforeRender;\n\n      obj.onBeforeRender = () => check.current = true; // Compare the check value against the temp value, if it differs set state\n\n\n      const unsub2 = addAfterEffect(() => {\n        if (check.current !== temp.current) onChange(temp.current = check.current);\n        return true;\n      });\n      return () => {\n        obj.onBeforeRender = oldOnRender;\n        unsub1();\n        unsub2();\n      };\n    }\n  }, []);\n  return ref;\n}\n\nexport { useIntersect };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/@react-three/drei/core/useIntersect.js"],"names":["React","addEffect","addAfterEffect","useIntersect","onChange","ref","useRef","check","temp","useEffect","obj","current","unsub1","oldOnRender","onBeforeRender","unsub2"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,oBAA1C;;AAEA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,QAAMC,GAAG,GAAGL,KAAK,CAACM,MAAN,CAAa,IAAb,CAAZ;AACA,QAAMC,KAAK,GAAGP,KAAK,CAACM,MAAN,CAAa,KAAb,CAAd;AACA,QAAME,IAAI,GAAGR,KAAK,CAACM,MAAN,CAAa,KAAb,CAAb;AACAN,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB,UAAMC,GAAG,GAAGL,GAAG,CAACM,OAAhB;;AAEA,QAAID,GAAJ,EAAS;AACP;AACA,YAAME,MAAM,GAAGX,SAAS,CAAC,MAAM;AAC7BM,QAAAA,KAAK,CAACI,OAAN,GAAgB,KAAhB;AACA,eAAO,IAAP;AACD,OAHuB,CAAxB,CAFO,CAKH;;AAEJ,YAAME,WAAW,GAAGH,GAAG,CAACI,cAAxB;;AAEAJ,MAAAA,GAAG,CAACI,cAAJ,GAAqB,MAAMP,KAAK,CAACI,OAAN,GAAgB,IAA3C,CATO,CAS0C;;;AAGjD,YAAMI,MAAM,GAAGb,cAAc,CAAC,MAAM;AAClC,YAAIK,KAAK,CAACI,OAAN,KAAkBH,IAAI,CAACG,OAA3B,EAAoCP,QAAQ,CAACI,IAAI,CAACG,OAAL,GAAeJ,KAAK,CAACI,OAAtB,CAAR;AACpC,eAAO,IAAP;AACD,OAH4B,CAA7B;AAIA,aAAO,MAAM;AACXD,QAAAA,GAAG,CAACI,cAAJ,GAAqBD,WAArB;AACAD,QAAAA,MAAM;AACNG,QAAAA,MAAM;AACP,OAJD;AAKD;AACF,GAzBD,EAyBG,EAzBH;AA0BA,SAAOV,GAAP;AACD;;AAED,SAASF,YAAT","sourcesContent":["import * as React from 'react';\nimport { addEffect, addAfterEffect } from '@react-three/fiber';\n\nfunction useIntersect(onChange) {\n  const ref = React.useRef(null);\n  const check = React.useRef(false);\n  const temp = React.useRef(false);\n  React.useEffect(() => {\n    const obj = ref.current;\n\n    if (obj) {\n      // Stamp out frustum check pre-emptively\n      const unsub1 = addEffect(() => {\n        check.current = false;\n        return true;\n      }); // If the object is inside the frustum three will call onRender\n\n      const oldOnRender = obj.onBeforeRender;\n\n      obj.onBeforeRender = () => check.current = true; // Compare the check value against the temp value, if it differs set state\n\n\n      const unsub2 = addAfterEffect(() => {\n        if (check.current !== temp.current) onChange(temp.current = check.current);\n        return true;\n      });\n      return () => {\n        obj.onBeforeRender = oldOnRender;\n        unsub1();\n        unsub2();\n      };\n    }\n  }, []);\n  return ref;\n}\n\nexport { useIntersect };\n"]},"metadata":{},"sourceType":"module"}