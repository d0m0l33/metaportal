{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n  constructor(scene, camera) {\n    super();\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"inverse\", void 0);\n\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.inverse = false;\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    const context = renderer.getContext();\n    const state = renderer.state; // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false); // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true); // set up stencil\n\n    let writeValue, clearValue;\n\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue);\n    state.buffers.stencil.setLocked(true); // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setRenderTarget(writeBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera); // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false); // only render where stencil is set to 1\n\n    state.buffers.stencil.setLocked(false);\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    state.buffers.stencil.setLocked(true);\n  }\n\n}\n\nclass ClearMaskPass extends Pass {\n  constructor() {\n    super();\n    this.needsSwap = false;\n  }\n\n  render(renderer) {\n    renderer.state.buffers.stencil.setLocked(false);\n    renderer.state.buffers.stencil.setTest(false);\n  }\n\n}\n\nexport { ClearMaskPass, MaskPass };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/postprocessing/MaskPass.js"],"names":["_defineProperty","Pass","MaskPass","constructor","scene","camera","clear","needsSwap","inverse","render","renderer","writeBuffer","readBuffer","context","getContext","state","buffers","color","setMask","depth","setLocked","writeValue","clearValue","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","ClearMaskPass"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n  constructor(scene, camera) {\n    super();\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"inverse\", void 0);\n\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.inverse = false;\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    const context = renderer.getContext();\n    const state = renderer.state; // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false); // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true); // set up stencil\n\n    let writeValue, clearValue;\n\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue);\n    state.buffers.stencil.setLocked(true); // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setRenderTarget(writeBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera); // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false); // only render where stencil is set to 1\n\n    state.buffers.stencil.setLocked(false);\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    state.buffers.stencil.setLocked(true);\n  }\n\n}\n\nclass ClearMaskPass extends Pass {\n  constructor() {\n    super();\n    this.needsSwap = false;\n  }\n\n  render(renderer) {\n    renderer.state.buffers.stencil.setLocked(false);\n    renderer.state.buffers.stencil.setTest(false);\n  }\n\n}\n\nexport { ClearMaskPass, MaskPass };\n"]},"metadata":{},"sourceType":"module"}