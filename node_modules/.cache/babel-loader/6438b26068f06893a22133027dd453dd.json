{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { DataTextureLoader, UnsignedByteType, HalfFloatType, FloatType, DataUtils, RGBFormat, RGBEFormat, LinearEncoding, LinearFilter, RGBEEncoding, NearestFilter } from 'three'; // http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = /*#__PURE__*/function (_DataTextureLoader) {\n  _inherits(RGBELoader, _DataTextureLoader);\n\n  var _super = _createSuper(RGBELoader);\n\n  function RGBELoader(manager) {\n    var _this;\n\n    _classCallCheck(this, RGBELoader);\n\n    _this = _super.call(this, manager);\n    _this.type = UnsignedByteType;\n    return _this;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n  _createClass(RGBELoader, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var\n      /* return codes for rgbe routines */\n      //RGBE_RETURN_SUCCESS = 0,\n      RGBE_RETURN_FAILURE = -1,\n\n      /* default error routine.  change this to change error handling */\n      rgbe_read_error = 1,\n          rgbe_write_error = 2,\n          rgbe_format_error = 3,\n          rgbe_memory_error = 4,\n          rgbe_error = function rgbe_error(rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n            break;\n\n          case rgbe_write_error:\n            console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n            break;\n\n          case rgbe_format_error:\n            console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n            break;\n\n          default:\n          case rgbe_memory_error:\n            console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n        }\n\n        return RGBE_RETURN_FAILURE;\n      },\n\n      /* offsets to red, green, and blue components in a data (float) pixel */\n      //RGBE_DATA_RED = 0,\n      //RGBE_DATA_GREEN = 1,\n      //RGBE_DATA_BLUE = 2,\n\n      /* number of floats per pixel, use 4 since stored in rgba image format */\n      //RGBE_DATA_SIZE = 4,\n\n      /* flags indicating which fields in an rgbe_header_info are valid */\n      RGBE_VALID_PROGRAMTYPE = 1,\n          RGBE_VALID_FORMAT = 2,\n          RGBE_VALID_DIMENSIONS = 4,\n          NEWLINE = '\\n',\n          fgets = function fgets(buffer, lineLimit, consume) {\n        var chunkSize = 128;\n        lineLimit = !lineLimit ? 1024 : lineLimit;\n        var p = buffer.pos,\n            i = -1,\n            len = 0,\n            s = '',\n            chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n          s += chunk;\n          len += chunk.length;\n          p += chunkSize;\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n        }\n\n        if (-1 < i) {\n          /*for (i=l-1; i>=0; i--) {\n          byteCode = m.charCodeAt(i);\n          if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n          else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n          if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n          }*/\n          if (false !== consume) buffer.pos += len + i + 1;\n          return s + chunk.slice(0, i);\n        }\n\n        return false;\n      },\n\n      /* minimal header reading.  modify if you want to parse more information */\n      RGBE_ReadHeader = function RGBE_ReadHeader(buffer) {\n        // regexes to parse header info fields\n        var magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            // RGBE format header struct\n        header = {\n          valid: 0\n          /* indicate which fields are valid */\n          ,\n          string: ''\n          /* the actual header string */\n          ,\n          comments: ''\n          /* comments found in header */\n          ,\n          programtype: 'RGBE'\n          /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n          ,\n          format: ''\n          /* RGBE format, default 32-bit_rle_rgbe */\n          ,\n          gamma: 1.0\n          /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n          ,\n          exposure: 1.0\n          /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n          ,\n          width: 0,\n          height: 0\n          /* image dimensions, width/height */\n\n        };\n        var line, match;\n\n        if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n          return rgbe_error(rgbe_read_error, 'no header found');\n        }\n        /* if you want to require the magic token then uncomment the next line */\n\n\n        if (!(match = line.match(magic_token_re))) {\n          return rgbe_error(rgbe_format_error, 'bad initial token');\n        }\n\n        header.valid |= RGBE_VALID_PROGRAMTYPE;\n        header.programtype = match[1];\n        header.string += line + '\\n';\n\n        while (true) {\n          line = fgets(buffer);\n          if (false === line) break;\n          header.string += line + '\\n';\n\n          if ('#' === line.charAt(0)) {\n            header.comments += line + '\\n';\n            continue; // comment line\n          }\n\n          if (match = line.match(gamma_re)) {\n            header.gamma = parseFloat(match[1], 10);\n          }\n\n          if (match = line.match(exposure_re)) {\n            header.exposure = parseFloat(match[1], 10);\n          }\n\n          if (match = line.match(format_re)) {\n            header.valid |= RGBE_VALID_FORMAT;\n            header.format = match[1]; //'32-bit_rle_rgbe';\n          }\n\n          if (match = line.match(dimensions_re)) {\n            header.valid |= RGBE_VALID_DIMENSIONS;\n            header.height = parseInt(match[1], 10);\n            header.width = parseInt(match[2], 10);\n          }\n\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n        }\n\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          return rgbe_error(rgbe_format_error, 'missing format specifier');\n        }\n\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          return rgbe_error(rgbe_format_error, 'missing image size specifier');\n        }\n\n        return header;\n      },\n          RGBE_ReadPixels_RLE = function RGBE_ReadPixels_RLE(buffer, w, h) {\n        var scanline_width = w;\n\n        if ( // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 0x7fff || // this file is not run length encoded\n        2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n          // return the flat buffer\n          return new Uint8Array(buffer);\n        }\n\n        if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n          return rgbe_error(rgbe_format_error, 'wrong scanline width');\n        }\n\n        var data_rgba = new Uint8Array(4 * w * h);\n\n        if (!data_rgba.length) {\n          return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n        }\n\n        var offset = 0,\n            pos = 0;\n        var ptr_end = 4 * scanline_width;\n        var rgbeStart = new Uint8Array(4);\n        var scanline_buffer = new Uint8Array(ptr_end);\n        var num_scanlines = h; // read in each successive scanline\n\n        while (num_scanlines > 0 && pos < buffer.byteLength) {\n          if (pos + 4 > buffer.byteLength) {\n            return rgbe_error(rgbe_read_error);\n          }\n\n          rgbeStart[0] = buffer[pos++];\n          rgbeStart[1] = buffer[pos++];\n          rgbeStart[2] = buffer[pos++];\n          rgbeStart[3] = buffer[pos++];\n\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n            return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n          } // read each of the four channels for the scanline into the buffer\n          // first red, then green, then blue, then exponent\n\n\n          var ptr = 0,\n              count = void 0;\n\n          while (ptr < ptr_end && pos < buffer.byteLength) {\n            count = buffer[pos++];\n            var isEncodedRun = count > 128;\n            if (isEncodedRun) count -= 128;\n\n            if (0 === count || ptr + count > ptr_end) {\n              return rgbe_error(rgbe_format_error, 'bad scanline data');\n            }\n\n            if (isEncodedRun) {\n              // a (encoded) run of the same value\n              var byteValue = buffer[pos++];\n\n              for (var i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue;\n              } //ptr += count;\n\n            } else {\n              // a literal-run\n              scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n              ptr += count;\n              pos += count;\n            }\n          } // now convert data from buffer into rgba\n          // first red, then green, then blue, then exponent (alpha)\n\n\n          var l = scanline_width; //scanline_buffer.byteLength;\n\n          for (var _i = 0; _i < l; _i++) {\n            var off = 0;\n            data_rgba[offset] = scanline_buffer[_i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 1] = scanline_buffer[_i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 2] = scanline_buffer[_i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 3] = scanline_buffer[_i + off];\n            offset += 4;\n          }\n\n          num_scanlines--;\n        }\n\n        return data_rgba;\n      };\n\n      var RGBEByteToRGBFloat = function RGBEByteToRGBFloat(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2.0, e - 128.0) / 255.0;\n        destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n        destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n        destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      };\n\n      var RGBEByteToRGBHalf = function RGBEByteToRGBHalf(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2.0, e - 128.0) / 255.0;\n        destArray[destOffset + 0] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 0] * scale);\n        destArray[destOffset + 1] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 1] * scale);\n        destArray[destOffset + 2] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 2] * scale);\n      };\n\n      var byteArray = new Uint8Array(buffer);\n      byteArray.pos = 0;\n      var rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n      if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n        var w = rgbe_header_info.width,\n            h = rgbe_header_info.height,\n            image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n        if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n          var data, format, type;\n          var numElements;\n\n          switch (this.type) {\n            case UnsignedByteType:\n              data = image_rgba_data;\n              format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\n              type = UnsignedByteType;\n              break;\n\n            case FloatType:\n              numElements = image_rgba_data.length / 4 * 3;\n              var floatArray = new Float32Array(numElements);\n\n              for (var j = 0; j < numElements; j++) {\n                RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 3);\n              }\n\n              data = floatArray;\n              format = RGBFormat;\n              type = FloatType;\n              break;\n\n            case HalfFloatType:\n              numElements = image_rgba_data.length / 4 * 3;\n              var halfArray = new Uint16Array(numElements);\n\n              for (var _j = 0; _j < numElements; _j++) {\n                RGBEByteToRGBHalf(image_rgba_data, _j * 4, halfArray, _j * 3);\n              }\n\n              data = halfArray;\n              format = RGBFormat;\n              type = HalfFloatType;\n              break;\n\n            default:\n              console.error('THREE.RGBELoader: unsupported type: ', this.type);\n              break;\n          }\n\n          return {\n            width: w,\n            height: h,\n            data: data,\n            header: rgbe_header_info.string,\n            gamma: rgbe_header_info.gamma,\n            exposure: rgbe_header_info.exposure,\n            format: format,\n            type: type\n          };\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      function onLoadCallback(texture, texData) {\n        switch (texture.type) {\n          case UnsignedByteType:\n            texture.encoding = RGBEEncoding;\n            texture.minFilter = NearestFilter;\n            texture.magFilter = NearestFilter;\n            texture.generateMipmaps = false;\n            texture.flipY = true;\n            break;\n\n          case FloatType:\n            texture.encoding = LinearEncoding;\n            texture.minFilter = LinearFilter;\n            texture.magFilter = LinearFilter;\n            texture.generateMipmaps = false;\n            texture.flipY = true;\n            break;\n\n          case HalfFloatType:\n            texture.encoding = LinearEncoding;\n            texture.minFilter = LinearFilter;\n            texture.magFilter = LinearFilter;\n            texture.generateMipmaps = false;\n            texture.flipY = true;\n            break;\n        }\n\n        if (onLoad) onLoad(texture, texData);\n      }\n\n      return _get(_getPrototypeOf(RGBELoader.prototype), \"load\", this).call(this, url, onLoadCallback, onProgress, onError);\n    }\n  }]);\n\n  return RGBELoader;\n}(DataTextureLoader);\n\nexport { RGBELoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/RGBELoader.js"],"names":["DataTextureLoader","UnsignedByteType","HalfFloatType","FloatType","DataUtils","RGBFormat","RGBEFormat","LinearEncoding","LinearFilter","RGBEEncoding","NearestFilter","RGBELoader","manager","type","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","lineLimit","consume","chunkSize","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","scanline_width","Uint8Array","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","set","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","value","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","encoding","minFilter","magFilter","generateMipmaps","flipY"],"mappings":"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","sourcesContent":["import { DataTextureLoader, UnsignedByteType, HalfFloatType, FloatType, DataUtils, RGBFormat, RGBEFormat, LinearEncoding, LinearFilter, RGBEEncoding, NearestFilter } from 'three';\n\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = UnsignedByteType;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n  parse(buffer) {\n    const\n    /* return codes for rgbe routines */\n    //RGBE_RETURN_SUCCESS = 0,\n    RGBE_RETURN_FAILURE = -1,\n\n    /* default error routine.  change this to change error handling */\n    rgbe_read_error = 1,\n          rgbe_write_error = 2,\n          rgbe_format_error = 3,\n          rgbe_memory_error = 4,\n          rgbe_error = function (rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n          break;\n\n        case rgbe_write_error:\n          console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n          break;\n\n        case rgbe_format_error:\n          console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n          break;\n\n        default:\n        case rgbe_memory_error:\n          console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n      }\n\n      return RGBE_RETURN_FAILURE;\n    },\n\n    /* offsets to red, green, and blue components in a data (float) pixel */\n    //RGBE_DATA_RED = 0,\n    //RGBE_DATA_GREEN = 1,\n    //RGBE_DATA_BLUE = 2,\n\n    /* number of floats per pixel, use 4 since stored in rgba image format */\n    //RGBE_DATA_SIZE = 4,\n\n    /* flags indicating which fields in an rgbe_header_info are valid */\n    RGBE_VALID_PROGRAMTYPE = 1,\n          RGBE_VALID_FORMAT = 2,\n          RGBE_VALID_DIMENSIONS = 4,\n          NEWLINE = '\\n',\n          fgets = function (buffer, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n      }\n\n      if (-1 < i) {\n        /*for (i=l-1; i>=0; i--) {\n        byteCode = m.charCodeAt(i);\n        if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n        else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n        if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n        }*/\n        if (false !== consume) buffer.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n\n      return false;\n    },\n\n    /* minimal header reading.  modify if you want to parse more information */\n    RGBE_ReadHeader = function (buffer) {\n      // regexes to parse header info fields\n      const magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            // RGBE format header struct\n      header = {\n        valid: 0\n        /* indicate which fields are valid */\n        ,\n        string: ''\n        /* the actual header string */\n        ,\n        comments: ''\n        /* comments found in header */\n        ,\n        programtype: 'RGBE'\n        /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n        ,\n        format: ''\n        /* RGBE format, default 32-bit_rle_rgbe */\n        ,\n        gamma: 1.0\n        /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n        ,\n        exposure: 1.0\n        /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n        ,\n        width: 0,\n        height: 0\n        /* image dimensions, width/height */\n\n      };\n      let line, match;\n\n      if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n        return rgbe_error(rgbe_read_error, 'no header found');\n      }\n      /* if you want to require the magic token then uncomment the next line */\n\n\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, 'bad initial token');\n      }\n\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + '\\n';\n\n      while (true) {\n        line = fgets(buffer);\n        if (false === line) break;\n        header.string += line + '\\n';\n\n        if ('#' === line.charAt(0)) {\n          header.comments += line + '\\n';\n          continue; // comment line\n        }\n\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1], 10);\n        }\n\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1], 10);\n        }\n\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1]; //'32-bit_rle_rgbe';\n        }\n\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n      }\n\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, 'missing format specifier');\n      }\n\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, 'missing image size specifier');\n      }\n\n      return header;\n    },\n          RGBE_ReadPixels_RLE = function (buffer, w, h) {\n      const scanline_width = w;\n\n      if ( // run length encoding is not allowed so read flat\n      scanline_width < 8 || scanline_width > 0x7fff || // this file is not run length encoded\n      2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n        // return the flat buffer\n        return new Uint8Array(buffer);\n      }\n\n      if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n        return rgbe_error(rgbe_format_error, 'wrong scanline width');\n      }\n\n      const data_rgba = new Uint8Array(4 * w * h);\n\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n      }\n\n      let offset = 0,\n          pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h; // read in each successive scanline\n\n      while (num_scanlines > 0 && pos < buffer.byteLength) {\n        if (pos + 4 > buffer.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n\n        rgbeStart[0] = buffer[pos++];\n        rgbeStart[1] = buffer[pos++];\n        rgbeStart[2] = buffer[pos++];\n        rgbeStart[3] = buffer[pos++];\n\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n        } // read each of the four channels for the scanline into the buffer\n        // first red, then green, then blue, then exponent\n\n\n        let ptr = 0,\n            count;\n\n        while (ptr < ptr_end && pos < buffer.byteLength) {\n          count = buffer[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun) count -= 128;\n\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, 'bad scanline data');\n          }\n\n          if (isEncodedRun) {\n            // a (encoded) run of the same value\n            const byteValue = buffer[pos++];\n\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            } //ptr += count;\n\n          } else {\n            // a literal-run\n            scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        } // now convert data from buffer into rgba\n        // first red, then green, then blue, then exponent (alpha)\n\n\n        const l = scanline_width; //scanline_buffer.byteLength;\n\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n\n        num_scanlines--;\n      }\n\n      return data_rgba;\n    };\n\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n    };\n\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 0] * scale);\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 1] * scale);\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 2] * scale);\n    };\n\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width,\n            h = rgbe_header_info.height,\n            image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, format, type;\n        let numElements;\n\n        switch (this.type) {\n          case UnsignedByteType:\n            data = image_rgba_data;\n            format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\n            type = UnsignedByteType;\n            break;\n\n          case FloatType:\n            numElements = image_rgba_data.length / 4 * 3;\n            const floatArray = new Float32Array(numElements);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 3);\n            }\n\n            data = floatArray;\n            format = RGBFormat;\n            type = FloatType;\n            break;\n\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4 * 3;\n            const halfArray = new Uint16Array(numElements);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 3);\n            }\n\n            data = halfArray;\n            format = RGBFormat;\n            type = HalfFloatType;\n            break;\n\n          default:\n            console.error('THREE.RGBELoader: unsupported type: ', this.type);\n            break;\n        }\n\n        return {\n          width: w,\n          height: h,\n          data: data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          format: format,\n          type: type\n        };\n      }\n    }\n\n    return null;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case UnsignedByteType:\n          texture.encoding = RGBEEncoding;\n          texture.minFilter = NearestFilter;\n          texture.magFilter = NearestFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n\n        case FloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { RGBELoader };\n"]},"metadata":{},"sourceType":"module"}