{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineNameProp = exports.functionName = exports.classNameFromInstance = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nfunction classNameFromInstance(instance) {\n  return functionName(instance.constructor);\n}\n\nexports.classNameFromInstance = classNameFromInstance;\nvar NAME = \"name\";\n/**\n * Utility to obtain Function names.\n * Note that there should not be an assumptions on the result of this function.\n * E.g: When running from minified source code the result may be auto generated.\n */\n\nfunction functionName(func) {\n  // Engines that support Function.prototype.name OR the nth (n>1) time after\n  // the name has been computed in the following else block.\n  var existingNameProp = func.name;\n  /* istanbul ignore else - too many hacks for IE/old versions of node.js here*/\n\n  if (existingNameProp) {\n    return existingNameProp;\n  } else {\n    return \"anonymous\";\n  }\n}\n\nexports.functionName = functionName;\n/**\n * @returns {boolean} - has the property been successfully defined\n */\n\nfunction defineNameProp(obj, nameValue) {\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);\n  /* istanbul ignore else -> will only run in old versions of node.js */\n\n  if ((0, utils_1.isUndefined)(namePropDescriptor) || namePropDescriptor.configurable) {\n    Object.defineProperty(obj, NAME, {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: nameValue\n    });\n    return true;\n  }\n  /* istanbul ignore next -> will only run in old versions of node.js */\n\n\n  return false;\n}\n\nexports.defineNameProp = defineNameProp;","map":{"version":3,"sources":["../../../src/lang/lang_extensions.ts"],"names":[],"mappings":";;;;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,SAAgB,qBAAhB,CAAsC,QAAtC,EAAmD;AACjD,SAAO,YAAY,CAAC,QAAQ,CAAC,WAAV,CAAnB;AACD;;AAFD,OAAA,CAAA,qBAAA,GAAA,qBAAA;AAIA,IAAM,IAAI,GAAG,MAAb;AAEA;;;;AAIG;;AACH,SAAgB,YAAhB,CAA6B,IAA7B,EAA4C;AAC1C;AACA;AACA,MAAM,gBAAgB,GAAS,IAAK,CAAC,IAArC;AACA;;AACA,MAAI,gBAAJ,EAAsB;AACpB,WAAO,gBAAP;AACD,GAFD,MAEO;AACL,WAAO,WAAP;AACD;AACF;;AAVD,OAAA,CAAA,YAAA,GAAA,YAAA;AAYA;;AAEG;;AACH,SAAgB,cAAhB,CAA+B,GAA/B,EAAoC,SAApC,EAA6C;AAC3C,MAAM,kBAAkB,GAAG,MAAM,CAAC,wBAAP,CAAgC,GAAhC,EAAqC,IAArC,CAA3B;AACA;;AACA,MAAI,CAAA,GAAA,OAAA,CAAA,WAAA,EAAY,kBAAZ,KAAmC,kBAAkB,CAAC,YAA1D,EAAwE;AACtE,IAAA,MAAM,CAAC,cAAP,CAAsB,GAAtB,EAA2B,IAA3B,EAAiC;AAC/B,MAAA,UAAU,EAAE,KADmB;AAE/B,MAAA,YAAY,EAAE,IAFiB;AAG/B,MAAA,QAAQ,EAAE,KAHqB;AAI/B,MAAA,KAAK,EAAE;AAJwB,KAAjC;AAOA,WAAO,IAAP;AACD;AACD;;;AACA,SAAO,KAAP;AACD;;AAfD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineNameProp = exports.functionName = exports.classNameFromInstance = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nfunction classNameFromInstance(instance) {\n    return functionName(instance.constructor);\n}\nexports.classNameFromInstance = classNameFromInstance;\nvar NAME = \"name\";\n/**\n * Utility to obtain Function names.\n * Note that there should not be an assumptions on the result of this function.\n * E.g: When running from minified source code the result may be auto generated.\n */\nfunction functionName(func) {\n    // Engines that support Function.prototype.name OR the nth (n>1) time after\n    // the name has been computed in the following else block.\n    var existingNameProp = func.name;\n    /* istanbul ignore else - too many hacks for IE/old versions of node.js here*/\n    if (existingNameProp) {\n        return existingNameProp;\n    }\n    else {\n        return \"anonymous\";\n    }\n}\nexports.functionName = functionName;\n/**\n * @returns {boolean} - has the property been successfully defined\n */\nfunction defineNameProp(obj, nameValue) {\n    var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);\n    /* istanbul ignore else -> will only run in old versions of node.js */\n    if ((0, utils_1.isUndefined)(namePropDescriptor) || namePropDescriptor.configurable) {\n        Object.defineProperty(obj, NAME, {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: nameValue\n        });\n        return true;\n    }\n    /* istanbul ignore next -> will only run in old versions of node.js */\n    return false;\n}\nexports.defineNameProp = defineNameProp;\n//# sourceMappingURL=lang_extensions.js.map"]},"metadata":{},"sourceType":"script"}