{"ast":null,"code":"import _slicedToArray from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"multisamping\", \"renderIndex\", \"disableGamma\", \"disableRenderPass\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { WebGLMultisampleRenderTarget, RGBAFormat, sRGBEncoding } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { EffectComposer, RenderPass, ShaderPass, GammaCorrectionShader } from 'three-stdlib';\nimport mergeRefs from 'react-merge-refs';\nextend({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  ShaderPass: ShaderPass\n});\n\nvar isWebGL2Available = function isWebGL2Available() {\n  try {\n    var canvas = document.createElement('canvas');\n    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n  } catch (e) {\n    return false;\n  }\n};\n\nvar Effects = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      _ref$multisamping = _ref.multisamping,\n      multisamping = _ref$multisamping === void 0 ? 8 : _ref$multisamping,\n      _ref$renderIndex = _ref.renderIndex,\n      renderIndex = _ref$renderIndex === void 0 ? 1 : _ref$renderIndex,\n      _ref$disableGamma = _ref.disableGamma,\n      disableGamma = _ref$disableGamma === void 0 ? false : _ref$disableGamma,\n      _ref$disableRenderPas = _ref.disableRenderPass,\n      disableRenderPass = _ref$disableRenderPas === void 0 ? false : _ref$disableRenderPas,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var composer = React.useRef();\n  var scene = useThree(function (_ref2) {\n    var scene = _ref2.scene;\n    return scene;\n  });\n  var camera = useThree(function (_ref3) {\n    var camera = _ref3.camera;\n    return camera;\n  });\n  var gl = useThree(function (_ref4) {\n    var gl = _ref4.gl;\n    return gl;\n  });\n  var size = useThree(function (_ref5) {\n    var size = _ref5.size;\n    return size;\n  });\n\n  var _React$useState = React.useState(function () {\n    if (isWebGL2Available() && multisamping > 0) {\n      var t = new WebGLMultisampleRenderTarget(size.width, size.height, {\n        format: RGBAFormat,\n        encoding: sRGBEncoding\n      });\n      t.samples = 8;\n      return t;\n    }\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      target = _React$useState2[0];\n\n  React.useEffect(function () {\n    var _composer$current, _composer$current2;\n\n    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);\n    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(gl.getPixelRatio());\n  }, [gl, size]);\n  useFrame(function () {\n    var _composer$current3;\n\n    return (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();\n  }, renderIndex);\n  return /*#__PURE__*/React.createElement(\"effectComposer\", _extends({\n    ref: mergeRefs([ref, composer]),\n    args: [gl, target]\n  }, props), !disableRenderPass && /*#__PURE__*/React.createElement(\"renderPass\", {\n    attachArray: \"passes\",\n    args: [scene, camera]\n  }), !disableGamma && /*#__PURE__*/React.createElement(\"shaderPass\", {\n    attachArray: \"passes\",\n    args: [GammaCorrectionShader]\n  }), children);\n});\nexport { Effects, isWebGL2Available };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/@react-three/drei/core/Effects.js"],"names":["_extends","React","WebGLMultisampleRenderTarget","RGBAFormat","sRGBEncoding","extend","useThree","useFrame","EffectComposer","RenderPass","ShaderPass","GammaCorrectionShader","mergeRefs","isWebGL2Available","canvas","document","createElement","window","WebGL2RenderingContext","getContext","e","Effects","forwardRef","ref","children","multisamping","renderIndex","disableGamma","disableRenderPass","props","composer","useRef","scene","camera","gl","size","useState","t","width","height","format","encoding","samples","target","useEffect","_composer$current","_composer$current2","current","setSize","setPixelRatio","getPixelRatio","_composer$current3","render","args","attachArray"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { WebGLMultisampleRenderTarget, RGBAFormat, sRGBEncoding } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { EffectComposer, RenderPass, ShaderPass, GammaCorrectionShader } from 'three-stdlib';\nimport mergeRefs from 'react-merge-refs';\n\nextend({\n  EffectComposer,\n  RenderPass,\n  ShaderPass\n});\nconst isWebGL2Available = () => {\n  try {\n    var canvas = document.createElement('canvas');\n    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n  } catch (e) {\n    return false;\n  }\n};\nconst Effects = /*#__PURE__*/React.forwardRef(({\n  children,\n  multisamping = 8,\n  renderIndex = 1,\n  disableGamma = false,\n  disableRenderPass = false,\n  ...props\n}, ref) => {\n  const composer = React.useRef();\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const size = useThree(({\n    size\n  }) => size);\n  const [target] = React.useState(() => {\n    if (isWebGL2Available() && multisamping > 0) {\n      const t = new WebGLMultisampleRenderTarget(size.width, size.height, {\n        format: RGBAFormat,\n        encoding: sRGBEncoding\n      });\n      t.samples = 8;\n      return t;\n    }\n  });\n  React.useEffect(() => {\n    var _composer$current, _composer$current2;\n\n    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);\n    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(gl.getPixelRatio());\n  }, [gl, size]);\n  useFrame(() => {\n    var _composer$current3;\n\n    return (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();\n  }, renderIndex);\n  return /*#__PURE__*/React.createElement(\"effectComposer\", _extends({\n    ref: mergeRefs([ref, composer]),\n    args: [gl, target]\n  }, props), !disableRenderPass && /*#__PURE__*/React.createElement(\"renderPass\", {\n    attachArray: \"passes\",\n    args: [scene, camera]\n  }), !disableGamma && /*#__PURE__*/React.createElement(\"shaderPass\", {\n    attachArray: \"passes\",\n    args: [GammaCorrectionShader]\n  }), children);\n});\n\nexport { Effects, isWebGL2Available };\n"]},"metadata":{},"sourceType":"module"}