{"ast":null,"code":"var _jsxFileName = \"/Users/dominiclee/Desktop/ethprojs/metaportal/src/models/soldierModel.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useGLTF, useAnimations } from '@react-three/drei';\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function SoldierModel(props) {\n  _s();\n\n  const group = useRef();\n  const {\n    nodes,\n    materials,\n    animations\n  } = useGLTF('/soldier.glb');\n  const {\n    actions\n  } = useAnimations(animations, group);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: group,\n    ...props,\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: [-Math.PI / 2, 0, 0],\n      scale: [0.01, 0.01, 0.01],\n      children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n        object: nodes.mixamorigHips\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n        geometry: nodes.vanguard_Mesh.geometry,\n        material: materials.VanguardBodyMat,\n        skeleton: nodes.vanguard_Mesh.skeleton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n        geometry: nodes.vanguard_visor.geometry,\n        material: materials.Vanguard_VisorMat,\n        skeleton: nodes.vanguard_visor.skeleton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SoldierModel, \"7JbLDsQD6lcMdM0kn5fp9AvwRUI=\", false, function () {\n  return [useGLTF, useAnimations];\n});\n\n_c = SoldierModel;\nexport function SoldierModel2(props) {\n  _s2();\n\n  // Fetch model and a separate texture\n  const {\n    nodes,\n    materials,\n    animations\n  } = useGLTF('/soldier.glb');\n  const texture = useTexture(\"/stacy.jpg\"); // Extract animation actions\n\n  const {\n    ref,\n    actions,\n    names\n  } = useAnimations(animations); // Hover and animation-index states\n\n  const [hovered, setHovered] = useState(false);\n  const [index, setIndex] = useState(4); // Animate the selection halo\n\n  const {\n    color,\n    scale\n  } = useSpring({\n    scale: hovered ? [1.15, 1.15, 1] : [1, 1, 1],\n    color: hovered ? \"hotpink\" : \"aquamarine\"\n  }); // Change cursor on hover-state\n\n  useEffect(() => void (document.body.style.cursor = hovered ? \"pointer\" : \"auto\"), [hovered]); // Change animation when the index changes\n\n  useEffect(() => {\n    // Reset and fade in animation after an index has been changed\n    actions[names[index]].reset().fadeIn(0.5).play(); // In the clean-up phase, fade it out\n\n    return () => actions[names[index]].fadeOut(0.5);\n  }, [index, actions, names]);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: ref,\n    ...props,\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: [Math.PI / 2, 0, 0],\n      scale: 0.01,\n      children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n        object: nodes.mixamorigHips\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n        castShadow: true,\n        receiveShadow: true,\n        onPointerOver: () => setHovered(true),\n        onPointerOut: () => setHovered(false),\n        onClick: () => setIndex((index + 1) % names.length),\n        geometry: nodes.stacy.geometry,\n        skeleton: nodes.stacy.skeleton,\n        rotation: [-Math.PI / 2, 0, 0],\n        scale: 100,\n        children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n          map: texture,\n          \"map-flipY\": false,\n          skinning: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n}\n\n_s2(SoldierModel2, \"cNbTaFXfqAOxfQupGS+DOjOIgOo=\", true, function () {\n  return [useGLTF, useAnimations];\n});\n\n_c2 = SoldierModel2;\nuseGLTF.preload('/soldier.glb');\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SoldierModel\");\n$RefreshReg$(_c2, \"SoldierModel2\");","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/models/soldierModel.tsx"],"names":["useGLTF","useAnimations","React","useRef","useState","SoldierModel","props","group","nodes","materials","animations","actions","Math","PI","mixamorigHips","vanguard_Mesh","geometry","VanguardBodyMat","skeleton","vanguard_visor","Vanguard_VisorMat","SoldierModel2","texture","useTexture","ref","names","hovered","setHovered","index","setIndex","color","scale","useSpring","useEffect","document","body","style","cursor","reset","fadeIn","play","fadeOut","length","stacy","preload"],"mappings":"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","sourcesContent":["\nimport { useGLTF, useAnimations } from '@react-three/drei'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\n\nimport * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\n\n\nexport type GLTFResult = GLTF & {\n    nodes: Record<string, THREE.Mesh>;\n    materials: Record<string, THREE.MeshStandardMaterial>;\n}\n\n\n\nexport  function SoldierModel(props:any) {\n  const group = useRef()\n  const { nodes, materials, animations } = useGLTF('/soldier.glb') as any;\n  const { actions } = useAnimations(animations, group)\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group rotation={[-Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>\n        <primitive object={nodes.mixamorigHips} />\n        <skinnedMesh\n          geometry={nodes.vanguard_Mesh.geometry}\n          material={materials.VanguardBodyMat}\n          skeleton={nodes.vanguard_Mesh.skeleton}\n        />\n        <skinnedMesh\n          geometry={nodes.vanguard_visor.geometry}\n          material={materials.Vanguard_VisorMat}\n          skeleton={nodes.vanguard_visor.skeleton}\n        />\n      </group>\n    </group>\n  )\n}\n\n\nexport  function SoldierModel2(props:any) {\n    // Fetch model and a separate texture\n    const { nodes, materials, animations } = useGLTF('/soldier.glb') as any;\n    const texture = useTexture(\"/stacy.jpg\")\n    // Extract animation actions\n    const { ref, actions, names } = useAnimations(animations)\n    // Hover and animation-index states\n    const [hovered, setHovered] = useState(false)\n    const [index, setIndex] = useState(4)\n    // Animate the selection halo\n    const { color, scale } = useSpring({ scale: hovered ? [1.15, 1.15, 1] : [1, 1, 1], color: hovered ? \"hotpink\" : \"aquamarine\" })\n    // Change cursor on hover-state\n    useEffect(() => void (document.body.style.cursor = hovered ? \"pointer\" : \"auto\"), [hovered])\n    // Change animation when the index changes\n    useEffect(() => {\n      // Reset and fade in animation after an index has been changed\n      actions[names[index]].reset().fadeIn(0.5).play()\n      // In the clean-up phase, fade it out\n      return () => actions[names[index]].fadeOut(0.5)\n    }, [index, actions, names])\n    return (\n      <group ref={ref} {...props} dispose={null}>\n        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>\n          <primitive object={nodes.mixamorigHips} />\n          <skinnedMesh\n            castShadow\n            receiveShadow\n            onPointerOver={() => setHovered(true)}\n            onPointerOut={() => setHovered(false)}\n            onClick={() => setIndex((index + 1) % names.length)}\n            geometry={nodes.stacy.geometry}\n            skeleton={nodes.stacy.skeleton}\n            rotation={[-Math.PI / 2, 0, 0]}\n            scale={100}>\n            <meshStandardMaterial map={texture} map-flipY={false} skinning />\n          </skinnedMesh>\n        </group>\n      </group>\n    )\n  }\n  \n\nuseGLTF.preload('/soldier.glb');\n"]},"metadata":{},"sourceType":"module"}