{"ast":null,"code":"import { ShaderMaterial, Vector3, Color, Vector2 } from 'three';\n\nclass SpotLightMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        depth: {\n          value: null\n        },\n        attenuation: {\n          value: 2.5\n        },\n        anglePower: {\n          value: 12\n        },\n        spotPosition: {\n          value: new Vector3(0, 0, 0)\n        },\n        lightColor: {\n          value: new Color('white')\n        },\n        cameraNear: {\n          value: 0\n        },\n        cameraFar: {\n          value: 1\n        },\n        resolution: {\n          value: new Vector2(0, 0)\n        }\n      },\n      transparent: true,\n      depthWrite: false,\n      vertexShader:\n      /* glsl */\n      `\n      varying vec3 vNormal;\n      varying vec3 vWorldPosition;\n      varying float vViewZ;\n      varying float vIntensity;\n      uniform vec3 spotPosition;\n      uniform float attenuation;\n\n      void main() {\n        // compute intensity\n        vNormal = normalize( normalMatrix * normal );\n        vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\n        vWorldPosition = worldPosition.xyz;\n        vec4 viewPosition = viewMatrix * worldPosition;\n        vViewZ = viewPosition.z;\n        float intensity\t= distance(worldPosition.xyz, spotPosition) / attenuation;\n        intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\n        vIntensity = intensity;        \n        // set gl_Position\n        gl_Position\t= projectionMatrix * viewPosition;\n\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      #include <packing>\n\n      varying vec3 vNormal;\n      varying vec3 vWorldPosition;\n      uniform vec3 lightColor;\n      uniform vec3 spotPosition;\n      uniform float attenuation;\n      uniform float anglePower;\n      uniform sampler2D depth;\n      uniform vec2 resolution;\n      uniform float cameraNear;\n      uniform float cameraFar;\n      varying float vViewZ;\n      varying float vIntensity;\n\n      float readDepth( sampler2D depthSampler, vec2 coord ) {\n        float fragCoordZ = texture2D( depthSampler, coord ).x;\n        float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\n        return viewZ;\n      }\n\n      void main() {\n        float d = 1.0;\n        bool isSoft = resolution[0] > 0.0 && resolution[1] > 0.0;\n        if (isSoft) {\n          vec2 sUv = gl_FragCoord.xy / resolution;\n          d = readDepth(depth, sUv);\n        }\n        float intensity = vIntensity;\n        vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\n        float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\n        intensity\t*= angleIntensity;\n        // fades when z is close to sampled depth, meaning the cone is intersecting existing geometry\n        if (isSoft) {\n          intensity\t*= smoothstep(0., 1., vViewZ - d);\n        }\n        gl_FragColor = vec4(lightColor, intensity);\n      }`\n    });\n  }\n\n}\n\nexport { SpotLightMaterial };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/@react-three/drei/materials/SpotLightMaterial.js"],"names":["ShaderMaterial","Vector3","Color","Vector2","SpotLightMaterial","constructor","uniforms","depth","value","attenuation","anglePower","spotPosition","lightColor","cameraNear","cameraFar","resolution","transparent","depthWrite","vertexShader","fragmentShader"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,EAAkCC,KAAlC,EAAyCC,OAAzC,QAAwD,OAAxD;;AAEA,MAAMC,iBAAN,SAAgCJ,cAAhC,CAA+C;AAC7CK,EAAAA,WAAW,GAAG;AACZ,UAAM;AACJC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAE;AADF,SADC;AAIRC,QAAAA,WAAW,EAAE;AACXD,UAAAA,KAAK,EAAE;AADI,SAJL;AAORE,QAAAA,UAAU,EAAE;AACVF,UAAAA,KAAK,EAAE;AADG,SAPJ;AAURG,QAAAA,YAAY,EAAE;AACZH,UAAAA,KAAK,EAAE,IAAIP,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB;AADK,SAVN;AAaRW,QAAAA,UAAU,EAAE;AACVJ,UAAAA,KAAK,EAAE,IAAIN,KAAJ,CAAU,OAAV;AADG,SAbJ;AAgBRW,QAAAA,UAAU,EAAE;AACVL,UAAAA,KAAK,EAAE;AADG,SAhBJ;AAmBRM,QAAAA,SAAS,EAAE;AACTN,UAAAA,KAAK,EAAE;AADE,SAnBH;AAsBRO,QAAAA,UAAU,EAAE;AACVP,UAAAA,KAAK,EAAE,IAAIL,OAAJ,CAAY,CAAZ,EAAe,CAAf;AADG;AAtBJ,OADN;AA2BJa,MAAAA,WAAW,EAAE,IA3BT;AA4BJC,MAAAA,UAAU,EAAE,KA5BR;AA6BJC,MAAAA,YAAY;AACZ;AACC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QApDU;AAqDJC,MAAAA,cAAc;AACd;AACC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7FU,KAAN;AA+FD;;AAjG4C;;AAqG/C,SAASf,iBAAT","sourcesContent":["import { ShaderMaterial, Vector3, Color, Vector2 } from 'three';\n\nclass SpotLightMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        depth: {\n          value: null\n        },\n        attenuation: {\n          value: 2.5\n        },\n        anglePower: {\n          value: 12\n        },\n        spotPosition: {\n          value: new Vector3(0, 0, 0)\n        },\n        lightColor: {\n          value: new Color('white')\n        },\n        cameraNear: {\n          value: 0\n        },\n        cameraFar: {\n          value: 1\n        },\n        resolution: {\n          value: new Vector2(0, 0)\n        }\n      },\n      transparent: true,\n      depthWrite: false,\n      vertexShader:\n      /* glsl */\n      `\n      varying vec3 vNormal;\n      varying vec3 vWorldPosition;\n      varying float vViewZ;\n      varying float vIntensity;\n      uniform vec3 spotPosition;\n      uniform float attenuation;\n\n      void main() {\n        // compute intensity\n        vNormal = normalize( normalMatrix * normal );\n        vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\n        vWorldPosition = worldPosition.xyz;\n        vec4 viewPosition = viewMatrix * worldPosition;\n        vViewZ = viewPosition.z;\n        float intensity\t= distance(worldPosition.xyz, spotPosition) / attenuation;\n        intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\n        vIntensity = intensity;        \n        // set gl_Position\n        gl_Position\t= projectionMatrix * viewPosition;\n\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      #include <packing>\n\n      varying vec3 vNormal;\n      varying vec3 vWorldPosition;\n      uniform vec3 lightColor;\n      uniform vec3 spotPosition;\n      uniform float attenuation;\n      uniform float anglePower;\n      uniform sampler2D depth;\n      uniform vec2 resolution;\n      uniform float cameraNear;\n      uniform float cameraFar;\n      varying float vViewZ;\n      varying float vIntensity;\n\n      float readDepth( sampler2D depthSampler, vec2 coord ) {\n        float fragCoordZ = texture2D( depthSampler, coord ).x;\n        float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\n        return viewZ;\n      }\n\n      void main() {\n        float d = 1.0;\n        bool isSoft = resolution[0] > 0.0 && resolution[1] > 0.0;\n        if (isSoft) {\n          vec2 sUv = gl_FragCoord.xy / resolution;\n          d = readDepth(depth, sUv);\n        }\n        float intensity = vIntensity;\n        vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\n        float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\n        intensity\t*= angleIntensity;\n        // fades when z is close to sampled depth, meaning the cone is intersecting existing geometry\n        if (isSoft) {\n          intensity\t*= smoothstep(0., 1., vViewZ - d);\n        }\n        gl_FragColor = vec4(lightColor, intensity);\n      }`\n    });\n  }\n\n}\n\nexport { SpotLightMaterial };\n"]},"metadata":{},"sourceType":"module"}