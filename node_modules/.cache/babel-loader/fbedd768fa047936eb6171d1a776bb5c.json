{"ast":null,"code":"var _jsxFileName = \"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx\",\n    _s = $RefreshSig$();\n\nimport { formatUnits } from '@ethersproject/units';\nimport { useEthers } from '@usedapp/core';\nimport React, { useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { Colors } from '../../global/styles';\nimport { useBadgeList } from '../../portalHooks/useBadgeList';\nimport { TextBold } from '../../typography/Text';\nimport { BadgeOverviewModal } from '../badge/BadgeOverviewModal';\nimport { TokenSVGIcon } from './TokenSVGIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TokensList() {\n  _s();\n\n  const {\n    chainId,\n    account,\n    library\n  } = useEthers();\n  const badges = useBadgeList(account);\n  console.log('badges : ', badges);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedBadgeParams, setSelectedBadgeParams] = useState();\n\n  const handleShowModal = (index, badge) => {\n    if (!badge || !badge.ui) {\n      return;\n    }\n\n    setSelectedBadgeParams({\n      name: badge.ui.name,\n      description: badge.ui.description,\n      requirements: badge.ui.requirements,\n      address: badge.ui.onChain ? badge.ui.onChain.address : null,\n      tokenId: badge.ui.onChain ? badge.ui.onChain.tokenId : 0\n    });\n    setShowModal(!showModal);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showModal && selectedBadgeParams && /*#__PURE__*/_jsxDEV(BadgeOverviewModal, {\n      setShowModal: setShowModal,\n      badgeParams: selectedBadgeParams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 45\n    }, this), badges && badges.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Not badges available...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 41\n    }, this) : /*#__PURE__*/_jsxDEV(Row, {\n      children: badges && badges.map((badge, idx) => {\n        return /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(TokenItem, {\n                children: [/*#__PURE__*/_jsxDEV(TokenIconContainer, {\n                  onClick: () => handleShowModal(idx, badge),\n                  children: [/*#__PURE__*/_jsxDEV(TokenSVGIcon, {\n                    src: '',\n                    alt: ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 54,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TokenBalance, {\n                    children: [formatUnits(10, 0), \"xp\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 55,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 21\n                }, this), badge.ui && /*#__PURE__*/_jsxDEV(TokenName, {\n                  children: badge.ui.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 38\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 21\n              }, this)\n            }, `SubSection-${idx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this)\n        }, `parentSection-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TokensList, \"YTxuhyH6dNiiPs9WoZJyVVOjakw=\", false, function () {\n  return [useEthers, useBadgeList];\n});\n\n_c = TokensList;\nexport const Button = styled.button`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 8px;\n  align-items: center;\n  width: fit-content;\n  height: 40px;\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  color: ${Colors.Black[900]};\n  border: 1px solid ${Colors.Black[900]};\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: ${Colors.Black[900]};\n    color: ${Colors.Yellow[100]};\n  }\n`;\nconst MintButton = styled(Button)`\n  background-color: ${Colors.Yellow[100]};\n`;\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = TokenItem;\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`;\n_c3 = TokenIconContainer;\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n`;\n_c4 = TokenName;\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`;\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 12px;\n`;\n_c5 = TokenBalance;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"TokensList\");\n$RefreshReg$(_c2, \"TokenItem\");\n$RefreshReg$(_c3, \"TokenIconContainer\");\n$RefreshReg$(_c4, \"TokenName\");\n$RefreshReg$(_c5, \"TokenBalance\");","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx"],"names":["formatUnits","useEthers","React","useState","Col","Row","styled","Colors","useBadgeList","TextBold","BadgeOverviewModal","TokenSVGIcon","TokensList","chainId","account","library","badges","console","log","showModal","setShowModal","selectedBadgeParams","setSelectedBadgeParams","handleShowModal","index","badge","ui","name","description","requirements","address","onChain","tokenId","length","map","idx","Button","button","Black","Yellow","MintButton","TokenItem","li","TokenIconContainer","div","TokenName","TokenTicker","Gray","TokenBalance"],"mappings":"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","sourcesContent":["import { formatUnits } from '@ethersproject/units'\nimport { useEthers } from '@usedapp/core'\nimport React, { useState } from 'react'\nimport { Col, Container, Row } from 'react-bootstrap'\nimport styled from 'styled-components'\nimport { Colors } from '../../global/styles'\nimport { Badge } from '../../portalHooks/BadgeHelperTypes'\nimport { useBadgeList } from '../../portalHooks/useBadgeList'\nimport { TextBold } from '../../typography/Text'\nimport { BadgeOverviewModal, BadgeParams } from '../badge/BadgeOverviewModal'\nimport { TokenSVGIcon } from './TokenSVGIcon'\n\ndeclare const window: any;\n\nexport function TokensList() {\n\n  const { chainId, account, library } = useEthers();\n  const badges: Badge[]| undefined = useBadgeList(account);\n\n  console.log('badges : ',badges)\n  const [showModal, setShowModal] = useState(false)\n  const [selectedBadgeParams, setSelectedBadgeParams] = useState<BadgeParams>()\n\n    const handleShowModal =(index: number, badge: Badge) =>  {\n      if(!badge || !badge.ui){\n        return;\n      }\n      setSelectedBadgeParams({\n        name: badge.ui.name,\n        description: badge.ui.description,\n        requirements: badge.ui.requirements,\n        address: badge.ui.onChain ? badge.ui.onChain.address : null,\n        tokenId: badge.ui.onChain ? badge.ui.onChain.tokenId : 0\n      });\n\n      setShowModal(!showModal);\n    }\n\n\n  return (\n    <div>\n      {\n      (showModal && selectedBadgeParams) && <BadgeOverviewModal setShowModal={setShowModal} badgeParams={selectedBadgeParams} />\n      }\n      {badges && badges.length === 0 ? (<div>Not badges available...</div> ): (\n        <Row>\n        {badges && badges.map((badge: Badge, idx:number) => {\n              return (\n              <Col key={`parentSection-${idx}`}> \n              <Row>\n                  <Col key={`SubSection-${idx}`}>\n                    <TokenItem > \n                    <TokenIconContainer onClick={() => handleShowModal(idx, badge)}>\n                      <TokenSVGIcon src={''} alt={''}></TokenSVGIcon>\n                      <TokenBalance> \n                        {formatUnits(10,0)}xp\n                      </TokenBalance>\n                    </TokenIconContainer>\n                        {badge.ui && <TokenName>{badge.ui.name}</TokenName>}                    \n                  </TokenItem>\n                  </Col>\n              </Row>\n              </Col>\n          )})}\n        </Row>\n    )}\n    </div>\n  )\n}\n\n\nexport const Button = styled.button`\n  display: grid;\n  grid-auto-flow: column;\n  grid-column-gap: 8px;\n  align-items: center;\n  width: fit-content;\n  height: 40px;\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  color: ${Colors.Black[900]};\n  border: 1px solid ${Colors.Black[900]};\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: ${Colors.Black[900]};\n    color: ${Colors.Yellow[100]};\n  }\n`\n\nconst MintButton = styled(Button)`\n  background-color: ${Colors.Yellow[100]};\n`\n\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`\n\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`\n\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n`\n\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`\n\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 12px;\n`\n"]},"metadata":{},"sourceType":"module"}