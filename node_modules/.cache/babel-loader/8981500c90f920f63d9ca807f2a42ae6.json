{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { DataTextureLoader, FloatType, HalfFloatType, UnsignedByteType, RGBEFormat, RGBAFormat, LinearEncoding, LinearFilter, RGBEEncoding, NearestFilter, DataUtils } from 'three';\nimport { unzlibSync } from 'fflate';\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n\nvar EXRLoader = /*#__PURE__*/function (_DataTextureLoader) {\n  _inherits(EXRLoader, _DataTextureLoader);\n\n  var _super = _createSuper(EXRLoader);\n\n  function EXRLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, EXRLoader);\n\n    _this = _super.call(this, manager);\n    _this.type = FloatType;\n    return _this;\n  }\n\n  _createClass(EXRLoader, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var USHORT_RANGE = 1 << 16;\n      var BITMAP_SIZE = USHORT_RANGE >> 3;\n      var HUF_ENCBITS = 16; // literal (value) bit length\n\n      var HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n      var HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1; // encoding table size\n\n      var HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\n      var HUF_DECMASK = HUF_DECSIZE - 1;\n      var NBITS = 16;\n      var A_OFFSET = 1 << NBITS - 1;\n      var MOD_MASK = (1 << NBITS) - 1;\n      var SHORT_ZEROCODE_RUN = 59;\n      var LONG_ZEROCODE_RUN = 63;\n      var SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n      var ULONG_SIZE = 8;\n      var FLOAT32_SIZE = 4;\n      var INT32_SIZE = 4;\n      var INT16_SIZE = 2;\n      var INT8_SIZE = 1;\n      var STATIC_HUFFMAN = 0;\n      var DEFLATE = 1;\n      var UNKNOWN = 0;\n      var LOSSY_DCT = 1;\n      var RLE = 2;\n      var logBase = Math.pow(2.7182818, 2.2);\n      var tmpDataView = new DataView(new ArrayBuffer(8));\n\n      function frexp(value) {\n        if (value === 0) return [value, 0];\n        tmpDataView.setFloat64(0, value);\n        var bits = tmpDataView.getUint32(0) >>> 20 & 0x7ff;\n\n        if (bits === 0) {\n          // denormal\n          tmpDataView.setFloat64(0, value * Math.pow(2, 64)); // exp + 64\n\n          bits = (tmpDataView.getUint32(0) >>> 20 & 0x7ff) - 64;\n        }\n\n        var exponent = bits - 1022;\n        var mantissa = ldexp(value, -exponent);\n        return [mantissa, exponent];\n      }\n\n      function ldexp(mantissa, exponent) {\n        var steps = Math.min(3, Math.ceil(Math.abs(exponent) / 1023));\n        var result = mantissa;\n\n        for (var i = 0; i < steps; i++) {\n          result *= Math.pow(2, Math.floor((exponent + i) / steps));\n        }\n\n        return result;\n      }\n\n      function reverseLutFromBitmap(bitmap, lut) {\n        var k = 0;\n\n        for (var i = 0; i < USHORT_RANGE; ++i) {\n          if (i == 0 || bitmap[i >> 3] & 1 << (i & 7)) {\n            lut[k++] = i;\n          }\n        }\n\n        var n = k - 1;\n\n        while (k < USHORT_RANGE) {\n          lut[k++] = 0;\n        }\n\n        return n;\n      }\n\n      function hufClearDecTable(hdec) {\n        for (var i = 0; i < HUF_DECSIZE; i++) {\n          hdec[i] = {};\n          hdec[i].len = 0;\n          hdec[i].lit = 0;\n          hdec[i].p = null;\n        }\n      }\n\n      var getBitsReturn = {\n        l: 0,\n        c: 0,\n        lc: 0\n      };\n\n      function getBits(nBits, c, lc, uInt8Array, inOffset) {\n        while (lc < nBits) {\n          c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n          lc += 8;\n        }\n\n        lc -= nBits;\n        getBitsReturn.l = c >> lc & (1 << nBits) - 1;\n        getBitsReturn.c = c;\n        getBitsReturn.lc = lc;\n      }\n\n      var hufTableBuffer = new Array(59);\n\n      function hufCanonicalCodeTable(hcode) {\n        for (var i = 0; i <= 58; ++i) {\n          hufTableBuffer[i] = 0;\n        }\n\n        for (var i = 0; i < HUF_ENCSIZE; ++i) {\n          hufTableBuffer[hcode[i]] += 1;\n        }\n\n        var c = 0;\n\n        for (var i = 58; i > 0; --i) {\n          var nc = c + hufTableBuffer[i] >> 1;\n          hufTableBuffer[i] = c;\n          c = nc;\n        }\n\n        for (var i = 0; i < HUF_ENCSIZE; ++i) {\n          var l = hcode[i];\n          if (l > 0) hcode[i] = l | hufTableBuffer[l]++ << 6;\n        }\n      }\n\n      function hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, hcode) {\n        var p = inOffset;\n        var c = 0;\n        var lc = 0;\n\n        for (; im <= iM; im++) {\n          if (p.value - inOffset.value > ni) return false;\n          getBits(6, c, lc, uInt8Array, p);\n          var l = getBitsReturn.l;\n          c = getBitsReturn.c;\n          lc = getBitsReturn.lc;\n          hcode[im] = l;\n\n          if (l == LONG_ZEROCODE_RUN) {\n            if (p.value - inOffset.value > ni) {\n              throw 'Something wrong with hufUnpackEncTable';\n            }\n\n            getBits(8, c, lc, uInt8Array, p);\n            var zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n            c = getBitsReturn.c;\n            lc = getBitsReturn.lc;\n\n            if (im + zerun > iM + 1) {\n              throw 'Something wrong with hufUnpackEncTable';\n            }\n\n            while (zerun--) {\n              hcode[im++] = 0;\n            }\n\n            im--;\n          } else if (l >= SHORT_ZEROCODE_RUN) {\n            var zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n            if (im + zerun > iM + 1) {\n              throw 'Something wrong with hufUnpackEncTable';\n            }\n\n            while (zerun--) {\n              hcode[im++] = 0;\n            }\n\n            im--;\n          }\n        }\n\n        hufCanonicalCodeTable(hcode);\n      }\n\n      function hufLength(code) {\n        return code & 63;\n      }\n\n      function hufCode(code) {\n        return code >> 6;\n      }\n\n      function hufBuildDecTable(hcode, im, iM, hdecod) {\n        for (; im <= iM; im++) {\n          var c = hufCode(hcode[im]);\n          var l = hufLength(hcode[im]);\n\n          if (c >> l) {\n            throw 'Invalid table entry';\n          }\n\n          if (l > HUF_DECBITS) {\n            var pl = hdecod[c >> l - HUF_DECBITS];\n\n            if (pl.len) {\n              throw 'Invalid table entry';\n            }\n\n            pl.lit++;\n\n            if (pl.p) {\n              var p = pl.p;\n              pl.p = new Array(pl.lit);\n\n              for (var i = 0; i < pl.lit - 1; ++i) {\n                pl.p[i] = p[i];\n              }\n            } else {\n              pl.p = new Array(1);\n            }\n\n            pl.p[pl.lit - 1] = im;\n          } else if (l) {\n            var plOffset = 0;\n\n            for (var i = 1 << HUF_DECBITS - l; i > 0; i--) {\n              var pl = hdecod[(c << HUF_DECBITS - l) + plOffset];\n\n              if (pl.len || pl.p) {\n                throw 'Invalid table entry';\n              }\n\n              pl.len = l;\n              pl.lit = im;\n              plOffset++;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      var getCharReturn = {\n        c: 0,\n        lc: 0\n      };\n\n      function getChar(c, lc, uInt8Array, inOffset) {\n        c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n        lc += 8;\n        getCharReturn.c = c;\n        getCharReturn.lc = lc;\n      }\n\n      var getCodeReturn = {\n        c: 0,\n        lc: 0\n      };\n\n      function getCode(po, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outBufferOffset, outBufferEndOffset) {\n        if (po == rlc) {\n          if (lc < 8) {\n            getChar(c, lc, uInt8Array, inOffset);\n            c = getCharReturn.c;\n            lc = getCharReturn.lc;\n          }\n\n          lc -= 8;\n          var cs = c >> lc;\n          var cs = new Uint8Array([cs])[0];\n\n          if (outBufferOffset.value + cs > outBufferEndOffset) {\n            return false;\n          }\n\n          var s = outBuffer[outBufferOffset.value - 1];\n\n          while (cs-- > 0) {\n            outBuffer[outBufferOffset.value++] = s;\n          }\n        } else if (outBufferOffset.value < outBufferEndOffset) {\n          outBuffer[outBufferOffset.value++] = po;\n        } else {\n          return false;\n        }\n\n        getCodeReturn.c = c;\n        getCodeReturn.lc = lc;\n      }\n\n      function UInt16(value) {\n        return value & 0xffff;\n      }\n\n      function Int16(value) {\n        var ref = UInt16(value);\n        return ref > 0x7fff ? ref - 0x10000 : ref;\n      }\n\n      var wdec14Return = {\n        a: 0,\n        b: 0\n      };\n\n      function wdec14(l, h) {\n        var ls = Int16(l);\n        var hs = Int16(h);\n        var hi = hs;\n        var ai = ls + (hi & 1) + (hi >> 1);\n        var as = ai;\n        var bs = ai - hi;\n        wdec14Return.a = as;\n        wdec14Return.b = bs;\n      }\n\n      function wdec16(l, h) {\n        var m = UInt16(l);\n        var d = UInt16(h);\n        var bb = m - (d >> 1) & MOD_MASK;\n        var aa = d + bb - A_OFFSET & MOD_MASK;\n        wdec14Return.a = aa;\n        wdec14Return.b = bb;\n      }\n\n      function wav2Decode(buffer, j, nx, ox, ny, oy, mx) {\n        var w14 = mx < 1 << 14;\n        var n = nx > ny ? ny : nx;\n        var p = 1;\n        var p2;\n\n        while (p <= n) {\n          p <<= 1;\n        }\n\n        p >>= 1;\n        p2 = p;\n        p >>= 1;\n\n        while (p >= 1) {\n          var py = 0;\n          var ey = py + oy * (ny - p2);\n          var oy1 = oy * p;\n          var oy2 = oy * p2;\n          var ox1 = ox * p;\n          var ox2 = ox * p2;\n          var i00, i01, i10, i11;\n\n          for (; py <= ey; py += oy2) {\n            var px = py;\n            var ex = py + ox * (nx - p2);\n\n            for (; px <= ex; px += ox2) {\n              var p01 = px + ox1;\n              var p10 = px + oy1;\n              var p11 = p10 + ox1;\n\n              if (w14) {\n                wdec14(buffer[px + j], buffer[p10 + j]);\n                i00 = wdec14Return.a;\n                i10 = wdec14Return.b;\n                wdec14(buffer[p01 + j], buffer[p11 + j]);\n                i01 = wdec14Return.a;\n                i11 = wdec14Return.b;\n                wdec14(i00, i01);\n                buffer[px + j] = wdec14Return.a;\n                buffer[p01 + j] = wdec14Return.b;\n                wdec14(i10, i11);\n                buffer[p10 + j] = wdec14Return.a;\n                buffer[p11 + j] = wdec14Return.b;\n              } else {\n                wdec16(buffer[px + j], buffer[p10 + j]);\n                i00 = wdec14Return.a;\n                i10 = wdec14Return.b;\n                wdec16(buffer[p01 + j], buffer[p11 + j]);\n                i01 = wdec14Return.a;\n                i11 = wdec14Return.b;\n                wdec16(i00, i01);\n                buffer[px + j] = wdec14Return.a;\n                buffer[p01 + j] = wdec14Return.b;\n                wdec16(i10, i11);\n                buffer[p10 + j] = wdec14Return.a;\n                buffer[p11 + j] = wdec14Return.b;\n              }\n            }\n\n            if (nx & p) {\n              var p10 = px + oy1;\n              if (w14) wdec14(buffer[px + j], buffer[p10 + j]);else wdec16(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              buffer[p10 + j] = wdec14Return.b;\n              buffer[px + j] = i00;\n            }\n          }\n\n          if (ny & p) {\n            var px = py;\n            var ex = py + ox * (nx - p2);\n\n            for (; px <= ex; px += ox2) {\n              var p01 = px + ox1;\n              if (w14) wdec14(buffer[px + j], buffer[p01 + j]);else wdec16(buffer[px + j], buffer[p01 + j]);\n              i00 = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              buffer[px + j] = i00;\n            }\n          }\n\n          p2 = p;\n          p >>= 1;\n        }\n\n        return py;\n      }\n\n      function hufDecode(encodingTable, decodingTable, uInt8Array, inDataView, inOffset, ni, rlc, no, outBuffer, outOffset) {\n        var c = 0;\n        var lc = 0;\n        var outBufferEndOffset = no;\n        var inOffsetEnd = Math.trunc(inOffset.value + (ni + 7) / 8);\n\n        while (inOffset.value < inOffsetEnd) {\n          getChar(c, lc, uInt8Array, inOffset);\n          c = getCharReturn.c;\n          lc = getCharReturn.lc;\n\n          while (lc >= HUF_DECBITS) {\n            var index = c >> lc - HUF_DECBITS & HUF_DECMASK;\n            var pl = decodingTable[index];\n\n            if (pl.len) {\n              lc -= pl.len;\n              getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n              c = getCodeReturn.c;\n              lc = getCodeReturn.lc;\n            } else {\n              if (!pl.p) {\n                throw 'hufDecode issues';\n              }\n\n              var j;\n\n              for (j = 0; j < pl.lit; j++) {\n                var l = hufLength(encodingTable[pl.p[j]]);\n\n                while (lc < l && inOffset.value < inOffsetEnd) {\n                  getChar(c, lc, uInt8Array, inOffset);\n                  c = getCharReturn.c;\n                  lc = getCharReturn.lc;\n                }\n\n                if (lc >= l) {\n                  if (hufCode(encodingTable[pl.p[j]]) == (c >> lc - l & (1 << l) - 1)) {\n                    lc -= l;\n                    getCode(pl.p[j], rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n                    c = getCodeReturn.c;\n                    lc = getCodeReturn.lc;\n                    break;\n                  }\n                }\n              }\n\n              if (j == pl.lit) {\n                throw 'hufDecode issues';\n              }\n            }\n          }\n        }\n\n        var i = 8 - ni & 7;\n        c >>= i;\n        lc -= i;\n\n        while (lc > 0) {\n          var pl = decodingTable[c << HUF_DECBITS - lc & HUF_DECMASK];\n\n          if (pl.len) {\n            lc -= pl.len;\n            getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n            c = getCodeReturn.c;\n            lc = getCodeReturn.lc;\n          } else {\n            throw 'hufDecode issues';\n          }\n        }\n\n        return true;\n      }\n\n      function hufUncompress(uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw) {\n        var outOffset = {\n          value: 0\n        };\n        var initialInOffset = inOffset.value;\n        var im = parseUint32(inDataView, inOffset);\n        var iM = parseUint32(inDataView, inOffset);\n        inOffset.value += 4;\n        var nBits = parseUint32(inDataView, inOffset);\n        inOffset.value += 4;\n\n        if (im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE) {\n          throw 'Something wrong with HUF_ENCSIZE';\n        }\n\n        var freq = new Array(HUF_ENCSIZE);\n        var hdec = new Array(HUF_DECSIZE);\n        hufClearDecTable(hdec);\n        var ni = nCompressed - (inOffset.value - initialInOffset);\n        hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, freq);\n\n        if (nBits > 8 * (nCompressed - (inOffset.value - initialInOffset))) {\n          throw 'Something wrong with hufUncompress';\n        }\n\n        hufBuildDecTable(freq, im, iM, hdec);\n        hufDecode(freq, hdec, uInt8Array, inDataView, inOffset, nBits, iM, nRaw, outBuffer, outOffset);\n      }\n\n      function applyLut(lut, data, nData) {\n        for (var i = 0; i < nData; ++i) {\n          data[i] = lut[data[i]];\n        }\n      }\n\n      function predictor(source) {\n        for (var t = 1; t < source.length; t++) {\n          var d = source[t - 1] + source[t] - 128;\n          source[t] = d;\n        }\n      }\n\n      function interleaveScalar(source, out) {\n        var t1 = 0;\n        var t2 = Math.floor((source.length + 1) / 2);\n        var s = 0;\n        var stop = source.length - 1;\n\n        while (true) {\n          if (s > stop) break;\n          out[s++] = source[t1++];\n          if (s > stop) break;\n          out[s++] = source[t2++];\n        }\n      }\n\n      function decodeRunLength(source) {\n        var size = source.byteLength;\n        var out = new Array();\n        var p = 0;\n        var reader = new DataView(source);\n\n        while (size > 0) {\n          var l = reader.getInt8(p++);\n\n          if (l < 0) {\n            var count = -l;\n            size -= count + 1;\n\n            for (var i = 0; i < count; i++) {\n              out.push(reader.getUint8(p++));\n            }\n          } else {\n            var count = l;\n            size -= 2;\n            var value = reader.getUint8(p++);\n\n            for (var i = 0; i < count + 1; i++) {\n              out.push(value);\n            }\n          }\n        }\n\n        return out;\n      }\n\n      function lossyDctDecode(cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer) {\n        var dataView = new DataView(outBuffer.buffer);\n        var width = channelData[cscSet.idx[0]].width;\n        var height = channelData[cscSet.idx[0]].height;\n        var numComp = 3;\n        var numFullBlocksX = Math.floor(width / 8.0);\n        var numBlocksX = Math.ceil(width / 8.0);\n        var numBlocksY = Math.ceil(height / 8.0);\n        var leftoverX = width - (numBlocksX - 1) * 8;\n        var leftoverY = height - (numBlocksY - 1) * 8;\n        var currAcComp = {\n          value: 0\n        };\n        var currDcComp = new Array(numComp);\n        var dctData = new Array(numComp);\n        var halfZigBlock = new Array(numComp);\n        var rowBlock = new Array(numComp);\n        var rowOffsets = new Array(numComp);\n\n        for (var _comp = 0; _comp < numComp; ++_comp) {\n          rowOffsets[_comp] = rowPtrs[cscSet.idx[_comp]];\n          currDcComp[_comp] = _comp < 1 ? 0 : currDcComp[_comp - 1] + numBlocksX * numBlocksY;\n          dctData[_comp] = new Float32Array(64);\n          halfZigBlock[_comp] = new Uint16Array(64);\n          rowBlock[_comp] = new Uint16Array(numBlocksX * 64);\n        }\n\n        for (var blocky = 0; blocky < numBlocksY; ++blocky) {\n          var maxY = 8;\n          if (blocky == numBlocksY - 1) maxY = leftoverY;\n          var maxX = 8;\n\n          for (var blockx = 0; blockx < numBlocksX; ++blockx) {\n            if (blockx == numBlocksX - 1) maxX = leftoverX;\n\n            for (var _comp2 = 0; _comp2 < numComp; ++_comp2) {\n              halfZigBlock[_comp2].fill(0); // set block DC component\n\n\n              halfZigBlock[_comp2][0] = dcBuffer[currDcComp[_comp2]++]; // set block AC components\n\n              unRleAC(currAcComp, acBuffer, halfZigBlock[_comp2]); // UnZigZag block to float\n\n              unZigZag(halfZigBlock[_comp2], dctData[_comp2]); // decode float dct\n\n              dctInverse(dctData[_comp2]);\n            }\n\n            {\n              csc709Inverse(dctData);\n            }\n\n            for (var _comp3 = 0; _comp3 < numComp; ++_comp3) {\n              convertToHalf(dctData[_comp3], rowBlock[_comp3], blockx * 64);\n            }\n          } // blockx\n\n\n          var _offset = 0;\n\n          for (var _comp4 = 0; _comp4 < numComp; ++_comp4) {\n            var _type = channelData[cscSet.idx[_comp4]].type;\n\n            for (var _y = 8 * blocky; _y < 8 * blocky + maxY; ++_y) {\n              _offset = rowOffsets[_comp4][_y];\n\n              for (var _blockx = 0; _blockx < numFullBlocksX; ++_blockx) {\n                var src = _blockx * 64 + (_y & 0x7) * 8;\n                dataView.setUint16(_offset + 0 * INT16_SIZE * _type, rowBlock[_comp4][src + 0], true);\n                dataView.setUint16(_offset + 1 * INT16_SIZE * _type, rowBlock[_comp4][src + 1], true);\n                dataView.setUint16(_offset + 2 * INT16_SIZE * _type, rowBlock[_comp4][src + 2], true);\n                dataView.setUint16(_offset + 3 * INT16_SIZE * _type, rowBlock[_comp4][src + 3], true);\n                dataView.setUint16(_offset + 4 * INT16_SIZE * _type, rowBlock[_comp4][src + 4], true);\n                dataView.setUint16(_offset + 5 * INT16_SIZE * _type, rowBlock[_comp4][src + 5], true);\n                dataView.setUint16(_offset + 6 * INT16_SIZE * _type, rowBlock[_comp4][src + 6], true);\n                dataView.setUint16(_offset + 7 * INT16_SIZE * _type, rowBlock[_comp4][src + 7], true);\n                _offset += 8 * INT16_SIZE * _type;\n              }\n            } // handle partial X blocks\n\n\n            if (numFullBlocksX != numBlocksX) {\n              for (var _y2 = 8 * blocky; _y2 < 8 * blocky + maxY; ++_y2) {\n                var _offset2 = rowOffsets[_comp4][_y2] + 8 * numFullBlocksX * INT16_SIZE * _type;\n\n                var _src = numFullBlocksX * 64 + (_y2 & 0x7) * 8;\n\n                for (var _x = 0; _x < maxX; ++_x) {\n                  dataView.setUint16(_offset2 + _x * INT16_SIZE * _type, rowBlock[_comp4][_src + _x], true);\n                }\n              }\n            }\n          } // comp\n\n        } // blocky\n\n\n        var halfRow = new Uint16Array(width);\n        var dataView = new DataView(outBuffer.buffer); // convert channels back to float, if needed\n\n        for (var comp = 0; comp < numComp; ++comp) {\n          channelData[cscSet.idx[comp]].decoded = true;\n          var type = channelData[cscSet.idx[comp]].type;\n          if (channelData[comp].type != 2) continue;\n\n          for (var y = 0; y < height; ++y) {\n            var _offset3 = rowOffsets[comp][y];\n\n            for (var x = 0; x < width; ++x) {\n              halfRow[x] = dataView.getUint16(_offset3 + x * INT16_SIZE * type, true);\n            }\n\n            for (var x = 0; x < width; ++x) {\n              dataView.setFloat32(_offset3 + x * INT16_SIZE * type, decodeFloat16(halfRow[x]), true);\n            }\n          }\n        }\n      }\n\n      function unRleAC(currAcComp, acBuffer, halfZigBlock) {\n        var acValue;\n        var dctComp = 1;\n\n        while (dctComp < 64) {\n          acValue = acBuffer[currAcComp.value];\n\n          if (acValue == 0xff00) {\n            dctComp = 64;\n          } else if (acValue >> 8 == 0xff) {\n            dctComp += acValue & 0xff;\n          } else {\n            halfZigBlock[dctComp] = acValue;\n            dctComp++;\n          }\n\n          currAcComp.value++;\n        }\n      }\n\n      function unZigZag(src, dst) {\n        dst[0] = decodeFloat16(src[0]);\n        dst[1] = decodeFloat16(src[1]);\n        dst[2] = decodeFloat16(src[5]);\n        dst[3] = decodeFloat16(src[6]);\n        dst[4] = decodeFloat16(src[14]);\n        dst[5] = decodeFloat16(src[15]);\n        dst[6] = decodeFloat16(src[27]);\n        dst[7] = decodeFloat16(src[28]);\n        dst[8] = decodeFloat16(src[2]);\n        dst[9] = decodeFloat16(src[4]);\n        dst[10] = decodeFloat16(src[7]);\n        dst[11] = decodeFloat16(src[13]);\n        dst[12] = decodeFloat16(src[16]);\n        dst[13] = decodeFloat16(src[26]);\n        dst[14] = decodeFloat16(src[29]);\n        dst[15] = decodeFloat16(src[42]);\n        dst[16] = decodeFloat16(src[3]);\n        dst[17] = decodeFloat16(src[8]);\n        dst[18] = decodeFloat16(src[12]);\n        dst[19] = decodeFloat16(src[17]);\n        dst[20] = decodeFloat16(src[25]);\n        dst[21] = decodeFloat16(src[30]);\n        dst[22] = decodeFloat16(src[41]);\n        dst[23] = decodeFloat16(src[43]);\n        dst[24] = decodeFloat16(src[9]);\n        dst[25] = decodeFloat16(src[11]);\n        dst[26] = decodeFloat16(src[18]);\n        dst[27] = decodeFloat16(src[24]);\n        dst[28] = decodeFloat16(src[31]);\n        dst[29] = decodeFloat16(src[40]);\n        dst[30] = decodeFloat16(src[44]);\n        dst[31] = decodeFloat16(src[53]);\n        dst[32] = decodeFloat16(src[10]);\n        dst[33] = decodeFloat16(src[19]);\n        dst[34] = decodeFloat16(src[23]);\n        dst[35] = decodeFloat16(src[32]);\n        dst[36] = decodeFloat16(src[39]);\n        dst[37] = decodeFloat16(src[45]);\n        dst[38] = decodeFloat16(src[52]);\n        dst[39] = decodeFloat16(src[54]);\n        dst[40] = decodeFloat16(src[20]);\n        dst[41] = decodeFloat16(src[22]);\n        dst[42] = decodeFloat16(src[33]);\n        dst[43] = decodeFloat16(src[38]);\n        dst[44] = decodeFloat16(src[46]);\n        dst[45] = decodeFloat16(src[51]);\n        dst[46] = decodeFloat16(src[55]);\n        dst[47] = decodeFloat16(src[60]);\n        dst[48] = decodeFloat16(src[21]);\n        dst[49] = decodeFloat16(src[34]);\n        dst[50] = decodeFloat16(src[37]);\n        dst[51] = decodeFloat16(src[47]);\n        dst[52] = decodeFloat16(src[50]);\n        dst[53] = decodeFloat16(src[56]);\n        dst[54] = decodeFloat16(src[59]);\n        dst[55] = decodeFloat16(src[61]);\n        dst[56] = decodeFloat16(src[35]);\n        dst[57] = decodeFloat16(src[36]);\n        dst[58] = decodeFloat16(src[48]);\n        dst[59] = decodeFloat16(src[49]);\n        dst[60] = decodeFloat16(src[57]);\n        dst[61] = decodeFloat16(src[58]);\n        dst[62] = decodeFloat16(src[62]);\n        dst[63] = decodeFloat16(src[63]);\n      }\n\n      function dctInverse(data) {\n        var a = 0.5 * Math.cos(3.14159 / 4.0);\n        var b = 0.5 * Math.cos(3.14159 / 16.0);\n        var c = 0.5 * Math.cos(3.14159 / 8.0);\n        var d = 0.5 * Math.cos(3.0 * 3.14159 / 16.0);\n        var e = 0.5 * Math.cos(5.0 * 3.14159 / 16.0);\n        var f = 0.5 * Math.cos(3.0 * 3.14159 / 8.0);\n        var g = 0.5 * Math.cos(7.0 * 3.14159 / 16.0);\n        var alpha = new Array(4);\n        var beta = new Array(4);\n        var theta = new Array(4);\n        var gamma = new Array(4);\n\n        for (var row = 0; row < 8; ++row) {\n          var rowPtr = row * 8;\n          alpha[0] = c * data[rowPtr + 2];\n          alpha[1] = f * data[rowPtr + 2];\n          alpha[2] = c * data[rowPtr + 6];\n          alpha[3] = f * data[rowPtr + 6];\n          beta[0] = b * data[rowPtr + 1] + d * data[rowPtr + 3] + e * data[rowPtr + 5] + g * data[rowPtr + 7];\n          beta[1] = d * data[rowPtr + 1] - g * data[rowPtr + 3] - b * data[rowPtr + 5] - e * data[rowPtr + 7];\n          beta[2] = e * data[rowPtr + 1] - b * data[rowPtr + 3] + g * data[rowPtr + 5] + d * data[rowPtr + 7];\n          beta[3] = g * data[rowPtr + 1] - e * data[rowPtr + 3] + d * data[rowPtr + 5] - b * data[rowPtr + 7];\n          theta[0] = a * (data[rowPtr + 0] + data[rowPtr + 4]);\n          theta[3] = a * (data[rowPtr + 0] - data[rowPtr + 4]);\n          theta[1] = alpha[0] + alpha[3];\n          theta[2] = alpha[1] - alpha[2];\n          gamma[0] = theta[0] + theta[1];\n          gamma[1] = theta[3] + theta[2];\n          gamma[2] = theta[3] - theta[2];\n          gamma[3] = theta[0] - theta[1];\n          data[rowPtr + 0] = gamma[0] + beta[0];\n          data[rowPtr + 1] = gamma[1] + beta[1];\n          data[rowPtr + 2] = gamma[2] + beta[2];\n          data[rowPtr + 3] = gamma[3] + beta[3];\n          data[rowPtr + 4] = gamma[3] - beta[3];\n          data[rowPtr + 5] = gamma[2] - beta[2];\n          data[rowPtr + 6] = gamma[1] - beta[1];\n          data[rowPtr + 7] = gamma[0] - beta[0];\n        }\n\n        for (var column = 0; column < 8; ++column) {\n          alpha[0] = c * data[16 + column];\n          alpha[1] = f * data[16 + column];\n          alpha[2] = c * data[48 + column];\n          alpha[3] = f * data[48 + column];\n          beta[0] = b * data[8 + column] + d * data[24 + column] + e * data[40 + column] + g * data[56 + column];\n          beta[1] = d * data[8 + column] - g * data[24 + column] - b * data[40 + column] - e * data[56 + column];\n          beta[2] = e * data[8 + column] - b * data[24 + column] + g * data[40 + column] + d * data[56 + column];\n          beta[3] = g * data[8 + column] - e * data[24 + column] + d * data[40 + column] - b * data[56 + column];\n          theta[0] = a * (data[column] + data[32 + column]);\n          theta[3] = a * (data[column] - data[32 + column]);\n          theta[1] = alpha[0] + alpha[3];\n          theta[2] = alpha[1] - alpha[2];\n          gamma[0] = theta[0] + theta[1];\n          gamma[1] = theta[3] + theta[2];\n          gamma[2] = theta[3] - theta[2];\n          gamma[3] = theta[0] - theta[1];\n          data[0 + column] = gamma[0] + beta[0];\n          data[8 + column] = gamma[1] + beta[1];\n          data[16 + column] = gamma[2] + beta[2];\n          data[24 + column] = gamma[3] + beta[3];\n          data[32 + column] = gamma[3] - beta[3];\n          data[40 + column] = gamma[2] - beta[2];\n          data[48 + column] = gamma[1] - beta[1];\n          data[56 + column] = gamma[0] - beta[0];\n        }\n      }\n\n      function csc709Inverse(data) {\n        for (var i = 0; i < 64; ++i) {\n          var y = data[0][i];\n          var cb = data[1][i];\n          var cr = data[2][i];\n          data[0][i] = y + 1.5747 * cr;\n          data[1][i] = y - 0.1873 * cb - 0.4682 * cr;\n          data[2][i] = y + 1.8556 * cb;\n        }\n      }\n\n      function convertToHalf(src, dst, idx) {\n        for (var i = 0; i < 64; ++i) {\n          dst[idx + i] = DataUtils.toHalfFloat(toLinear(src[i]));\n        }\n      }\n\n      function toLinear(float) {\n        if (float <= 1) {\n          return Math.sign(float) * Math.pow(Math.abs(float), 2.2);\n        } else {\n          return Math.sign(float) * Math.pow(logBase, Math.abs(float) - 1.0);\n        }\n      }\n\n      function uncompressRAW(info) {\n        return new DataView(info.array.buffer, info.offset.value, info.size);\n      }\n\n      function uncompressRLE(info) {\n        var compressed = info.viewer.buffer.slice(info.offset.value, info.offset.value + info.size);\n        var rawBuffer = new Uint8Array(decodeRunLength(compressed));\n        var tmpBuffer = new Uint8Array(rawBuffer.length);\n        predictor(rawBuffer); // revert predictor\n\n        interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n        return new DataView(tmpBuffer.buffer);\n      }\n\n      function uncompressZIP(info) {\n        var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n        var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n        var tmpBuffer = new Uint8Array(rawBuffer.length);\n        predictor(rawBuffer); // revert predictor\n\n        interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n        return new DataView(tmpBuffer.buffer);\n      }\n\n      function uncompressPIZ(info) {\n        var inDataView = info.viewer;\n        var inOffset = {\n          value: info.offset.value\n        };\n        var tmpBufSize = info.width * scanlineBlockSize * (EXRHeader.channels.length * info.type);\n        var outBuffer = new Uint16Array(tmpBufSize);\n        var bitmap = new Uint8Array(BITMAP_SIZE); // Setup channel info\n\n        var outBufferEnd = 0;\n        var pizChannelData = new Array(info.channels);\n\n        for (var i = 0; i < info.channels; i++) {\n          pizChannelData[i] = {};\n          pizChannelData[i]['start'] = outBufferEnd;\n          pizChannelData[i]['end'] = pizChannelData[i]['start'];\n          pizChannelData[i]['nx'] = info.width;\n          pizChannelData[i]['ny'] = info.lines;\n          pizChannelData[i]['size'] = info.type;\n          outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size;\n        } // Read range compression data\n\n\n        var minNonZero = parseUint16(inDataView, inOffset);\n        var maxNonZero = parseUint16(inDataView, inOffset);\n\n        if (maxNonZero >= BITMAP_SIZE) {\n          throw 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE';\n        }\n\n        if (minNonZero <= maxNonZero) {\n          for (var i = 0; i < maxNonZero - minNonZero + 1; i++) {\n            bitmap[i + minNonZero] = parseUint8(inDataView, inOffset);\n          }\n        } // Reverse LUT\n\n\n        var lut = new Uint16Array(USHORT_RANGE);\n        var maxValue = reverseLutFromBitmap(bitmap, lut);\n        var length = parseUint32(inDataView, inOffset); // Huffman decoding\n\n        hufUncompress(info.array, inDataView, inOffset, length, outBuffer, outBufferEnd); // Wavelet decoding\n\n        for (var i = 0; i < info.channels; ++i) {\n          var cd = pizChannelData[i];\n\n          for (var j = 0; j < pizChannelData[i].size; ++j) {\n            wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue);\n          }\n        } // Expand the pixel data to their original range\n\n\n        applyLut(lut, outBuffer, outBufferEnd); // Rearrange the pixel data into the format expected by the caller.\n\n        var tmpOffset = 0;\n        var tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength);\n\n        for (var y = 0; y < info.lines; y++) {\n          for (var c = 0; c < info.channels; c++) {\n            var cd = pizChannelData[c];\n            var n = cd.nx * cd.size;\n            var cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE);\n            tmpBuffer.set(cp, tmpOffset);\n            tmpOffset += n * INT16_SIZE;\n            cd.end += n;\n          }\n        }\n\n        return new DataView(tmpBuffer.buffer);\n      }\n\n      function uncompressPXR(info) {\n        var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n        var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n        var sz = info.lines * info.channels * info.width;\n        var tmpBuffer = info.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz);\n        var tmpBufferEnd = 0;\n        var writePtr = 0;\n        var ptr = new Array(4);\n\n        for (var y = 0; y < info.lines; y++) {\n          for (var c = 0; c < info.channels; c++) {\n            var pixel = 0;\n\n            switch (info.type) {\n              case 1:\n                ptr[0] = tmpBufferEnd;\n                ptr[1] = ptr[0] + info.width;\n                tmpBufferEnd = ptr[1] + info.width;\n\n                for (var j = 0; j < info.width; ++j) {\n                  var diff = rawBuffer[ptr[0]++] << 8 | rawBuffer[ptr[1]++];\n                  pixel += diff;\n                  tmpBuffer[writePtr] = pixel;\n                  writePtr++;\n                }\n\n                break;\n\n              case 2:\n                ptr[0] = tmpBufferEnd;\n                ptr[1] = ptr[0] + info.width;\n                ptr[2] = ptr[1] + info.width;\n                tmpBufferEnd = ptr[2] + info.width;\n\n                for (var _j = 0; _j < info.width; ++_j) {\n                  var _diff = rawBuffer[ptr[0]++] << 24 | rawBuffer[ptr[1]++] << 16 | rawBuffer[ptr[2]++] << 8;\n\n                  pixel += _diff;\n                  tmpBuffer[writePtr] = pixel;\n                  writePtr++;\n                }\n\n                break;\n            }\n          }\n        }\n\n        return new DataView(tmpBuffer.buffer);\n      }\n\n      function uncompressDWA(info) {\n        var inDataView = info.viewer;\n        var inOffset = {\n          value: info.offset.value\n        };\n        var outBuffer = new Uint8Array(info.width * info.lines * (EXRHeader.channels.length * info.type * INT16_SIZE)); // Read compression header information\n\n        var dwaHeader = {\n          version: parseInt64(inDataView, inOffset),\n          unknownUncompressedSize: parseInt64(inDataView, inOffset),\n          unknownCompressedSize: parseInt64(inDataView, inOffset),\n          acCompressedSize: parseInt64(inDataView, inOffset),\n          dcCompressedSize: parseInt64(inDataView, inOffset),\n          rleCompressedSize: parseInt64(inDataView, inOffset),\n          rleUncompressedSize: parseInt64(inDataView, inOffset),\n          rleRawSize: parseInt64(inDataView, inOffset),\n          totalAcUncompressedCount: parseInt64(inDataView, inOffset),\n          totalDcUncompressedCount: parseInt64(inDataView, inOffset),\n          acCompression: parseInt64(inDataView, inOffset)\n        };\n\n        if (dwaHeader.version < 2) {\n          throw 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported';\n        } // Read channel ruleset information\n\n\n        var channelRules = new Array();\n        var ruleSize = parseUint16(inDataView, inOffset) - INT16_SIZE;\n\n        while (ruleSize > 0) {\n          var name = parseNullTerminatedString(inDataView.buffer, inOffset);\n          var value = parseUint8(inDataView, inOffset);\n          var compression = value >> 2 & 3;\n          var csc = (value >> 4) - 1;\n          var index = new Int8Array([csc])[0];\n          var type = parseUint8(inDataView, inOffset);\n          channelRules.push({\n            name: name,\n            index: index,\n            type: type,\n            compression: compression\n          });\n          ruleSize -= name.length + 3;\n        } // Classify channels\n\n\n        var channels = EXRHeader.channels;\n        var channelData = new Array(info.channels);\n\n        for (var i = 0; i < info.channels; ++i) {\n          var cd = channelData[i] = {};\n          var channel = channels[i];\n          cd.name = channel.name;\n          cd.compression = UNKNOWN;\n          cd.decoded = false;\n          cd.type = channel.pixelType;\n          cd.pLinear = channel.pLinear;\n          cd.width = info.width;\n          cd.height = info.lines;\n        }\n\n        var cscSet = {\n          idx: new Array(3)\n        };\n\n        for (var offset = 0; offset < info.channels; ++offset) {\n          var cd = channelData[offset];\n\n          for (var i = 0; i < channelRules.length; ++i) {\n            var rule = channelRules[i];\n\n            if (cd.name == rule.name) {\n              cd.compression = rule.compression;\n\n              if (rule.index >= 0) {\n                cscSet.idx[rule.index] = offset;\n              }\n\n              cd.offset = offset;\n            }\n          }\n        } // Read DCT - AC component data\n\n\n        if (dwaHeader.acCompressedSize > 0) {\n          switch (dwaHeader.acCompression) {\n            case STATIC_HUFFMAN:\n              var acBuffer = new Uint16Array(dwaHeader.totalAcUncompressedCount);\n              hufUncompress(info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount);\n              break;\n\n            case DEFLATE:\n              var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount);\n              var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n              var acBuffer = new Uint16Array(data.buffer);\n              inOffset.value += dwaHeader.totalAcUncompressedCount;\n              break;\n          }\n        } // Read DCT - DC component data\n\n\n        if (dwaHeader.dcCompressedSize > 0) {\n          var zlibInfo = {\n            array: info.array,\n            offset: inOffset,\n            size: dwaHeader.dcCompressedSize\n          };\n          var dcBuffer = new Uint16Array(uncompressZIP(zlibInfo).buffer);\n          inOffset.value += dwaHeader.dcCompressedSize;\n        } // Read RLE compressed data\n\n\n        if (dwaHeader.rleRawSize > 0) {\n          var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.rleCompressedSize);\n          var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n          var rleBuffer = decodeRunLength(data.buffer);\n          inOffset.value += dwaHeader.rleCompressedSize;\n        } // Prepare outbuffer data offset\n\n\n        var outBufferEnd = 0;\n        var rowOffsets = new Array(channelData.length);\n\n        for (var i = 0; i < rowOffsets.length; ++i) {\n          rowOffsets[i] = new Array();\n        }\n\n        for (var y = 0; y < info.lines; ++y) {\n          for (var chan = 0; chan < channelData.length; ++chan) {\n            rowOffsets[chan].push(outBufferEnd);\n            outBufferEnd += channelData[chan].width * info.type * INT16_SIZE;\n          }\n        } // Lossy DCT decode RGB channels\n\n\n        lossyDctDecode(cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer); // Decode other channels\n\n        for (var i = 0; i < channelData.length; ++i) {\n          var cd = channelData[i];\n          if (cd.decoded) continue;\n\n          switch (cd.compression) {\n            case RLE:\n              var row = 0;\n              var rleOffset = 0;\n\n              for (var y = 0; y < info.lines; ++y) {\n                var rowOffsetBytes = rowOffsets[i][row];\n\n                for (var x = 0; x < cd.width; ++x) {\n                  for (var byte = 0; byte < INT16_SIZE * cd.type; ++byte) {\n                    outBuffer[rowOffsetBytes++] = rleBuffer[rleOffset + byte * cd.width * cd.height];\n                  }\n\n                  rleOffset++;\n                }\n\n                row++;\n              }\n\n              break;\n\n            case LOSSY_DCT: // skip\n\n            default:\n              throw 'EXRLoader.parse: unsupported channel compression';\n          }\n        }\n\n        return new DataView(outBuffer.buffer);\n      }\n\n      function parseNullTerminatedString(buffer, offset) {\n        var uintBuffer = new Uint8Array(buffer);\n        var endOffset = 0;\n\n        while (uintBuffer[offset.value + endOffset] != 0) {\n          endOffset += 1;\n        }\n\n        var stringValue = new TextDecoder().decode(uintBuffer.slice(offset.value, offset.value + endOffset));\n        offset.value = offset.value + endOffset + 1;\n        return stringValue;\n      }\n\n      function parseFixedLengthString(buffer, offset, size) {\n        var stringValue = new TextDecoder().decode(new Uint8Array(buffer).slice(offset.value, offset.value + size));\n        offset.value = offset.value + size;\n        return stringValue;\n      }\n\n      function parseUlong(dataView, offset) {\n        var uLong = dataView.getUint32(0, true);\n        offset.value = offset.value + ULONG_SIZE;\n        return uLong;\n      }\n\n      function parseRational(dataView, offset) {\n        var x = parseInt32(dataView, offset);\n        var y = parseUint32(dataView, offset);\n        return [x, y];\n      }\n\n      function parseTimecode(dataView, offset) {\n        var x = parseUint32(dataView, offset);\n        var y = parseUint32(dataView, offset);\n        return [x, y];\n      }\n\n      function parseInt32(dataView, offset) {\n        var Int32 = dataView.getInt32(offset.value, true);\n        offset.value = offset.value + INT32_SIZE;\n        return Int32;\n      }\n\n      function parseUint32(dataView, offset) {\n        var Uint32 = dataView.getUint32(offset.value, true);\n        offset.value = offset.value + INT32_SIZE;\n        return Uint32;\n      }\n\n      function parseUint8Array(uInt8Array, offset) {\n        var Uint8 = uInt8Array[offset.value];\n        offset.value = offset.value + INT8_SIZE;\n        return Uint8;\n      }\n\n      function parseUint8(dataView, offset) {\n        var Uint8 = dataView.getUint8(offset.value);\n        offset.value = offset.value + INT8_SIZE;\n        return Uint8;\n      }\n\n      function parseInt64(dataView, offset) {\n        var int = Number(dataView.getBigInt64(offset.value, true));\n        offset.value += ULONG_SIZE;\n        return int;\n      }\n\n      function parseFloat32(dataView, offset) {\n        var float = dataView.getFloat32(offset.value, true);\n        offset.value += FLOAT32_SIZE;\n        return float;\n      }\n\n      function decodeFloat32(dataView, offset) {\n        return DataUtils.toHalfFloat(parseFloat32(dataView, offset));\n      } // https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\n\n      function decodeFloat16(binary) {\n        var exponent = (binary & 0x7c00) >> 10,\n            fraction = binary & 0x03ff;\n        return (binary >> 15 ? -1 : 1) * (exponent ? exponent === 0x1f ? fraction ? NaN : Infinity : Math.pow(2, exponent - 15) * (1 + fraction / 0x400) : 6.103515625e-5 * (fraction / 0x400));\n      }\n\n      function parseUint16(dataView, offset) {\n        var Uint16 = dataView.getUint16(offset.value, true);\n        offset.value += INT16_SIZE;\n        return Uint16;\n      }\n\n      function parseFloat16(buffer, offset) {\n        return decodeFloat16(parseUint16(buffer, offset));\n      }\n\n      function parseChlist(dataView, buffer, offset, size) {\n        var startOffset = offset.value;\n        var channels = [];\n\n        while (offset.value < startOffset + size - 1) {\n          var name = parseNullTerminatedString(buffer, offset);\n          var pixelType = parseInt32(dataView, offset);\n          var pLinear = parseUint8(dataView, offset);\n          offset.value += 3; // reserved, three chars\n\n          var xSampling = parseInt32(dataView, offset);\n          var ySampling = parseInt32(dataView, offset);\n          channels.push({\n            name: name,\n            pixelType: pixelType,\n            pLinear: pLinear,\n            xSampling: xSampling,\n            ySampling: ySampling\n          });\n        }\n\n        offset.value += 1;\n        return channels;\n      }\n\n      function parseChromaticities(dataView, offset) {\n        var redX = parseFloat32(dataView, offset);\n        var redY = parseFloat32(dataView, offset);\n        var greenX = parseFloat32(dataView, offset);\n        var greenY = parseFloat32(dataView, offset);\n        var blueX = parseFloat32(dataView, offset);\n        var blueY = parseFloat32(dataView, offset);\n        var whiteX = parseFloat32(dataView, offset);\n        var whiteY = parseFloat32(dataView, offset);\n        return {\n          redX: redX,\n          redY: redY,\n          greenX: greenX,\n          greenY: greenY,\n          blueX: blueX,\n          blueY: blueY,\n          whiteX: whiteX,\n          whiteY: whiteY\n        };\n      }\n\n      function parseCompression(dataView, offset) {\n        var compressionCodes = ['NO_COMPRESSION', 'RLE_COMPRESSION', 'ZIPS_COMPRESSION', 'ZIP_COMPRESSION', 'PIZ_COMPRESSION', 'PXR24_COMPRESSION', 'B44_COMPRESSION', 'B44A_COMPRESSION', 'DWAA_COMPRESSION', 'DWAB_COMPRESSION'];\n        var compression = parseUint8(dataView, offset);\n        return compressionCodes[compression];\n      }\n\n      function parseBox2i(dataView, offset) {\n        var xMin = parseUint32(dataView, offset);\n        var yMin = parseUint32(dataView, offset);\n        var xMax = parseUint32(dataView, offset);\n        var yMax = parseUint32(dataView, offset);\n        return {\n          xMin: xMin,\n          yMin: yMin,\n          xMax: xMax,\n          yMax: yMax\n        };\n      }\n\n      function parseLineOrder(dataView, offset) {\n        var lineOrders = ['INCREASING_Y'];\n        var lineOrder = parseUint8(dataView, offset);\n        return lineOrders[lineOrder];\n      }\n\n      function parseV2f(dataView, offset) {\n        var x = parseFloat32(dataView, offset);\n        var y = parseFloat32(dataView, offset);\n        return [x, y];\n      }\n\n      function parseV3f(dataView, offset) {\n        var x = parseFloat32(dataView, offset);\n        var y = parseFloat32(dataView, offset);\n        var z = parseFloat32(dataView, offset);\n        return [x, y, z];\n      }\n\n      function parseValue(dataView, buffer, offset, type, size) {\n        if (type === 'string' || type === 'stringvector' || type === 'iccProfile') {\n          return parseFixedLengthString(buffer, offset, size);\n        } else if (type === 'chlist') {\n          return parseChlist(dataView, buffer, offset, size);\n        } else if (type === 'chromaticities') {\n          return parseChromaticities(dataView, offset);\n        } else if (type === 'compression') {\n          return parseCompression(dataView, offset);\n        } else if (type === 'box2i') {\n          return parseBox2i(dataView, offset);\n        } else if (type === 'lineOrder') {\n          return parseLineOrder(dataView, offset);\n        } else if (type === 'float') {\n          return parseFloat32(dataView, offset);\n        } else if (type === 'v2f') {\n          return parseV2f(dataView, offset);\n        } else if (type === 'v3f') {\n          return parseV3f(dataView, offset);\n        } else if (type === 'int') {\n          return parseInt32(dataView, offset);\n        } else if (type === 'rational') {\n          return parseRational(dataView, offset);\n        } else if (type === 'timecode') {\n          return parseTimecode(dataView, offset);\n        } else if (type === 'preview') {\n          offset.value += size;\n          return 'skipped';\n        } else {\n          offset.value += size;\n          return undefined;\n        }\n      }\n\n      var bufferDataView = new DataView(buffer);\n      var uInt8Array = new Uint8Array(buffer);\n      var EXRHeader = {};\n      bufferDataView.getUint32(0, true); // magic\n\n      bufferDataView.getUint8(4, true); // versionByteZero\n\n      bufferDataView.getUint8(5, true); // fullMask\n      // start of header\n\n      var offset = {\n        value: 8\n      }; // start at 8, after magic stuff\n\n      var keepReading = true;\n\n      while (keepReading) {\n        var attributeName = parseNullTerminatedString(buffer, offset);\n\n        if (attributeName == 0) {\n          keepReading = false;\n        } else {\n          var attributeType = parseNullTerminatedString(buffer, offset);\n          var attributeSize = parseUint32(bufferDataView, offset);\n          var attributeValue = parseValue(bufferDataView, buffer, offset, attributeType, attributeSize);\n\n          if (attributeValue === undefined) {\n            console.warn(\"EXRLoader.parse: skipped unknown header attribute type '\".concat(attributeType, \"'.\"));\n          } else {\n            EXRHeader[attributeName] = attributeValue;\n          }\n        }\n      } // offsets\n\n\n      var dataWindowHeight = EXRHeader.dataWindow.yMax + 1;\n      var uncompress;\n      var scanlineBlockSize;\n\n      switch (EXRHeader.compression) {\n        case 'NO_COMPRESSION':\n          scanlineBlockSize = 1;\n          uncompress = uncompressRAW;\n          break;\n\n        case 'RLE_COMPRESSION':\n          scanlineBlockSize = 1;\n          uncompress = uncompressRLE;\n          break;\n\n        case 'ZIPS_COMPRESSION':\n          scanlineBlockSize = 1;\n          uncompress = uncompressZIP;\n          break;\n\n        case 'ZIP_COMPRESSION':\n          scanlineBlockSize = 16;\n          uncompress = uncompressZIP;\n          break;\n\n        case 'PIZ_COMPRESSION':\n          scanlineBlockSize = 32;\n          uncompress = uncompressPIZ;\n          break;\n\n        case 'PXR24_COMPRESSION':\n          scanlineBlockSize = 16;\n          uncompress = uncompressPXR;\n          break;\n\n        case 'DWAA_COMPRESSION':\n          scanlineBlockSize = 32;\n          uncompress = uncompressDWA;\n          break;\n\n        case 'DWAB_COMPRESSION':\n          scanlineBlockSize = 256;\n          uncompress = uncompressDWA;\n          break;\n\n        default:\n          throw 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported';\n      }\n\n      var size_t;\n      var getValue; // mixed pixelType not supported\n\n      var pixelType = EXRHeader.channels[0].pixelType;\n\n      if (pixelType === 1) {\n        // half\n        switch (this.type) {\n          case UnsignedByteType:\n          case FloatType:\n            getValue = parseFloat16;\n            size_t = INT16_SIZE;\n            break;\n\n          case HalfFloatType:\n            getValue = parseUint16;\n            size_t = INT16_SIZE;\n            break;\n        }\n      } else if (pixelType === 2) {\n        // float\n        switch (this.type) {\n          case UnsignedByteType:\n          case FloatType:\n            getValue = parseFloat32;\n            size_t = FLOAT32_SIZE;\n            break;\n\n          case HalfFloatType:\n            getValue = decodeFloat32;\n            size_t = FLOAT32_SIZE;\n        }\n      } else {\n        throw 'EXRLoader.parse: unsupported pixelType ' + pixelType + ' for ' + EXRHeader.compression + '.';\n      }\n\n      var numBlocks = dataWindowHeight / scanlineBlockSize;\n\n      for (var i = 0; i < numBlocks; i++) {\n        parseUlong(bufferDataView, offset); // scanlineOffset\n      } // we should be passed the scanline offset table, start reading pixel data\n\n\n      var width = EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1;\n      var height = EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1; // Firefox only supports RGBA (half) float textures\n      // var numChannels = EXRHeader.channels.length;\n\n      var numChannels = 4;\n      var size = width * height * numChannels; // Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\n      switch (this.type) {\n        case UnsignedByteType:\n        case FloatType:\n          var byteArray = new Float32Array(size);\n\n          if (EXRHeader.channels.length < numChannels) {\n            byteArray.fill(1, 0, size);\n          }\n\n          break;\n\n        case HalfFloatType:\n          var byteArray = new Uint16Array(size);\n\n          if (EXRHeader.channels.length < numChannels) {\n            byteArray.fill(0x3c00, 0, size); // Uint16Array holds half float data, 0x3C00 is 1\n          }\n\n          break;\n\n        default:\n          console.error('THREE.EXRLoader: unsupported type: ', this.type);\n          break;\n      }\n\n      var channelOffsets = {\n        R: 0,\n        G: 1,\n        B: 2,\n        A: 3\n      };\n      var compressionInfo = {\n        size: 0,\n        width: width,\n        lines: scanlineBlockSize,\n        offset: offset,\n        array: uInt8Array,\n        viewer: bufferDataView,\n        type: pixelType,\n        channels: EXRHeader.channels.length\n      };\n      var line;\n      var size;\n      var viewer;\n      var tmpOffset = {\n        value: 0\n      };\n\n      for (var scanlineBlockIdx = 0; scanlineBlockIdx < height / scanlineBlockSize; scanlineBlockIdx++) {\n        line = parseUint32(bufferDataView, offset); // line_no\n\n        size = parseUint32(bufferDataView, offset); // data_len\n\n        compressionInfo.lines = line + scanlineBlockSize > height ? height - line : scanlineBlockSize;\n        compressionInfo.offset = offset;\n        compressionInfo.size = size;\n        viewer = uncompress(compressionInfo);\n        offset.value += size;\n\n        for (var line_y = 0; line_y < scanlineBlockSize; line_y++) {\n          var true_y = line_y + scanlineBlockIdx * scanlineBlockSize;\n          if (true_y >= height) break;\n\n          for (var channelID = 0; channelID < EXRHeader.channels.length; channelID++) {\n            var cOff = channelOffsets[EXRHeader.channels[channelID].name];\n\n            for (var x = 0; x < width; x++) {\n              var idx = line_y * (EXRHeader.channels.length * width) + channelID * width + x;\n              tmpOffset.value = idx * size_t;\n              var val = getValue(viewer, tmpOffset);\n              byteArray[(height - 1 - true_y) * (width * numChannels) + x * numChannels + cOff] = val;\n            }\n          }\n        }\n      }\n\n      if (this.type === UnsignedByteType) {\n        var v, _i;\n\n        var _size = byteArray.length;\n        var RGBEArray = new Uint8Array(_size);\n\n        for (var h = 0; h < height; ++h) {\n          for (var w = 0; w < width; ++w) {\n            _i = h * width * 4 + w * 4;\n            var red = byteArray[_i];\n            var green = byteArray[_i + 1];\n            var blue = byteArray[_i + 2];\n            v = red > green ? red : green;\n            v = blue > v ? blue : v;\n\n            if (v < 1e-32) {\n              RGBEArray[_i] = RGBEArray[_i + 1] = RGBEArray[_i + 2] = RGBEArray[_i + 3] = 0;\n            } else {\n              var res = frexp(v);\n              v = res[0] * 256 / v;\n              RGBEArray[_i] = red * v;\n              RGBEArray[_i + 1] = green * v;\n              RGBEArray[_i + 2] = blue * v;\n              RGBEArray[_i + 3] = res[1] + 128;\n            }\n          }\n        }\n\n        byteArray = RGBEArray;\n      }\n\n      var format = this.type === UnsignedByteType ? RGBEFormat : RGBAFormat;\n      return {\n        header: EXRHeader,\n        width: width,\n        height: height,\n        data: byteArray,\n        format: format,\n        type: this.type\n      };\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      function onLoadCallback(texture, texData) {\n        switch (texture.type) {\n          case UnsignedByteType:\n            texture.encoding = RGBEEncoding;\n            texture.minFilter = NearestFilter;\n            texture.magFilter = NearestFilter;\n            texture.generateMipmaps = false;\n            texture.flipY = false;\n            break;\n\n          case FloatType:\n          case HalfFloatType:\n            texture.encoding = LinearEncoding;\n            texture.minFilter = LinearFilter;\n            texture.magFilter = LinearFilter;\n            texture.generateMipmaps = false;\n            texture.flipY = false;\n            break;\n        }\n\n        if (onLoad) onLoad(texture, texData);\n      }\n\n      return _get(_getPrototypeOf(EXRLoader.prototype), \"load\", this).call(this, url, onLoadCallback, onProgress, onError);\n    }\n  }]);\n\n  return EXRLoader;\n}(DataTextureLoader);\n\nexport { EXRLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/EXRLoader.js"],"names":["DataTextureLoader","FloatType","HalfFloatType","UnsignedByteType","RGBEFormat","RGBAFormat","LinearEncoding","LinearFilter","RGBEEncoding","NearestFilter","DataUtils","unzlibSync","EXRLoader","manager","type","buffer","USHORT_RANGE","BITMAP_SIZE","HUF_ENCBITS","HUF_DECBITS","HUF_ENCSIZE","HUF_DECSIZE","HUF_DECMASK","NBITS","A_OFFSET","MOD_MASK","SHORT_ZEROCODE_RUN","LONG_ZEROCODE_RUN","SHORTEST_LONG_RUN","ULONG_SIZE","FLOAT32_SIZE","INT32_SIZE","INT16_SIZE","INT8_SIZE","STATIC_HUFFMAN","DEFLATE","UNKNOWN","LOSSY_DCT","RLE","logBase","Math","pow","tmpDataView","DataView","ArrayBuffer","frexp","value","setFloat64","bits","getUint32","exponent","mantissa","ldexp","steps","min","ceil","abs","result","i","floor","reverseLutFromBitmap","bitmap","lut","k","n","hufClearDecTable","hdec","len","lit","p","getBitsReturn","l","c","lc","getBits","nBits","uInt8Array","inOffset","parseUint8Array","hufTableBuffer","Array","hufCanonicalCodeTable","hcode","nc","hufUnpackEncTable","inDataView","ni","im","iM","zerun","hufLength","code","hufCode","hufBuildDecTable","hdecod","pl","plOffset","getCharReturn","getChar","getCodeReturn","getCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","cs","Uint8Array","s","UInt16","Int16","ref","wdec14Return","a","b","wdec14","h","ls","hs","hi","ai","as","bs","wdec16","m","d","bb","aa","wav2Decode","j","nx","ox","ny","oy","mx","w14","p2","py","ey","oy1","oy2","ox1","ox2","i00","i01","i10","i11","px","ex","p01","p10","p11","hufDecode","encodingTable","decodingTable","no","outOffset","inOffsetEnd","trunc","index","hufUncompress","nCompressed","nRaw","initialInOffset","parseUint32","freq","applyLut","data","nData","predictor","source","t","length","interleaveScalar","out","t1","t2","stop","decodeRunLength","size","byteLength","reader","getInt8","count","push","getUint8","lossyDctDecode","cscSet","rowPtrs","channelData","acBuffer","dcBuffer","dataView","width","idx","height","numComp","numFullBlocksX","numBlocksX","numBlocksY","leftoverX","leftoverY","currAcComp","currDcComp","dctData","halfZigBlock","rowBlock","rowOffsets","comp","Float32Array","Uint16Array","blocky","maxY","maxX","blockx","fill","unRleAC","unZigZag","dctInverse","csc709Inverse","convertToHalf","offset","y","src","setUint16","x","halfRow","decoded","getUint16","setFloat32","decodeFloat16","acValue","dctComp","dst","cos","e","f","g","alpha","beta","theta","gamma","row","rowPtr","column","cb","cr","toHalfFloat","toLinear","float","sign","uncompressRAW","info","array","uncompressRLE","compressed","viewer","slice","rawBuffer","tmpBuffer","uncompressZIP","uncompressPIZ","tmpBufSize","scanlineBlockSize","EXRHeader","channels","outBufferEnd","pizChannelData","lines","minNonZero","parseUint16","maxNonZero","parseUint8","maxValue","cd","start","tmpOffset","cp","end","set","uncompressPXR","sz","Uint32Array","tmpBufferEnd","writePtr","ptr","pixel","diff","uncompressDWA","dwaHeader","version","parseInt64","unknownUncompressedSize","unknownCompressedSize","acCompressedSize","dcCompressedSize","rleCompressedSize","rleUncompressedSize","rleRawSize","totalAcUncompressedCount","totalDcUncompressedCount","acCompression","compression","channelRules","ruleSize","name","parseNullTerminatedString","csc","Int8Array","channel","pixelType","pLinear","rule","zlibInfo","rleBuffer","chan","rleOffset","rowOffsetBytes","byte","uintBuffer","endOffset","stringValue","TextDecoder","decode","parseFixedLengthString","parseUlong","uLong","parseRational","parseInt32","parseTimecode","Int32","getInt32","Uint32","Uint8","int","Number","getBigInt64","parseFloat32","getFloat32","decodeFloat32","binary","fraction","NaN","Infinity","Uint16","parseFloat16","parseChlist","startOffset","xSampling","ySampling","parseChromaticities","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","parseCompression","compressionCodes","parseBox2i","xMin","yMin","xMax","yMax","parseLineOrder","lineOrders","lineOrder","parseV2f","parseV3f","z","parseValue","undefined","bufferDataView","keepReading","attributeName","attributeType","attributeSize","attributeValue","console","warn","dataWindowHeight","dataWindow","uncompress","size_t","getValue","numBlocks","numChannels","byteArray","error","channelOffsets","R","G","B","A","compressionInfo","line","scanlineBlockIdx","line_y","true_y","channelID","cOff","val","v","RGBEArray","w","red","green","blue","res","format","header","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","encoding","minFilter","magFilter","generateMipmaps","flipY"],"mappings":"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","sourcesContent":["import { DataTextureLoader, FloatType, HalfFloatType, UnsignedByteType, RGBEFormat, RGBAFormat, LinearEncoding, LinearFilter, RGBEEncoding, NearestFilter, DataUtils } from 'three';\nimport { unzlibSync } from 'fflate';\n\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n\nclass EXRLoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = FloatType;\n  }\n\n  parse(buffer) {\n    const USHORT_RANGE = 1 << 16;\n    const BITMAP_SIZE = USHORT_RANGE >> 3;\n    const HUF_ENCBITS = 16; // literal (value) bit length\n\n    const HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n    const HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1; // encoding table size\n\n    const HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\n    const HUF_DECMASK = HUF_DECSIZE - 1;\n    const NBITS = 16;\n    const A_OFFSET = 1 << NBITS - 1;\n    const MOD_MASK = (1 << NBITS) - 1;\n    const SHORT_ZEROCODE_RUN = 59;\n    const LONG_ZEROCODE_RUN = 63;\n    const SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n    const ULONG_SIZE = 8;\n    const FLOAT32_SIZE = 4;\n    const INT32_SIZE = 4;\n    const INT16_SIZE = 2;\n    const INT8_SIZE = 1;\n    const STATIC_HUFFMAN = 0;\n    const DEFLATE = 1;\n    const UNKNOWN = 0;\n    const LOSSY_DCT = 1;\n    const RLE = 2;\n    const logBase = Math.pow(2.7182818, 2.2);\n    var tmpDataView = new DataView(new ArrayBuffer(8));\n\n    function frexp(value) {\n      if (value === 0) return [value, 0];\n      tmpDataView.setFloat64(0, value);\n      var bits = tmpDataView.getUint32(0) >>> 20 & 0x7ff;\n\n      if (bits === 0) {\n        // denormal\n        tmpDataView.setFloat64(0, value * Math.pow(2, 64)); // exp + 64\n\n        bits = (tmpDataView.getUint32(0) >>> 20 & 0x7ff) - 64;\n      }\n\n      var exponent = bits - 1022;\n      var mantissa = ldexp(value, -exponent);\n      return [mantissa, exponent];\n    }\n\n    function ldexp(mantissa, exponent) {\n      var steps = Math.min(3, Math.ceil(Math.abs(exponent) / 1023));\n      var result = mantissa;\n\n      for (var i = 0; i < steps; i++) result *= Math.pow(2, Math.floor((exponent + i) / steps));\n\n      return result;\n    }\n\n    function reverseLutFromBitmap(bitmap, lut) {\n      var k = 0;\n\n      for (var i = 0; i < USHORT_RANGE; ++i) {\n        if (i == 0 || bitmap[i >> 3] & 1 << (i & 7)) {\n          lut[k++] = i;\n        }\n      }\n\n      var n = k - 1;\n\n      while (k < USHORT_RANGE) lut[k++] = 0;\n\n      return n;\n    }\n\n    function hufClearDecTable(hdec) {\n      for (var i = 0; i < HUF_DECSIZE; i++) {\n        hdec[i] = {};\n        hdec[i].len = 0;\n        hdec[i].lit = 0;\n        hdec[i].p = null;\n      }\n    }\n\n    const getBitsReturn = {\n      l: 0,\n      c: 0,\n      lc: 0\n    };\n\n    function getBits(nBits, c, lc, uInt8Array, inOffset) {\n      while (lc < nBits) {\n        c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n        lc += 8;\n      }\n\n      lc -= nBits;\n      getBitsReturn.l = c >> lc & (1 << nBits) - 1;\n      getBitsReturn.c = c;\n      getBitsReturn.lc = lc;\n    }\n\n    const hufTableBuffer = new Array(59);\n\n    function hufCanonicalCodeTable(hcode) {\n      for (var i = 0; i <= 58; ++i) hufTableBuffer[i] = 0;\n\n      for (var i = 0; i < HUF_ENCSIZE; ++i) hufTableBuffer[hcode[i]] += 1;\n\n      var c = 0;\n\n      for (var i = 58; i > 0; --i) {\n        var nc = c + hufTableBuffer[i] >> 1;\n        hufTableBuffer[i] = c;\n        c = nc;\n      }\n\n      for (var i = 0; i < HUF_ENCSIZE; ++i) {\n        var l = hcode[i];\n        if (l > 0) hcode[i] = l | hufTableBuffer[l]++ << 6;\n      }\n    }\n\n    function hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, hcode) {\n      var p = inOffset;\n      var c = 0;\n      var lc = 0;\n\n      for (; im <= iM; im++) {\n        if (p.value - inOffset.value > ni) return false;\n        getBits(6, c, lc, uInt8Array, p);\n        var l = getBitsReturn.l;\n        c = getBitsReturn.c;\n        lc = getBitsReturn.lc;\n        hcode[im] = l;\n\n        if (l == LONG_ZEROCODE_RUN) {\n          if (p.value - inOffset.value > ni) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          getBits(8, c, lc, uInt8Array, p);\n          var zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n          c = getBitsReturn.c;\n          lc = getBitsReturn.lc;\n\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          while (zerun--) hcode[im++] = 0;\n\n          im--;\n        } else if (l >= SHORT_ZEROCODE_RUN) {\n          var zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          while (zerun--) hcode[im++] = 0;\n\n          im--;\n        }\n      }\n\n      hufCanonicalCodeTable(hcode);\n    }\n\n    function hufLength(code) {\n      return code & 63;\n    }\n\n    function hufCode(code) {\n      return code >> 6;\n    }\n\n    function hufBuildDecTable(hcode, im, iM, hdecod) {\n      for (; im <= iM; im++) {\n        var c = hufCode(hcode[im]);\n        var l = hufLength(hcode[im]);\n\n        if (c >> l) {\n          throw 'Invalid table entry';\n        }\n\n        if (l > HUF_DECBITS) {\n          var pl = hdecod[c >> l - HUF_DECBITS];\n\n          if (pl.len) {\n            throw 'Invalid table entry';\n          }\n\n          pl.lit++;\n\n          if (pl.p) {\n            var p = pl.p;\n            pl.p = new Array(pl.lit);\n\n            for (var i = 0; i < pl.lit - 1; ++i) {\n              pl.p[i] = p[i];\n            }\n          } else {\n            pl.p = new Array(1);\n          }\n\n          pl.p[pl.lit - 1] = im;\n        } else if (l) {\n          var plOffset = 0;\n\n          for (var i = 1 << HUF_DECBITS - l; i > 0; i--) {\n            var pl = hdecod[(c << HUF_DECBITS - l) + plOffset];\n\n            if (pl.len || pl.p) {\n              throw 'Invalid table entry';\n            }\n\n            pl.len = l;\n            pl.lit = im;\n            plOffset++;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    const getCharReturn = {\n      c: 0,\n      lc: 0\n    };\n\n    function getChar(c, lc, uInt8Array, inOffset) {\n      c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n      lc += 8;\n      getCharReturn.c = c;\n      getCharReturn.lc = lc;\n    }\n\n    const getCodeReturn = {\n      c: 0,\n      lc: 0\n    };\n\n    function getCode(po, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outBufferOffset, outBufferEndOffset) {\n      if (po == rlc) {\n        if (lc < 8) {\n          getChar(c, lc, uInt8Array, inOffset);\n          c = getCharReturn.c;\n          lc = getCharReturn.lc;\n        }\n\n        lc -= 8;\n        var cs = c >> lc;\n        var cs = new Uint8Array([cs])[0];\n\n        if (outBufferOffset.value + cs > outBufferEndOffset) {\n          return false;\n        }\n\n        var s = outBuffer[outBufferOffset.value - 1];\n\n        while (cs-- > 0) {\n          outBuffer[outBufferOffset.value++] = s;\n        }\n      } else if (outBufferOffset.value < outBufferEndOffset) {\n        outBuffer[outBufferOffset.value++] = po;\n      } else {\n        return false;\n      }\n\n      getCodeReturn.c = c;\n      getCodeReturn.lc = lc;\n    }\n\n    function UInt16(value) {\n      return value & 0xffff;\n    }\n\n    function Int16(value) {\n      var ref = UInt16(value);\n      return ref > 0x7fff ? ref - 0x10000 : ref;\n    }\n\n    const wdec14Return = {\n      a: 0,\n      b: 0\n    };\n\n    function wdec14(l, h) {\n      var ls = Int16(l);\n      var hs = Int16(h);\n      var hi = hs;\n      var ai = ls + (hi & 1) + (hi >> 1);\n      var as = ai;\n      var bs = ai - hi;\n      wdec14Return.a = as;\n      wdec14Return.b = bs;\n    }\n\n    function wdec16(l, h) {\n      var m = UInt16(l);\n      var d = UInt16(h);\n      var bb = m - (d >> 1) & MOD_MASK;\n      var aa = d + bb - A_OFFSET & MOD_MASK;\n      wdec14Return.a = aa;\n      wdec14Return.b = bb;\n    }\n\n    function wav2Decode(buffer, j, nx, ox, ny, oy, mx) {\n      var w14 = mx < 1 << 14;\n      var n = nx > ny ? ny : nx;\n      var p = 1;\n      var p2;\n\n      while (p <= n) p <<= 1;\n\n      p >>= 1;\n      p2 = p;\n      p >>= 1;\n\n      while (p >= 1) {\n        var py = 0;\n        var ey = py + oy * (ny - p2);\n        var oy1 = oy * p;\n        var oy2 = oy * p2;\n        var ox1 = ox * p;\n        var ox2 = ox * p2;\n        var i00, i01, i10, i11;\n\n        for (; py <= ey; py += oy2) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            var p10 = px + oy1;\n            var p11 = p10 + ox1;\n\n            if (w14) {\n              wdec14(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec14(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec14(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec14(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            } else {\n              wdec16(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec16(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec16(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec16(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            }\n          }\n\n          if (nx & p) {\n            var p10 = px + oy1;\n            if (w14) wdec14(buffer[px + j], buffer[p10 + j]);else wdec16(buffer[px + j], buffer[p10 + j]);\n            i00 = wdec14Return.a;\n            buffer[p10 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n\n        if (ny & p) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            if (w14) wdec14(buffer[px + j], buffer[p01 + j]);else wdec16(buffer[px + j], buffer[p01 + j]);\n            i00 = wdec14Return.a;\n            buffer[p01 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n\n        p2 = p;\n        p >>= 1;\n      }\n\n      return py;\n    }\n\n    function hufDecode(encodingTable, decodingTable, uInt8Array, inDataView, inOffset, ni, rlc, no, outBuffer, outOffset) {\n      var c = 0;\n      var lc = 0;\n      var outBufferEndOffset = no;\n      var inOffsetEnd = Math.trunc(inOffset.value + (ni + 7) / 8);\n\n      while (inOffset.value < inOffsetEnd) {\n        getChar(c, lc, uInt8Array, inOffset);\n        c = getCharReturn.c;\n        lc = getCharReturn.lc;\n\n        while (lc >= HUF_DECBITS) {\n          var index = c >> lc - HUF_DECBITS & HUF_DECMASK;\n          var pl = decodingTable[index];\n\n          if (pl.len) {\n            lc -= pl.len;\n            getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n            c = getCodeReturn.c;\n            lc = getCodeReturn.lc;\n          } else {\n            if (!pl.p) {\n              throw 'hufDecode issues';\n            }\n\n            var j;\n\n            for (j = 0; j < pl.lit; j++) {\n              var l = hufLength(encodingTable[pl.p[j]]);\n\n              while (lc < l && inOffset.value < inOffsetEnd) {\n                getChar(c, lc, uInt8Array, inOffset);\n                c = getCharReturn.c;\n                lc = getCharReturn.lc;\n              }\n\n              if (lc >= l) {\n                if (hufCode(encodingTable[pl.p[j]]) == (c >> lc - l & (1 << l) - 1)) {\n                  lc -= l;\n                  getCode(pl.p[j], rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n                  c = getCodeReturn.c;\n                  lc = getCodeReturn.lc;\n                  break;\n                }\n              }\n            }\n\n            if (j == pl.lit) {\n              throw 'hufDecode issues';\n            }\n          }\n        }\n      }\n\n      var i = 8 - ni & 7;\n      c >>= i;\n      lc -= i;\n\n      while (lc > 0) {\n        var pl = decodingTable[c << HUF_DECBITS - lc & HUF_DECMASK];\n\n        if (pl.len) {\n          lc -= pl.len;\n          getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n          c = getCodeReturn.c;\n          lc = getCodeReturn.lc;\n        } else {\n          throw 'hufDecode issues';\n        }\n      }\n\n      return true;\n    }\n\n    function hufUncompress(uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw) {\n      var outOffset = {\n        value: 0\n      };\n      var initialInOffset = inOffset.value;\n      var im = parseUint32(inDataView, inOffset);\n      var iM = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n      var nBits = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n\n      if (im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE) {\n        throw 'Something wrong with HUF_ENCSIZE';\n      }\n\n      var freq = new Array(HUF_ENCSIZE);\n      var hdec = new Array(HUF_DECSIZE);\n      hufClearDecTable(hdec);\n      var ni = nCompressed - (inOffset.value - initialInOffset);\n      hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, freq);\n\n      if (nBits > 8 * (nCompressed - (inOffset.value - initialInOffset))) {\n        throw 'Something wrong with hufUncompress';\n      }\n\n      hufBuildDecTable(freq, im, iM, hdec);\n      hufDecode(freq, hdec, uInt8Array, inDataView, inOffset, nBits, iM, nRaw, outBuffer, outOffset);\n    }\n\n    function applyLut(lut, data, nData) {\n      for (var i = 0; i < nData; ++i) {\n        data[i] = lut[data[i]];\n      }\n    }\n\n    function predictor(source) {\n      for (var t = 1; t < source.length; t++) {\n        var d = source[t - 1] + source[t] - 128;\n        source[t] = d;\n      }\n    }\n\n    function interleaveScalar(source, out) {\n      var t1 = 0;\n      var t2 = Math.floor((source.length + 1) / 2);\n      var s = 0;\n      var stop = source.length - 1;\n\n      while (true) {\n        if (s > stop) break;\n        out[s++] = source[t1++];\n        if (s > stop) break;\n        out[s++] = source[t2++];\n      }\n    }\n\n    function decodeRunLength(source) {\n      var size = source.byteLength;\n      var out = new Array();\n      var p = 0;\n      var reader = new DataView(source);\n\n      while (size > 0) {\n        var l = reader.getInt8(p++);\n\n        if (l < 0) {\n          var count = -l;\n          size -= count + 1;\n\n          for (var i = 0; i < count; i++) {\n            out.push(reader.getUint8(p++));\n          }\n        } else {\n          var count = l;\n          size -= 2;\n          var value = reader.getUint8(p++);\n\n          for (var i = 0; i < count + 1; i++) {\n            out.push(value);\n          }\n        }\n      }\n\n      return out;\n    }\n\n    function lossyDctDecode(cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer) {\n      var dataView = new DataView(outBuffer.buffer);\n      var width = channelData[cscSet.idx[0]].width;\n      var height = channelData[cscSet.idx[0]].height;\n      var numComp = 3;\n      var numFullBlocksX = Math.floor(width / 8.0);\n      var numBlocksX = Math.ceil(width / 8.0);\n      var numBlocksY = Math.ceil(height / 8.0);\n      var leftoverX = width - (numBlocksX - 1) * 8;\n      var leftoverY = height - (numBlocksY - 1) * 8;\n      var currAcComp = {\n        value: 0\n      };\n      var currDcComp = new Array(numComp);\n      var dctData = new Array(numComp);\n      var halfZigBlock = new Array(numComp);\n      var rowBlock = new Array(numComp);\n      var rowOffsets = new Array(numComp);\n\n      for (let comp = 0; comp < numComp; ++comp) {\n        rowOffsets[comp] = rowPtrs[cscSet.idx[comp]];\n        currDcComp[comp] = comp < 1 ? 0 : currDcComp[comp - 1] + numBlocksX * numBlocksY;\n        dctData[comp] = new Float32Array(64);\n        halfZigBlock[comp] = new Uint16Array(64);\n        rowBlock[comp] = new Uint16Array(numBlocksX * 64);\n      }\n\n      for (let blocky = 0; blocky < numBlocksY; ++blocky) {\n        var maxY = 8;\n        if (blocky == numBlocksY - 1) maxY = leftoverY;\n        var maxX = 8;\n\n        for (let blockx = 0; blockx < numBlocksX; ++blockx) {\n          if (blockx == numBlocksX - 1) maxX = leftoverX;\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            halfZigBlock[comp].fill(0); // set block DC component\n\n            halfZigBlock[comp][0] = dcBuffer[currDcComp[comp]++]; // set block AC components\n\n            unRleAC(currAcComp, acBuffer, halfZigBlock[comp]); // UnZigZag block to float\n\n            unZigZag(halfZigBlock[comp], dctData[comp]); // decode float dct\n\n            dctInverse(dctData[comp]);\n          }\n\n          {\n            csc709Inverse(dctData);\n          }\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            convertToHalf(dctData[comp], rowBlock[comp], blockx * 64);\n          }\n        } // blockx\n\n\n        let offset = 0;\n\n        for (let comp = 0; comp < numComp; ++comp) {\n          const type = channelData[cscSet.idx[comp]].type;\n\n          for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n            offset = rowOffsets[comp][y];\n\n            for (let blockx = 0; blockx < numFullBlocksX; ++blockx) {\n              const src = blockx * 64 + (y & 0x7) * 8;\n              dataView.setUint16(offset + 0 * INT16_SIZE * type, rowBlock[comp][src + 0], true);\n              dataView.setUint16(offset + 1 * INT16_SIZE * type, rowBlock[comp][src + 1], true);\n              dataView.setUint16(offset + 2 * INT16_SIZE * type, rowBlock[comp][src + 2], true);\n              dataView.setUint16(offset + 3 * INT16_SIZE * type, rowBlock[comp][src + 3], true);\n              dataView.setUint16(offset + 4 * INT16_SIZE * type, rowBlock[comp][src + 4], true);\n              dataView.setUint16(offset + 5 * INT16_SIZE * type, rowBlock[comp][src + 5], true);\n              dataView.setUint16(offset + 6 * INT16_SIZE * type, rowBlock[comp][src + 6], true);\n              dataView.setUint16(offset + 7 * INT16_SIZE * type, rowBlock[comp][src + 7], true);\n              offset += 8 * INT16_SIZE * type;\n            }\n          } // handle partial X blocks\n\n\n          if (numFullBlocksX != numBlocksX) {\n            for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n              const offset = rowOffsets[comp][y] + 8 * numFullBlocksX * INT16_SIZE * type;\n              const src = numFullBlocksX * 64 + (y & 0x7) * 8;\n\n              for (let x = 0; x < maxX; ++x) {\n                dataView.setUint16(offset + x * INT16_SIZE * type, rowBlock[comp][src + x], true);\n              }\n            }\n          }\n        } // comp\n\n      } // blocky\n\n\n      var halfRow = new Uint16Array(width);\n      var dataView = new DataView(outBuffer.buffer); // convert channels back to float, if needed\n\n      for (var comp = 0; comp < numComp; ++comp) {\n        channelData[cscSet.idx[comp]].decoded = true;\n        var type = channelData[cscSet.idx[comp]].type;\n        if (channelData[comp].type != 2) continue;\n\n        for (var y = 0; y < height; ++y) {\n          const offset = rowOffsets[comp][y];\n\n          for (var x = 0; x < width; ++x) {\n            halfRow[x] = dataView.getUint16(offset + x * INT16_SIZE * type, true);\n          }\n\n          for (var x = 0; x < width; ++x) {\n            dataView.setFloat32(offset + x * INT16_SIZE * type, decodeFloat16(halfRow[x]), true);\n          }\n        }\n      }\n    }\n\n    function unRleAC(currAcComp, acBuffer, halfZigBlock) {\n      var acValue;\n      var dctComp = 1;\n\n      while (dctComp < 64) {\n        acValue = acBuffer[currAcComp.value];\n\n        if (acValue == 0xff00) {\n          dctComp = 64;\n        } else if (acValue >> 8 == 0xff) {\n          dctComp += acValue & 0xff;\n        } else {\n          halfZigBlock[dctComp] = acValue;\n          dctComp++;\n        }\n\n        currAcComp.value++;\n      }\n    }\n\n    function unZigZag(src, dst) {\n      dst[0] = decodeFloat16(src[0]);\n      dst[1] = decodeFloat16(src[1]);\n      dst[2] = decodeFloat16(src[5]);\n      dst[3] = decodeFloat16(src[6]);\n      dst[4] = decodeFloat16(src[14]);\n      dst[5] = decodeFloat16(src[15]);\n      dst[6] = decodeFloat16(src[27]);\n      dst[7] = decodeFloat16(src[28]);\n      dst[8] = decodeFloat16(src[2]);\n      dst[9] = decodeFloat16(src[4]);\n      dst[10] = decodeFloat16(src[7]);\n      dst[11] = decodeFloat16(src[13]);\n      dst[12] = decodeFloat16(src[16]);\n      dst[13] = decodeFloat16(src[26]);\n      dst[14] = decodeFloat16(src[29]);\n      dst[15] = decodeFloat16(src[42]);\n      dst[16] = decodeFloat16(src[3]);\n      dst[17] = decodeFloat16(src[8]);\n      dst[18] = decodeFloat16(src[12]);\n      dst[19] = decodeFloat16(src[17]);\n      dst[20] = decodeFloat16(src[25]);\n      dst[21] = decodeFloat16(src[30]);\n      dst[22] = decodeFloat16(src[41]);\n      dst[23] = decodeFloat16(src[43]);\n      dst[24] = decodeFloat16(src[9]);\n      dst[25] = decodeFloat16(src[11]);\n      dst[26] = decodeFloat16(src[18]);\n      dst[27] = decodeFloat16(src[24]);\n      dst[28] = decodeFloat16(src[31]);\n      dst[29] = decodeFloat16(src[40]);\n      dst[30] = decodeFloat16(src[44]);\n      dst[31] = decodeFloat16(src[53]);\n      dst[32] = decodeFloat16(src[10]);\n      dst[33] = decodeFloat16(src[19]);\n      dst[34] = decodeFloat16(src[23]);\n      dst[35] = decodeFloat16(src[32]);\n      dst[36] = decodeFloat16(src[39]);\n      dst[37] = decodeFloat16(src[45]);\n      dst[38] = decodeFloat16(src[52]);\n      dst[39] = decodeFloat16(src[54]);\n      dst[40] = decodeFloat16(src[20]);\n      dst[41] = decodeFloat16(src[22]);\n      dst[42] = decodeFloat16(src[33]);\n      dst[43] = decodeFloat16(src[38]);\n      dst[44] = decodeFloat16(src[46]);\n      dst[45] = decodeFloat16(src[51]);\n      dst[46] = decodeFloat16(src[55]);\n      dst[47] = decodeFloat16(src[60]);\n      dst[48] = decodeFloat16(src[21]);\n      dst[49] = decodeFloat16(src[34]);\n      dst[50] = decodeFloat16(src[37]);\n      dst[51] = decodeFloat16(src[47]);\n      dst[52] = decodeFloat16(src[50]);\n      dst[53] = decodeFloat16(src[56]);\n      dst[54] = decodeFloat16(src[59]);\n      dst[55] = decodeFloat16(src[61]);\n      dst[56] = decodeFloat16(src[35]);\n      dst[57] = decodeFloat16(src[36]);\n      dst[58] = decodeFloat16(src[48]);\n      dst[59] = decodeFloat16(src[49]);\n      dst[60] = decodeFloat16(src[57]);\n      dst[61] = decodeFloat16(src[58]);\n      dst[62] = decodeFloat16(src[62]);\n      dst[63] = decodeFloat16(src[63]);\n    }\n\n    function dctInverse(data) {\n      const a = 0.5 * Math.cos(3.14159 / 4.0);\n      const b = 0.5 * Math.cos(3.14159 / 16.0);\n      const c = 0.5 * Math.cos(3.14159 / 8.0);\n      const d = 0.5 * Math.cos(3.0 * 3.14159 / 16.0);\n      const e = 0.5 * Math.cos(5.0 * 3.14159 / 16.0);\n      const f = 0.5 * Math.cos(3.0 * 3.14159 / 8.0);\n      const g = 0.5 * Math.cos(7.0 * 3.14159 / 16.0);\n      var alpha = new Array(4);\n      var beta = new Array(4);\n      var theta = new Array(4);\n      var gamma = new Array(4);\n\n      for (var row = 0; row < 8; ++row) {\n        var rowPtr = row * 8;\n        alpha[0] = c * data[rowPtr + 2];\n        alpha[1] = f * data[rowPtr + 2];\n        alpha[2] = c * data[rowPtr + 6];\n        alpha[3] = f * data[rowPtr + 6];\n        beta[0] = b * data[rowPtr + 1] + d * data[rowPtr + 3] + e * data[rowPtr + 5] + g * data[rowPtr + 7];\n        beta[1] = d * data[rowPtr + 1] - g * data[rowPtr + 3] - b * data[rowPtr + 5] - e * data[rowPtr + 7];\n        beta[2] = e * data[rowPtr + 1] - b * data[rowPtr + 3] + g * data[rowPtr + 5] + d * data[rowPtr + 7];\n        beta[3] = g * data[rowPtr + 1] - e * data[rowPtr + 3] + d * data[rowPtr + 5] - b * data[rowPtr + 7];\n        theta[0] = a * (data[rowPtr + 0] + data[rowPtr + 4]);\n        theta[3] = a * (data[rowPtr + 0] - data[rowPtr + 4]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[rowPtr + 0] = gamma[0] + beta[0];\n        data[rowPtr + 1] = gamma[1] + beta[1];\n        data[rowPtr + 2] = gamma[2] + beta[2];\n        data[rowPtr + 3] = gamma[3] + beta[3];\n        data[rowPtr + 4] = gamma[3] - beta[3];\n        data[rowPtr + 5] = gamma[2] - beta[2];\n        data[rowPtr + 6] = gamma[1] - beta[1];\n        data[rowPtr + 7] = gamma[0] - beta[0];\n      }\n\n      for (var column = 0; column < 8; ++column) {\n        alpha[0] = c * data[16 + column];\n        alpha[1] = f * data[16 + column];\n        alpha[2] = c * data[48 + column];\n        alpha[3] = f * data[48 + column];\n        beta[0] = b * data[8 + column] + d * data[24 + column] + e * data[40 + column] + g * data[56 + column];\n        beta[1] = d * data[8 + column] - g * data[24 + column] - b * data[40 + column] - e * data[56 + column];\n        beta[2] = e * data[8 + column] - b * data[24 + column] + g * data[40 + column] + d * data[56 + column];\n        beta[3] = g * data[8 + column] - e * data[24 + column] + d * data[40 + column] - b * data[56 + column];\n        theta[0] = a * (data[column] + data[32 + column]);\n        theta[3] = a * (data[column] - data[32 + column]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[0 + column] = gamma[0] + beta[0];\n        data[8 + column] = gamma[1] + beta[1];\n        data[16 + column] = gamma[2] + beta[2];\n        data[24 + column] = gamma[3] + beta[3];\n        data[32 + column] = gamma[3] - beta[3];\n        data[40 + column] = gamma[2] - beta[2];\n        data[48 + column] = gamma[1] - beta[1];\n        data[56 + column] = gamma[0] - beta[0];\n      }\n    }\n\n    function csc709Inverse(data) {\n      for (var i = 0; i < 64; ++i) {\n        var y = data[0][i];\n        var cb = data[1][i];\n        var cr = data[2][i];\n        data[0][i] = y + 1.5747 * cr;\n        data[1][i] = y - 0.1873 * cb - 0.4682 * cr;\n        data[2][i] = y + 1.8556 * cb;\n      }\n    }\n\n    function convertToHalf(src, dst, idx) {\n      for (var i = 0; i < 64; ++i) {\n        dst[idx + i] = DataUtils.toHalfFloat(toLinear(src[i]));\n      }\n    }\n\n    function toLinear(float) {\n      if (float <= 1) {\n        return Math.sign(float) * Math.pow(Math.abs(float), 2.2);\n      } else {\n        return Math.sign(float) * Math.pow(logBase, Math.abs(float) - 1.0);\n      }\n    }\n\n    function uncompressRAW(info) {\n      return new DataView(info.array.buffer, info.offset.value, info.size);\n    }\n\n    function uncompressRLE(info) {\n      var compressed = info.viewer.buffer.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = new Uint8Array(decodeRunLength(compressed));\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressZIP(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressPIZ(info) {\n      var inDataView = info.viewer;\n      var inOffset = {\n        value: info.offset.value\n      };\n      var tmpBufSize = info.width * scanlineBlockSize * (EXRHeader.channels.length * info.type);\n      var outBuffer = new Uint16Array(tmpBufSize);\n      var bitmap = new Uint8Array(BITMAP_SIZE); // Setup channel info\n\n      var outBufferEnd = 0;\n      var pizChannelData = new Array(info.channels);\n\n      for (var i = 0; i < info.channels; i++) {\n        pizChannelData[i] = {};\n        pizChannelData[i]['start'] = outBufferEnd;\n        pizChannelData[i]['end'] = pizChannelData[i]['start'];\n        pizChannelData[i]['nx'] = info.width;\n        pizChannelData[i]['ny'] = info.lines;\n        pizChannelData[i]['size'] = info.type;\n        outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size;\n      } // Read range compression data\n\n\n      var minNonZero = parseUint16(inDataView, inOffset);\n      var maxNonZero = parseUint16(inDataView, inOffset);\n\n      if (maxNonZero >= BITMAP_SIZE) {\n        throw 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE';\n      }\n\n      if (minNonZero <= maxNonZero) {\n        for (var i = 0; i < maxNonZero - minNonZero + 1; i++) {\n          bitmap[i + minNonZero] = parseUint8(inDataView, inOffset);\n        }\n      } // Reverse LUT\n\n\n      var lut = new Uint16Array(USHORT_RANGE);\n      var maxValue = reverseLutFromBitmap(bitmap, lut);\n      var length = parseUint32(inDataView, inOffset); // Huffman decoding\n\n      hufUncompress(info.array, inDataView, inOffset, length, outBuffer, outBufferEnd); // Wavelet decoding\n\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = pizChannelData[i];\n\n        for (var j = 0; j < pizChannelData[i].size; ++j) {\n          wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue);\n        }\n      } // Expand the pixel data to their original range\n\n\n      applyLut(lut, outBuffer, outBufferEnd); // Rearrange the pixel data into the format expected by the caller.\n\n      var tmpOffset = 0;\n      var tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength);\n\n      for (var y = 0; y < info.lines; y++) {\n        for (var c = 0; c < info.channels; c++) {\n          var cd = pizChannelData[c];\n          var n = cd.nx * cd.size;\n          var cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE);\n          tmpBuffer.set(cp, tmpOffset);\n          tmpOffset += n * INT16_SIZE;\n          cd.end += n;\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressPXR(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n      const sz = info.lines * info.channels * info.width;\n      const tmpBuffer = info.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz);\n      let tmpBufferEnd = 0;\n      let writePtr = 0;\n      const ptr = new Array(4);\n\n      for (let y = 0; y < info.lines; y++) {\n        for (let c = 0; c < info.channels; c++) {\n          let pixel = 0;\n\n          switch (info.type) {\n            case 1:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              tmpBufferEnd = ptr[1] + info.width;\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 8 | rawBuffer[ptr[1]++];\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n\n              break;\n\n            case 2:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              ptr[2] = ptr[1] + info.width;\n              tmpBufferEnd = ptr[2] + info.width;\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 24 | rawBuffer[ptr[1]++] << 16 | rawBuffer[ptr[2]++] << 8;\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n\n              break;\n          }\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressDWA(info) {\n      var inDataView = info.viewer;\n      var inOffset = {\n        value: info.offset.value\n      };\n      var outBuffer = new Uint8Array(info.width * info.lines * (EXRHeader.channels.length * info.type * INT16_SIZE)); // Read compression header information\n\n      var dwaHeader = {\n        version: parseInt64(inDataView, inOffset),\n        unknownUncompressedSize: parseInt64(inDataView, inOffset),\n        unknownCompressedSize: parseInt64(inDataView, inOffset),\n        acCompressedSize: parseInt64(inDataView, inOffset),\n        dcCompressedSize: parseInt64(inDataView, inOffset),\n        rleCompressedSize: parseInt64(inDataView, inOffset),\n        rleUncompressedSize: parseInt64(inDataView, inOffset),\n        rleRawSize: parseInt64(inDataView, inOffset),\n        totalAcUncompressedCount: parseInt64(inDataView, inOffset),\n        totalDcUncompressedCount: parseInt64(inDataView, inOffset),\n        acCompression: parseInt64(inDataView, inOffset)\n      };\n\n      if (dwaHeader.version < 2) {\n        throw 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported';\n      } // Read channel ruleset information\n\n\n      var channelRules = new Array();\n      var ruleSize = parseUint16(inDataView, inOffset) - INT16_SIZE;\n\n      while (ruleSize > 0) {\n        var name = parseNullTerminatedString(inDataView.buffer, inOffset);\n        var value = parseUint8(inDataView, inOffset);\n        var compression = value >> 2 & 3;\n        var csc = (value >> 4) - 1;\n        var index = new Int8Array([csc])[0];\n        var type = parseUint8(inDataView, inOffset);\n        channelRules.push({\n          name: name,\n          index: index,\n          type: type,\n          compression: compression\n        });\n        ruleSize -= name.length + 3;\n      } // Classify channels\n\n\n      var channels = EXRHeader.channels;\n      var channelData = new Array(info.channels);\n\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = channelData[i] = {};\n        var channel = channels[i];\n        cd.name = channel.name;\n        cd.compression = UNKNOWN;\n        cd.decoded = false;\n        cd.type = channel.pixelType;\n        cd.pLinear = channel.pLinear;\n        cd.width = info.width;\n        cd.height = info.lines;\n      }\n\n      var cscSet = {\n        idx: new Array(3)\n      };\n\n      for (var offset = 0; offset < info.channels; ++offset) {\n        var cd = channelData[offset];\n\n        for (var i = 0; i < channelRules.length; ++i) {\n          var rule = channelRules[i];\n\n          if (cd.name == rule.name) {\n            cd.compression = rule.compression;\n\n            if (rule.index >= 0) {\n              cscSet.idx[rule.index] = offset;\n            }\n\n            cd.offset = offset;\n          }\n        }\n      } // Read DCT - AC component data\n\n\n      if (dwaHeader.acCompressedSize > 0) {\n        switch (dwaHeader.acCompression) {\n          case STATIC_HUFFMAN:\n            var acBuffer = new Uint16Array(dwaHeader.totalAcUncompressedCount);\n            hufUncompress(info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount);\n            break;\n\n          case DEFLATE:\n            var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount);\n            var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n            var acBuffer = new Uint16Array(data.buffer);\n            inOffset.value += dwaHeader.totalAcUncompressedCount;\n            break;\n        }\n      } // Read DCT - DC component data\n\n\n      if (dwaHeader.dcCompressedSize > 0) {\n        var zlibInfo = {\n          array: info.array,\n          offset: inOffset,\n          size: dwaHeader.dcCompressedSize\n        };\n        var dcBuffer = new Uint16Array(uncompressZIP(zlibInfo).buffer);\n        inOffset.value += dwaHeader.dcCompressedSize;\n      } // Read RLE compressed data\n\n\n      if (dwaHeader.rleRawSize > 0) {\n        var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.rleCompressedSize);\n        var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n        var rleBuffer = decodeRunLength(data.buffer);\n        inOffset.value += dwaHeader.rleCompressedSize;\n      } // Prepare outbuffer data offset\n\n\n      var outBufferEnd = 0;\n      var rowOffsets = new Array(channelData.length);\n\n      for (var i = 0; i < rowOffsets.length; ++i) {\n        rowOffsets[i] = new Array();\n      }\n\n      for (var y = 0; y < info.lines; ++y) {\n        for (var chan = 0; chan < channelData.length; ++chan) {\n          rowOffsets[chan].push(outBufferEnd);\n          outBufferEnd += channelData[chan].width * info.type * INT16_SIZE;\n        }\n      } // Lossy DCT decode RGB channels\n\n\n      lossyDctDecode(cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer); // Decode other channels\n\n      for (var i = 0; i < channelData.length; ++i) {\n        var cd = channelData[i];\n        if (cd.decoded) continue;\n\n        switch (cd.compression) {\n          case RLE:\n            var row = 0;\n            var rleOffset = 0;\n\n            for (var y = 0; y < info.lines; ++y) {\n              var rowOffsetBytes = rowOffsets[i][row];\n\n              for (var x = 0; x < cd.width; ++x) {\n                for (var byte = 0; byte < INT16_SIZE * cd.type; ++byte) {\n                  outBuffer[rowOffsetBytes++] = rleBuffer[rleOffset + byte * cd.width * cd.height];\n                }\n\n                rleOffset++;\n              }\n\n              row++;\n            }\n\n            break;\n\n          case LOSSY_DCT: // skip\n\n          default:\n            throw 'EXRLoader.parse: unsupported channel compression';\n        }\n      }\n\n      return new DataView(outBuffer.buffer);\n    }\n\n    function parseNullTerminatedString(buffer, offset) {\n      var uintBuffer = new Uint8Array(buffer);\n      var endOffset = 0;\n\n      while (uintBuffer[offset.value + endOffset] != 0) {\n        endOffset += 1;\n      }\n\n      var stringValue = new TextDecoder().decode(uintBuffer.slice(offset.value, offset.value + endOffset));\n      offset.value = offset.value + endOffset + 1;\n      return stringValue;\n    }\n\n    function parseFixedLengthString(buffer, offset, size) {\n      var stringValue = new TextDecoder().decode(new Uint8Array(buffer).slice(offset.value, offset.value + size));\n      offset.value = offset.value + size;\n      return stringValue;\n    }\n\n    function parseUlong(dataView, offset) {\n      var uLong = dataView.getUint32(0, true);\n      offset.value = offset.value + ULONG_SIZE;\n      return uLong;\n    }\n\n    function parseRational(dataView, offset) {\n      var x = parseInt32(dataView, offset);\n      var y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseTimecode(dataView, offset) {\n      var x = parseUint32(dataView, offset);\n      var y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseInt32(dataView, offset) {\n      var Int32 = dataView.getInt32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Int32;\n    }\n\n    function parseUint32(dataView, offset) {\n      var Uint32 = dataView.getUint32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Uint32;\n    }\n\n    function parseUint8Array(uInt8Array, offset) {\n      var Uint8 = uInt8Array[offset.value];\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n\n    function parseUint8(dataView, offset) {\n      var Uint8 = dataView.getUint8(offset.value);\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n\n    function parseInt64(dataView, offset) {\n      var int = Number(dataView.getBigInt64(offset.value, true));\n      offset.value += ULONG_SIZE;\n      return int;\n    }\n\n    function parseFloat32(dataView, offset) {\n      var float = dataView.getFloat32(offset.value, true);\n      offset.value += FLOAT32_SIZE;\n      return float;\n    }\n\n    function decodeFloat32(dataView, offset) {\n      return DataUtils.toHalfFloat(parseFloat32(dataView, offset));\n    } // https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\n\n    function decodeFloat16(binary) {\n      var exponent = (binary & 0x7c00) >> 10,\n          fraction = binary & 0x03ff;\n      return (binary >> 15 ? -1 : 1) * (exponent ? exponent === 0x1f ? fraction ? NaN : Infinity : Math.pow(2, exponent - 15) * (1 + fraction / 0x400) : 6.103515625e-5 * (fraction / 0x400));\n    }\n\n    function parseUint16(dataView, offset) {\n      var Uint16 = dataView.getUint16(offset.value, true);\n      offset.value += INT16_SIZE;\n      return Uint16;\n    }\n\n    function parseFloat16(buffer, offset) {\n      return decodeFloat16(parseUint16(buffer, offset));\n    }\n\n    function parseChlist(dataView, buffer, offset, size) {\n      var startOffset = offset.value;\n      var channels = [];\n\n      while (offset.value < startOffset + size - 1) {\n        var name = parseNullTerminatedString(buffer, offset);\n        var pixelType = parseInt32(dataView, offset);\n        var pLinear = parseUint8(dataView, offset);\n        offset.value += 3; // reserved, three chars\n\n        var xSampling = parseInt32(dataView, offset);\n        var ySampling = parseInt32(dataView, offset);\n        channels.push({\n          name: name,\n          pixelType: pixelType,\n          pLinear: pLinear,\n          xSampling: xSampling,\n          ySampling: ySampling\n        });\n      }\n\n      offset.value += 1;\n      return channels;\n    }\n\n    function parseChromaticities(dataView, offset) {\n      var redX = parseFloat32(dataView, offset);\n      var redY = parseFloat32(dataView, offset);\n      var greenX = parseFloat32(dataView, offset);\n      var greenY = parseFloat32(dataView, offset);\n      var blueX = parseFloat32(dataView, offset);\n      var blueY = parseFloat32(dataView, offset);\n      var whiteX = parseFloat32(dataView, offset);\n      var whiteY = parseFloat32(dataView, offset);\n      return {\n        redX: redX,\n        redY: redY,\n        greenX: greenX,\n        greenY: greenY,\n        blueX: blueX,\n        blueY: blueY,\n        whiteX: whiteX,\n        whiteY: whiteY\n      };\n    }\n\n    function parseCompression(dataView, offset) {\n      var compressionCodes = ['NO_COMPRESSION', 'RLE_COMPRESSION', 'ZIPS_COMPRESSION', 'ZIP_COMPRESSION', 'PIZ_COMPRESSION', 'PXR24_COMPRESSION', 'B44_COMPRESSION', 'B44A_COMPRESSION', 'DWAA_COMPRESSION', 'DWAB_COMPRESSION'];\n      var compression = parseUint8(dataView, offset);\n      return compressionCodes[compression];\n    }\n\n    function parseBox2i(dataView, offset) {\n      var xMin = parseUint32(dataView, offset);\n      var yMin = parseUint32(dataView, offset);\n      var xMax = parseUint32(dataView, offset);\n      var yMax = parseUint32(dataView, offset);\n      return {\n        xMin: xMin,\n        yMin: yMin,\n        xMax: xMax,\n        yMax: yMax\n      };\n    }\n\n    function parseLineOrder(dataView, offset) {\n      var lineOrders = ['INCREASING_Y'];\n      var lineOrder = parseUint8(dataView, offset);\n      return lineOrders[lineOrder];\n    }\n\n    function parseV2f(dataView, offset) {\n      var x = parseFloat32(dataView, offset);\n      var y = parseFloat32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseV3f(dataView, offset) {\n      var x = parseFloat32(dataView, offset);\n      var y = parseFloat32(dataView, offset);\n      var z = parseFloat32(dataView, offset);\n      return [x, y, z];\n    }\n\n    function parseValue(dataView, buffer, offset, type, size) {\n      if (type === 'string' || type === 'stringvector' || type === 'iccProfile') {\n        return parseFixedLengthString(buffer, offset, size);\n      } else if (type === 'chlist') {\n        return parseChlist(dataView, buffer, offset, size);\n      } else if (type === 'chromaticities') {\n        return parseChromaticities(dataView, offset);\n      } else if (type === 'compression') {\n        return parseCompression(dataView, offset);\n      } else if (type === 'box2i') {\n        return parseBox2i(dataView, offset);\n      } else if (type === 'lineOrder') {\n        return parseLineOrder(dataView, offset);\n      } else if (type === 'float') {\n        return parseFloat32(dataView, offset);\n      } else if (type === 'v2f') {\n        return parseV2f(dataView, offset);\n      } else if (type === 'v3f') {\n        return parseV3f(dataView, offset);\n      } else if (type === 'int') {\n        return parseInt32(dataView, offset);\n      } else if (type === 'rational') {\n        return parseRational(dataView, offset);\n      } else if (type === 'timecode') {\n        return parseTimecode(dataView, offset);\n      } else if (type === 'preview') {\n        offset.value += size;\n        return 'skipped';\n      } else {\n        offset.value += size;\n        return undefined;\n      }\n    }\n\n    var bufferDataView = new DataView(buffer);\n    var uInt8Array = new Uint8Array(buffer);\n    var EXRHeader = {};\n    bufferDataView.getUint32(0, true); // magic\n\n    bufferDataView.getUint8(4, true); // versionByteZero\n\n    bufferDataView.getUint8(5, true); // fullMask\n    // start of header\n\n    var offset = {\n      value: 8\n    }; // start at 8, after magic stuff\n\n    var keepReading = true;\n\n    while (keepReading) {\n      var attributeName = parseNullTerminatedString(buffer, offset);\n\n      if (attributeName == 0) {\n        keepReading = false;\n      } else {\n        var attributeType = parseNullTerminatedString(buffer, offset);\n        var attributeSize = parseUint32(bufferDataView, offset);\n        var attributeValue = parseValue(bufferDataView, buffer, offset, attributeType, attributeSize);\n\n        if (attributeValue === undefined) {\n          console.warn(`EXRLoader.parse: skipped unknown header attribute type \\'${attributeType}\\'.`);\n        } else {\n          EXRHeader[attributeName] = attributeValue;\n        }\n      }\n    } // offsets\n\n\n    var dataWindowHeight = EXRHeader.dataWindow.yMax + 1;\n    var uncompress;\n    var scanlineBlockSize;\n\n    switch (EXRHeader.compression) {\n      case 'NO_COMPRESSION':\n        scanlineBlockSize = 1;\n        uncompress = uncompressRAW;\n        break;\n\n      case 'RLE_COMPRESSION':\n        scanlineBlockSize = 1;\n        uncompress = uncompressRLE;\n        break;\n\n      case 'ZIPS_COMPRESSION':\n        scanlineBlockSize = 1;\n        uncompress = uncompressZIP;\n        break;\n\n      case 'ZIP_COMPRESSION':\n        scanlineBlockSize = 16;\n        uncompress = uncompressZIP;\n        break;\n\n      case 'PIZ_COMPRESSION':\n        scanlineBlockSize = 32;\n        uncompress = uncompressPIZ;\n        break;\n\n      case 'PXR24_COMPRESSION':\n        scanlineBlockSize = 16;\n        uncompress = uncompressPXR;\n        break;\n\n      case 'DWAA_COMPRESSION':\n        scanlineBlockSize = 32;\n        uncompress = uncompressDWA;\n        break;\n\n      case 'DWAB_COMPRESSION':\n        scanlineBlockSize = 256;\n        uncompress = uncompressDWA;\n        break;\n\n      default:\n        throw 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported';\n    }\n\n    var size_t;\n    var getValue; // mixed pixelType not supported\n\n    var pixelType = EXRHeader.channels[0].pixelType;\n\n    if (pixelType === 1) {\n      // half\n      switch (this.type) {\n        case UnsignedByteType:\n        case FloatType:\n          getValue = parseFloat16;\n          size_t = INT16_SIZE;\n          break;\n\n        case HalfFloatType:\n          getValue = parseUint16;\n          size_t = INT16_SIZE;\n          break;\n      }\n    } else if (pixelType === 2) {\n      // float\n      switch (this.type) {\n        case UnsignedByteType:\n        case FloatType:\n          getValue = parseFloat32;\n          size_t = FLOAT32_SIZE;\n          break;\n\n        case HalfFloatType:\n          getValue = decodeFloat32;\n          size_t = FLOAT32_SIZE;\n      }\n    } else {\n      throw 'EXRLoader.parse: unsupported pixelType ' + pixelType + ' for ' + EXRHeader.compression + '.';\n    }\n\n    var numBlocks = dataWindowHeight / scanlineBlockSize;\n\n    for (var i = 0; i < numBlocks; i++) {\n      parseUlong(bufferDataView, offset); // scanlineOffset\n    } // we should be passed the scanline offset table, start reading pixel data\n\n\n    var width = EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1;\n    var height = EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1; // Firefox only supports RGBA (half) float textures\n    // var numChannels = EXRHeader.channels.length;\n\n    var numChannels = 4;\n    var size = width * height * numChannels; // Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\n    switch (this.type) {\n      case UnsignedByteType:\n      case FloatType:\n        var byteArray = new Float32Array(size);\n\n        if (EXRHeader.channels.length < numChannels) {\n          byteArray.fill(1, 0, size);\n        }\n\n        break;\n\n      case HalfFloatType:\n        var byteArray = new Uint16Array(size);\n\n        if (EXRHeader.channels.length < numChannels) {\n          byteArray.fill(0x3c00, 0, size); // Uint16Array holds half float data, 0x3C00 is 1\n        }\n\n        break;\n\n      default:\n        console.error('THREE.EXRLoader: unsupported type: ', this.type);\n        break;\n    }\n\n    var channelOffsets = {\n      R: 0,\n      G: 1,\n      B: 2,\n      A: 3\n    };\n    var compressionInfo = {\n      size: 0,\n      width: width,\n      lines: scanlineBlockSize,\n      offset: offset,\n      array: uInt8Array,\n      viewer: bufferDataView,\n      type: pixelType,\n      channels: EXRHeader.channels.length\n    };\n    var line;\n    var size;\n    var viewer;\n    var tmpOffset = {\n      value: 0\n    };\n\n    for (var scanlineBlockIdx = 0; scanlineBlockIdx < height / scanlineBlockSize; scanlineBlockIdx++) {\n      line = parseUint32(bufferDataView, offset); // line_no\n\n      size = parseUint32(bufferDataView, offset); // data_len\n\n      compressionInfo.lines = line + scanlineBlockSize > height ? height - line : scanlineBlockSize;\n      compressionInfo.offset = offset;\n      compressionInfo.size = size;\n      viewer = uncompress(compressionInfo);\n      offset.value += size;\n\n      for (var line_y = 0; line_y < scanlineBlockSize; line_y++) {\n        var true_y = line_y + scanlineBlockIdx * scanlineBlockSize;\n        if (true_y >= height) break;\n\n        for (var channelID = 0; channelID < EXRHeader.channels.length; channelID++) {\n          var cOff = channelOffsets[EXRHeader.channels[channelID].name];\n\n          for (var x = 0; x < width; x++) {\n            var idx = line_y * (EXRHeader.channels.length * width) + channelID * width + x;\n            tmpOffset.value = idx * size_t;\n            var val = getValue(viewer, tmpOffset);\n            byteArray[(height - 1 - true_y) * (width * numChannels) + x * numChannels + cOff] = val;\n          }\n        }\n      }\n    }\n\n    if (this.type === UnsignedByteType) {\n      let v, i;\n      const size = byteArray.length;\n      const RGBEArray = new Uint8Array(size);\n\n      for (let h = 0; h < height; ++h) {\n        for (let w = 0; w < width; ++w) {\n          i = h * width * 4 + w * 4;\n          const red = byteArray[i];\n          const green = byteArray[i + 1];\n          const blue = byteArray[i + 2];\n          v = red > green ? red : green;\n          v = blue > v ? blue : v;\n\n          if (v < 1e-32) {\n            RGBEArray[i] = RGBEArray[i + 1] = RGBEArray[i + 2] = RGBEArray[i + 3] = 0;\n          } else {\n            const res = frexp(v);\n            v = res[0] * 256 / v;\n            RGBEArray[i] = red * v;\n            RGBEArray[i + 1] = green * v;\n            RGBEArray[i + 2] = blue * v;\n            RGBEArray[i + 3] = res[1] + 128;\n          }\n        }\n      }\n\n      byteArray = RGBEArray;\n    }\n\n    const format = this.type === UnsignedByteType ? RGBEFormat : RGBAFormat ;\n    return {\n      header: EXRHeader,\n      width: width,\n      height: height,\n      data: byteArray,\n      format: format,\n      type: this.type\n    };\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case UnsignedByteType:\n          texture.encoding = RGBEEncoding;\n          texture.minFilter = NearestFilter;\n          texture.magFilter = NearestFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = false;\n          break;\n\n        case FloatType:\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = false;\n          break;\n      }\n\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { EXRLoader };\n"]},"metadata":{},"sourceType":"module"}