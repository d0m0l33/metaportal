{"ast":null,"code":"import { BufferGeometry, BufferAttribute, InterleavedBuffer, InterleavedBufferAttribute, TrianglesDrawMode, TriangleFanDrawMode, TriangleStripDrawMode, Vector3, Float32BufferAttribute } from 'three';\nimport { getWithKey } from '../types/helpers.js';\n/**\n * @param  {Array<BufferGeometry>} geometries\n * @param  {Boolean} useGroups\n * @return {BufferGeometry}\n */\n\nconst mergeBufferGeometries = (geometries, useGroups) => {\n  const isIndexed = geometries[0].index !== null;\n  const attributesUsed = new Set(Object.keys(geometries[0].attributes));\n  const morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));\n  const attributes = {};\n  const morphAttributes = {};\n  const morphTargetsRelative = geometries[0].morphTargetsRelative;\n  const mergedGeometry = new BufferGeometry();\n  let offset = 0;\n  geometries.forEach((geom, i) => {\n    let attributesCount = 0; // ensure that all geometries are indexed, or none\n\n    if (isIndexed !== (geom.index !== null)) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.');\n      return null;\n    } // gather attributes, exit early if they're different\n\n\n    for (let name in geom.attributes) {\n      if (!attributesUsed.has(name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.');\n        return null;\n      }\n\n      if (attributes[name] === undefined) {\n        attributes[name] = [];\n      }\n\n      attributes[name].push(geom.attributes[name]);\n      attributesCount++;\n    } // ensure geometries have the same number of attributes\n\n\n    if (attributesCount !== attributesUsed.size) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.');\n      return null;\n    } // gather morph attributes, exit early if they're different\n\n\n    if (morphTargetsRelative !== geom.morphTargetsRelative) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.');\n      return null;\n    }\n\n    for (let name in geom.morphAttributes) {\n      if (!morphAttributesUsed.has(name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.');\n        return null;\n      }\n\n      if (morphAttributes[name] === undefined) morphAttributes[name] = [];\n      morphAttributes[name].push(geom.morphAttributes[name]);\n    } // gather .userData\n\n\n    mergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n    mergedGeometry.userData.mergedUserData.push(geom.userData);\n\n    if (useGroups) {\n      let count;\n\n      if (geom.index) {\n        count = geom.index.count;\n      } else if (geom.attributes.position !== undefined) {\n        count = geom.attributes.position.count;\n      } else {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute');\n        return null;\n      }\n\n      mergedGeometry.addGroup(offset, count, i);\n      offset += count;\n    }\n  }); // merge indices\n\n  if (isIndexed) {\n    let indexOffset = 0;\n    const mergedIndex = [];\n    geometries.forEach(geom => {\n      const index = geom.index;\n\n      for (let j = 0; j < index.count; ++j) {\n        mergedIndex.push(index.getX(j) + indexOffset);\n      }\n\n      indexOffset += geom.attributes.position.count;\n    });\n    mergedGeometry.setIndex(mergedIndex);\n  } // merge attributes\n\n\n  for (let name in attributes) {\n    const mergedAttribute = mergeBufferAttributes(attributes[name]);\n\n    if (!mergedAttribute) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' attribute.');\n      return null;\n    }\n\n    mergedGeometry.setAttribute(name, mergedAttribute);\n  } // merge morph attributes\n\n\n  for (let name in morphAttributes) {\n    const numMorphTargets = morphAttributes[name][0].length;\n    if (numMorphTargets === 0) break;\n    mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n    mergedGeometry.morphAttributes[name] = [];\n\n    for (let i = 0; i < numMorphTargets; ++i) {\n      const morphAttributesToMerge = [];\n\n      for (let j = 0; j < morphAttributes[name].length; ++j) {\n        morphAttributesToMerge.push(morphAttributes[name][j][i]);\n      }\n\n      const mergedMorphAttribute = mergeBufferAttributes(morphAttributesToMerge);\n\n      if (!mergedMorphAttribute) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' morphAttribute.');\n        return null;\n      }\n\n      mergedGeometry.morphAttributes[name].push(mergedMorphAttribute);\n    }\n  }\n\n  return mergedGeometry;\n};\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\n\n\nconst mergeBufferAttributes = attributes => {\n  let TypedArray = undefined;\n  let itemSize = undefined;\n  let normalized = undefined;\n  let arrayLength = 0;\n  attributes.forEach(attr => {\n    if (TypedArray === undefined) {\n      TypedArray = attr.array.constructor;\n    }\n\n    if (TypedArray !== attr.array.constructor) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.');\n      return null;\n    }\n\n    if (itemSize === undefined) itemSize = attr.itemSize;\n\n    if (itemSize !== attr.itemSize) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.');\n      return null;\n    }\n\n    if (normalized === undefined) normalized = attr.normalized;\n\n    if (normalized !== attr.normalized) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.');\n      return null;\n    }\n\n    arrayLength += attr.array.length;\n  });\n\n  if (TypedArray && itemSize) {\n    // @ts-expect-error this works in JS and TS is complaining but it's such a tiny thing I can live with the guilt\n    const array = new TypedArray(arrayLength);\n    let offset = 0;\n    attributes.forEach(attr => {\n      array.set(attr.array, offset);\n      offset += attr.array.length;\n    });\n    return new BufferAttribute(array, itemSize, normalized);\n  }\n};\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\n\n\nconst interleaveAttributes = attributes => {\n  // Interleaves the provided attributes into an InterleavedBuffer and returns\n  // a set of InterleavedBufferAttributes for each attribute\n  let TypedArray = undefined;\n  let arrayLength = 0;\n  let stride = 0; // calculate the the length and type of the interleavedBuffer\n\n  for (let i = 0, l = attributes.length; i < l; ++i) {\n    const attribute = attributes[i];\n    if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n\n    if (TypedArray !== attribute.array.constructor) {\n      console.error('AttributeBuffers of different types cannot be interleaved');\n      return null;\n    }\n\n    arrayLength += attribute.array.length;\n    stride += attribute.itemSize;\n  } // Create the set of buffer attributes\n  // @ts-expect-error this works in JS and TS is complaining but it's such a tiny thing I can live with the guilt\n\n\n  const interleavedBuffer = new InterleavedBuffer(new TypedArray(arrayLength), stride);\n  let offset = 0;\n  const res = [];\n  const getters = ['getX', 'getY', 'getZ', 'getW'];\n  const setters = ['setX', 'setY', 'setZ', 'setW'];\n\n  for (let j = 0, l = attributes.length; j < l; j++) {\n    const attribute = attributes[j];\n    const itemSize = attribute.itemSize;\n    const count = attribute.count;\n    const iba = new InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, attribute.normalized);\n    res.push(iba);\n    offset += itemSize; // Move the data for each attribute into the new interleavedBuffer\n    // at the appropriate offset\n\n    for (let c = 0; c < count; c++) {\n      for (let k = 0; k < itemSize; k++) {\n        const set = getWithKey(iba, setters[k]);\n        const get = getWithKey(attribute, getters[k]);\n        set(c, get(c));\n      }\n    }\n  }\n\n  return res;\n};\n/**\n * @param {Array<BufferGeometry>} geometry\n * @return {number}\n */\n\n\nfunction estimateBytesUsed(geometry) {\n  // Return the estimated memory used by this geometry in bytes\n  // Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n  // for InterleavedBufferAttributes.\n  let mem = 0;\n\n  for (let name in geometry.attributes) {\n    const attr = geometry.getAttribute(name);\n    mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n  }\n\n  const indices = geometry.getIndex();\n  mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n  return mem;\n}\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry>}\n */\n\n\nfunction mergeVertices(geometry) {\n  let tolerance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-4;\n  tolerance = Math.max(tolerance, Number.EPSILON); // Generate an index buffer if the geometry doesn't have one, or optimize it\n  // if it's already available.\n\n  const hashToIndex = {};\n  const indices = geometry.getIndex();\n  const positions = geometry.getAttribute('position');\n  const vertexCount = indices ? indices.count : positions.count; // next value for triangle indices\n\n  let nextIndex = 0; // attributes and new attribute arrays\n\n  const attributeNames = Object.keys(geometry.attributes);\n  const attrArrays = {};\n  const morphAttrsArrays = {};\n  const newIndices = [];\n  const getters = ['getX', 'getY', 'getZ', 'getW']; // initialize the arrays\n\n  for (let i = 0, l = attributeNames.length; i < l; i++) {\n    const name = attributeNames[i];\n    attrArrays[name] = [];\n    const morphAttr = geometry.morphAttributes[name];\n\n    if (morphAttr) {\n      morphAttrsArrays[name] = new Array(morphAttr.length).fill(0).map(() => []);\n    }\n  } // convert the error tolerance to an amount of decimal places to truncate to\n\n\n  const decimalShift = Math.log10(1 / tolerance);\n  const shiftMultiplier = Math.pow(10, decimalShift);\n\n  for (let i = 0; i < vertexCount; i++) {\n    const index = indices ? indices.getX(i) : i; // Generate a hash for the vertex attributes at the current index 'i'\n\n    let hash = '';\n\n    for (let j = 0, l = attributeNames.length; j < l; j++) {\n      const name = attributeNames[j];\n      const attribute = geometry.getAttribute(name);\n      const itemSize = attribute.itemSize;\n\n      for (let k = 0; k < itemSize; k++) {\n        // double tilde truncates the decimal value\n        // @ts-ignore no\n        hash += `${~~(attribute[getters[k]](index) * shiftMultiplier)},`;\n      }\n    } // Add another reference to the vertex if it's already\n    // used by another index\n\n\n    if (hash in hashToIndex) {\n      newIndices.push(hashToIndex[hash]);\n    } else {\n      // copy data to the new index in the attribute arrays\n      for (let j = 0, l = attributeNames.length; j < l; j++) {\n        const name = attributeNames[j];\n        const attribute = geometry.getAttribute(name);\n        const morphAttr = geometry.morphAttributes[name];\n        const itemSize = attribute.itemSize;\n        const newarray = attrArrays[name];\n        const newMorphArrays = morphAttrsArrays[name];\n\n        for (let k = 0; k < itemSize; k++) {\n          const getterFunc = getters[k]; // @ts-ignore\n\n          newarray.push(attribute[getterFunc](index));\n\n          if (morphAttr) {\n            for (let m = 0, ml = morphAttr.length; m < ml; m++) {\n              // @ts-ignore\n              newMorphArrays[m].push(morphAttr[m][getterFunc](index));\n            }\n          }\n        }\n      }\n\n      hashToIndex[hash] = nextIndex;\n      newIndices.push(nextIndex);\n      nextIndex++;\n    }\n  } // Generate typed arrays from new attribute arrays and update\n  // the attributeBuffers\n\n\n  const result = geometry.clone();\n\n  for (let i = 0, l = attributeNames.length; i < l; i++) {\n    const name = attributeNames[i];\n    const oldAttribute = geometry.getAttribute(name); //@ts-expect-error  something to do with functions and constructors and new\n\n    const buffer = new oldAttribute.array.constructor(attrArrays[name]);\n    const attribute = new BufferAttribute(buffer, oldAttribute.itemSize, oldAttribute.normalized);\n    result.setAttribute(name, attribute); // Update the attribute arrays\n\n    if (name in morphAttrsArrays) {\n      for (let j = 0; j < morphAttrsArrays[name].length; j++) {\n        const oldMorphAttribute = geometry.morphAttributes[name][j]; //@ts-expect-error something to do with functions and constructors and new\n\n        const buffer = new oldMorphAttribute.array.constructor(morphAttrsArrays[name][j]);\n        const morphAttribute = new BufferAttribute(buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized);\n        result.morphAttributes[name][j] = morphAttribute;\n      }\n    }\n  } // indices\n\n\n  result.setIndex(newIndices);\n  return result;\n}\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry}\n */\n\n\nfunction toTrianglesDrawMode(geometry, drawMode) {\n  if (drawMode === TrianglesDrawMode) {\n    console.warn('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.');\n    return geometry;\n  }\n\n  if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {\n    let index = geometry.getIndex(); // generate index if not present\n\n    if (index === null) {\n      const indices = [];\n      const position = geometry.getAttribute('position');\n\n      if (position !== undefined) {\n        for (let i = 0; i < position.count; i++) {\n          indices.push(i);\n        }\n\n        geometry.setIndex(indices);\n        index = geometry.getIndex();\n      } else {\n        console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');\n        return geometry;\n      }\n    } //\n\n\n    const numberOfTriangles = index.count - 2;\n    const newIndices = [];\n\n    if (index) {\n      if (drawMode === TriangleFanDrawMode) {\n        // gl.TRIANGLE_FAN\n        for (let i = 1; i <= numberOfTriangles; i++) {\n          newIndices.push(index.getX(0));\n          newIndices.push(index.getX(i));\n          newIndices.push(index.getX(i + 1));\n        }\n      } else {\n        // gl.TRIANGLE_STRIP\n        for (let i = 0; i < numberOfTriangles; i++) {\n          if (i % 2 === 0) {\n            newIndices.push(index.getX(i));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i + 2));\n          } else {\n            newIndices.push(index.getX(i + 2));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i));\n          }\n        }\n      }\n    }\n\n    if (newIndices.length / 3 !== numberOfTriangles) {\n      console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');\n    } // build final geometry\n\n\n    const newGeometry = geometry.clone();\n    newGeometry.setIndex(newIndices);\n    newGeometry.clearGroups();\n    return newGeometry;\n  } else {\n    console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode);\n    return geometry;\n  }\n}\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\n\n\nfunction computeMorphedAttributes(object) {\n  if (object.geometry.isBufferGeometry !== true) {\n    console.error('THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry.');\n    return null;\n  }\n\n  const _vA = new Vector3();\n\n  const _vB = new Vector3();\n\n  const _vC = new Vector3();\n\n  const _tempA = new Vector3();\n\n  const _tempB = new Vector3();\n\n  const _tempC = new Vector3();\n\n  const _morphA = new Vector3();\n\n  const _morphB = new Vector3();\n\n  const _morphC = new Vector3();\n\n  function _calculateMorphedAttributeData(object, material, attribute, morphAttribute, morphTargetsRelative, a, b, c, modifiedAttributeArray) {\n    _vA.fromBufferAttribute(attribute, a);\n\n    _vB.fromBufferAttribute(attribute, b);\n\n    _vC.fromBufferAttribute(attribute, c);\n\n    const morphInfluences = object.morphTargetInfluences;\n\n    if (material.morphTargets && morphAttribute && morphInfluences) {\n      _morphA.set(0, 0, 0);\n\n      _morphB.set(0, 0, 0);\n\n      _morphC.set(0, 0, 0);\n\n      for (let i = 0, il = morphAttribute.length; i < il; i++) {\n        const influence = morphInfluences[i];\n        const morph = morphAttribute[i];\n        if (influence === 0) continue;\n\n        _tempA.fromBufferAttribute(morph, a);\n\n        _tempB.fromBufferAttribute(morph, b);\n\n        _tempC.fromBufferAttribute(morph, c);\n\n        if (morphTargetsRelative) {\n          _morphA.addScaledVector(_tempA, influence);\n\n          _morphB.addScaledVector(_tempB, influence);\n\n          _morphC.addScaledVector(_tempC, influence);\n        } else {\n          _morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n          _morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n          _morphC.addScaledVector(_tempC.sub(_vC), influence);\n        }\n      }\n\n      _vA.add(_morphA);\n\n      _vB.add(_morphB);\n\n      _vC.add(_morphC);\n    }\n\n    if (object.isSkinnedMesh) {\n      // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n      object.boneTransform(a, _vA); // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n\n      object.boneTransform(b, _vB); // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n\n      object.boneTransform(c, _vC);\n    }\n\n    modifiedAttributeArray[a * 3 + 0] = _vA.x;\n    modifiedAttributeArray[a * 3 + 1] = _vA.y;\n    modifiedAttributeArray[a * 3 + 2] = _vA.z;\n    modifiedAttributeArray[b * 3 + 0] = _vB.x;\n    modifiedAttributeArray[b * 3 + 1] = _vB.y;\n    modifiedAttributeArray[b * 3 + 2] = _vB.z;\n    modifiedAttributeArray[c * 3 + 0] = _vC.x;\n    modifiedAttributeArray[c * 3 + 1] = _vC.y;\n    modifiedAttributeArray[c * 3 + 2] = _vC.z;\n  }\n\n  const geometry = object.geometry;\n  const material = object.material;\n  let a, b, c;\n  const index = geometry.index;\n  const positionAttribute = geometry.attributes.position;\n  const morphPosition = geometry.morphAttributes.position;\n  const morphTargetsRelative = geometry.morphTargetsRelative;\n  const normalAttribute = geometry.attributes.normal;\n  const morphNormal = geometry.morphAttributes.position;\n  const groups = geometry.groups;\n  const drawRange = geometry.drawRange;\n  let i, j, il, jl;\n  let group, groupMaterial;\n  let start, end;\n  const modifiedPosition = new Float32Array(positionAttribute.count * positionAttribute.itemSize);\n  const modifiedNormal = new Float32Array(normalAttribute.count * normalAttribute.itemSize);\n\n  if (index !== null) {\n    // indexed buffer geometry\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        groupMaterial = material[group.materialIndex];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = index.getX(j);\n          b = index.getX(j + 1);\n          c = index.getX(j + 2);\n\n          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(index.count, drawRange.start + drawRange.count);\n\n      for (i = start, il = end; i < il; i += 3) {\n        a = index.getX(i);\n        b = index.getX(i + 1);\n        c = index.getX(i + 2);\n\n        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  } else if (positionAttribute !== undefined) {\n    // non-indexed buffer geometry\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        groupMaterial = material[group.materialIndex];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = j;\n          b = j + 1;\n          c = j + 2;\n\n          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n      for (i = start, il = end; i < il; i += 3) {\n        a = i;\n        b = i + 1;\n        c = i + 2;\n\n        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  }\n\n  const morphedPositionAttribute = new Float32BufferAttribute(modifiedPosition, 3);\n  const morphedNormalAttribute = new Float32BufferAttribute(modifiedNormal, 3);\n  return {\n    positionAttribute: positionAttribute,\n    normalAttribute: normalAttribute,\n    morphedPositionAttribute: morphedPositionAttribute,\n    morphedNormalAttribute: morphedNormalAttribute\n  };\n}\n\nexport { computeMorphedAttributes, estimateBytesUsed, interleaveAttributes, mergeBufferAttributes, mergeBufferGeometries, mergeVertices, toTrianglesDrawMode };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/utils/BufferGeometryUtils.js"],"names":["BufferGeometry","BufferAttribute","InterleavedBuffer","InterleavedBufferAttribute","TrianglesDrawMode","TriangleFanDrawMode","TriangleStripDrawMode","Vector3","Float32BufferAttribute","getWithKey","mergeBufferGeometries","geometries","useGroups","isIndexed","index","attributesUsed","Set","Object","keys","attributes","morphAttributesUsed","morphAttributes","morphTargetsRelative","mergedGeometry","offset","forEach","geom","i","attributesCount","console","error","name","has","undefined","push","size","userData","mergedUserData","count","position","addGroup","indexOffset","mergedIndex","j","getX","setIndex","mergedAttribute","mergeBufferAttributes","setAttribute","numMorphTargets","length","morphAttributesToMerge","mergedMorphAttribute","TypedArray","itemSize","normalized","arrayLength","attr","array","constructor","set","interleaveAttributes","stride","l","attribute","interleavedBuffer","res","getters","setters","iba","c","k","get","estimateBytesUsed","geometry","mem","getAttribute","BYTES_PER_ELEMENT","indices","getIndex","mergeVertices","tolerance","Math","max","Number","EPSILON","hashToIndex","positions","vertexCount","nextIndex","attributeNames","attrArrays","morphAttrsArrays","newIndices","morphAttr","Array","fill","map","decimalShift","log10","shiftMultiplier","pow","hash","newarray","newMorphArrays","getterFunc","m","ml","result","clone","oldAttribute","buffer","oldMorphAttribute","morphAttribute","toTrianglesDrawMode","drawMode","warn","numberOfTriangles","newGeometry","clearGroups","computeMorphedAttributes","object","isBufferGeometry","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_calculateMorphedAttributeData","material","a","b","modifiedAttributeArray","fromBufferAttribute","morphInfluences","morphTargetInfluences","morphTargets","il","influence","morph","addScaledVector","sub","add","isSkinnedMesh","boneTransform","x","y","z","positionAttribute","morphPosition","normalAttribute","normal","morphNormal","groups","drawRange","jl","group","groupMaterial","start","end","modifiedPosition","Float32Array","modifiedNormal","isArray","materialIndex","min","morphedPositionAttribute","morphedNormalAttribute"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,eAAzB,EAA0CC,iBAA1C,EAA6DC,0BAA7D,EAAyFC,iBAAzF,EAA4GC,mBAA5G,EAAiIC,qBAAjI,EAAwJC,OAAxJ,EAAiKC,sBAAjK,QAA+L,OAA/L;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,qBAAqB,GAAG,CAACC,UAAD,EAAaC,SAAb,KAA2B;AACvD,QAAMC,SAAS,GAAGF,UAAU,CAAC,CAAD,CAAV,CAAcG,KAAd,KAAwB,IAA1C;AACA,QAAMC,cAAc,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,IAAP,CAAYP,UAAU,CAAC,CAAD,CAAV,CAAcQ,UAA1B,CAAR,CAAvB;AACA,QAAMC,mBAAmB,GAAG,IAAIJ,GAAJ,CAAQC,MAAM,CAACC,IAAP,CAAYP,UAAU,CAAC,CAAD,CAAV,CAAcU,eAA1B,CAAR,CAA5B;AACA,QAAMF,UAAU,GAAG,EAAnB;AACA,QAAME,eAAe,GAAG,EAAxB;AACA,QAAMC,oBAAoB,GAAGX,UAAU,CAAC,CAAD,CAAV,CAAcW,oBAA3C;AACA,QAAMC,cAAc,GAAG,IAAIvB,cAAJ,EAAvB;AACA,MAAIwB,MAAM,GAAG,CAAb;AACAb,EAAAA,UAAU,CAACc,OAAX,CAAmB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC9B,QAAIC,eAAe,GAAG,CAAtB,CAD8B,CACL;;AAEzB,QAAIf,SAAS,MAAMa,IAAI,CAACZ,KAAL,KAAe,IAArB,CAAb,EAAyC;AACvCe,MAAAA,OAAO,CAACC,KAAR,CAAc,uFAAuFH,CAAvF,GAA2F,8HAAzG;AACA,aAAO,IAAP;AACD,KAN6B,CAM5B;;;AAGF,SAAK,IAAII,IAAT,IAAiBL,IAAI,CAACP,UAAtB,EAAkC;AAChC,UAAI,CAACJ,cAAc,CAACiB,GAAf,CAAmBD,IAAnB,CAAL,EAA+B;AAC7BF,QAAAA,OAAO,CAACC,KAAR,CAAc,uFAAuFH,CAAvF,GAA2F,+DAA3F,GAA6JI,IAA7J,GAAoK,8DAAlL;AACA,eAAO,IAAP;AACD;;AAED,UAAIZ,UAAU,CAACY,IAAD,CAAV,KAAqBE,SAAzB,EAAoC;AAClCd,QAAAA,UAAU,CAACY,IAAD,CAAV,GAAmB,EAAnB;AACD;;AAEDZ,MAAAA,UAAU,CAACY,IAAD,CAAV,CAAiBG,IAAjB,CAAsBR,IAAI,CAACP,UAAL,CAAgBY,IAAhB,CAAtB;AACAH,MAAAA,eAAe;AAChB,KArB6B,CAqB5B;;;AAGF,QAAIA,eAAe,KAAKb,cAAc,CAACoB,IAAvC,EAA6C;AAC3CN,MAAAA,OAAO,CAACC,KAAR,CAAc,uFAAuFH,CAAvF,GAA2F,gEAAzG;AACA,aAAO,IAAP;AACD,KA3B6B,CA2B5B;;;AAGF,QAAIL,oBAAoB,KAAKI,IAAI,CAACJ,oBAAlC,EAAwD;AACtDO,MAAAA,OAAO,CAACC,KAAR,CAAc,uFAAuFH,CAAvF,GAA2F,uEAAzG;AACA,aAAO,IAAP;AACD;;AAED,SAAK,IAAII,IAAT,IAAiBL,IAAI,CAACL,eAAtB,EAAuC;AACrC,UAAI,CAACD,mBAAmB,CAACY,GAApB,CAAwBD,IAAxB,CAAL,EAAoC;AAClCF,QAAAA,OAAO,CAACC,KAAR,CAAc,uFAAuFH,CAAvF,GAA2F,mEAAzG;AACA,eAAO,IAAP;AACD;;AAED,UAAIN,eAAe,CAACU,IAAD,CAAf,KAA0BE,SAA9B,EAAyCZ,eAAe,CAACU,IAAD,CAAf,GAAwB,EAAxB;AACzCV,MAAAA,eAAe,CAACU,IAAD,CAAf,CAAsBG,IAAtB,CAA2BR,IAAI,CAACL,eAAL,CAAqBU,IAArB,CAA3B;AACD,KA3C6B,CA2C5B;;;AAGFR,IAAAA,cAAc,CAACa,QAAf,CAAwBC,cAAxB,GAAyCd,cAAc,CAACa,QAAf,CAAwBC,cAAxB,IAA0C,EAAnF;AACAd,IAAAA,cAAc,CAACa,QAAf,CAAwBC,cAAxB,CAAuCH,IAAvC,CAA4CR,IAAI,CAACU,QAAjD;;AAEA,QAAIxB,SAAJ,EAAe;AACb,UAAI0B,KAAJ;;AAEA,UAAIZ,IAAI,CAACZ,KAAT,EAAgB;AACdwB,QAAAA,KAAK,GAAGZ,IAAI,CAACZ,KAAL,CAAWwB,KAAnB;AACD,OAFD,MAEO,IAAIZ,IAAI,CAACP,UAAL,CAAgBoB,QAAhB,KAA6BN,SAAjC,EAA4C;AACjDK,QAAAA,KAAK,GAAGZ,IAAI,CAACP,UAAL,CAAgBoB,QAAhB,CAAyBD,KAAjC;AACD,OAFM,MAEA;AACLT,QAAAA,OAAO,CAACC,KAAR,CAAc,uFAAuFH,CAAvF,GAA2F,kEAAzG;AACA,eAAO,IAAP;AACD;;AAEDJ,MAAAA,cAAc,CAACiB,QAAf,CAAwBhB,MAAxB,EAAgCc,KAAhC,EAAuCX,CAAvC;AACAH,MAAAA,MAAM,IAAIc,KAAV;AACD;AACF,GAhED,EATuD,CAyEnD;;AAEJ,MAAIzB,SAAJ,EAAe;AACb,QAAI4B,WAAW,GAAG,CAAlB;AACA,UAAMC,WAAW,GAAG,EAApB;AACA/B,IAAAA,UAAU,CAACc,OAAX,CAAmBC,IAAI,IAAI;AACzB,YAAMZ,KAAK,GAAGY,IAAI,CAACZ,KAAnB;;AAEA,WAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,KAAK,CAACwB,KAA1B,EAAiC,EAAEK,CAAnC,EAAsC;AACpCD,QAAAA,WAAW,CAACR,IAAZ,CAAiBpB,KAAK,CAAC8B,IAAN,CAAWD,CAAX,IAAgBF,WAAjC;AACD;;AAEDA,MAAAA,WAAW,IAAIf,IAAI,CAACP,UAAL,CAAgBoB,QAAhB,CAAyBD,KAAxC;AACD,KARD;AASAf,IAAAA,cAAc,CAACsB,QAAf,CAAwBH,WAAxB;AACD,GAxFsD,CAwFrD;;;AAGF,OAAK,IAAIX,IAAT,IAAiBZ,UAAjB,EAA6B;AAC3B,UAAM2B,eAAe,GAAGC,qBAAqB,CAAC5B,UAAU,CAACY,IAAD,CAAX,CAA7C;;AAEA,QAAI,CAACe,eAAL,EAAsB;AACpBjB,MAAAA,OAAO,CAACC,KAAR,CAAc,0FAA0FC,IAA1F,GAAiG,aAA/G;AACA,aAAO,IAAP;AACD;;AAEDR,IAAAA,cAAc,CAACyB,YAAf,CAA4BjB,IAA5B,EAAkCe,eAAlC;AACD,GApGsD,CAoGrD;;;AAGF,OAAK,IAAIf,IAAT,IAAiBV,eAAjB,EAAkC;AAChC,UAAM4B,eAAe,GAAG5B,eAAe,CAACU,IAAD,CAAf,CAAsB,CAAtB,EAAyBmB,MAAjD;AACA,QAAID,eAAe,KAAK,CAAxB,EAA2B;AAC3B1B,IAAAA,cAAc,CAACF,eAAf,GAAiCE,cAAc,CAACF,eAAf,IAAkC,EAAnE;AACAE,IAAAA,cAAc,CAACF,eAAf,CAA+BU,IAA/B,IAAuC,EAAvC;;AAEA,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,eAApB,EAAqC,EAAEtB,CAAvC,EAA0C;AACxC,YAAMwB,sBAAsB,GAAG,EAA/B;;AAEA,WAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,eAAe,CAACU,IAAD,CAAf,CAAsBmB,MAA1C,EAAkD,EAAEP,CAApD,EAAuD;AACrDQ,QAAAA,sBAAsB,CAACjB,IAAvB,CAA4Bb,eAAe,CAACU,IAAD,CAAf,CAAsBY,CAAtB,EAAyBhB,CAAzB,CAA5B;AACD;;AAED,YAAMyB,oBAAoB,GAAGL,qBAAqB,CAACI,sBAAD,CAAlD;;AAEA,UAAI,CAACC,oBAAL,EAA2B;AACzBvB,QAAAA,OAAO,CAACC,KAAR,CAAc,0FAA0FC,IAA1F,GAAiG,kBAA/G;AACA,eAAO,IAAP;AACD;;AAEDR,MAAAA,cAAc,CAACF,eAAf,CAA+BU,IAA/B,EAAqCG,IAArC,CAA0CkB,oBAA1C;AACD;AACF;;AAED,SAAO7B,cAAP;AACD,CAhID;AAiIA;AACA;AACA;AACA;;;AAEA,MAAMwB,qBAAqB,GAAG5B,UAAU,IAAI;AAC1C,MAAIkC,UAAU,GAAGpB,SAAjB;AACA,MAAIqB,QAAQ,GAAGrB,SAAf;AACA,MAAIsB,UAAU,GAAGtB,SAAjB;AACA,MAAIuB,WAAW,GAAG,CAAlB;AACArC,EAAAA,UAAU,CAACM,OAAX,CAAmBgC,IAAI,IAAI;AACzB,QAAIJ,UAAU,KAAKpB,SAAnB,EAA8B;AAC5BoB,MAAAA,UAAU,GAAGI,IAAI,CAACC,KAAL,CAAWC,WAAxB;AACD;;AAED,QAAIN,UAAU,KAAKI,IAAI,CAACC,KAAL,CAAWC,WAA9B,EAA2C;AACzC9B,MAAAA,OAAO,CAACC,KAAR,CAAc,iJAAd;AACA,aAAO,IAAP;AACD;;AAED,QAAIwB,QAAQ,KAAKrB,SAAjB,EAA4BqB,QAAQ,GAAGG,IAAI,CAACH,QAAhB;;AAE5B,QAAIA,QAAQ,KAAKG,IAAI,CAACH,QAAtB,EAAgC;AAC9BzB,MAAAA,OAAO,CAACC,KAAR,CAAc,qIAAd;AACA,aAAO,IAAP;AACD;;AAED,QAAIyB,UAAU,KAAKtB,SAAnB,EAA8BsB,UAAU,GAAGE,IAAI,CAACF,UAAlB;;AAE9B,QAAIA,UAAU,KAAKE,IAAI,CAACF,UAAxB,EAAoC;AAClC1B,MAAAA,OAAO,CAACC,KAAR,CAAc,uIAAd;AACA,aAAO,IAAP;AACD;;AAED0B,IAAAA,WAAW,IAAIC,IAAI,CAACC,KAAL,CAAWR,MAA1B;AACD,GAzBD;;AA2BA,MAAIG,UAAU,IAAIC,QAAlB,EAA4B;AAC1B;AACA,UAAMI,KAAK,GAAG,IAAIL,UAAJ,CAAeG,WAAf,CAAd;AACA,QAAIhC,MAAM,GAAG,CAAb;AACAL,IAAAA,UAAU,CAACM,OAAX,CAAmBgC,IAAI,IAAI;AACzBC,MAAAA,KAAK,CAACE,GAAN,CAAUH,IAAI,CAACC,KAAf,EAAsBlC,MAAtB;AACAA,MAAAA,MAAM,IAAIiC,IAAI,CAACC,KAAL,CAAWR,MAArB;AACD,KAHD;AAIA,WAAO,IAAIjD,eAAJ,CAAoByD,KAApB,EAA2BJ,QAA3B,EAAqCC,UAArC,CAAP;AACD;AACF,CA1CD;AA2CA;AACA;AACA;AACA;;;AAEA,MAAMM,oBAAoB,GAAG1C,UAAU,IAAI;AACzC;AACA;AACA,MAAIkC,UAAU,GAAGpB,SAAjB;AACA,MAAIuB,WAAW,GAAG,CAAlB;AACA,MAAIM,MAAM,GAAG,CAAb,CALyC,CAKzB;;AAEhB,OAAK,IAAInC,CAAC,GAAG,CAAR,EAAWoC,CAAC,GAAG5C,UAAU,CAAC+B,MAA/B,EAAuCvB,CAAC,GAAGoC,CAA3C,EAA8C,EAAEpC,CAAhD,EAAmD;AACjD,UAAMqC,SAAS,GAAG7C,UAAU,CAACQ,CAAD,CAA5B;AACA,QAAI0B,UAAU,KAAKpB,SAAnB,EAA8BoB,UAAU,GAAGW,SAAS,CAACN,KAAV,CAAgBC,WAA7B;;AAE9B,QAAIN,UAAU,KAAKW,SAAS,CAACN,KAAV,CAAgBC,WAAnC,EAAgD;AAC9C9B,MAAAA,OAAO,CAACC,KAAR,CAAc,2DAAd;AACA,aAAO,IAAP;AACD;;AAED0B,IAAAA,WAAW,IAAIQ,SAAS,CAACN,KAAV,CAAgBR,MAA/B;AACAY,IAAAA,MAAM,IAAIE,SAAS,CAACV,QAApB;AACD,GAlBwC,CAkBvC;AACF;;;AAGA,QAAMW,iBAAiB,GAAG,IAAI/D,iBAAJ,CAAsB,IAAImD,UAAJ,CAAeG,WAAf,CAAtB,EAAmDM,MAAnD,CAA1B;AACA,MAAItC,MAAM,GAAG,CAAb;AACA,QAAM0C,GAAG,GAAG,EAAZ;AACA,QAAMC,OAAO,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CAAhB;AACA,QAAMC,OAAO,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CAAhB;;AAEA,OAAK,IAAIzB,CAAC,GAAG,CAAR,EAAWoB,CAAC,GAAG5C,UAAU,CAAC+B,MAA/B,EAAuCP,CAAC,GAAGoB,CAA3C,EAA8CpB,CAAC,EAA/C,EAAmD;AACjD,UAAMqB,SAAS,GAAG7C,UAAU,CAACwB,CAAD,CAA5B;AACA,UAAMW,QAAQ,GAAGU,SAAS,CAACV,QAA3B;AACA,UAAMhB,KAAK,GAAG0B,SAAS,CAAC1B,KAAxB;AACA,UAAM+B,GAAG,GAAG,IAAIlE,0BAAJ,CAA+B8D,iBAA/B,EAAkDX,QAAlD,EAA4D9B,MAA5D,EAAoEwC,SAAS,CAACT,UAA9E,CAAZ;AACAW,IAAAA,GAAG,CAAChC,IAAJ,CAASmC,GAAT;AACA7C,IAAAA,MAAM,IAAI8B,QAAV,CANiD,CAM7B;AACpB;;AAEA,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhC,KAApB,EAA2BgC,CAAC,EAA5B,EAAgC;AAC9B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,QAApB,EAA8BiB,CAAC,EAA/B,EAAmC;AACjC,cAAMX,GAAG,GAAGnD,UAAU,CAAC4D,GAAD,EAAMD,OAAO,CAACG,CAAD,CAAb,CAAtB;AACA,cAAMC,GAAG,GAAG/D,UAAU,CAACuD,SAAD,EAAYG,OAAO,CAACI,CAAD,CAAnB,CAAtB;AACAX,QAAAA,GAAG,CAACU,CAAD,EAAIE,GAAG,CAACF,CAAD,CAAP,CAAH;AACD;AACF;AACF;;AAED,SAAOJ,GAAP;AACD,CA/CD;AAgDA;AACA;AACA;AACA;;;AAEA,SAASO,iBAAT,CAA2BC,QAA3B,EAAqC;AACnC;AACA;AACA;AACA,MAAIC,GAAG,GAAG,CAAV;;AAEA,OAAK,IAAI5C,IAAT,IAAiB2C,QAAQ,CAACvD,UAA1B,EAAsC;AACpC,UAAMsC,IAAI,GAAGiB,QAAQ,CAACE,YAAT,CAAsB7C,IAAtB,CAAb;AACA4C,IAAAA,GAAG,IAAIlB,IAAI,CAACnB,KAAL,GAAamB,IAAI,CAACH,QAAlB,GAA6BG,IAAI,CAACC,KAAL,CAAWmB,iBAA/C;AACD;;AAED,QAAMC,OAAO,GAAGJ,QAAQ,CAACK,QAAT,EAAhB;AACAJ,EAAAA,GAAG,IAAIG,OAAO,GAAGA,OAAO,CAACxC,KAAR,GAAgBwC,OAAO,CAACxB,QAAxB,GAAmCwB,OAAO,CAACpB,KAAR,CAAcmB,iBAApD,GAAwE,CAAtF;AACA,SAAOF,GAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAEA,SAASK,aAAT,CAAuBN,QAAvB,EAAmD;AAAA,MAAlBO,SAAkB,uEAAN,IAAM;AACjDA,EAAAA,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASF,SAAT,EAAoBG,MAAM,CAACC,OAA3B,CAAZ,CADiD,CACA;AACjD;;AAEA,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMR,OAAO,GAAGJ,QAAQ,CAACK,QAAT,EAAhB;AACA,QAAMQ,SAAS,GAAGb,QAAQ,CAACE,YAAT,CAAsB,UAAtB,CAAlB;AACA,QAAMY,WAAW,GAAGV,OAAO,GAAGA,OAAO,CAACxC,KAAX,GAAmBiD,SAAS,CAACjD,KAAxD,CAPiD,CAOc;;AAE/D,MAAImD,SAAS,GAAG,CAAhB,CATiD,CAS9B;;AAEnB,QAAMC,cAAc,GAAGzE,MAAM,CAACC,IAAP,CAAYwD,QAAQ,CAACvD,UAArB,CAAvB;AACA,QAAMwE,UAAU,GAAG,EAAnB;AACA,QAAMC,gBAAgB,GAAG,EAAzB;AACA,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAM1B,OAAO,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CAAhB,CAfiD,CAeC;;AAElD,OAAK,IAAIxC,CAAC,GAAG,CAAR,EAAWoC,CAAC,GAAG2B,cAAc,CAACxC,MAAnC,EAA2CvB,CAAC,GAAGoC,CAA/C,EAAkDpC,CAAC,EAAnD,EAAuD;AACrD,UAAMI,IAAI,GAAG2D,cAAc,CAAC/D,CAAD,CAA3B;AACAgE,IAAAA,UAAU,CAAC5D,IAAD,CAAV,GAAmB,EAAnB;AACA,UAAM+D,SAAS,GAAGpB,QAAQ,CAACrD,eAAT,CAAyBU,IAAzB,CAAlB;;AAEA,QAAI+D,SAAJ,EAAe;AACbF,MAAAA,gBAAgB,CAAC7D,IAAD,CAAhB,GAAyB,IAAIgE,KAAJ,CAAUD,SAAS,CAAC5C,MAApB,EAA4B8C,IAA5B,CAAiC,CAAjC,EAAoCC,GAApC,CAAwC,MAAM,EAA9C,CAAzB;AACD;AACF,GAzBgD,CAyB/C;;;AAGF,QAAMC,YAAY,GAAGhB,IAAI,CAACiB,KAAL,CAAW,IAAIlB,SAAf,CAArB;AACA,QAAMmB,eAAe,GAAGlB,IAAI,CAACmB,GAAL,CAAS,EAAT,EAAaH,YAAb,CAAxB;;AAEA,OAAK,IAAIvE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6D,WAApB,EAAiC7D,CAAC,EAAlC,EAAsC;AACpC,UAAMb,KAAK,GAAGgE,OAAO,GAAGA,OAAO,CAAClC,IAAR,CAAajB,CAAb,CAAH,GAAqBA,CAA1C,CADoC,CACS;;AAE7C,QAAI2E,IAAI,GAAG,EAAX;;AAEA,SAAK,IAAI3D,CAAC,GAAG,CAAR,EAAWoB,CAAC,GAAG2B,cAAc,CAACxC,MAAnC,EAA2CP,CAAC,GAAGoB,CAA/C,EAAkDpB,CAAC,EAAnD,EAAuD;AACrD,YAAMZ,IAAI,GAAG2D,cAAc,CAAC/C,CAAD,CAA3B;AACA,YAAMqB,SAAS,GAAGU,QAAQ,CAACE,YAAT,CAAsB7C,IAAtB,CAAlB;AACA,YAAMuB,QAAQ,GAAGU,SAAS,CAACV,QAA3B;;AAEA,WAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,QAApB,EAA8BiB,CAAC,EAA/B,EAAmC;AACjC;AACA;AACA+B,QAAAA,IAAI,IAAK,GAAE,CAAC,EAAEtC,SAAS,CAACG,OAAO,CAACI,CAAD,CAAR,CAAT,CAAsBzD,KAAtB,IAA+BsF,eAAjC,CAAkD,GAA9D;AACD;AACF,KAfmC,CAelC;AACF;;;AAGA,QAAIE,IAAI,IAAIhB,WAAZ,EAAyB;AACvBO,MAAAA,UAAU,CAAC3D,IAAX,CAAgBoD,WAAW,CAACgB,IAAD,CAA3B;AACD,KAFD,MAEO;AACL;AACA,WAAK,IAAI3D,CAAC,GAAG,CAAR,EAAWoB,CAAC,GAAG2B,cAAc,CAACxC,MAAnC,EAA2CP,CAAC,GAAGoB,CAA/C,EAAkDpB,CAAC,EAAnD,EAAuD;AACrD,cAAMZ,IAAI,GAAG2D,cAAc,CAAC/C,CAAD,CAA3B;AACA,cAAMqB,SAAS,GAAGU,QAAQ,CAACE,YAAT,CAAsB7C,IAAtB,CAAlB;AACA,cAAM+D,SAAS,GAAGpB,QAAQ,CAACrD,eAAT,CAAyBU,IAAzB,CAAlB;AACA,cAAMuB,QAAQ,GAAGU,SAAS,CAACV,QAA3B;AACA,cAAMiD,QAAQ,GAAGZ,UAAU,CAAC5D,IAAD,CAA3B;AACA,cAAMyE,cAAc,GAAGZ,gBAAgB,CAAC7D,IAAD,CAAvC;;AAEA,aAAK,IAAIwC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,QAApB,EAA8BiB,CAAC,EAA/B,EAAmC;AACjC,gBAAMkC,UAAU,GAAGtC,OAAO,CAACI,CAAD,CAA1B,CADiC,CACF;;AAE/BgC,UAAAA,QAAQ,CAACrE,IAAT,CAAc8B,SAAS,CAACyC,UAAD,CAAT,CAAsB3F,KAAtB,CAAd;;AAEA,cAAIgF,SAAJ,EAAe;AACb,iBAAK,IAAIY,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGb,SAAS,CAAC5C,MAA/B,EAAuCwD,CAAC,GAAGC,EAA3C,EAA+CD,CAAC,EAAhD,EAAoD;AAClD;AACAF,cAAAA,cAAc,CAACE,CAAD,CAAd,CAAkBxE,IAAlB,CAAuB4D,SAAS,CAACY,CAAD,CAAT,CAAaD,UAAb,EAAyB3F,KAAzB,CAAvB;AACD;AACF;AACF;AACF;;AAEDwE,MAAAA,WAAW,CAACgB,IAAD,CAAX,GAAoBb,SAApB;AACAI,MAAAA,UAAU,CAAC3D,IAAX,CAAgBuD,SAAhB;AACAA,MAAAA,SAAS;AACV;AACF,GAhFgD,CAgF/C;AACF;;;AAGA,QAAMmB,MAAM,GAAGlC,QAAQ,CAACmC,KAAT,EAAf;;AAEA,OAAK,IAAIlF,CAAC,GAAG,CAAR,EAAWoC,CAAC,GAAG2B,cAAc,CAACxC,MAAnC,EAA2CvB,CAAC,GAAGoC,CAA/C,EAAkDpC,CAAC,EAAnD,EAAuD;AACrD,UAAMI,IAAI,GAAG2D,cAAc,CAAC/D,CAAD,CAA3B;AACA,UAAMmF,YAAY,GAAGpC,QAAQ,CAACE,YAAT,CAAsB7C,IAAtB,CAArB,CAFqD,CAEH;;AAElD,UAAMgF,MAAM,GAAG,IAAID,YAAY,CAACpD,KAAb,CAAmBC,WAAvB,CAAmCgC,UAAU,CAAC5D,IAAD,CAA7C,CAAf;AACA,UAAMiC,SAAS,GAAG,IAAI/D,eAAJ,CAAoB8G,MAApB,EAA4BD,YAAY,CAACxD,QAAzC,EAAmDwD,YAAY,CAACvD,UAAhE,CAAlB;AACAqD,IAAAA,MAAM,CAAC5D,YAAP,CAAoBjB,IAApB,EAA0BiC,SAA1B,EANqD,CAMf;;AAEtC,QAAIjC,IAAI,IAAI6D,gBAAZ,EAA8B;AAC5B,WAAK,IAAIjD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiD,gBAAgB,CAAC7D,IAAD,CAAhB,CAAuBmB,MAA3C,EAAmDP,CAAC,EAApD,EAAwD;AACtD,cAAMqE,iBAAiB,GAAGtC,QAAQ,CAACrD,eAAT,CAAyBU,IAAzB,EAA+BY,CAA/B,CAA1B,CADsD,CACO;;AAE7D,cAAMoE,MAAM,GAAG,IAAIC,iBAAiB,CAACtD,KAAlB,CAAwBC,WAA5B,CAAwCiC,gBAAgB,CAAC7D,IAAD,CAAhB,CAAuBY,CAAvB,CAAxC,CAAf;AACA,cAAMsE,cAAc,GAAG,IAAIhH,eAAJ,CAAoB8G,MAApB,EAA4BC,iBAAiB,CAAC1D,QAA9C,EAAwD0D,iBAAiB,CAACzD,UAA1E,CAAvB;AACAqD,QAAAA,MAAM,CAACvF,eAAP,CAAuBU,IAAvB,EAA6BY,CAA7B,IAAkCsE,cAAlC;AACD;AACF;AACF,GAvGgD,CAuG/C;;;AAGFL,EAAAA,MAAM,CAAC/D,QAAP,CAAgBgD,UAAhB;AACA,SAAOe,MAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAEA,SAASM,mBAAT,CAA6BxC,QAA7B,EAAuCyC,QAAvC,EAAiD;AAC/C,MAAIA,QAAQ,KAAK/G,iBAAjB,EAAoC;AAClCyB,IAAAA,OAAO,CAACuF,IAAR,CAAa,yFAAb;AACA,WAAO1C,QAAP;AACD;;AAED,MAAIyC,QAAQ,KAAK9G,mBAAb,IAAoC8G,QAAQ,KAAK7G,qBAArD,EAA4E;AAC1E,QAAIQ,KAAK,GAAG4D,QAAQ,CAACK,QAAT,EAAZ,CAD0E,CACzC;;AAEjC,QAAIjE,KAAK,KAAK,IAAd,EAAoB;AAClB,YAAMgE,OAAO,GAAG,EAAhB;AACA,YAAMvC,QAAQ,GAAGmC,QAAQ,CAACE,YAAT,CAAsB,UAAtB,CAAjB;;AAEA,UAAIrC,QAAQ,KAAKN,SAAjB,EAA4B;AAC1B,aAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,QAAQ,CAACD,KAA7B,EAAoCX,CAAC,EAArC,EAAyC;AACvCmD,UAAAA,OAAO,CAAC5C,IAAR,CAAaP,CAAb;AACD;;AAED+C,QAAAA,QAAQ,CAAC7B,QAAT,CAAkBiC,OAAlB;AACAhE,QAAAA,KAAK,GAAG4D,QAAQ,CAACK,QAAT,EAAR;AACD,OAPD,MAOO;AACLlD,QAAAA,OAAO,CAACC,KAAR,CAAc,yGAAd;AACA,eAAO4C,QAAP;AACD;AACF,KAlByE,CAkBxE;;;AAGF,UAAM2C,iBAAiB,GAAGvG,KAAK,CAACwB,KAAN,GAAc,CAAxC;AACA,UAAMuD,UAAU,GAAG,EAAnB;;AAEA,QAAI/E,KAAJ,EAAW;AACT,UAAIqG,QAAQ,KAAK9G,mBAAjB,EAAsC;AACpC;AACA,aAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI0F,iBAArB,EAAwC1F,CAAC,EAAzC,EAA6C;AAC3CkE,UAAAA,UAAU,CAAC3D,IAAX,CAAgBpB,KAAK,CAAC8B,IAAN,CAAW,CAAX,CAAhB;AACAiD,UAAAA,UAAU,CAAC3D,IAAX,CAAgBpB,KAAK,CAAC8B,IAAN,CAAWjB,CAAX,CAAhB;AACAkE,UAAAA,UAAU,CAAC3D,IAAX,CAAgBpB,KAAK,CAAC8B,IAAN,CAAWjB,CAAC,GAAG,CAAf,CAAhB;AACD;AACF,OAPD,MAOO;AACL;AACA,aAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0F,iBAApB,EAAuC1F,CAAC,EAAxC,EAA4C;AAC1C,cAAIA,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACfkE,YAAAA,UAAU,CAAC3D,IAAX,CAAgBpB,KAAK,CAAC8B,IAAN,CAAWjB,CAAX,CAAhB;AACAkE,YAAAA,UAAU,CAAC3D,IAAX,CAAgBpB,KAAK,CAAC8B,IAAN,CAAWjB,CAAC,GAAG,CAAf,CAAhB;AACAkE,YAAAA,UAAU,CAAC3D,IAAX,CAAgBpB,KAAK,CAAC8B,IAAN,CAAWjB,CAAC,GAAG,CAAf,CAAhB;AACD,WAJD,MAIO;AACLkE,YAAAA,UAAU,CAAC3D,IAAX,CAAgBpB,KAAK,CAAC8B,IAAN,CAAWjB,CAAC,GAAG,CAAf,CAAhB;AACAkE,YAAAA,UAAU,CAAC3D,IAAX,CAAgBpB,KAAK,CAAC8B,IAAN,CAAWjB,CAAC,GAAG,CAAf,CAAhB;AACAkE,YAAAA,UAAU,CAAC3D,IAAX,CAAgBpB,KAAK,CAAC8B,IAAN,CAAWjB,CAAX,CAAhB;AACD;AACF;AACF;AACF;;AAED,QAAIkE,UAAU,CAAC3C,MAAX,GAAoB,CAApB,KAA0BmE,iBAA9B,EAAiD;AAC/CxF,MAAAA,OAAO,CAACC,KAAR,CAAc,kGAAd;AACD,KAlDyE,CAkDxE;;;AAGF,UAAMwF,WAAW,GAAG5C,QAAQ,CAACmC,KAAT,EAApB;AACAS,IAAAA,WAAW,CAACzE,QAAZ,CAAqBgD,UAArB;AACAyB,IAAAA,WAAW,CAACC,WAAZ;AACA,WAAOD,WAAP;AACD,GAzDD,MAyDO;AACLzF,IAAAA,OAAO,CAACC,KAAR,CAAc,qEAAd,EAAqFqF,QAArF;AACA,WAAOzC,QAAP;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAS8C,wBAAT,CAAkCC,MAAlC,EAA0C;AACxC,MAAIA,MAAM,CAAC/C,QAAP,CAAgBgD,gBAAhB,KAAqC,IAAzC,EAA+C;AAC7C7F,IAAAA,OAAO,CAACC,KAAR,CAAc,oEAAd;AACA,WAAO,IAAP;AACD;;AAED,QAAM6F,GAAG,GAAG,IAAIpH,OAAJ,EAAZ;;AAEA,QAAMqH,GAAG,GAAG,IAAIrH,OAAJ,EAAZ;;AAEA,QAAMsH,GAAG,GAAG,IAAItH,OAAJ,EAAZ;;AAEA,QAAMuH,MAAM,GAAG,IAAIvH,OAAJ,EAAf;;AAEA,QAAMwH,MAAM,GAAG,IAAIxH,OAAJ,EAAf;;AAEA,QAAMyH,MAAM,GAAG,IAAIzH,OAAJ,EAAf;;AAEA,QAAM0H,OAAO,GAAG,IAAI1H,OAAJ,EAAhB;;AAEA,QAAM2H,OAAO,GAAG,IAAI3H,OAAJ,EAAhB;;AAEA,QAAM4H,OAAO,GAAG,IAAI5H,OAAJ,EAAhB;;AAEA,WAAS6H,8BAAT,CAAwCX,MAAxC,EAAgDY,QAAhD,EAA0DrE,SAA1D,EAAqEiD,cAArE,EAAqF3F,oBAArF,EAA2GgH,CAA3G,EAA8GC,CAA9G,EAAiHjE,CAAjH,EAAoHkE,sBAApH,EAA4I;AAC1Ib,IAAAA,GAAG,CAACc,mBAAJ,CAAwBzE,SAAxB,EAAmCsE,CAAnC;;AAEAV,IAAAA,GAAG,CAACa,mBAAJ,CAAwBzE,SAAxB,EAAmCuE,CAAnC;;AAEAV,IAAAA,GAAG,CAACY,mBAAJ,CAAwBzE,SAAxB,EAAmCM,CAAnC;;AAEA,UAAMoE,eAAe,GAAGjB,MAAM,CAACkB,qBAA/B;;AAEA,QAAIN,QAAQ,CAACO,YAAT,IAAyB3B,cAAzB,IAA2CyB,eAA/C,EAAgE;AAC9DT,MAAAA,OAAO,CAACrE,GAAR,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB;;AAEAsE,MAAAA,OAAO,CAACtE,GAAR,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB;;AAEAuE,MAAAA,OAAO,CAACvE,GAAR,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB;;AAEA,WAAK,IAAIjC,CAAC,GAAG,CAAR,EAAWkH,EAAE,GAAG5B,cAAc,CAAC/D,MAApC,EAA4CvB,CAAC,GAAGkH,EAAhD,EAAoDlH,CAAC,EAArD,EAAyD;AACvD,cAAMmH,SAAS,GAAGJ,eAAe,CAAC/G,CAAD,CAAjC;AACA,cAAMoH,KAAK,GAAG9B,cAAc,CAACtF,CAAD,CAA5B;AACA,YAAImH,SAAS,KAAK,CAAlB,EAAqB;;AAErBhB,QAAAA,MAAM,CAACW,mBAAP,CAA2BM,KAA3B,EAAkCT,CAAlC;;AAEAP,QAAAA,MAAM,CAACU,mBAAP,CAA2BM,KAA3B,EAAkCR,CAAlC;;AAEAP,QAAAA,MAAM,CAACS,mBAAP,CAA2BM,KAA3B,EAAkCzE,CAAlC;;AAEA,YAAIhD,oBAAJ,EAA0B;AACxB2G,UAAAA,OAAO,CAACe,eAAR,CAAwBlB,MAAxB,EAAgCgB,SAAhC;;AAEAZ,UAAAA,OAAO,CAACc,eAAR,CAAwBjB,MAAxB,EAAgCe,SAAhC;;AAEAX,UAAAA,OAAO,CAACa,eAAR,CAAwBhB,MAAxB,EAAgCc,SAAhC;AACD,SAND,MAMO;AACLb,UAAAA,OAAO,CAACe,eAAR,CAAwBlB,MAAM,CAACmB,GAAP,CAAWtB,GAAX,CAAxB,EAAyCmB,SAAzC;;AAEAZ,UAAAA,OAAO,CAACc,eAAR,CAAwBjB,MAAM,CAACkB,GAAP,CAAWrB,GAAX,CAAxB,EAAyCkB,SAAzC;;AAEAX,UAAAA,OAAO,CAACa,eAAR,CAAwBhB,MAAM,CAACiB,GAAP,CAAWpB,GAAX,CAAxB,EAAyCiB,SAAzC;AACD;AACF;;AAEDnB,MAAAA,GAAG,CAACuB,GAAJ,CAAQjB,OAAR;;AAEAL,MAAAA,GAAG,CAACsB,GAAJ,CAAQhB,OAAR;;AAEAL,MAAAA,GAAG,CAACqB,GAAJ,CAAQf,OAAR;AACD;;AAED,QAAIV,MAAM,CAAC0B,aAAX,EAA0B;AACxB;AACA1B,MAAAA,MAAM,CAAC2B,aAAP,CAAqBd,CAArB,EAAwBX,GAAxB,EAFwB,CAEM;;AAE9BF,MAAAA,MAAM,CAAC2B,aAAP,CAAqBb,CAArB,EAAwBX,GAAxB,EAJwB,CAIM;;AAE9BH,MAAAA,MAAM,CAAC2B,aAAP,CAAqB9E,CAArB,EAAwBuD,GAAxB;AACD;;AAEDW,IAAAA,sBAAsB,CAACF,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAtB,GAAoCX,GAAG,CAAC0B,CAAxC;AACAb,IAAAA,sBAAsB,CAACF,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAtB,GAAoCX,GAAG,CAAC2B,CAAxC;AACAd,IAAAA,sBAAsB,CAACF,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAtB,GAAoCX,GAAG,CAAC4B,CAAxC;AACAf,IAAAA,sBAAsB,CAACD,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAtB,GAAoCX,GAAG,CAACyB,CAAxC;AACAb,IAAAA,sBAAsB,CAACD,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAtB,GAAoCX,GAAG,CAAC0B,CAAxC;AACAd,IAAAA,sBAAsB,CAACD,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAtB,GAAoCX,GAAG,CAAC2B,CAAxC;AACAf,IAAAA,sBAAsB,CAAClE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAtB,GAAoCuD,GAAG,CAACwB,CAAxC;AACAb,IAAAA,sBAAsB,CAAClE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAtB,GAAoCuD,GAAG,CAACyB,CAAxC;AACAd,IAAAA,sBAAsB,CAAClE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAtB,GAAoCuD,GAAG,CAAC0B,CAAxC;AACD;;AAED,QAAM7E,QAAQ,GAAG+C,MAAM,CAAC/C,QAAxB;AACA,QAAM2D,QAAQ,GAAGZ,MAAM,CAACY,QAAxB;AACA,MAAIC,CAAJ,EAAOC,CAAP,EAAUjE,CAAV;AACA,QAAMxD,KAAK,GAAG4D,QAAQ,CAAC5D,KAAvB;AACA,QAAM0I,iBAAiB,GAAG9E,QAAQ,CAACvD,UAAT,CAAoBoB,QAA9C;AACA,QAAMkH,aAAa,GAAG/E,QAAQ,CAACrD,eAAT,CAAyBkB,QAA/C;AACA,QAAMjB,oBAAoB,GAAGoD,QAAQ,CAACpD,oBAAtC;AACA,QAAMoI,eAAe,GAAGhF,QAAQ,CAACvD,UAAT,CAAoBwI,MAA5C;AACA,QAAMC,WAAW,GAAGlF,QAAQ,CAACrD,eAAT,CAAyBkB,QAA7C;AACA,QAAMsH,MAAM,GAAGnF,QAAQ,CAACmF,MAAxB;AACA,QAAMC,SAAS,GAAGpF,QAAQ,CAACoF,SAA3B;AACA,MAAInI,CAAJ,EAAOgB,CAAP,EAAUkG,EAAV,EAAckB,EAAd;AACA,MAAIC,KAAJ,EAAWC,aAAX;AACA,MAAIC,KAAJ,EAAWC,GAAX;AACA,QAAMC,gBAAgB,GAAG,IAAIC,YAAJ,CAAiBb,iBAAiB,CAAClH,KAAlB,GAA0BkH,iBAAiB,CAAClG,QAA7D,CAAzB;AACA,QAAMgH,cAAc,GAAG,IAAID,YAAJ,CAAiBX,eAAe,CAACpH,KAAhB,GAAwBoH,eAAe,CAACpG,QAAzD,CAAvB;;AAEA,MAAIxC,KAAK,KAAK,IAAd,EAAoB;AAClB;AACA,QAAIiF,KAAK,CAACwE,OAAN,CAAclC,QAAd,CAAJ,EAA6B;AAC3B,WAAK1G,CAAC,GAAG,CAAJ,EAAOkH,EAAE,GAAGgB,MAAM,CAAC3G,MAAxB,EAAgCvB,CAAC,GAAGkH,EAApC,EAAwClH,CAAC,EAAzC,EAA6C;AAC3CqI,QAAAA,KAAK,GAAGH,MAAM,CAAClI,CAAD,CAAd;AACAsI,QAAAA,aAAa,GAAG5B,QAAQ,CAAC2B,KAAK,CAACQ,aAAP,CAAxB;AACAN,QAAAA,KAAK,GAAGhF,IAAI,CAACC,GAAL,CAAS6E,KAAK,CAACE,KAAf,EAAsBJ,SAAS,CAACI,KAAhC,CAAR;AACAC,QAAAA,GAAG,GAAGjF,IAAI,CAACuF,GAAL,CAAST,KAAK,CAACE,KAAN,GAAcF,KAAK,CAAC1H,KAA7B,EAAoCwH,SAAS,CAACI,KAAV,GAAkBJ,SAAS,CAACxH,KAAhE,CAAN;;AAEA,aAAKK,CAAC,GAAGuH,KAAJ,EAAWH,EAAE,GAAGI,GAArB,EAA0BxH,CAAC,GAAGoH,EAA9B,EAAkCpH,CAAC,IAAI,CAAvC,EAA0C;AACxC2F,UAAAA,CAAC,GAAGxH,KAAK,CAAC8B,IAAN,CAAWD,CAAX,CAAJ;AACA4F,UAAAA,CAAC,GAAGzH,KAAK,CAAC8B,IAAN,CAAWD,CAAC,GAAG,CAAf,CAAJ;AACA2B,UAAAA,CAAC,GAAGxD,KAAK,CAAC8B,IAAN,CAAWD,CAAC,GAAG,CAAf,CAAJ;;AAEAyF,UAAAA,8BAA8B,CAACX,MAAD,EAASwC,aAAT,EAAwBT,iBAAxB,EAA2CC,aAA3C,EAA0DnI,oBAA1D,EAAgFgH,CAAhF,EAAmFC,CAAnF,EAAsFjE,CAAtF,EAAyF8F,gBAAzF,CAA9B;;AAEAhC,UAAAA,8BAA8B,CAACX,MAAD,EAASwC,aAAT,EAAwBP,eAAxB,EAAyCE,WAAzC,EAAsDtI,oBAAtD,EAA4EgH,CAA5E,EAA+EC,CAA/E,EAAkFjE,CAAlF,EAAqFgG,cAArF,CAA9B;AACD;AACF;AACF,KAjBD,MAiBO;AACLJ,MAAAA,KAAK,GAAGhF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY2E,SAAS,CAACI,KAAtB,CAAR;AACAC,MAAAA,GAAG,GAAGjF,IAAI,CAACuF,GAAL,CAAS3J,KAAK,CAACwB,KAAf,EAAsBwH,SAAS,CAACI,KAAV,GAAkBJ,SAAS,CAACxH,KAAlD,CAAN;;AAEA,WAAKX,CAAC,GAAGuI,KAAJ,EAAWrB,EAAE,GAAGsB,GAArB,EAA0BxI,CAAC,GAAGkH,EAA9B,EAAkClH,CAAC,IAAI,CAAvC,EAA0C;AACxC2G,QAAAA,CAAC,GAAGxH,KAAK,CAAC8B,IAAN,CAAWjB,CAAX,CAAJ;AACA4G,QAAAA,CAAC,GAAGzH,KAAK,CAAC8B,IAAN,CAAWjB,CAAC,GAAG,CAAf,CAAJ;AACA2C,QAAAA,CAAC,GAAGxD,KAAK,CAAC8B,IAAN,CAAWjB,CAAC,GAAG,CAAf,CAAJ;;AAEAyG,QAAAA,8BAA8B,CAACX,MAAD,EAASY,QAAT,EAAmBmB,iBAAnB,EAAsCC,aAAtC,EAAqDnI,oBAArD,EAA2EgH,CAA3E,EAA8EC,CAA9E,EAAiFjE,CAAjF,EAAoF8F,gBAApF,CAA9B;;AAEAhC,QAAAA,8BAA8B,CAACX,MAAD,EAASY,QAAT,EAAmBqB,eAAnB,EAAoCE,WAApC,EAAiDtI,oBAAjD,EAAuEgH,CAAvE,EAA0EC,CAA1E,EAA6EjE,CAA7E,EAAgFgG,cAAhF,CAA9B;AACD;AACF;AACF,GAjCD,MAiCO,IAAId,iBAAiB,KAAKvH,SAA1B,EAAqC;AAC1C;AACA,QAAI8D,KAAK,CAACwE,OAAN,CAAclC,QAAd,CAAJ,EAA6B;AAC3B,WAAK1G,CAAC,GAAG,CAAJ,EAAOkH,EAAE,GAAGgB,MAAM,CAAC3G,MAAxB,EAAgCvB,CAAC,GAAGkH,EAApC,EAAwClH,CAAC,EAAzC,EAA6C;AAC3CqI,QAAAA,KAAK,GAAGH,MAAM,CAAClI,CAAD,CAAd;AACAsI,QAAAA,aAAa,GAAG5B,QAAQ,CAAC2B,KAAK,CAACQ,aAAP,CAAxB;AACAN,QAAAA,KAAK,GAAGhF,IAAI,CAACC,GAAL,CAAS6E,KAAK,CAACE,KAAf,EAAsBJ,SAAS,CAACI,KAAhC,CAAR;AACAC,QAAAA,GAAG,GAAGjF,IAAI,CAACuF,GAAL,CAAST,KAAK,CAACE,KAAN,GAAcF,KAAK,CAAC1H,KAA7B,EAAoCwH,SAAS,CAACI,KAAV,GAAkBJ,SAAS,CAACxH,KAAhE,CAAN;;AAEA,aAAKK,CAAC,GAAGuH,KAAJ,EAAWH,EAAE,GAAGI,GAArB,EAA0BxH,CAAC,GAAGoH,EAA9B,EAAkCpH,CAAC,IAAI,CAAvC,EAA0C;AACxC2F,UAAAA,CAAC,GAAG3F,CAAJ;AACA4F,UAAAA,CAAC,GAAG5F,CAAC,GAAG,CAAR;AACA2B,UAAAA,CAAC,GAAG3B,CAAC,GAAG,CAAR;;AAEAyF,UAAAA,8BAA8B,CAACX,MAAD,EAASwC,aAAT,EAAwBT,iBAAxB,EAA2CC,aAA3C,EAA0DnI,oBAA1D,EAAgFgH,CAAhF,EAAmFC,CAAnF,EAAsFjE,CAAtF,EAAyF8F,gBAAzF,CAA9B;;AAEAhC,UAAAA,8BAA8B,CAACX,MAAD,EAASwC,aAAT,EAAwBP,eAAxB,EAAyCE,WAAzC,EAAsDtI,oBAAtD,EAA4EgH,CAA5E,EAA+EC,CAA/E,EAAkFjE,CAAlF,EAAqFgG,cAArF,CAA9B;AACD;AACF;AACF,KAjBD,MAiBO;AACLJ,MAAAA,KAAK,GAAGhF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY2E,SAAS,CAACI,KAAtB,CAAR;AACAC,MAAAA,GAAG,GAAGjF,IAAI,CAACuF,GAAL,CAASjB,iBAAiB,CAAClH,KAA3B,EAAkCwH,SAAS,CAACI,KAAV,GAAkBJ,SAAS,CAACxH,KAA9D,CAAN;;AAEA,WAAKX,CAAC,GAAGuI,KAAJ,EAAWrB,EAAE,GAAGsB,GAArB,EAA0BxI,CAAC,GAAGkH,EAA9B,EAAkClH,CAAC,IAAI,CAAvC,EAA0C;AACxC2G,QAAAA,CAAC,GAAG3G,CAAJ;AACA4G,QAAAA,CAAC,GAAG5G,CAAC,GAAG,CAAR;AACA2C,QAAAA,CAAC,GAAG3C,CAAC,GAAG,CAAR;;AAEAyG,QAAAA,8BAA8B,CAACX,MAAD,EAASY,QAAT,EAAmBmB,iBAAnB,EAAsCC,aAAtC,EAAqDnI,oBAArD,EAA2EgH,CAA3E,EAA8EC,CAA9E,EAAiFjE,CAAjF,EAAoF8F,gBAApF,CAA9B;;AAEAhC,QAAAA,8BAA8B,CAACX,MAAD,EAASY,QAAT,EAAmBqB,eAAnB,EAAoCE,WAApC,EAAiDtI,oBAAjD,EAAuEgH,CAAvE,EAA0EC,CAA1E,EAA6EjE,CAA7E,EAAgFgG,cAAhF,CAA9B;AACD;AACF;AACF;;AAED,QAAMI,wBAAwB,GAAG,IAAIlK,sBAAJ,CAA2B4J,gBAA3B,EAA6C,CAA7C,CAAjC;AACA,QAAMO,sBAAsB,GAAG,IAAInK,sBAAJ,CAA2B8J,cAA3B,EAA2C,CAA3C,CAA/B;AACA,SAAO;AACLd,IAAAA,iBAAiB,EAAEA,iBADd;AAELE,IAAAA,eAAe,EAAEA,eAFZ;AAGLgB,IAAAA,wBAAwB,EAAEA,wBAHrB;AAILC,IAAAA,sBAAsB,EAAEA;AAJnB,GAAP;AAMD;;AAED,SAASnD,wBAAT,EAAmC/C,iBAAnC,EAAsDZ,oBAAtD,EAA4Ed,qBAA5E,EAAmGrC,qBAAnG,EAA0HsE,aAA1H,EAAyIkC,mBAAzI","sourcesContent":["import { BufferGeometry, BufferAttribute, InterleavedBuffer, InterleavedBufferAttribute, TrianglesDrawMode, TriangleFanDrawMode, TriangleStripDrawMode, Vector3, Float32BufferAttribute } from 'three';\nimport { getWithKey } from '../types/helpers.js';\n\n/**\n * @param  {Array<BufferGeometry>} geometries\n * @param  {Boolean} useGroups\n * @return {BufferGeometry}\n */\nconst mergeBufferGeometries = (geometries, useGroups) => {\n  const isIndexed = geometries[0].index !== null;\n  const attributesUsed = new Set(Object.keys(geometries[0].attributes));\n  const morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));\n  const attributes = {};\n  const morphAttributes = {};\n  const morphTargetsRelative = geometries[0].morphTargetsRelative;\n  const mergedGeometry = new BufferGeometry();\n  let offset = 0;\n  geometries.forEach((geom, i) => {\n    let attributesCount = 0; // ensure that all geometries are indexed, or none\n\n    if (isIndexed !== (geom.index !== null)) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.');\n      return null;\n    } // gather attributes, exit early if they're different\n\n\n    for (let name in geom.attributes) {\n      if (!attributesUsed.has(name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.');\n        return null;\n      }\n\n      if (attributes[name] === undefined) {\n        attributes[name] = [];\n      }\n\n      attributes[name].push(geom.attributes[name]);\n      attributesCount++;\n    } // ensure geometries have the same number of attributes\n\n\n    if (attributesCount !== attributesUsed.size) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.');\n      return null;\n    } // gather morph attributes, exit early if they're different\n\n\n    if (morphTargetsRelative !== geom.morphTargetsRelative) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.');\n      return null;\n    }\n\n    for (let name in geom.morphAttributes) {\n      if (!morphAttributesUsed.has(name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.');\n        return null;\n      }\n\n      if (morphAttributes[name] === undefined) morphAttributes[name] = [];\n      morphAttributes[name].push(geom.morphAttributes[name]);\n    } // gather .userData\n\n\n    mergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n    mergedGeometry.userData.mergedUserData.push(geom.userData);\n\n    if (useGroups) {\n      let count;\n\n      if (geom.index) {\n        count = geom.index.count;\n      } else if (geom.attributes.position !== undefined) {\n        count = geom.attributes.position.count;\n      } else {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute');\n        return null;\n      }\n\n      mergedGeometry.addGroup(offset, count, i);\n      offset += count;\n    }\n  }); // merge indices\n\n  if (isIndexed) {\n    let indexOffset = 0;\n    const mergedIndex = [];\n    geometries.forEach(geom => {\n      const index = geom.index;\n\n      for (let j = 0; j < index.count; ++j) {\n        mergedIndex.push(index.getX(j) + indexOffset);\n      }\n\n      indexOffset += geom.attributes.position.count;\n    });\n    mergedGeometry.setIndex(mergedIndex);\n  } // merge attributes\n\n\n  for (let name in attributes) {\n    const mergedAttribute = mergeBufferAttributes(attributes[name]);\n\n    if (!mergedAttribute) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' attribute.');\n      return null;\n    }\n\n    mergedGeometry.setAttribute(name, mergedAttribute);\n  } // merge morph attributes\n\n\n  for (let name in morphAttributes) {\n    const numMorphTargets = morphAttributes[name][0].length;\n    if (numMorphTargets === 0) break;\n    mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n    mergedGeometry.morphAttributes[name] = [];\n\n    for (let i = 0; i < numMorphTargets; ++i) {\n      const morphAttributesToMerge = [];\n\n      for (let j = 0; j < morphAttributes[name].length; ++j) {\n        morphAttributesToMerge.push(morphAttributes[name][j][i]);\n      }\n\n      const mergedMorphAttribute = mergeBufferAttributes(morphAttributesToMerge);\n\n      if (!mergedMorphAttribute) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' morphAttribute.');\n        return null;\n      }\n\n      mergedGeometry.morphAttributes[name].push(mergedMorphAttribute);\n    }\n  }\n\n  return mergedGeometry;\n};\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\n\nconst mergeBufferAttributes = attributes => {\n  let TypedArray = undefined;\n  let itemSize = undefined;\n  let normalized = undefined;\n  let arrayLength = 0;\n  attributes.forEach(attr => {\n    if (TypedArray === undefined) {\n      TypedArray = attr.array.constructor;\n    }\n\n    if (TypedArray !== attr.array.constructor) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.');\n      return null;\n    }\n\n    if (itemSize === undefined) itemSize = attr.itemSize;\n\n    if (itemSize !== attr.itemSize) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.');\n      return null;\n    }\n\n    if (normalized === undefined) normalized = attr.normalized;\n\n    if (normalized !== attr.normalized) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.');\n      return null;\n    }\n\n    arrayLength += attr.array.length;\n  });\n\n  if (TypedArray && itemSize) {\n    // @ts-expect-error this works in JS and TS is complaining but it's such a tiny thing I can live with the guilt\n    const array = new TypedArray(arrayLength);\n    let offset = 0;\n    attributes.forEach(attr => {\n      array.set(attr.array, offset);\n      offset += attr.array.length;\n    });\n    return new BufferAttribute(array, itemSize, normalized);\n  }\n};\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\n\nconst interleaveAttributes = attributes => {\n  // Interleaves the provided attributes into an InterleavedBuffer and returns\n  // a set of InterleavedBufferAttributes for each attribute\n  let TypedArray = undefined;\n  let arrayLength = 0;\n  let stride = 0; // calculate the the length and type of the interleavedBuffer\n\n  for (let i = 0, l = attributes.length; i < l; ++i) {\n    const attribute = attributes[i];\n    if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n\n    if (TypedArray !== attribute.array.constructor) {\n      console.error('AttributeBuffers of different types cannot be interleaved');\n      return null;\n    }\n\n    arrayLength += attribute.array.length;\n    stride += attribute.itemSize;\n  } // Create the set of buffer attributes\n  // @ts-expect-error this works in JS and TS is complaining but it's such a tiny thing I can live with the guilt\n\n\n  const interleavedBuffer = new InterleavedBuffer(new TypedArray(arrayLength), stride);\n  let offset = 0;\n  const res = [];\n  const getters = ['getX', 'getY', 'getZ', 'getW'];\n  const setters = ['setX', 'setY', 'setZ', 'setW'];\n\n  for (let j = 0, l = attributes.length; j < l; j++) {\n    const attribute = attributes[j];\n    const itemSize = attribute.itemSize;\n    const count = attribute.count;\n    const iba = new InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, attribute.normalized);\n    res.push(iba);\n    offset += itemSize; // Move the data for each attribute into the new interleavedBuffer\n    // at the appropriate offset\n\n    for (let c = 0; c < count; c++) {\n      for (let k = 0; k < itemSize; k++) {\n        const set = getWithKey(iba, setters[k]);\n        const get = getWithKey(attribute, getters[k]);\n        set(c, get(c));\n      }\n    }\n  }\n\n  return res;\n};\n/**\n * @param {Array<BufferGeometry>} geometry\n * @return {number}\n */\n\nfunction estimateBytesUsed(geometry) {\n  // Return the estimated memory used by this geometry in bytes\n  // Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n  // for InterleavedBufferAttributes.\n  let mem = 0;\n\n  for (let name in geometry.attributes) {\n    const attr = geometry.getAttribute(name);\n    mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n  }\n\n  const indices = geometry.getIndex();\n  mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n  return mem;\n}\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry>}\n */\n\nfunction mergeVertices(geometry, tolerance = 1e-4) {\n  tolerance = Math.max(tolerance, Number.EPSILON); // Generate an index buffer if the geometry doesn't have one, or optimize it\n  // if it's already available.\n\n  const hashToIndex = {};\n  const indices = geometry.getIndex();\n  const positions = geometry.getAttribute('position');\n  const vertexCount = indices ? indices.count : positions.count; // next value for triangle indices\n\n  let nextIndex = 0; // attributes and new attribute arrays\n\n  const attributeNames = Object.keys(geometry.attributes);\n  const attrArrays = {};\n  const morphAttrsArrays = {};\n  const newIndices = [];\n  const getters = ['getX', 'getY', 'getZ', 'getW']; // initialize the arrays\n\n  for (let i = 0, l = attributeNames.length; i < l; i++) {\n    const name = attributeNames[i];\n    attrArrays[name] = [];\n    const morphAttr = geometry.morphAttributes[name];\n\n    if (morphAttr) {\n      morphAttrsArrays[name] = new Array(morphAttr.length).fill(0).map(() => []);\n    }\n  } // convert the error tolerance to an amount of decimal places to truncate to\n\n\n  const decimalShift = Math.log10(1 / tolerance);\n  const shiftMultiplier = Math.pow(10, decimalShift);\n\n  for (let i = 0; i < vertexCount; i++) {\n    const index = indices ? indices.getX(i) : i; // Generate a hash for the vertex attributes at the current index 'i'\n\n    let hash = '';\n\n    for (let j = 0, l = attributeNames.length; j < l; j++) {\n      const name = attributeNames[j];\n      const attribute = geometry.getAttribute(name);\n      const itemSize = attribute.itemSize;\n\n      for (let k = 0; k < itemSize; k++) {\n        // double tilde truncates the decimal value\n        // @ts-ignore no\n        hash += `${~~(attribute[getters[k]](index) * shiftMultiplier)},`;\n      }\n    } // Add another reference to the vertex if it's already\n    // used by another index\n\n\n    if (hash in hashToIndex) {\n      newIndices.push(hashToIndex[hash]);\n    } else {\n      // copy data to the new index in the attribute arrays\n      for (let j = 0, l = attributeNames.length; j < l; j++) {\n        const name = attributeNames[j];\n        const attribute = geometry.getAttribute(name);\n        const morphAttr = geometry.morphAttributes[name];\n        const itemSize = attribute.itemSize;\n        const newarray = attrArrays[name];\n        const newMorphArrays = morphAttrsArrays[name];\n\n        for (let k = 0; k < itemSize; k++) {\n          const getterFunc = getters[k]; // @ts-ignore\n\n          newarray.push(attribute[getterFunc](index));\n\n          if (morphAttr) {\n            for (let m = 0, ml = morphAttr.length; m < ml; m++) {\n              // @ts-ignore\n              newMorphArrays[m].push(morphAttr[m][getterFunc](index));\n            }\n          }\n        }\n      }\n\n      hashToIndex[hash] = nextIndex;\n      newIndices.push(nextIndex);\n      nextIndex++;\n    }\n  } // Generate typed arrays from new attribute arrays and update\n  // the attributeBuffers\n\n\n  const result = geometry.clone();\n\n  for (let i = 0, l = attributeNames.length; i < l; i++) {\n    const name = attributeNames[i];\n    const oldAttribute = geometry.getAttribute(name); //@ts-expect-error  something to do with functions and constructors and new\n\n    const buffer = new oldAttribute.array.constructor(attrArrays[name]);\n    const attribute = new BufferAttribute(buffer, oldAttribute.itemSize, oldAttribute.normalized);\n    result.setAttribute(name, attribute); // Update the attribute arrays\n\n    if (name in morphAttrsArrays) {\n      for (let j = 0; j < morphAttrsArrays[name].length; j++) {\n        const oldMorphAttribute = geometry.morphAttributes[name][j]; //@ts-expect-error something to do with functions and constructors and new\n\n        const buffer = new oldMorphAttribute.array.constructor(morphAttrsArrays[name][j]);\n        const morphAttribute = new BufferAttribute(buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized);\n        result.morphAttributes[name][j] = morphAttribute;\n      }\n    }\n  } // indices\n\n\n  result.setIndex(newIndices);\n  return result;\n}\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry}\n */\n\nfunction toTrianglesDrawMode(geometry, drawMode) {\n  if (drawMode === TrianglesDrawMode) {\n    console.warn('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.');\n    return geometry;\n  }\n\n  if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {\n    let index = geometry.getIndex(); // generate index if not present\n\n    if (index === null) {\n      const indices = [];\n      const position = geometry.getAttribute('position');\n\n      if (position !== undefined) {\n        for (let i = 0; i < position.count; i++) {\n          indices.push(i);\n        }\n\n        geometry.setIndex(indices);\n        index = geometry.getIndex();\n      } else {\n        console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');\n        return geometry;\n      }\n    } //\n\n\n    const numberOfTriangles = index.count - 2;\n    const newIndices = [];\n\n    if (index) {\n      if (drawMode === TriangleFanDrawMode) {\n        // gl.TRIANGLE_FAN\n        for (let i = 1; i <= numberOfTriangles; i++) {\n          newIndices.push(index.getX(0));\n          newIndices.push(index.getX(i));\n          newIndices.push(index.getX(i + 1));\n        }\n      } else {\n        // gl.TRIANGLE_STRIP\n        for (let i = 0; i < numberOfTriangles; i++) {\n          if (i % 2 === 0) {\n            newIndices.push(index.getX(i));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i + 2));\n          } else {\n            newIndices.push(index.getX(i + 2));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i));\n          }\n        }\n      }\n    }\n\n    if (newIndices.length / 3 !== numberOfTriangles) {\n      console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');\n    } // build final geometry\n\n\n    const newGeometry = geometry.clone();\n    newGeometry.setIndex(newIndices);\n    newGeometry.clearGroups();\n    return newGeometry;\n  } else {\n    console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode);\n    return geometry;\n  }\n}\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\n\nfunction computeMorphedAttributes(object) {\n  if (object.geometry.isBufferGeometry !== true) {\n    console.error('THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry.');\n    return null;\n  }\n\n  const _vA = new Vector3();\n\n  const _vB = new Vector3();\n\n  const _vC = new Vector3();\n\n  const _tempA = new Vector3();\n\n  const _tempB = new Vector3();\n\n  const _tempC = new Vector3();\n\n  const _morphA = new Vector3();\n\n  const _morphB = new Vector3();\n\n  const _morphC = new Vector3();\n\n  function _calculateMorphedAttributeData(object, material, attribute, morphAttribute, morphTargetsRelative, a, b, c, modifiedAttributeArray) {\n    _vA.fromBufferAttribute(attribute, a);\n\n    _vB.fromBufferAttribute(attribute, b);\n\n    _vC.fromBufferAttribute(attribute, c);\n\n    const morphInfluences = object.morphTargetInfluences;\n\n    if (material.morphTargets && morphAttribute && morphInfluences) {\n      _morphA.set(0, 0, 0);\n\n      _morphB.set(0, 0, 0);\n\n      _morphC.set(0, 0, 0);\n\n      for (let i = 0, il = morphAttribute.length; i < il; i++) {\n        const influence = morphInfluences[i];\n        const morph = morphAttribute[i];\n        if (influence === 0) continue;\n\n        _tempA.fromBufferAttribute(morph, a);\n\n        _tempB.fromBufferAttribute(morph, b);\n\n        _tempC.fromBufferAttribute(morph, c);\n\n        if (morphTargetsRelative) {\n          _morphA.addScaledVector(_tempA, influence);\n\n          _morphB.addScaledVector(_tempB, influence);\n\n          _morphC.addScaledVector(_tempC, influence);\n        } else {\n          _morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n          _morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n          _morphC.addScaledVector(_tempC.sub(_vC), influence);\n        }\n      }\n\n      _vA.add(_morphA);\n\n      _vB.add(_morphB);\n\n      _vC.add(_morphC);\n    }\n\n    if (object.isSkinnedMesh) {\n      // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n      object.boneTransform(a, _vA); // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n\n      object.boneTransform(b, _vB); // @ts-expect-error – https://github.com/three-types/three-ts-types/issues/37\n\n      object.boneTransform(c, _vC);\n    }\n\n    modifiedAttributeArray[a * 3 + 0] = _vA.x;\n    modifiedAttributeArray[a * 3 + 1] = _vA.y;\n    modifiedAttributeArray[a * 3 + 2] = _vA.z;\n    modifiedAttributeArray[b * 3 + 0] = _vB.x;\n    modifiedAttributeArray[b * 3 + 1] = _vB.y;\n    modifiedAttributeArray[b * 3 + 2] = _vB.z;\n    modifiedAttributeArray[c * 3 + 0] = _vC.x;\n    modifiedAttributeArray[c * 3 + 1] = _vC.y;\n    modifiedAttributeArray[c * 3 + 2] = _vC.z;\n  }\n\n  const geometry = object.geometry;\n  const material = object.material;\n  let a, b, c;\n  const index = geometry.index;\n  const positionAttribute = geometry.attributes.position;\n  const morphPosition = geometry.morphAttributes.position;\n  const morphTargetsRelative = geometry.morphTargetsRelative;\n  const normalAttribute = geometry.attributes.normal;\n  const morphNormal = geometry.morphAttributes.position;\n  const groups = geometry.groups;\n  const drawRange = geometry.drawRange;\n  let i, j, il, jl;\n  let group, groupMaterial;\n  let start, end;\n  const modifiedPosition = new Float32Array(positionAttribute.count * positionAttribute.itemSize);\n  const modifiedNormal = new Float32Array(normalAttribute.count * normalAttribute.itemSize);\n\n  if (index !== null) {\n    // indexed buffer geometry\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        groupMaterial = material[group.materialIndex];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = index.getX(j);\n          b = index.getX(j + 1);\n          c = index.getX(j + 2);\n\n          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(index.count, drawRange.start + drawRange.count);\n\n      for (i = start, il = end; i < il; i += 3) {\n        a = index.getX(i);\n        b = index.getX(i + 1);\n        c = index.getX(i + 2);\n\n        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  } else if (positionAttribute !== undefined) {\n    // non-indexed buffer geometry\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        groupMaterial = material[group.materialIndex];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = j;\n          b = j + 1;\n          c = j + 2;\n\n          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n      for (i = start, il = end; i < il; i += 3) {\n        a = i;\n        b = i + 1;\n        c = i + 2;\n\n        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  }\n\n  const morphedPositionAttribute = new Float32BufferAttribute(modifiedPosition, 3);\n  const morphedNormalAttribute = new Float32BufferAttribute(modifiedNormal, 3);\n  return {\n    positionAttribute: positionAttribute,\n    normalAttribute: normalAttribute,\n    morphedPositionAttribute: morphedPositionAttribute,\n    morphedNormalAttribute: morphedNormalAttribute\n  };\n}\n\nexport { computeMorphedAttributes, estimateBytesUsed, interleaveAttributes, mergeBufferAttributes, mergeBufferGeometries, mergeVertices, toTrianglesDrawMode };\n"]},"metadata":{},"sourceType":"module"}