{"ast":null,"code":"var _jsxFileName = \"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { formatUnits } from '@ethersproject/units';\nimport uniswapToken from '@uniswap/default-token-list';\nimport { ERC20Interface, useContractCall, useContractCalls, useEthers } from '@usedapp/core';\nimport React, { useEffect, useState } from 'react';\nimport { ERC1155Interface } from '../../interfaces/interfaces';\nimport styled from 'styled-components';\nimport { Colors } from '../../global/styles';\nimport { TextBold } from '../../typography/Text';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { TokenSVGIcon } from './TokenSVGIcon';\nimport { useAppSelector, useAppDispatch } from '../../hooks';\nimport { updatedSelectedItem } from './SelectedItemSlice';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const getTransactionsFor = async signerAddress => {\n  console.log('signer address : ', signerAddress);\n  const COVALENT_API_KEY = \"ckey_4aed01d0d6e248a7a4ab27acb8a\";\n  const COVALENT_MAINNET = {\n    url: \"https://api.covalenthq.com/v1/1/\"\n  };\n  const transactionsForAddress = `${COVALENT_MAINNET.url}address/${signerAddress}/transactions_v2/?key=${COVALENT_API_KEY}`; // Make a request for a user with a given ID\n\n  axios.get(transactionsForAddress).then(function (response) {\n    // handle success\n    console.log(response);\n  }).catch(function (error) {\n    // handle error\n    console.log(error);\n  }).then(function () {// always executed\n  });\n};\n\nfunction getTokenList(chainId) {\n  return uniswapToken.tokens.filter(token => token.chainId == chainId);\n}\n\nfunction useTokensBalance(tokenList, account) {\n  _s();\n\n  return useContractCalls(tokenList && account ? tokenList.map(token => ({\n    abi: ERC20Interface,\n    address: token.address,\n    method: 'balanceOf',\n    args: [account]\n  })) : []);\n}\n\n_s(useTokensBalance, \"6ND4zfY5dHBkBF1VdG9KQUxd1bQ=\", false, function () {\n  return [useContractCalls];\n});\n\nexport function useERC1155TokenBalance(tokenAddress, addresses, tokenIds) {\n  _s2();\n\n  var _useContractCall;\n\n  const [tokenBalances] = (_useContractCall = useContractCall(addresses && tokenAddress && {\n    abi: ERC1155Interface,\n    address: tokenAddress,\n    method: 'balanceOfBatch',\n    args: [addresses, tokenIds]\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n  return tokenBalances;\n}\n\n_s2(useERC1155TokenBalance, \"CyeqBowMBQuAu1HzqGLZIvpyK4g=\", false, function () {\n  return [useContractCall];\n});\n\nfunction useERC1155TokenBalances(tokenAddresses, addresses, tokenIds) {\n  _s3();\n\n  return useContractCalls(tokenAddresses && addresses ? tokenAddresses.map(tokenAddress => ({\n    abi: ERC1155Interface,\n    address: tokenAddress,\n    method: 'balanceOfBatch',\n    args: [addresses, tokenIds]\n  })) : []);\n}\n\n_s3(useERC1155TokenBalances, \"6ND4zfY5dHBkBF1VdG9KQUxd1bQ=\", false, function () {\n  return [useContractCalls];\n});\n\nexport function TokensList() {\n  _s4();\n\n  const {\n    chainId,\n    account\n  } = useEthers();\n  const tokenList = getTokenList(chainId);\n  const balances = useTokensBalance(tokenList, account);\n  const [badges, setBadges] = useState([]);\n  let mountedRef = true;\n  useEffect(() => {\n    const doAsync = async () => {\n      console.log('account : ', account);\n\n      if (!account || account === undefined) {\n        return;\n      }\n\n      getTransactionsFor(account);\n    };\n\n    if (mountedRef) {\n      doAsync();\n    }\n\n    return () => {\n      mountedRef = false;\n    };\n  }, [mountedRef]);\n  const selectedItemIndex = useAppSelector(state => {\n    console.log('selectedItemIndex: ', state.selectedItem.index);\n    return state.selectedItem.index;\n  });\n  const dispatch = useAppDispatch();\n\n  const handleItemSelect = (index, balance, holders, name, address) => {\n    dispatch(updatedSelectedItem({\n      index: index,\n      balance: balance,\n      holders: holders,\n      name: name,\n      address: address\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: badges && badges.map((section, idx) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: section.items && section.items.map((tokenId, idx) => /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(TokenItem, {\n                children: [/*#__PURE__*/_jsxDEV(TokenIconContainer, {\n                  onClick: () => handleItemSelect(idx, idx, 11, `Element ${idx}`, 'address'),\n                  children: [/*#__PURE__*/_jsxDEV(TokenSVGIcon, {\n                    src: '',\n                    alt: ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 156,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(TokenBalance, {\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: formatUnits(0)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 158,\n                      columnNumber: 28\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(TokenName, {\n                  children: [\"Badge Name \", idx]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 25\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, `section-${idx}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(TokensList, \"DApqL5ifXeV2smxbwIUCz3nqaQY=\", false, function () {\n  return [useEthers, useTokensBalance, useAppSelector, useAppDispatch];\n});\n\n_c = TokensList;\nconst List = styled.ul`\n`;\nconst ListItem = styled.li`\n`;\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = TokenItem;\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`;\n_c3 = TokenIconContainer;\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n\n`;\n_c4 = TokenName;\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`;\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 15px;\n`;\n_c5 = TokenBalance;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"TokensList\");\n$RefreshReg$(_c2, \"TokenItem\");\n$RefreshReg$(_c3, \"TokenIconContainer\");\n$RefreshReg$(_c4, \"TokenName\");\n$RefreshReg$(_c5, \"TokenBalance\");","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx"],"names":["formatUnits","uniswapToken","ERC20Interface","useContractCall","useContractCalls","useEthers","React","useEffect","useState","ERC1155Interface","styled","Colors","TextBold","Col","Container","Row","TokenSVGIcon","useAppSelector","useAppDispatch","updatedSelectedItem","axios","getTransactionsFor","signerAddress","console","log","COVALENT_API_KEY","COVALENT_MAINNET","url","transactionsForAddress","get","then","response","catch","error","getTokenList","chainId","tokens","filter","token","useTokensBalance","tokenList","account","map","abi","address","method","args","useERC1155TokenBalance","tokenAddress","addresses","tokenIds","tokenBalances","useERC1155TokenBalances","tokenAddresses","TokensList","balances","badges","setBadges","mountedRef","doAsync","undefined","selectedItemIndex","state","selectedItem","index","dispatch","handleItemSelect","balance","holders","name","section","idx","items","tokenId","List","ul","ListItem","li","TokenItem","TokenIconContainer","div","Yellow","TokenName","TokenTicker","Gray","TokenBalance"],"mappings":"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","sourcesContent":["import { formatUnits } from '@ethersproject/units'\nimport uniswapToken from '@uniswap/default-token-list'\nimport { ChainId, ERC20Interface, useContractCall, useContractCalls, useEthers } from '@usedapp/core'\nimport React, { useEffect, useState } from 'react'\nimport { ERC1155Interface } from '../../interfaces/interfaces'\nimport styled from 'styled-components'\nimport { Colors } from '../../global/styles'\nimport { TextBold } from '../../typography/Text'\nimport { TokenIcon } from './TokenIcon'\nimport { Col, Container, Row } from 'react-bootstrap'\nimport { TokenSVGIcon } from './TokenSVGIcon'\nimport { useAppSelector, useAppDispatch } from '../../hooks'\nimport { increment } from '../../features/counter/counterSlice'\nimport { updatedSelectedItem } from './SelectedItemSlice'\n\nimport axios from 'axios'\n\nexport const getTransactionsFor = async (signerAddress: string): Promise<void>=> {\n  console.log('signer address : ',signerAddress)\n  const COVALENT_API_KEY = \"ckey_4aed01d0d6e248a7a4ab27acb8a\"\n  const COVALENT_MAINNET = {\n    url: \"https://api.covalenthq.com/v1/1/\",\n  }\n\n  const transactionsForAddress = \n  `${COVALENT_MAINNET.url}address/${signerAddress}/transactions_v2/?key=${COVALENT_API_KEY}`\n\n\n  // Make a request for a user with a given ID\n  axios.get(transactionsForAddress)\n    .then(function (response) {\n      // handle success\n      console.log(response);\n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n    })\n    .then(function () {\n      // always executed\n    });\n}\n\n\nfunction getTokenList(chainId?: ChainId) {\n  return uniswapToken.tokens.filter((token) => token.chainId == chainId)\n}\n\nfunction useTokensBalance(tokenList: any[], account?: string | null) {\n  return useContractCalls(\n    tokenList && account\n      ? tokenList.map((token: any) => ({\n          abi: ERC20Interface,\n          address: token.address,\n          method: 'balanceOf',\n          args: [account],\n        }))\n      : []\n  )\n}\n\nexport function useERC1155TokenBalance(tokenAddress: string,  addresses: (string|undefined|null)[], tokenIds: number[]): any[] {\n  const [tokenBalances] =\n    useContractCall(\n        addresses &&\n        tokenAddress && {\n          abi: ERC1155Interface,\n          address: tokenAddress,\n          method: 'balanceOfBatch',\n          args: [addresses, tokenIds],\n        }\n    ) ?? []\n  return tokenBalances\n}\n\nfunction useERC1155TokenBalances(tokenAddresses: string[], addresses: (string|undefined|null)[], tokenIds: number[]): any[] {\n  return useContractCalls(\n    tokenAddresses && addresses\n      ? tokenAddresses.map((tokenAddress: any) => ({\n          abi: ERC1155Interface,\n          address: tokenAddress,\n          method: 'balanceOfBatch',\n          args: [addresses, tokenIds],\n        }))\n      : []\n  )\n}\n\nexport function TokensList() {\n  const { chainId, account } = useEthers()\n  const tokenList = getTokenList(chainId)\n  const balances = useTokensBalance(tokenList, account);\n  const [badges, setBadges] = useState([]);\n\n\n  let mountedRef = true;\n\n\n \n\n  useEffect(() => {\n    const doAsync = async () => {\n      console.log('account : ',account);\n      if(!account || account === undefined){\n        return;\n      }\n      getTransactionsFor(account);  \n    }\n    if(mountedRef) {\n      doAsync();\n    }\n    return () => {\n      mountedRef = false;\n    }; \n\n  }, [mountedRef]);\n\n\n\n    const selectedItemIndex = useAppSelector((state) => {\n      console.log('selectedItemIndex: ',state.selectedItem.index)\n      return state.selectedItem.index;\n    })\n    const dispatch = useAppDispatch();\n\n    const handleItemSelect =(index: number, balance: number, holders: number,name: string, address: string) =>  {\n      \n      dispatch (updatedSelectedItem(\n        {\n          index: index,\n          balance: balance,\n          holders: holders,\n          name: name,\n          address: address        \n        }\n      ))\n    }\n\n\n  return (\n\n    \n\n    <ul>\n    {badges &&\n        badges.map((section: any, idx:number) => {\n          return (\n          <li key={`section-${idx}`}> \n          <Container>\n          <Row>\n            {section.items &&\n                    section.items.map((tokenId: number, idx:number) => (\n                      <Col key={idx}>\n                        <TokenItem > \n                        <TokenIconContainer onClick={() => handleItemSelect(idx,idx ,11,`Element ${idx}`,'address')}>\n                          <TokenSVGIcon src={''} alt={''}></TokenSVGIcon>\n                          <TokenBalance> \n                           <p>{formatUnits(0)}</p>\n                          </TokenBalance>\n                        </TokenIconContainer>\n                        <TokenName>Badge Name {idx}</TokenName>\n                      </TokenItem>\n                      </Col>\n                    ))}\n            </Row>\n\n          </Container>\n    \n          </li>\n      )})}\n    </ul>\n  )\n}\n\nconst List = styled.ul`\n`\n\nconst ListItem = styled.li`\n`\n\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`\n\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`\n\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n\n`\n\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`\n\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 15px;\n`"]},"metadata":{},"sourceType":"module"}