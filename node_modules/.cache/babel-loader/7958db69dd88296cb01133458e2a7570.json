{"ast":null,"code":"import _defineProperty from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { TextureLoader } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { useEffect } from 'react';\n\nvar IsObject = function IsObject(url) {\n  return url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\n};\n\nfunction useTexture(input) {\n  var gl = useThree(function (state) {\n    return state.gl;\n  });\n  var textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input); // https://github.com/mrdoob/three.js/issues/2269\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n\n  useEffect(function () {\n    var array = Array.isArray(textures) ? textures : [textures];\n    array.forEach(gl.initTexture);\n  }, [gl, textures]);\n\n  if (IsObject(input)) {\n    var keys = Object.keys(input);\n    var keyed = {};\n    keys.forEach(function (key) {\n      return Object.assign(keyed, _defineProperty({}, key, textures[keys.indexOf(key)]));\n    });\n    return keyed;\n  } else {\n    return textures;\n  }\n}\n\nuseTexture.preload = function (url) {\n  return useLoader.preload(TextureLoader, url);\n}; // @ts-expect-error new in r3f 7.0.5\n\n\nuseTexture.clear = function (input) {\n  return useLoader.clear(TextureLoader, input);\n};\n\nexport { IsObject, useTexture };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/@react-three/drei/core/useTexture.js"],"names":["TextureLoader","useThree","useLoader","useEffect","IsObject","url","Object","Array","isArray","useTexture","input","gl","state","textures","values","array","forEach","initTexture","keys","keyed","key","assign","indexOf","preload","clear"],"mappings":";AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,GAAG;AAAA,SAAIA,GAAG,KAAKC,MAAM,CAACD,GAAD,CAAd,IAAuB,CAACE,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAxB,IAA8C,OAAOA,GAAP,KAAe,UAAjE;AAAA,CAApB;;AACA,SAASI,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAMC,EAAE,GAAGV,QAAQ,CAAC,UAAAW,KAAK;AAAA,WAAIA,KAAK,CAACD,EAAV;AAAA,GAAN,CAAnB;AACA,MAAME,QAAQ,GAAGX,SAAS,CAACF,aAAD,EAAgBI,QAAQ,CAACM,KAAD,CAAR,GAAkBJ,MAAM,CAACQ,MAAP,CAAcJ,KAAd,CAAlB,GAAyCA,KAAzD,CAA1B,CAFyB,CAEkE;AAC3F;;AAEAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMY,KAAK,GAAGR,KAAK,CAACC,OAAN,CAAcK,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAnD;AACAE,IAAAA,KAAK,CAACC,OAAN,CAAcL,EAAE,CAACM,WAAjB;AACD,GAHQ,EAGN,CAACN,EAAD,EAAKE,QAAL,CAHM,CAAT;;AAKA,MAAIT,QAAQ,CAACM,KAAD,CAAZ,EAAqB;AACnB,QAAMQ,IAAI,GAAGZ,MAAM,CAACY,IAAP,CAAYR,KAAZ,CAAb;AACA,QAAMS,KAAK,GAAG,EAAd;AACAD,IAAAA,IAAI,CAACF,OAAL,CAAa,UAAAI,GAAG;AAAA,aAAId,MAAM,CAACe,MAAP,CAAcF,KAAd,sBACjBC,GADiB,EACXP,QAAQ,CAACK,IAAI,CAACI,OAAL,CAAaF,GAAb,CAAD,CADG,EAAJ;AAAA,KAAhB;AAGA,WAAOD,KAAP;AACD,GAPD,MAOO;AACL,WAAON,QAAP;AACD;AACF;;AAEDJ,UAAU,CAACc,OAAX,GAAqB,UAAAlB,GAAG;AAAA,SAAIH,SAAS,CAACqB,OAAV,CAAkBvB,aAAlB,EAAiCK,GAAjC,CAAJ;AAAA,CAAxB,C,CAAmE;;;AAGnEI,UAAU,CAACe,KAAX,GAAmB,UAAAd,KAAK;AAAA,SAAIR,SAAS,CAACsB,KAAV,CAAgBxB,aAAhB,EAA+BU,KAA/B,CAAJ;AAAA,CAAxB;;AAEA,SAASN,QAAT,EAAmBK,UAAnB","sourcesContent":["import { TextureLoader } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { useEffect } from 'react';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input); // https://github.com/mrdoob/three.js/issues/2269\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n\n  useEffect(() => {\n    const array = Array.isArray(textures) ? textures : [textures];\n    array.forEach(gl.initTexture);\n  }, [gl, textures]);\n\n  if (IsObject(input)) {\n    const keys = Object.keys(input);\n    const keyed = {};\n    keys.forEach(key => Object.assign(keyed, {\n      [key]: textures[keys.indexOf(key)]\n    }));\n    return keyed;\n  } else {\n    return textures;\n  }\n}\n\nuseTexture.preload = url => useLoader.preload(TextureLoader, url); // @ts-expect-error new in r3f 7.0.5\n\n\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\nexport { IsObject, useTexture };\n"]},"metadata":{},"sourceType":"module"}