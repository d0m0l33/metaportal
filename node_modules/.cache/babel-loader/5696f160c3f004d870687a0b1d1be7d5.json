{"ast":null,"code":"var _jsxFileName = \"/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx\",\n    _s = $RefreshSig$();\n\nimport { formatUnits } from '@ethersproject/units';\nimport uniswapToken from '@uniswap/default-token-list';\nimport { useEthers } from '@usedapp/core';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Colors } from '../../global/styles';\nimport { TextBold } from '../../typography/Text';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { TokenSVGIcon } from './TokenSVGIcon';\nimport { useAppSelector, useAppDispatch } from '../../hooks';\nimport { updatedSelectedItem } from './SelectedItemSlice';\nimport { Button } from '../base/Button';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RANDOM_VISOR_COLORS = ['black', 'white', 'grey', 'green', 'blue', 'hot-pink', 'purple', 'silver', 'bronze', 'gold'];\nconst ALL_BADGES = {\n  metaPortal: {\n    accountCreation: {\n      greaterThan: [{\n        value: 0,\n        badgeName: 'Space Cadet'\n      }, {\n        value: 0,\n        badgeName: 'WAGMI Rank 1'\n      }]\n    },\n    successfulTransactions: {\n      greaterThan: [{\n        value: 25,\n        badgeName: 'Explorer Rank 1'\n      }, {\n        value: 50,\n        badgeName: 'Explorer Rank 2'\n      }, {\n        value: 75,\n        badgeName: 'Explorer Rank 3'\n      }, {\n        value: 100,\n        badgeName: 'Sky Captain Rank 1'\n      }]\n    }\n  }\n};\nconst initBadges = [];\nexport const getTransactionsFor = async signerAddress => {\n  console.log('signer address : ', signerAddress);\n  const COVALENT_API_KEY = \"ckey_4aed01d0d6e248a7a4ab27acb8a\";\n  const COVALENT_MAINNET = {\n    url: \"https://api.covalenthq.com/v1/1/\"\n  };\n  const transactionsForAddress = `${COVALENT_MAINNET.url}address/${signerAddress}/transactions_v2/?key=${COVALENT_API_KEY}`; // Make a request for a user with a given ID\n\n  return axios.get(transactionsForAddress).then(function (response) {\n    // handle success\n    return response;\n  }).catch(function (error) {\n    // handle error\n    console.log(error);\n    return null;\n  });\n};\nexport const parseResponseForItems = response => {\n  if (!response || !response.data || !response.data.data) {\n    return null;\n  }\n\n  return response.data.data.items;\n};\nexport const getSuccessfulTransactionCount = items => {\n  let successCount = 0;\n  items.forEach(item => {\n    if (item.successful === true) {\n      successCount++;\n    }\n  });\n  return successCount;\n};\nexport const parseForBadgesForTypes = values => {\n  return [...extractBadgesForBadgeCriteria('successfulTransactions', values[0]), ...extractBadgesForBadgeCriteria('accountCreation', 1)];\n};\nexport const extractBadgesForBadgeCriteria = (badgeType, valueAchieved) => {\n  let successCount = 0;\n  let extractedBadges = [];\n  ALL_BADGES['metaPortal'][badgeType]['greaterThan'].forEach(badgeItem => {\n    if (valueAchieved > badgeItem.value) {\n      extractedBadges.push(badgeItem);\n    }\n  });\n  return extractedBadges;\n};\n\nfunction getTokenList(chainId) {\n  return uniswapToken.tokens.filter(token => token.chainId == chainId);\n}\n\nexport function TokensList() {\n  _s();\n\n  const {\n    chainId,\n    account\n  } = useEthers();\n  const tokenList = getTokenList(chainId); // const balances = useTokensBalance(tokenList, account);\n\n  const [badges, setBadges] = useState(initBadges);\n  let mountedRef = true;\n  useEffect(() => {\n    const doAsync = async () => {\n      init();\n    };\n\n    if (mountedRef) {\n      doAsync();\n    }\n\n    return () => {\n      mountedRef = false;\n    };\n  }, [mountedRef]);\n\n  const init = async () => {\n    console.log('account : ', account);\n\n    if (!account || account === undefined) {\n      return;\n    }\n\n    console.log('awaiting response....');\n    const response = await getTransactionsFor(account);\n    console.log('axios : ', response);\n\n    if (!response) {\n      return;\n    }\n\n    const items = parseResponseForItems(response);\n\n    if (!items) {\n      return;\n    }\n\n    const successCount = getSuccessfulTransactionCount(items);\n    console.log('successes : ', successCount);\n    const badges = parseForBadgesForTypes([successCount]);\n    console.log('badges : ', badges);\n    loadBadges(badges);\n  };\n\n  const selectedItemIndex = useAppSelector(state => {\n    return state.selectedItem.index;\n  });\n  const dispatch = useAppDispatch();\n\n  const handleItemSelect = (index, balance, holders, name, address) => {\n    dispatch(updatedSelectedItem({\n      index: index,\n      balance: balance,\n      holders: holders,\n      name: name,\n      address: address,\n      color: index >= 0 ? RANDOM_VISOR_COLORS[index] : null\n    }));\n  };\n\n  const loadBadges = transactionItems => {\n    setBadges(transactionItems);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: badges.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Not badges available...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 31\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: badges.map((badge, idx) => {\n          return /*#__PURE__*/_jsxDEV(Col, {\n            sm: 4,\n            md: 2,\n            lg: 2,\n            children: /*#__PURE__*/_jsxDEV(Container, {\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(TokenItem, {\n                    children: [/*#__PURE__*/_jsxDEV(TokenIconContainer, {\n                      onClick: () => handleItemSelect(idx, idx, 11, `Element ${idx}`, 'address'),\n                      children: [/*#__PURE__*/_jsxDEV(TokenSVGIcon, {\n                        src: '',\n                        alt: ''\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 231,\n                        columnNumber: 23\n                      }, this), /*#__PURE__*/_jsxDEV(TokenBalance, {\n                        children: formatUnits(0, 0)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 232,\n                        columnNumber: 23\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 230,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(TokenName, {\n                      children: badge.badgeName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 236,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(MintButton, {\n                      children: \"Mint\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 237,\n                      columnNumber: 21\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 229,\n                    columnNumber: 21\n                  }, this)\n                }, `SubSection-${idx}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this)\n          }, `parentSection-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TokensList, \"MQvFEOnOe88R0QOeNWQY/1PpGk4=\", false, function () {\n  return [useEthers, useAppSelector, useAppDispatch];\n});\n\n_c = TokensList;\nconst MintButton = styled(Button)`\n  background-color: ${Colors.Yellow[100]};\n`;\n_c2 = MintButton;\nconst List = styled.ul`\n`;\nconst ListItem = styled.li`\n`;\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`;\n_c3 = TokenItem;\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`;\n_c4 = TokenIconContainer;\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n\n`;\n_c5 = TokenName;\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`;\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 15px;\n`;\n_c6 = TokenBalance;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"TokensList\");\n$RefreshReg$(_c2, \"MintButton\");\n$RefreshReg$(_c3, \"TokenItem\");\n$RefreshReg$(_c4, \"TokenIconContainer\");\n$RefreshReg$(_c5, \"TokenName\");\n$RefreshReg$(_c6, \"TokenBalance\");","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/src/components/TokensList/TokensList.tsx"],"names":["formatUnits","uniswapToken","useEthers","React","useEffect","useState","styled","Colors","TextBold","Col","Container","Row","TokenSVGIcon","useAppSelector","useAppDispatch","updatedSelectedItem","Button","axios","RANDOM_VISOR_COLORS","ALL_BADGES","metaPortal","accountCreation","greaterThan","value","badgeName","successfulTransactions","initBadges","getTransactionsFor","signerAddress","console","log","COVALENT_API_KEY","COVALENT_MAINNET","url","transactionsForAddress","get","then","response","catch","error","parseResponseForItems","data","items","getSuccessfulTransactionCount","successCount","forEach","item","successful","parseForBadgesForTypes","values","extractBadgesForBadgeCriteria","badgeType","valueAchieved","extractedBadges","badgeItem","push","getTokenList","chainId","tokens","filter","token","TokensList","account","tokenList","badges","setBadges","mountedRef","doAsync","init","undefined","loadBadges","selectedItemIndex","state","selectedItem","index","dispatch","handleItemSelect","balance","holders","name","address","color","transactionItems","length","map","badge","idx","MintButton","Yellow","List","ul","ListItem","li","TokenItem","TokenIconContainer","div","TokenName","TokenTicker","Gray","TokenBalance"],"mappings":"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","sourcesContent":["import { formatUnits } from '@ethersproject/units'\nimport uniswapToken from '@uniswap/default-token-list'\nimport { ChainId, ERC20Interface, useContractCall, useContractCalls, useEthers } from '@usedapp/core'\nimport React, { useEffect, useState } from 'react'\nimport { ERC1155Interface } from '../../interfaces/interfaces'\nimport styled from 'styled-components'\nimport { Colors } from '../../global/styles'\nimport { TextBold } from '../../typography/Text'\nimport { TokenIcon } from './TokenIcon'\nimport { Col, Container, Row } from 'react-bootstrap'\nimport { TokenSVGIcon } from './TokenSVGIcon'\nimport { useAppSelector, useAppDispatch } from '../../hooks'\nimport { increment } from '../../features/counter/counterSlice'\nimport { updatedSelectedItem } from './SelectedItemSlice'\nimport { Button } from '../base/Button'\n\n\nimport axios, { AxiosResponse } from 'axios'\n\n\nconst RANDOM_VISOR_COLORS = [\n  'black',\n  'white',\n  'grey',\n  'green',\n  'blue',\n  'hot-pink',\n  'purple',\n  'silver',\n  'bronze',\n  'gold'\n]\n\n\nconst ALL_BADGES: any = {\n  metaPortal : {\n    accountCreation : {\n      greaterThan: [\n        {\n          value: 0,\n          badgeName: 'Space Cadet',\n        },\n        {\n          value: 0,\n          badgeName: 'WAGMI Rank 1',\n        },\n      ]\n    },\n    successfulTransactions : {\n\n      greaterThan: [\n        {\n          value: 25,\n          badgeName: 'Explorer Rank 1',\n        },\n        {\n          value: 50,\n          badgeName: 'Explorer Rank 2',\n        },\n        {\n          value: 75,\n          badgeName: 'Explorer Rank 3',\n        },\n        {\n          value: 100,\n          badgeName: 'Sky Captain Rank 1',\n        }\n      ]\n    }\n  }\n\n}\n\nconst initBadges: any[] = [];\n\nexport const getTransactionsFor = async (signerAddress: string): Promise<AxiosResponse|null>=> {\n  console.log('signer address : ',signerAddress)\n  const COVALENT_API_KEY = \"ckey_4aed01d0d6e248a7a4ab27acb8a\"\n  const COVALENT_MAINNET = {\n    url: \"https://api.covalenthq.com/v1/1/\",\n  }\n\n  const transactionsForAddress = \n  `${COVALENT_MAINNET.url}address/${signerAddress}/transactions_v2/?key=${COVALENT_API_KEY}`\n\n\n  // Make a request for a user with a given ID\n  return axios.get(transactionsForAddress)\n    .then(function (response) {\n      // handle success\n      return response\n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n\n      return null;\n    });\n}\n\n\nexport const parseResponseForItems =(response: AxiosResponse): (any[]|null) => {\n  if(!response || !response.data || !response.data.data) {\n    return null;\n  }\n  return response.data.data.items;\n}\n\nexport const getSuccessfulTransactionCount =(items: any[]): number => {\n  let successCount = 0;\n  items.forEach((item) => {\n    if(item.successful === true) {\n      successCount++;\n    }\n  });\n  return successCount;\n}\n\n\nexport const parseForBadgesForTypes =(values: number[]): any[] => {\n  return [\n    ...extractBadgesForBadgeCriteria('successfulTransactions',values[0]),\n    ...extractBadgesForBadgeCriteria('accountCreation',1)\n  ]\n}\n\n\nexport const extractBadgesForBadgeCriteria = (badgeType: string, valueAchieved: number): any[] => {\n  let successCount = 0;\n  let extractedBadges: any[] = [];\n  \n  ALL_BADGES['metaPortal'][badgeType]['greaterThan'].forEach((badgeItem: any) => {\n    if(valueAchieved > badgeItem.value ) {\n      extractedBadges.push(badgeItem);\n    }\n  });\n  return extractedBadges;\n}\n\nfunction getTokenList(chainId?: ChainId) {\n  return uniswapToken.tokens.filter((token) => token.chainId == chainId)\n}\n\n\n\nexport function TokensList() {\n  const { chainId, account } = useEthers()\n  const tokenList = getTokenList(chainId)\n  // const balances = useTokensBalance(tokenList, account);\n  const [badges, setBadges] = useState(initBadges);\n  let mountedRef = true;\n\n  useEffect(() => {\n    const doAsync = async () => {\n      init();\n    }\n    if(mountedRef) {\n      doAsync();\n    }\n    return () => {\n      mountedRef = false;\n    }; \n\n\n  }, [mountedRef]);\n\n  const init = async () => {\n    console.log('account : ',account);\n    if(!account || account === undefined){\n      return;\n    }\n    console.log('awaiting response....')\n   const response =  await getTransactionsFor(account);  \n   console.log('axios : ',response);\n\n    if(!response){\n      return;\n    }\n\n    const items = parseResponseForItems(response);\n    if(!items) {\n      return;\n    }\n    const successCount = getSuccessfulTransactionCount(items);\n\n    console.log('successes : ',successCount);\n    const badges = parseForBadgesForTypes([successCount]);\n    console.log('badges : ',badges);\n    loadBadges(badges);\n  }\n\n    const selectedItemIndex = useAppSelector((state) => {\n      return state.selectedItem.index;\n    })\n    const dispatch = useAppDispatch();\n\n    const handleItemSelect =(index: number, balance: number, holders: number,name: string, address: string) =>  {\n    \n      dispatch (updatedSelectedItem(\n        {\n          index: index,\n          balance: balance,\n          holders: holders,\n          name: name,\n          address: address,\n          color: index >= 0 ? RANDOM_VISOR_COLORS[index] : null,\n        }\n      ))\n\n    }\n\n\n    const loadBadges =(transactionItems: any[]): void => {\n      setBadges(transactionItems);\n    }\n\n\n  return (\n    <div>\n      {badges.length === 0 ? (<div>Not badges available...</div> ): (\n        <div>\n        <Row>\n        {badges.map((badge: any, idx:number) => {\n              return (\n              <Col sm={4} md={2} lg={2} key={`parentSection-${idx}`}> \n              <Container>\n              <Row>\n                  <Col key={`SubSection-${idx}`}>\n                    <TokenItem > \n                    <TokenIconContainer onClick={() => handleItemSelect(idx,idx ,11,`Element ${idx}`,'address')}>\n                      <TokenSVGIcon src={''} alt={''}></TokenSVGIcon>\n                      <TokenBalance> \n                        {formatUnits(0,0)}\n                      </TokenBalance>\n                    </TokenIconContainer>\n                    <TokenName>{badge.badgeName}</TokenName>\n                    <MintButton >Mint</MintButton>\n                  </TokenItem>\n                  </Col>\n              </Row>\n              </Container>\n              </Col>\n          )})}\n        </Row>\n      </div>\n    )}\n    </div>\n  )\n}\n\nconst MintButton = styled(Button)`\n  background-color: ${Colors.Yellow[100]};\n`\n\nconst List = styled.ul`\n`\n\nconst ListItem = styled.li`\n`\n\nconst TokenItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`\n\nconst TokenIconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  height:120px;\n  margin: 0.2em;\n  border: 1px solid #ebebeb};\n  background: rgb(60, 60, 60);\n  background: rgba(149, 149, 149, 0.4);\n  position: relative;\n\n  &:hover,\n  &:focus, \n  &:active {\n    color: ${Colors.Yellow[100]};\n    border-width: medium;\n    border-color: ${Colors.Yellow[100]};\n  }\n`\n\nconst TokenName = styled(TextBold)`\n  margin-left: 4px;\n  font-size: 12px;\n\n`\n\nconst TokenTicker = styled(TextBold)`\n  grid-area: ticker;\n  color: ${Colors.Gray[600]};\n`\n\nconst TokenBalance = styled(TextBold)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding:0.25em;\n  font-size: 15px;\n`"]},"metadata":{},"sourceType":"module"}