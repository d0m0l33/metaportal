{"ast":null,"code":"import _objectWithoutProperties from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"color\", \"segments\", \"scale\", \"zoom\", \"grayscale\", \"url\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\nvar ImageMaterialImpl = shaderMaterial({\n  color: new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0\n},\n/* glsl */\n\"\\n  varying vec2 vUv;\\n  void main() {\\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\\n    vUv = uv;\\n  }\\n\",\n/* glsl */\n\"\\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\\n  varying vec2 vUv;\\n  uniform vec2 scale;\\n  uniform vec2 imageBounds;\\n  uniform vec3 color;\\n  uniform sampler2D map;\\n  uniform float zoom;\\n  uniform float grayscale;\\n  const vec3 luma = vec3(.299, 0.587, 0.114);\\n  vec4 toGrayscale(vec4 color, float intensity) {\\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\\n  }\\n  vec2 aspect(vec2 size) {\\n    return size / min(size.x, size.y);\\n  }\\n  void main() {\\n    vec2 s = aspect(scale);\\n    vec2 i = aspect(imageBounds);\\n    float rs = s.x / s.y;\\n    float ri = i.x / i.y;\\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n    vec2 uv = vUv * s / new + offset;\\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);\\n  }\\n\");\nvar Image = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      color = _ref.color,\n      _ref$segments = _ref.segments,\n      segments = _ref$segments === void 0 ? 1 : _ref$segments,\n      _ref$scale = _ref.scale,\n      scale = _ref$scale === void 0 ? 1 : _ref$scale,\n      _ref$zoom = _ref.zoom,\n      zoom = _ref$zoom === void 0 ? 1 : _ref$zoom,\n      _ref$grayscale = _ref.grayscale,\n      grayscale = _ref$grayscale === void 0 ? 0 : _ref$grayscale,\n      url = _ref.url,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  var texture = useTexture(url);\n  var planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  var imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    zoom: zoom,\n    grayscale: grayscale,\n    scale: planeBounds,\n    imageBounds: imageBounds\n  }), children);\n});\nexport { Image };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/@react-three/drei/core/Image.js"],"names":["_extends","React","THREE","extend","shaderMaterial","useTexture","ImageMaterialImpl","color","Color","scale","imageBounds","map","zoom","grayscale","Image","forwardRef","ref","children","segments","url","props","ImageMaterial","texture","planeBounds","Array","isArray","image","width","height","createElement","args"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,IAAMC,iBAAiB,GAAGF,cAAc,CAAC;AACvCG,EAAAA,KAAK,EAAE,IAAIL,KAAK,CAACM,KAAV,CAAgB,OAAhB,CADgC;AAEvCC,EAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFgC;AAGvCC,EAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH0B;AAIvCC,EAAAA,GAAG,EAAE,IAJkC;AAKvCC,EAAAA,IAAI,EAAE,CALiC;AAMvCC,EAAAA,SAAS,EAAE;AAN4B,CAAD;AAQxC;AARwC;AAgBxC;AAhBwC,sgCAAxC;AA6CA,IAAMC,KAAK,GAAG,aAAab,KAAK,CAACc,UAAN,CAAiB,gBASzCC,GATyC,EASjC;AAAA,MARTC,QAQS,QARTA,QAQS;AAAA,MAPTV,KAOS,QAPTA,KAOS;AAAA,2BANTW,QAMS;AAAA,MANTA,QAMS,8BANE,CAMF;AAAA,wBALTT,KAKS;AAAA,MALTA,KAKS,2BALD,CAKC;AAAA,uBAJTG,IAIS;AAAA,MAJTA,IAIS,0BAJF,CAIE;AAAA,4BAHTC,SAGS;AAAA,MAHTA,SAGS,+BAHG,CAGH;AAAA,MAFTM,GAES,QAFTA,GAES;AAAA,MADNC,KACM;;AACTjB,EAAAA,MAAM,CAAC;AACLkB,IAAAA,aAAa,EAAEf;AADV,GAAD,CAAN;AAGA,MAAMgB,OAAO,GAAGjB,UAAU,CAACc,GAAD,CAA1B;AACA,MAAMI,WAAW,GAAGC,KAAK,CAACC,OAAN,CAAchB,KAAd,IAAuB,CAACA,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAAvB,GAA8C,CAACA,KAAD,EAAQA,KAAR,CAAlE;AACA,MAAMC,WAAW,GAAG,CAACY,OAAO,CAACI,KAAR,CAAcC,KAAf,EAAsBL,OAAO,CAACI,KAAR,CAAcE,MAApC,CAApB;AACA,SAAO,aAAa3B,KAAK,CAAC4B,aAAN,CAAoB,MAApB,EAA4B7B,QAAQ,CAAC;AACvDgB,IAAAA,GAAG,EAAEA,GADkD;AAEvDP,IAAAA,KAAK,EAAEA;AAFgD,GAAD,EAGrDW,KAHqD,CAApC,EAGT,aAAanB,KAAK,CAAC4B,aAAN,CAAoB,eAApB,EAAqC;AAC3DC,IAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAOZ,QAAP,EAAiBA,QAAjB;AADqD,GAArC,CAHJ,EAKhB,aAAajB,KAAK,CAAC4B,aAAN,CAAoB,eAApB,EAAqC;AACpDtB,IAAAA,KAAK,EAAEA,KAD6C;AAEpDI,IAAAA,GAAG,EAAEW,OAF+C;AAGpDV,IAAAA,IAAI,EAAEA,IAH8C;AAIpDC,IAAAA,SAAS,EAAEA,SAJyC;AAKpDJ,IAAAA,KAAK,EAAEc,WAL6C;AAMpDb,IAAAA,WAAW,EAAEA;AANuC,GAArC,CALG,EAYhBO,QAZgB,CAApB;AAaD,CA7B0B,CAA3B;AA+BA,SAASH,KAAT","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\n\nconst ImageMaterialImpl = shaderMaterial({\n  color: new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0\n},\n/* glsl */\n`\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`,\n/* glsl */\n`\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);\n  }\n`);\nconst Image = /*#__PURE__*/React.forwardRef(({\n  children,\n  color,\n  segments = 1,\n  scale = 1,\n  zoom = 1,\n  grayscale = 0,\n  url,\n  ...props\n}, ref) => {\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  const texture = useTexture(url);\n  const planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  const imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    zoom: zoom,\n    grayscale: grayscale,\n    scale: planeBounds,\n    imageBounds: imageBounds\n  }), children);\n});\n\nexport { Image };\n"]},"metadata":{},"sourceType":"module"}