{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshPhysicalMaterial } from 'three';\nimport { useFrame } from '@react-three/fiber';\nimport distort from '../helpers/glsl/distort.vert.glsl.js';\n\nclass DistortMaterialImpl extends MeshPhysicalMaterial {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(parameters);\n    this.setValues(parameters);\n    this._time = {\n      value: 0\n    };\n    this._distort = {\n      value: 0.4\n    };\n    this._radius = {\n      value: 1\n    };\n  }\n\n  onBeforeCompile(shader) {\n    shader.uniforms.time = this._time;\n    shader.uniforms.radius = this._radius;\n    shader.uniforms.distort = this._distort;\n    shader.vertexShader = `\n      uniform float time;\n      uniform float radius;\n      uniform float distort;\n      ${distort}\n      ${shader.vertexShader}\n    `;\n    shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', `\n        float updateTime = time / 50.0;\n        float noise = snoise(vec3(position / 2.0 + updateTime * 5.0));\n        vec3 transformed = vec3(position * (noise * pow(distort, 2.0) + radius));\n        `);\n  }\n\n  get time() {\n    return this._time.value;\n  }\n\n  set time(v) {\n    this._time.value = v;\n  }\n\n  get distort() {\n    return this._distort.value;\n  }\n\n  set distort(v) {\n    this._distort.value = v;\n  }\n\n  get radius() {\n    return this._radius.value;\n  }\n\n  set radius(v) {\n    this._radius.value = v;\n  }\n\n}\n\nconst MeshDistortMaterial = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    speed = 1,\n    ...props\n  } = _ref;\n  const [material] = React.useState(() => new DistortMaterialImpl());\n  useFrame(state => material && (material.time = state.clock.getElapsedTime() * speed));\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    dispose: undefined,\n    object: material,\n    ref: ref,\n    attach: \"material\"\n  }, props));\n});\nexport { MeshDistortMaterial };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/@react-three/drei/core/MeshDistortMaterial.js"],"names":["_extends","React","MeshPhysicalMaterial","useFrame","distort","DistortMaterialImpl","constructor","parameters","setValues","_time","value","_distort","_radius","onBeforeCompile","shader","uniforms","time","radius","vertexShader","replace","v","MeshDistortMaterial","forwardRef","ref","speed","props","material","useState","state","clock","getElapsedTime","createElement","dispose","undefined","object","attach"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,oBAAT,QAAqC,OAArC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,OAAP,MAAoB,sCAApB;;AAEA,MAAMC,mBAAN,SAAkCH,oBAAlC,CAAuD;AACrDI,EAAAA,WAAW,GAAkB;AAAA,QAAjBC,UAAiB,uEAAJ,EAAI;AAC3B,UAAMA,UAAN;AACA,SAAKC,SAAL,CAAeD,UAAf;AACA,SAAKE,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGA,SAAKC,QAAL,GAAgB;AACdD,MAAAA,KAAK,EAAE;AADO,KAAhB;AAGA,SAAKE,OAAL,GAAe;AACbF,MAAAA,KAAK,EAAE;AADM,KAAf;AAGD;;AAEDG,EAAAA,eAAe,CAACC,MAAD,EAAS;AACtBA,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,KAAKP,KAA5B;AACAK,IAAAA,MAAM,CAACC,QAAP,CAAgBE,MAAhB,GAAyB,KAAKL,OAA9B;AACAE,IAAAA,MAAM,CAACC,QAAP,CAAgBX,OAAhB,GAA0B,KAAKO,QAA/B;AACAG,IAAAA,MAAM,CAACI,YAAP,GAAuB;AAC3B;AACA;AACA;AACA,QAAQd,OAAQ;AAChB,QAAQU,MAAM,CAACI,YAAa;AAC5B,KANI;AAOAJ,IAAAA,MAAM,CAACI,YAAP,GAAsBJ,MAAM,CAACI,YAAP,CAAoBC,OAApB,CAA4B,yBAA5B,EAAwD;AAClF;AACA;AACA;AACA,SAJ0B,CAAtB;AAKD;;AAEO,MAAJH,IAAI,GAAG;AACT,WAAO,KAAKP,KAAL,CAAWC,KAAlB;AACD;;AAEO,MAAJM,IAAI,CAACI,CAAD,EAAI;AACV,SAAKX,KAAL,CAAWC,KAAX,GAAmBU,CAAnB;AACD;;AAEU,MAAPhB,OAAO,GAAG;AACZ,WAAO,KAAKO,QAAL,CAAcD,KAArB;AACD;;AAEU,MAAPN,OAAO,CAACgB,CAAD,EAAI;AACb,SAAKT,QAAL,CAAcD,KAAd,GAAsBU,CAAtB;AACD;;AAES,MAANH,MAAM,GAAG;AACX,WAAO,KAAKL,OAAL,CAAaF,KAApB;AACD;;AAES,MAANO,MAAM,CAACG,CAAD,EAAI;AACZ,SAAKR,OAAL,CAAaF,KAAb,GAAqBU,CAArB;AACD;;AAvDoD;;AA2DvD,MAAMC,mBAAmB,GAAG,aAAapB,KAAK,CAACqB,UAAN,CAAiB,OAGvDC,GAHuD,KAG/C;AAAA,MAHgD;AACzDC,IAAAA,KAAK,GAAG,CADiD;AAEzD,OAAGC;AAFsD,GAGhD;AACT,QAAM,CAACC,QAAD,IAAazB,KAAK,CAAC0B,QAAN,CAAe,MAAM,IAAItB,mBAAJ,EAArB,CAAnB;AACAF,EAAAA,QAAQ,CAACyB,KAAK,IAAIF,QAAQ,KAAKA,QAAQ,CAACV,IAAT,GAAgBY,KAAK,CAACC,KAAN,CAAYC,cAAZ,KAA+BN,KAApD,CAAlB,CAAR;AACA,SAAO,aAAavB,KAAK,CAAC8B,aAAN,CAAoB,WAApB,EAAiC/B,QAAQ,CAAC;AAC5DgC,IAAAA,OAAO,EAAEC,SADmD;AAE5DC,IAAAA,MAAM,EAAER,QAFoD;AAG5DH,IAAAA,GAAG,EAAEA,GAHuD;AAI5DY,IAAAA,MAAM,EAAE;AAJoD,GAAD,EAK1DV,KAL0D,CAAzC,CAApB;AAMD,CAZwC,CAAzC;AAcA,SAASJ,mBAAT","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshPhysicalMaterial } from 'three';\nimport { useFrame } from '@react-three/fiber';\nimport distort from '../helpers/glsl/distort.vert.glsl.js';\n\nclass DistortMaterialImpl extends MeshPhysicalMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this.setValues(parameters);\n    this._time = {\n      value: 0\n    };\n    this._distort = {\n      value: 0.4\n    };\n    this._radius = {\n      value: 1\n    };\n  }\n\n  onBeforeCompile(shader) {\n    shader.uniforms.time = this._time;\n    shader.uniforms.radius = this._radius;\n    shader.uniforms.distort = this._distort;\n    shader.vertexShader = `\n      uniform float time;\n      uniform float radius;\n      uniform float distort;\n      ${distort}\n      ${shader.vertexShader}\n    `;\n    shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', `\n        float updateTime = time / 50.0;\n        float noise = snoise(vec3(position / 2.0 + updateTime * 5.0));\n        vec3 transformed = vec3(position * (noise * pow(distort, 2.0) + radius));\n        `);\n  }\n\n  get time() {\n    return this._time.value;\n  }\n\n  set time(v) {\n    this._time.value = v;\n  }\n\n  get distort() {\n    return this._distort.value;\n  }\n\n  set distort(v) {\n    this._distort.value = v;\n  }\n\n  get radius() {\n    return this._radius.value;\n  }\n\n  set radius(v) {\n    this._radius.value = v;\n  }\n\n}\n\nconst MeshDistortMaterial = /*#__PURE__*/React.forwardRef(({\n  speed = 1,\n  ...props\n}, ref) => {\n  const [material] = React.useState(() => new DistortMaterialImpl());\n  useFrame(state => material && (material.time = state.clock.getElapsedTime() * speed));\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    dispose: undefined,\n    object: material,\n    ref: ref,\n    attach: \"material\"\n  }, props));\n});\n\nexport { MeshDistortMaterial };\n"]},"metadata":{},"sourceType":"module"}