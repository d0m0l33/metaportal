{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { EventDispatcher, Vector3, Euler, Quaternion, MathUtils } from 'three';\n/**\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nclass DeviceOrientationControls extends EventDispatcher {\n  // radians\n  constructor(object) {\n    super();\n\n    _defineProperty(this, \"object\", void 0);\n\n    _defineProperty(this, \"changeEvent\", {\n      type: 'change'\n    });\n\n    _defineProperty(this, \"EPS\", 0.000001);\n\n    _defineProperty(this, \"enabled\", true);\n\n    _defineProperty(this, \"deviceOrientation\", {\n      alpha: 0,\n      beta: 0,\n      gamma: 0\n    });\n\n    _defineProperty(this, \"screenOrientation\", 0);\n\n    _defineProperty(this, \"alphaOffset\", 0);\n\n    _defineProperty(this, \"onDeviceOrientationChangeEvent\", event => {\n      this.deviceOrientation = event;\n    });\n\n    _defineProperty(this, \"onScreenOrientationChangeEvent\", () => {\n      this.screenOrientation = window.orientation || 0;\n    });\n\n    _defineProperty(this, \"zee\", new Vector3(0, 0, 1));\n\n    _defineProperty(this, \"euler\", new Euler());\n\n    _defineProperty(this, \"q0\", new Quaternion());\n\n    _defineProperty(this, \"q1\", new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)));\n\n    _defineProperty(this, \"setObjectQuaternion\", (quaternion, alpha, beta, gamma, orient) => {\n      this.euler.set(beta, alpha, -gamma, 'YXZ'); // 'ZXY' for the device, but 'YXZ' for us\n\n      quaternion.setFromEuler(this.euler); // orient the device\n\n      quaternion.multiply(this.q1); // camera looks out the back of the device, not the top\n\n      quaternion.multiply(this.q0.setFromAxisAngle(this.zee, -orient)); // adjust for screen orientation\n    });\n\n    _defineProperty(this, \"connect\", () => {\n      this.onScreenOrientationChangeEvent(); // run once on load\n      // iOS 13+\n\n      if (window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function') {\n        window.DeviceOrientationEvent.requestPermission().then(response => {\n          if (response == 'granted') {\n            window.addEventListener('orientationchange', this.onScreenOrientationChangeEvent);\n            window.addEventListener('deviceorientation', this.onDeviceOrientationChangeEvent);\n          }\n        }).catch(error => {\n          console.error('THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error);\n        });\n      } else {\n        window.addEventListener('orientationchange', this.onScreenOrientationChangeEvent);\n        window.addEventListener('deviceorientation', this.onDeviceOrientationChangeEvent);\n      }\n\n      this.enabled = true;\n    });\n\n    _defineProperty(this, \"disconnect\", () => {\n      window.removeEventListener('orientationchange', this.onScreenOrientationChangeEvent);\n      window.removeEventListener('deviceorientation', this.onDeviceOrientationChangeEvent);\n      this.enabled = false;\n    });\n\n    _defineProperty(this, \"lastQuaternion\", new Quaternion());\n\n    _defineProperty(this, \"update\", () => {\n      if (this.enabled === false) return;\n      const device = this.deviceOrientation;\n\n      if (device) {\n        const alpha = device.alpha ? MathUtils.degToRad(device.alpha) + this.alphaOffset : 0; // Z\n\n        const beta = device.beta ? MathUtils.degToRad(device.beta) : 0; // X'\n\n        const gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0; // Y''\n\n        const orient = this.screenOrientation ? MathUtils.degToRad(this.screenOrientation) : 0; // O\n\n        this.setObjectQuaternion(this.object.quaternion, alpha, beta, gamma, orient);\n\n        if (8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS) {\n          this.lastQuaternion.copy(this.object.quaternion);\n          this.dispatchEvent(this.changeEvent);\n        }\n      }\n    });\n\n    _defineProperty(this, \"dispose\", () => this.disconnect());\n\n    this.object = object;\n    this.object.rotation.reorder('YXZ');\n    this.connect();\n  }\n\n}\n\nexport { DeviceOrientationControls };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/controls/DeviceOrientationControls.js"],"names":["_defineProperty","EventDispatcher","Vector3","Euler","Quaternion","MathUtils","DeviceOrientationControls","constructor","object","type","alpha","beta","gamma","event","deviceOrientation","screenOrientation","window","orientation","Math","sqrt","quaternion","orient","euler","set","setFromEuler","multiply","q1","q0","setFromAxisAngle","zee","onScreenOrientationChangeEvent","DeviceOrientationEvent","undefined","requestPermission","then","response","addEventListener","onDeviceOrientationChangeEvent","catch","error","console","enabled","removeEventListener","device","degToRad","alphaOffset","setObjectQuaternion","lastQuaternion","dot","EPS","copy","dispatchEvent","changeEvent","disconnect","rotation","reorder","connect"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { EventDispatcher, Vector3, Euler, Quaternion, MathUtils } from 'three';\n\n/**\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nclass DeviceOrientationControls extends EventDispatcher {\n  // radians\n  constructor(object) {\n    super();\n\n    _defineProperty(this, \"object\", void 0);\n\n    _defineProperty(this, \"changeEvent\", {\n      type: 'change'\n    });\n\n    _defineProperty(this, \"EPS\", 0.000001);\n\n    _defineProperty(this, \"enabled\", true);\n\n    _defineProperty(this, \"deviceOrientation\", {\n      alpha: 0,\n      beta: 0,\n      gamma: 0\n    });\n\n    _defineProperty(this, \"screenOrientation\", 0);\n\n    _defineProperty(this, \"alphaOffset\", 0);\n\n    _defineProperty(this, \"onDeviceOrientationChangeEvent\", event => {\n      this.deviceOrientation = event;\n    });\n\n    _defineProperty(this, \"onScreenOrientationChangeEvent\", () => {\n      this.screenOrientation = window.orientation || 0;\n    });\n\n    _defineProperty(this, \"zee\", new Vector3(0, 0, 1));\n\n    _defineProperty(this, \"euler\", new Euler());\n\n    _defineProperty(this, \"q0\", new Quaternion());\n\n    _defineProperty(this, \"q1\", new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)));\n\n    _defineProperty(this, \"setObjectQuaternion\", (quaternion, alpha, beta, gamma, orient) => {\n      this.euler.set(beta, alpha, -gamma, 'YXZ'); // 'ZXY' for the device, but 'YXZ' for us\n\n      quaternion.setFromEuler(this.euler); // orient the device\n\n      quaternion.multiply(this.q1); // camera looks out the back of the device, not the top\n\n      quaternion.multiply(this.q0.setFromAxisAngle(this.zee, -orient)); // adjust for screen orientation\n    });\n\n    _defineProperty(this, \"connect\", () => {\n      this.onScreenOrientationChangeEvent(); // run once on load\n      // iOS 13+\n\n      if (window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function') {\n        window.DeviceOrientationEvent.requestPermission().then(response => {\n          if (response == 'granted') {\n            window.addEventListener('orientationchange', this.onScreenOrientationChangeEvent);\n            window.addEventListener('deviceorientation', this.onDeviceOrientationChangeEvent);\n          }\n        }).catch(error => {\n          console.error('THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error);\n        });\n      } else {\n        window.addEventListener('orientationchange', this.onScreenOrientationChangeEvent);\n        window.addEventListener('deviceorientation', this.onDeviceOrientationChangeEvent);\n      }\n\n      this.enabled = true;\n    });\n\n    _defineProperty(this, \"disconnect\", () => {\n      window.removeEventListener('orientationchange', this.onScreenOrientationChangeEvent);\n      window.removeEventListener('deviceorientation', this.onDeviceOrientationChangeEvent);\n      this.enabled = false;\n    });\n\n    _defineProperty(this, \"lastQuaternion\", new Quaternion());\n\n    _defineProperty(this, \"update\", () => {\n      if (this.enabled === false) return;\n      const device = this.deviceOrientation;\n\n      if (device) {\n        const alpha = device.alpha ? MathUtils.degToRad(device.alpha) + this.alphaOffset : 0; // Z\n\n        const beta = device.beta ? MathUtils.degToRad(device.beta) : 0; // X'\n\n        const gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0; // Y''\n\n        const orient = this.screenOrientation ? MathUtils.degToRad(this.screenOrientation) : 0; // O\n\n        this.setObjectQuaternion(this.object.quaternion, alpha, beta, gamma, orient);\n\n        if (8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS) {\n          this.lastQuaternion.copy(this.object.quaternion);\n          this.dispatchEvent(this.changeEvent);\n        }\n      }\n    });\n\n    _defineProperty(this, \"dispose\", () => this.disconnect());\n\n    this.object = object;\n    this.object.rotation.reorder('YXZ');\n    this.connect();\n  }\n\n}\n\nexport { DeviceOrientationControls };\n"]},"metadata":{},"sourceType":"module"}