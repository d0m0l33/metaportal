{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.canMatchCharCode = exports.firstCharOptimizedIndices = exports.getOptimizedStartCodesIndices = exports.failedOptimizationPrefixMsg = void 0;\n\nvar regexp_to_ast_1 = require(\"regexp-to-ast\");\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar reg_exp_parser_1 = require(\"./reg_exp_parser\");\n\nvar lexer_1 = require(\"./lexer\");\n\nvar complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nexports.failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\n\nfunction getOptimizedStartCodesIndices(regExp, ensureOptimizations) {\n  if (ensureOptimizations === void 0) {\n    ensureOptimizations = false;\n  }\n\n  try {\n    var ast = (0, reg_exp_parser_1.getRegExpAst)(regExp);\n    var firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        (0, utils_1.PRINT_WARNING)(\"\" + exports.failedOptimizationPrefixMsg + (\"\\tUnable to optimize: < \" + regExp.toString() + \" >\\n\") + \"\\tComplement Sets cannot be automatically optimized.\\n\" + \"\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n      }\n    } else {\n      var msgSuffix = \"\";\n\n      if (ensureOptimizations) {\n        msgSuffix = \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n\n      (0, utils_1.PRINT_ERROR)(exports.failedOptimizationPrefixMsg + \"\\n\" + (\"\\tFailed parsing: < \" + regExp.toString() + \" >\\n\") + (\"\\tUsing the regexp-to-ast library version: \" + regexp_to_ast_1.VERSION + \"\\n\") + \"\\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues\" + msgSuffix);\n    }\n  }\n\n  return [];\n}\n\nexports.getOptimizedStartCodesIndices = getOptimizedStartCodesIndices;\n\nfunction firstCharOptimizedIndices(ast, result, ignoreCase) {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (var i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n\n      break;\n\n    case \"Alternative\":\n      var terms = ast.value;\n\n      for (var i = 0; i < terms.length; i++) {\n        var term = terms[i]; // skip terms that cannot effect the first char results\n\n        switch (term.type) {\n          case \"EndAnchor\": // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n\n          case \"GroupBackReference\": // assertions do not affect potential starting codes\n\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        var atom = term;\n\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n\n            (0, utils_1.forEach)(atom.value, function (code) {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                var range = code; // cannot optimize when ignoreCase is\n\n                if (ignoreCase === true) {\n                  for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                } // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (var rangeCode = range.from; rangeCode <= range.to && rangeCode < lexer_1.minOptimizationVal; rangeCode++) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  } // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n\n\n                  if (range.to >= lexer_1.minOptimizationVal) {\n                    var minUnOptVal = range.from >= lexer_1.minOptimizationVal ? range.from : lexer_1.minOptimizationVal;\n                    var maxUnOptVal = range.to;\n                    var minOptIdx = (0, lexer_1.charCodeToOptimizedIndex)(minUnOptVal);\n                    var maxOptIdx = (0, lexer_1.charCodeToOptimizedIndex)(maxUnOptVal);\n\n                    for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n\n          /* istanbul ignore next */\n\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        } // reached a mandatory production, no more **start** codes can be found on this alternative\n\n\n        var isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n\n        if ( // A group may be optional due to empty contents /(?:)/\n        // or if everything inside it is optional /((a)?)/\n        atom.type === \"Group\" && isWholeOptional(atom) === false || // If this term is not a group it may only be optional if it has an optional quantifier\n        atom.type !== \"Group\" && isOptionalQuantifier === false) {\n          break;\n        }\n      }\n\n      break;\n\n    /* istanbul ignore next */\n\n    default:\n      throw Error(\"non exhaustive match!\");\n  } // console.log(Object.keys(result).length)\n\n\n  return (0, utils_1.values)(result);\n}\n\nexports.firstCharOptimizedIndices = firstCharOptimizedIndices;\n\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n  var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(code, result) {\n  var char = String.fromCharCode(code);\n  var upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n\n  if (upperChar !== char) {\n    var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    var lowerChar = char.toLowerCase();\n\n    if (lowerChar !== char) {\n      var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(lowerChar.charCodeAt(0));\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode, targetCharCodes) {\n  return (0, utils_1.find)(setNode.value, function (codeOrRange) {\n    if (typeof codeOrRange === \"number\") {\n      return (0, utils_1.contains)(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      var range_1 = codeOrRange;\n      return (0, utils_1.find)(targetCharCodes, function (targetCode) {\n        return range_1.from <= targetCode && targetCode <= range_1.to;\n      }) !== undefined;\n    }\n  });\n}\n\nfunction isWholeOptional(ast) {\n  if (ast.quantifier && ast.quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return (0, utils_1.isArray)(ast.value) ? (0, utils_1.every)(ast.value, isWholeOptional) : isWholeOptional(ast.value);\n}\n\nvar CharCodeFinder =\n/** @class */\nfunction (_super) {\n  __extends(CharCodeFinder, _super);\n\n  function CharCodeFinder(targetCharCodes) {\n    var _this = _super.call(this) || this;\n\n    _this.targetCharCodes = targetCharCodes;\n    _this.found = false;\n    return _this;\n  }\n\n  CharCodeFinder.prototype.visitChildren = function (node) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    } // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n\n\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    _super.prototype.visitChildren.call(this, node);\n  };\n\n  CharCodeFinder.prototype.visitCharacter = function (node) {\n    if ((0, utils_1.contains)(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  };\n\n  CharCodeFinder.prototype.visitSet = function (node) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  };\n\n  return CharCodeFinder;\n}(regexp_to_ast_1.BaseRegExpVisitor);\n\nfunction canMatchCharCode(charCodes, pattern) {\n  if (pattern instanceof RegExp) {\n    var ast = (0, reg_exp_parser_1.getRegExpAst)(pattern);\n    var charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return (0, utils_1.find)(pattern, function (char) {\n      return (0, utils_1.contains)(charCodes, char.charCodeAt(0));\n    }) !== undefined;\n  }\n}\n\nexports.canMatchCharCode = canMatchCharCode;","map":{"version":3,"sources":["../../../src/scan/reg_exp.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.canMatchCharCode = exports.firstCharOptimizedIndices = exports.getOptimizedStartCodesIndices = exports.failedOptimizationPrefixMsg = void 0;\nvar regexp_to_ast_1 = require(\"regexp-to-ast\");\nvar utils_1 = require(\"@chevrotain/utils\");\nvar reg_exp_parser_1 = require(\"./reg_exp_parser\");\nvar lexer_1 = require(\"./lexer\");\nvar complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nexports.failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\nfunction getOptimizedStartCodesIndices(regExp, ensureOptimizations) {\n    if (ensureOptimizations === void 0) { ensureOptimizations = false; }\n    try {\n        var ast = (0, reg_exp_parser_1.getRegExpAst)(regExp);\n        var firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n        return firstChars;\n    }\n    catch (e) {\n        /* istanbul ignore next */\n        // Testing this relies on the regexp-to-ast library having a bug... */\n        // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n        if (e.message === complementErrorMessage) {\n            if (ensureOptimizations) {\n                (0, utils_1.PRINT_WARNING)(\"\" + exports.failedOptimizationPrefixMsg +\n                    (\"\\tUnable to optimize: < \" + regExp.toString() + \" >\\n\") +\n                    \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n            }\n        }\n        else {\n            var msgSuffix = \"\";\n            if (ensureOptimizations) {\n                msgSuffix =\n                    \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n                        \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n            }\n            (0, utils_1.PRINT_ERROR)(exports.failedOptimizationPrefixMsg + \"\\n\" +\n                (\"\\tFailed parsing: < \" + regExp.toString() + \" >\\n\") +\n                (\"\\tUsing the regexp-to-ast library version: \" + regexp_to_ast_1.VERSION + \"\\n\") +\n                \"\\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues\" +\n                msgSuffix);\n        }\n    }\n    return [];\n}\nexports.getOptimizedStartCodesIndices = getOptimizedStartCodesIndices;\nfunction firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch (ast.type) {\n        case \"Disjunction\":\n            for (var i = 0; i < ast.value.length; i++) {\n                firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n            }\n            break;\n        case \"Alternative\":\n            var terms = ast.value;\n            for (var i = 0; i < terms.length; i++) {\n                var term = terms[i];\n                // skip terms that cannot effect the first char results\n                switch (term.type) {\n                    case \"EndAnchor\":\n                    // A group back reference cannot affect potential starting char.\n                    // because if a back reference is the first production than automatically\n                    // the group being referenced has had to come BEFORE so its codes have already been added\n                    case \"GroupBackReference\":\n                    // assertions do not affect potential starting codes\n                    case \"Lookahead\":\n                    case \"NegativeLookahead\":\n                    case \"StartAnchor\":\n                    case \"WordBoundary\":\n                    case \"NonWordBoundary\":\n                        continue;\n                }\n                var atom = term;\n                switch (atom.type) {\n                    case \"Character\":\n                        addOptimizedIdxToResult(atom.value, result, ignoreCase);\n                        break;\n                    case \"Set\":\n                        if (atom.complement === true) {\n                            throw Error(complementErrorMessage);\n                        }\n                        (0, utils_1.forEach)(atom.value, function (code) {\n                            if (typeof code === \"number\") {\n                                addOptimizedIdxToResult(code, result, ignoreCase);\n                            }\n                            else {\n                                // range\n                                var range = code;\n                                // cannot optimize when ignoreCase is\n                                if (ignoreCase === true) {\n                                    for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                }\n                                // Optimization (2 orders of magnitude less work for very large ranges)\n                                else {\n                                    // handle unoptimized values\n                                    for (var rangeCode = range.from; rangeCode <= range.to && rangeCode < lexer_1.minOptimizationVal; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                    // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                                    if (range.to >= lexer_1.minOptimizationVal) {\n                                        var minUnOptVal = range.from >= lexer_1.minOptimizationVal\n                                            ? range.from\n                                            : lexer_1.minOptimizationVal;\n                                        var maxUnOptVal = range.to;\n                                        var minOptIdx = (0, lexer_1.charCodeToOptimizedIndex)(minUnOptVal);\n                                        var maxOptIdx = (0, lexer_1.charCodeToOptimizedIndex)(maxUnOptVal);\n                                        for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                                            result[currOptIdx] = currOptIdx;\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                        break;\n                    case \"Group\":\n                        firstCharOptimizedIndices(atom.value, result, ignoreCase);\n                        break;\n                    /* istanbul ignore next */\n                    default:\n                        throw Error(\"Non Exhaustive Match\");\n                }\n                // reached a mandatory production, no more **start** codes can be found on this alternative\n                var isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n                if (\n                // A group may be optional due to empty contents /(?:)/\n                // or if everything inside it is optional /((a)?)/\n                (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n                    // If this term is not a group it may only be optional if it has an optional quantifier\n                    (atom.type !== \"Group\" && isOptionalQuantifier === false)) {\n                    break;\n                }\n            }\n            break;\n        /* istanbul ignore next */\n        default:\n            throw Error(\"non exhaustive match!\");\n    }\n    // console.log(Object.keys(result).length)\n    return (0, utils_1.values)(result);\n}\nexports.firstCharOptimizedIndices = firstCharOptimizedIndices;\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n    var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(code);\n    result[optimizedCharIdx] = optimizedCharIdx;\n    if (ignoreCase === true) {\n        handleIgnoreCase(code, result);\n    }\n}\nfunction handleIgnoreCase(code, result) {\n    var char = String.fromCharCode(code);\n    var upperChar = char.toUpperCase();\n    /* istanbul ignore else */\n    if (upperChar !== char) {\n        var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(upperChar.charCodeAt(0));\n        result[optimizedCharIdx] = optimizedCharIdx;\n    }\n    else {\n        var lowerChar = char.toLowerCase();\n        if (lowerChar !== char) {\n            var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(lowerChar.charCodeAt(0));\n            result[optimizedCharIdx] = optimizedCharIdx;\n        }\n    }\n}\nfunction findCode(setNode, targetCharCodes) {\n    return (0, utils_1.find)(setNode.value, function (codeOrRange) {\n        if (typeof codeOrRange === \"number\") {\n            return (0, utils_1.contains)(targetCharCodes, codeOrRange);\n        }\n        else {\n            // range\n            var range_1 = codeOrRange;\n            return ((0, utils_1.find)(targetCharCodes, function (targetCode) { return range_1.from <= targetCode && targetCode <= range_1.to; }) !== undefined);\n        }\n    });\n}\nfunction isWholeOptional(ast) {\n    if (ast.quantifier && ast.quantifier.atLeast === 0) {\n        return true;\n    }\n    if (!ast.value) {\n        return false;\n    }\n    return (0, utils_1.isArray)(ast.value)\n        ? (0, utils_1.every)(ast.value, isWholeOptional)\n        : isWholeOptional(ast.value);\n}\nvar CharCodeFinder = /** @class */ (function (_super) {\n    __extends(CharCodeFinder, _super);\n    function CharCodeFinder(targetCharCodes) {\n        var _this = _super.call(this) || this;\n        _this.targetCharCodes = targetCharCodes;\n        _this.found = false;\n        return _this;\n    }\n    CharCodeFinder.prototype.visitChildren = function (node) {\n        // No need to keep looking...\n        if (this.found === true) {\n            return;\n        }\n        // switch lookaheads as they do not actually consume any characters thus\n        // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n        switch (node.type) {\n            case \"Lookahead\":\n                this.visitLookahead(node);\n                return;\n            case \"NegativeLookahead\":\n                this.visitNegativeLookahead(node);\n                return;\n        }\n        _super.prototype.visitChildren.call(this, node);\n    };\n    CharCodeFinder.prototype.visitCharacter = function (node) {\n        if ((0, utils_1.contains)(this.targetCharCodes, node.value)) {\n            this.found = true;\n        }\n    };\n    CharCodeFinder.prototype.visitSet = function (node) {\n        if (node.complement) {\n            if (findCode(node, this.targetCharCodes) === undefined) {\n                this.found = true;\n            }\n        }\n        else {\n            if (findCode(node, this.targetCharCodes) !== undefined) {\n                this.found = true;\n            }\n        }\n    };\n    return CharCodeFinder;\n}(regexp_to_ast_1.BaseRegExpVisitor));\nfunction canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n        var ast = (0, reg_exp_parser_1.getRegExpAst)(pattern);\n        var charCodeFinder = new CharCodeFinder(charCodes);\n        charCodeFinder.visit(ast);\n        return charCodeFinder.found;\n    }\n    else {\n        return ((0, utils_1.find)(pattern, function (char) {\n            return (0, utils_1.contains)(charCodes, char.charCodeAt(0));\n        }) !== undefined);\n    }\n}\nexports.canMatchCharCode = canMatchCharCode;\n//# sourceMappingURL=reg_exp.js.map"]},"metadata":{},"sourceType":"script"}