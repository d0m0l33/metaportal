{"ast":null,"code":"import _toConsumableArray from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nvar StarfieldMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(StarfieldMaterial, _ShaderMaterial);\n\n  var _super = _createSuper(StarfieldMaterial);\n\n  function StarfieldMaterial() {\n    _classCallCheck(this, StarfieldMaterial);\n\n    return _super.call(this, {\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      \"\\n      uniform float time;\\n      attribute float size;\\n      varying vec3 vColor;\\n      void main() {\\n        vColor = color;\\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\\n        gl_Position = projectionMatrix * mvPosition;\\n      }\",\n      fragmentShader:\n      /* glsl */\n      \"\\n      uniform sampler2D pointTexture;\\n      uniform float fade;\\n      varying vec3 vColor;\\n      void main() {\\n        float opacity = 1.0;\\n        if (fade == 1.0) {\\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\\n        }\\n        gl_FragColor = vec4(vColor, opacity);\\n      }\"\n    });\n  }\n\n  return StarfieldMaterial;\n}(ShaderMaterial);\n\nvar genStar = function genStar(r) {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nvar Stars = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$radius = _ref.radius,\n      radius = _ref$radius === void 0 ? 100 : _ref$radius,\n      _ref$depth = _ref.depth,\n      depth = _ref$depth === void 0 ? 50 : _ref$depth,\n      _ref$count = _ref.count,\n      count = _ref$count === void 0 ? 5000 : _ref$count,\n      _ref$saturation = _ref.saturation,\n      saturation = _ref$saturation === void 0 ? 0 : _ref$saturation,\n      _ref$factor = _ref.factor,\n      factor = _ref$factor === void 0 ? 4 : _ref$factor,\n      _ref$fade = _ref.fade,\n      fade = _ref$fade === void 0 ? false : _ref$fade;\n  var material = React.useRef();\n\n  var _React$useMemo = React.useMemo(function () {\n    var positions = [];\n    var colors = [];\n    var sizes = Array.from({\n      length: count\n    }, function () {\n      return (0.5 + 0.5 * Math.random()) * factor;\n    });\n    var color = new Color();\n    var r = radius + depth;\n    var increment = depth / count;\n\n    for (var i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push.apply(positions, _toConsumableArray(genStar(r).toArray()));\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 3),\n      position = _React$useMemo2[0],\n      color = _React$useMemo2[1],\n      size = _React$useMemo2[2];\n\n  useFrame(function (state) {\n    return material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime());\n  });\n\n  var _React$useState = React.useState(function () {\n    return new StarfieldMaterial();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      starfieldMaterial = _React$useState2[0];\n\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\nexport { Stars };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/@react-three/drei/core/Stars.js"],"names":["React","useFrame","Color","Vector3","Spherical","AdditiveBlending","ShaderMaterial","StarfieldMaterial","uniforms","time","value","fade","vertexShader","fragmentShader","genStar","r","setFromSpherical","Math","acos","random","PI","Stars","forwardRef","ref","radius","depth","count","saturation","factor","material","useRef","useMemo","positions","colors","sizes","Array","from","length","color","increment","i","push","toArray","setHSL","g","b","Float32Array","position","size","state","current","clock","getElapsedTime","useState","starfieldMaterial","createElement","attach","attachObject","args","dispose","undefined","object","blending","transparent","vertexColors"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }`\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n"]},"metadata":{},"sourceType":"module"}