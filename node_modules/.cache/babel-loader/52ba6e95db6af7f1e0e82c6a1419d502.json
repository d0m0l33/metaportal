{"ast":null,"code":"import { DataTextureLoader, LinearMipmapLinearFilter } from 'three';\n\nclass TGALoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  parse(buffer) {\n    // reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n    function tgaCheckHeader(header) {\n      switch (header.image_type) {\n        // check indexed type\n        case TGA_TYPE_INDEXED:\n        case TGA_TYPE_RLE_INDEXED:\n          if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n            console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n          }\n\n          break;\n        // check colormap type\n\n        case TGA_TYPE_RGB:\n        case TGA_TYPE_GREY:\n        case TGA_TYPE_RLE_RGB:\n        case TGA_TYPE_RLE_GREY:\n          if (header.colormap_type) {\n            console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n          }\n\n          break;\n        // What the need of a file without data ?\n\n        case TGA_TYPE_NO_DATA:\n          console.error('THREE.TGALoader: No data.');\n        // Invalid type ?\n\n        default:\n          console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n      } // check image width and height\n\n\n      if (header.width <= 0 || header.height <= 0) {\n        console.error('THREE.TGALoader: Invalid image size.');\n      } // check image pixel size\n\n\n      if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n        console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n      }\n    } // parse tga image buffer\n\n\n    function tgaParse(use_rle, use_pal, header, offset, data) {\n      let pixel_data, palettes;\n      const pixel_size = header.pixel_size >> 3;\n      const pixel_total = header.width * header.height * pixel_size; // read palettes\n\n      if (use_pal) {\n        palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n      } // read RLE\n\n\n      if (use_rle) {\n        pixel_data = new Uint8Array(pixel_total);\n        let c, count, i;\n        let shift = 0;\n        const pixels = new Uint8Array(pixel_size);\n\n        while (shift < pixel_total) {\n          c = data[offset++];\n          count = (c & 0x7f) + 1; // RLE pixels\n\n          if (c & 0x80) {\n            // bind pixel tmp array\n            for (i = 0; i < pixel_size; ++i) {\n              pixels[i] = data[offset++];\n            } // copy pixel array\n\n\n            for (i = 0; i < count; ++i) {\n              pixel_data.set(pixels, shift + i * pixel_size);\n            }\n\n            shift += pixel_size * count;\n          } else {\n            // raw pixels\n            count *= pixel_size;\n\n            for (i = 0; i < count; ++i) {\n              pixel_data[shift + i] = data[offset++];\n            }\n\n            shift += count;\n          }\n        }\n      } else {\n        // raw pixels\n        pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n      }\n\n      return {\n        pixel_data: pixel_data,\n        palettes: palettes\n      };\n    }\n\n    function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n      const colormap = palettes;\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n          imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n          imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\n\n          imageData[(x + width * y) * 4 + 0] = (color & 0x7c00) >> 7;\n          imageData[(x + width * y) * 4 + 1] = (color & 0x03e0) >> 2;\n          imageData[(x + width * y) * 4 + 2] = (color & 0x001f) >> 3;\n          imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 3) {\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 4) {\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n          imageData[(x + width * y) * 4 + 3] = image[i + 3];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 0] = color;\n          imageData[(x + width * y) * 4 + 1] = color;\n          imageData[(x + width * y) * 4 + 2] = color;\n          imageData[(x + width * y) * 4 + 3] = 255;\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          imageData[(x + width * y) * 4 + 0] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 0];\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 3] = image[i + 1];\n        }\n      }\n\n      return imageData;\n    }\n\n    function getTgaRGBA(data, width, height, image, palette) {\n      let x_start, y_start, x_step, y_step, x_end, y_end;\n\n      switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n        default:\n        case TGA_ORIGIN_UL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n\n        case TGA_ORIGIN_BL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n\n        case TGA_ORIGIN_UR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n\n        case TGA_ORIGIN_BR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n      }\n\n      if (use_grey) {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 16:\n            tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } else {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n            break;\n\n          case 16:\n            tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 24:\n            tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 32:\n            tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } // Load image data according to specific method\n      // let func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n      // func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\n\n      return data;\n    } // TGA constants\n\n\n    const TGA_TYPE_NO_DATA = 0,\n          TGA_TYPE_INDEXED = 1,\n          TGA_TYPE_RGB = 2,\n          TGA_TYPE_GREY = 3,\n          TGA_TYPE_RLE_INDEXED = 9,\n          TGA_TYPE_RLE_RGB = 10,\n          TGA_TYPE_RLE_GREY = 11,\n          TGA_ORIGIN_MASK = 0x30,\n          TGA_ORIGIN_SHIFT = 0x04,\n          TGA_ORIGIN_BL = 0x00,\n          TGA_ORIGIN_BR = 0x01,\n          TGA_ORIGIN_UL = 0x02,\n          TGA_ORIGIN_UR = 0x03;\n    if (buffer.length < 19) console.error('THREE.TGALoader: Not enough data to contain header.');\n    let offset = 0;\n    const content = new Uint8Array(buffer),\n          header = {\n      id_length: content[offset++],\n      colormap_type: content[offset++],\n      image_type: content[offset++],\n      colormap_index: content[offset++] | content[offset++] << 8,\n      colormap_length: content[offset++] | content[offset++] << 8,\n      colormap_size: content[offset++],\n      origin: [content[offset++] | content[offset++] << 8, content[offset++] | content[offset++] << 8],\n      width: content[offset++] | content[offset++] << 8,\n      height: content[offset++] | content[offset++] << 8,\n      pixel_size: content[offset++],\n      flags: content[offset++]\n    }; // check tga if it is valid format\n\n    tgaCheckHeader(header);\n\n    if (header.id_length + offset > buffer.length) {\n      console.error('THREE.TGALoader: No data.');\n    } // skip the needn't data\n\n\n    offset += header.id_length; // get targa information about RLE compression and palette\n\n    let use_rle = false,\n        use_pal = false,\n        use_grey = false;\n\n    switch (header.image_type) {\n      case TGA_TYPE_RLE_INDEXED:\n        use_rle = true;\n        use_pal = true;\n        break;\n\n      case TGA_TYPE_INDEXED:\n        use_pal = true;\n        break;\n\n      case TGA_TYPE_RLE_RGB:\n        use_rle = true;\n        break;\n\n      case TGA_TYPE_RGB:\n        break;\n\n      case TGA_TYPE_RLE_GREY:\n        use_rle = true;\n        use_grey = true;\n        break;\n\n      case TGA_TYPE_GREY:\n        use_grey = true;\n        break;\n    } //\n\n\n    const imageData = new Uint8Array(header.width * header.height * 4);\n    const result = tgaParse(use_rle, use_pal, header, offset, content);\n    getTgaRGBA(imageData, header.width, header.height, result.pixel_data, result.palettes);\n    return {\n      data: imageData,\n      width: header.width,\n      height: header.height,\n      flipY: true,\n      generateMipmaps: true,\n      minFilter: LinearMipmapLinearFilter\n    };\n  }\n\n}\n\nexport { TGALoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportalpublic/node_modules/three-stdlib/loaders/TGALoader.js"],"names":["DataTextureLoader","LinearMipmapLinearFilter","TGALoader","constructor","manager","parse","buffer","tgaCheckHeader","header","image_type","TGA_TYPE_INDEXED","TGA_TYPE_RLE_INDEXED","colormap_length","colormap_size","colormap_type","console","error","TGA_TYPE_RGB","TGA_TYPE_GREY","TGA_TYPE_RLE_RGB","TGA_TYPE_RLE_GREY","TGA_TYPE_NO_DATA","width","height","pixel_size","tgaParse","use_rle","use_pal","offset","data","pixel_data","palettes","pixel_total","subarray","Uint8Array","c","count","i","shift","pixels","set","tgaGetImageData8bits","imageData","y_start","y_step","y_end","x_start","x_step","x_end","image","colormap","color","x","y","tgaGetImageData16bits","tgaGetImageData24bits","tgaGetImageData32bits","tgaGetImageDataGrey8bits","tgaGetImageDataGrey16bits","getTgaRGBA","palette","flags","TGA_ORIGIN_MASK","TGA_ORIGIN_SHIFT","TGA_ORIGIN_UL","TGA_ORIGIN_BL","TGA_ORIGIN_UR","TGA_ORIGIN_BR","use_grey","length","content","id_length","colormap_index","origin","result","flipY","generateMipmaps","minFilter"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,wBAA5B,QAA4D,OAA5D;;AAEA,MAAMC,SAAN,SAAwBF,iBAAxB,CAA0C;AACxCG,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACD;;AAEDC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ;AACA,aAASC,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B,cAAQA,MAAM,CAACC,UAAf;AACE;AACA,aAAKC,gBAAL;AACA,aAAKC,oBAAL;AACE,cAAIH,MAAM,CAACI,eAAP,GAAyB,GAAzB,IAAgCJ,MAAM,CAACK,aAAP,KAAyB,EAAzD,IAA+DL,MAAM,CAACM,aAAP,KAAyB,CAA5F,EAA+F;AAC7FC,YAAAA,OAAO,CAACC,KAAR,CAAc,+DAAd;AACD;;AAED;AACF;;AAEA,aAAKC,YAAL;AACA,aAAKC,aAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,iBAAL;AACE,cAAIZ,MAAM,CAACM,aAAX,EAA0B;AACxBC,YAAAA,OAAO,CAACC,KAAR,CAAc,gEAAd;AACD;;AAED;AACF;;AAEA,aAAKK,gBAAL;AACEN,UAAAA,OAAO,CAACC,KAAR,CAAc,2BAAd;AACF;;AAEA;AACED,UAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd,EAAqDR,MAAM,CAACC,UAA5D;AA3BJ,OAD8B,CA6B5B;;;AAGF,UAAID,MAAM,CAACc,KAAP,IAAgB,CAAhB,IAAqBd,MAAM,CAACe,MAAP,IAAiB,CAA1C,EAA6C;AAC3CR,QAAAA,OAAO,CAACC,KAAR,CAAc,sCAAd;AACD,OAlC6B,CAkC5B;;;AAGF,UAAIR,MAAM,CAACgB,UAAP,KAAsB,CAAtB,IAA2BhB,MAAM,CAACgB,UAAP,KAAsB,EAAjD,IAAuDhB,MAAM,CAACgB,UAAP,KAAsB,EAA7E,IAAmFhB,MAAM,CAACgB,UAAP,KAAsB,EAA7G,EAAiH;AAC/GT,QAAAA,OAAO,CAACC,KAAR,CAAc,2CAAd,EAA2DR,MAAM,CAACgB,UAAlE;AACD;AACF,KA1CW,CA0CV;;;AAGF,aAASC,QAAT,CAAkBC,OAAlB,EAA2BC,OAA3B,EAAoCnB,MAApC,EAA4CoB,MAA5C,EAAoDC,IAApD,EAA0D;AACxD,UAAIC,UAAJ,EAAgBC,QAAhB;AACA,YAAMP,UAAU,GAAGhB,MAAM,CAACgB,UAAP,IAAqB,CAAxC;AACA,YAAMQ,WAAW,GAAGxB,MAAM,CAACc,KAAP,GAAed,MAAM,CAACe,MAAtB,GAA+BC,UAAnD,CAHwD,CAGO;;AAE/D,UAAIG,OAAJ,EAAa;AACXI,QAAAA,QAAQ,GAAGF,IAAI,CAACI,QAAL,CAAcL,MAAd,EAAsBA,MAAM,IAAIpB,MAAM,CAACI,eAAP,IAA0BJ,MAAM,CAACK,aAAP,IAAwB,CAAlD,CAAhC,CAAX;AACD,OAPuD,CAOtD;;;AAGF,UAAIa,OAAJ,EAAa;AACXI,QAAAA,UAAU,GAAG,IAAII,UAAJ,CAAeF,WAAf,CAAb;AACA,YAAIG,CAAJ,EAAOC,KAAP,EAAcC,CAAd;AACA,YAAIC,KAAK,GAAG,CAAZ;AACA,cAAMC,MAAM,GAAG,IAAIL,UAAJ,CAAeV,UAAf,CAAf;;AAEA,eAAOc,KAAK,GAAGN,WAAf,EAA4B;AAC1BG,UAAAA,CAAC,GAAGN,IAAI,CAACD,MAAM,EAAP,CAAR;AACAQ,UAAAA,KAAK,GAAG,CAACD,CAAC,GAAG,IAAL,IAAa,CAArB,CAF0B,CAEF;;AAExB,cAAIA,CAAC,GAAG,IAAR,EAAc;AACZ;AACA,iBAAKE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGb,UAAhB,EAA4B,EAAEa,CAA9B,EAAiC;AAC/BE,cAAAA,MAAM,CAACF,CAAD,CAAN,GAAYR,IAAI,CAACD,MAAM,EAAP,CAAhB;AACD,aAJW,CAIV;;;AAGF,iBAAKS,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,KAAhB,EAAuB,EAAEC,CAAzB,EAA4B;AAC1BP,cAAAA,UAAU,CAACU,GAAX,CAAeD,MAAf,EAAuBD,KAAK,GAAGD,CAAC,GAAGb,UAAnC;AACD;;AAEDc,YAAAA,KAAK,IAAId,UAAU,GAAGY,KAAtB;AACD,WAZD,MAYO;AACL;AACAA,YAAAA,KAAK,IAAIZ,UAAT;;AAEA,iBAAKa,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,KAAhB,EAAuB,EAAEC,CAAzB,EAA4B;AAC1BP,cAAAA,UAAU,CAACQ,KAAK,GAAGD,CAAT,CAAV,GAAwBR,IAAI,CAACD,MAAM,EAAP,CAA5B;AACD;;AAEDU,YAAAA,KAAK,IAAIF,KAAT;AACD;AACF;AACF,OAjCD,MAiCO;AACL;AACAN,QAAAA,UAAU,GAAGD,IAAI,CAACI,QAAL,CAAcL,MAAd,EAAsBA,MAAM,IAAID,OAAO,GAAGnB,MAAM,CAACc,KAAP,GAAed,MAAM,CAACe,MAAzB,GAAkCS,WAAzE,CAAb;AACD;;AAED,aAAO;AACLF,QAAAA,UAAU,EAAEA,UADP;AAELC,QAAAA,QAAQ,EAAEA;AAFL,OAAP;AAID;;AAED,aAASU,oBAAT,CAA8BC,SAA9B,EAAyCC,OAAzC,EAAkDC,MAAlD,EAA0DC,KAA1D,EAAiEC,OAAjE,EAA0EC,MAA1E,EAAkFC,KAAlF,EAAyFC,KAAzF,EAAgGlB,QAAhG,EAA0G;AACxG,YAAMmB,QAAQ,GAAGnB,QAAjB;AACA,UAAIoB,KAAJ;AAAA,UACId,CAAC,GAAG,CADR;AAAA,UAEIe,CAFJ;AAAA,UAGIC,CAHJ;AAIA,YAAM/B,KAAK,GAAGd,MAAM,CAACc,KAArB;;AAEA,WAAK+B,CAAC,GAAGV,OAAT,EAAkBU,CAAC,KAAKR,KAAxB,EAA+BQ,CAAC,IAAIT,MAApC,EAA4C;AAC1C,aAAKQ,CAAC,GAAGN,OAAT,EAAkBM,CAAC,KAAKJ,KAAxB,EAA+BI,CAAC,IAAIL,MAAL,EAAaV,CAAC,EAA7C,EAAiD;AAC/Cc,UAAAA,KAAK,GAAGF,KAAK,CAACZ,CAAD,CAAb;AACAK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqC,GAArC;AACAX,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCH,QAAQ,CAACC,KAAK,GAAG,CAAR,GAAY,CAAb,CAA7C;AACAT,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCH,QAAQ,CAACC,KAAK,GAAG,CAAR,GAAY,CAAb,CAA7C;AACAT,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCH,QAAQ,CAACC,KAAK,GAAG,CAAR,GAAY,CAAb,CAA7C;AACD;AACF;;AAED,aAAOT,SAAP;AACD;;AAED,aAASY,qBAAT,CAA+BZ,SAA/B,EAA0CC,OAA1C,EAAmDC,MAAnD,EAA2DC,KAA3D,EAAkEC,OAAlE,EAA2EC,MAA3E,EAAmFC,KAAnF,EAA0FC,KAA1F,EAAiG;AAC/F,UAAIE,KAAJ;AAAA,UACId,CAAC,GAAG,CADR;AAAA,UAEIe,CAFJ;AAAA,UAGIC,CAHJ;AAIA,YAAM/B,KAAK,GAAGd,MAAM,CAACc,KAArB;;AAEA,WAAK+B,CAAC,GAAGV,OAAT,EAAkBU,CAAC,KAAKR,KAAxB,EAA+BQ,CAAC,IAAIT,MAApC,EAA4C;AAC1C,aAAKQ,CAAC,GAAGN,OAAT,EAAkBM,CAAC,KAAKJ,KAAxB,EAA+BI,CAAC,IAAIL,MAAL,EAAaV,CAAC,IAAI,CAAjD,EAAoD;AAClDc,UAAAA,KAAK,GAAGF,KAAK,CAACZ,CAAC,GAAG,CAAL,CAAL,IAAgBY,KAAK,CAACZ,CAAC,GAAG,CAAL,CAAL,IAAgB,CAAhC,CAAR,CADkD,CACN;;AAE5CK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqC,CAACF,KAAK,GAAG,MAAT,KAAoB,CAAzD;AACAT,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqC,CAACF,KAAK,GAAG,MAAT,KAAoB,CAAzD;AACAT,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqC,CAACF,KAAK,GAAG,MAAT,KAAoB,CAAzD;AACAT,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCF,KAAK,GAAG,MAAR,GAAiB,CAAjB,GAAqB,GAA1D;AACD;AACF;;AAED,aAAOT,SAAP;AACD;;AAED,aAASa,qBAAT,CAA+Bb,SAA/B,EAA0CC,OAA1C,EAAmDC,MAAnD,EAA2DC,KAA3D,EAAkEC,OAAlE,EAA2EC,MAA3E,EAAmFC,KAAnF,EAA0FC,KAA1F,EAAiG;AAC/F,UAAIZ,CAAC,GAAG,CAAR;AAAA,UACIe,CADJ;AAAA,UAEIC,CAFJ;AAGA,YAAM/B,KAAK,GAAGd,MAAM,CAACc,KAArB;;AAEA,WAAK+B,CAAC,GAAGV,OAAT,EAAkBU,CAAC,KAAKR,KAAxB,EAA+BQ,CAAC,IAAIT,MAApC,EAA4C;AAC1C,aAAKQ,CAAC,GAAGN,OAAT,EAAkBM,CAAC,KAAKJ,KAAxB,EAA+BI,CAAC,IAAIL,MAAL,EAAaV,CAAC,IAAI,CAAjD,EAAoD;AAClDK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqC,GAArC;AACAX,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCJ,KAAK,CAACZ,CAAC,GAAG,CAAL,CAA1C;AACAK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCJ,KAAK,CAACZ,CAAC,GAAG,CAAL,CAA1C;AACAK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCJ,KAAK,CAACZ,CAAC,GAAG,CAAL,CAA1C;AACD;AACF;;AAED,aAAOK,SAAP;AACD;;AAED,aAASc,qBAAT,CAA+Bd,SAA/B,EAA0CC,OAA1C,EAAmDC,MAAnD,EAA2DC,KAA3D,EAAkEC,OAAlE,EAA2EC,MAA3E,EAAmFC,KAAnF,EAA0FC,KAA1F,EAAiG;AAC/F,UAAIZ,CAAC,GAAG,CAAR;AAAA,UACIe,CADJ;AAAA,UAEIC,CAFJ;AAGA,YAAM/B,KAAK,GAAGd,MAAM,CAACc,KAArB;;AAEA,WAAK+B,CAAC,GAAGV,OAAT,EAAkBU,CAAC,KAAKR,KAAxB,EAA+BQ,CAAC,IAAIT,MAApC,EAA4C;AAC1C,aAAKQ,CAAC,GAAGN,OAAT,EAAkBM,CAAC,KAAKJ,KAAxB,EAA+BI,CAAC,IAAIL,MAAL,EAAaV,CAAC,IAAI,CAAjD,EAAoD;AAClDK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCJ,KAAK,CAACZ,CAAC,GAAG,CAAL,CAA1C;AACAK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCJ,KAAK,CAACZ,CAAC,GAAG,CAAL,CAA1C;AACAK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCJ,KAAK,CAACZ,CAAC,GAAG,CAAL,CAA1C;AACAK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCJ,KAAK,CAACZ,CAAC,GAAG,CAAL,CAA1C;AACD;AACF;;AAED,aAAOK,SAAP;AACD;;AAED,aAASe,wBAAT,CAAkCf,SAAlC,EAA6CC,OAA7C,EAAsDC,MAAtD,EAA8DC,KAA9D,EAAqEC,OAArE,EAA8EC,MAA9E,EAAsFC,KAAtF,EAA6FC,KAA7F,EAAoG;AAClG,UAAIE,KAAJ;AAAA,UACId,CAAC,GAAG,CADR;AAAA,UAEIe,CAFJ;AAAA,UAGIC,CAHJ;AAIA,YAAM/B,KAAK,GAAGd,MAAM,CAACc,KAArB;;AAEA,WAAK+B,CAAC,GAAGV,OAAT,EAAkBU,CAAC,KAAKR,KAAxB,EAA+BQ,CAAC,IAAIT,MAApC,EAA4C;AAC1C,aAAKQ,CAAC,GAAGN,OAAT,EAAkBM,CAAC,KAAKJ,KAAxB,EAA+BI,CAAC,IAAIL,MAAL,EAAaV,CAAC,EAA7C,EAAiD;AAC/Cc,UAAAA,KAAK,GAAGF,KAAK,CAACZ,CAAD,CAAb;AACAK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCF,KAArC;AACAT,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCF,KAArC;AACAT,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCF,KAArC;AACAT,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqC,GAArC;AACD;AACF;;AAED,aAAOX,SAAP;AACD;;AAED,aAASgB,yBAAT,CAAmChB,SAAnC,EAA8CC,OAA9C,EAAuDC,MAAvD,EAA+DC,KAA/D,EAAsEC,OAAtE,EAA+EC,MAA/E,EAAuFC,KAAvF,EAA8FC,KAA9F,EAAqG;AACnG,UAAIZ,CAAC,GAAG,CAAR;AAAA,UACIe,CADJ;AAAA,UAEIC,CAFJ;AAGA,YAAM/B,KAAK,GAAGd,MAAM,CAACc,KAArB;;AAEA,WAAK+B,CAAC,GAAGV,OAAT,EAAkBU,CAAC,KAAKR,KAAxB,EAA+BQ,CAAC,IAAIT,MAApC,EAA4C;AAC1C,aAAKQ,CAAC,GAAGN,OAAT,EAAkBM,CAAC,KAAKJ,KAAxB,EAA+BI,CAAC,IAAIL,MAAL,EAAaV,CAAC,IAAI,CAAjD,EAAoD;AAClDK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCJ,KAAK,CAACZ,CAAC,GAAG,CAAL,CAA1C;AACAK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCJ,KAAK,CAACZ,CAAC,GAAG,CAAL,CAA1C;AACAK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCJ,KAAK,CAACZ,CAAC,GAAG,CAAL,CAA1C;AACAK,UAAAA,SAAS,CAAC,CAACU,CAAC,GAAG9B,KAAK,GAAG+B,CAAb,IAAkB,CAAlB,GAAsB,CAAvB,CAAT,GAAqCJ,KAAK,CAACZ,CAAC,GAAG,CAAL,CAA1C;AACD;AACF;;AAED,aAAOK,SAAP;AACD;;AAED,aAASiB,UAAT,CAAoB9B,IAApB,EAA0BP,KAA1B,EAAiCC,MAAjC,EAAyC0B,KAAzC,EAAgDW,OAAhD,EAAyD;AACvD,UAAId,OAAJ,EAAaH,OAAb,EAAsBI,MAAtB,EAA8BH,MAA9B,EAAsCI,KAAtC,EAA6CH,KAA7C;;AAEA,cAAQ,CAACrC,MAAM,CAACqD,KAAP,GAAeC,eAAhB,KAAoCC,gBAA5C;AACE;AACA,aAAKC,aAAL;AACElB,UAAAA,OAAO,GAAG,CAAV;AACAC,UAAAA,MAAM,GAAG,CAAT;AACAC,UAAAA,KAAK,GAAG1B,KAAR;AACAqB,UAAAA,OAAO,GAAG,CAAV;AACAC,UAAAA,MAAM,GAAG,CAAT;AACAC,UAAAA,KAAK,GAAGtB,MAAR;AACA;;AAEF,aAAK0C,aAAL;AACEnB,UAAAA,OAAO,GAAG,CAAV;AACAC,UAAAA,MAAM,GAAG,CAAT;AACAC,UAAAA,KAAK,GAAG1B,KAAR;AACAqB,UAAAA,OAAO,GAAGpB,MAAM,GAAG,CAAnB;AACAqB,UAAAA,MAAM,GAAG,CAAC,CAAV;AACAC,UAAAA,KAAK,GAAG,CAAC,CAAT;AACA;;AAEF,aAAKqB,aAAL;AACEpB,UAAAA,OAAO,GAAGxB,KAAK,GAAG,CAAlB;AACAyB,UAAAA,MAAM,GAAG,CAAC,CAAV;AACAC,UAAAA,KAAK,GAAG,CAAC,CAAT;AACAL,UAAAA,OAAO,GAAG,CAAV;AACAC,UAAAA,MAAM,GAAG,CAAT;AACAC,UAAAA,KAAK,GAAGtB,MAAR;AACA;;AAEF,aAAK4C,aAAL;AACErB,UAAAA,OAAO,GAAGxB,KAAK,GAAG,CAAlB;AACAyB,UAAAA,MAAM,GAAG,CAAC,CAAV;AACAC,UAAAA,KAAK,GAAG,CAAC,CAAT;AACAL,UAAAA,OAAO,GAAGpB,MAAM,GAAG,CAAnB;AACAqB,UAAAA,MAAM,GAAG,CAAC,CAAV;AACAC,UAAAA,KAAK,GAAG,CAAC,CAAT;AACA;AApCJ;;AAuCA,UAAIuB,QAAJ,EAAc;AACZ,gBAAQ5D,MAAM,CAACgB,UAAf;AACE,eAAK,CAAL;AACEiC,YAAAA,wBAAwB,CAAC5B,IAAD,EAAOc,OAAP,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,OAA/B,EAAwCC,MAAxC,EAAgDC,KAAhD,EAAuDC,KAAvD,CAAxB;AACA;;AAEF,eAAK,EAAL;AACES,YAAAA,yBAAyB,CAAC7B,IAAD,EAAOc,OAAP,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,OAA/B,EAAwCC,MAAxC,EAAgDC,KAAhD,EAAuDC,KAAvD,CAAzB;AACA;;AAEF;AACElC,YAAAA,OAAO,CAACC,KAAR,CAAc,wCAAd;AACA;AAXJ;AAaD,OAdD,MAcO;AACL,gBAAQR,MAAM,CAACgB,UAAf;AACE,eAAK,CAAL;AACEiB,YAAAA,oBAAoB,CAACZ,IAAD,EAAOc,OAAP,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,OAA/B,EAAwCC,MAAxC,EAAgDC,KAAhD,EAAuDC,KAAvD,EAA8DW,OAA9D,CAApB;AACA;;AAEF,eAAK,EAAL;AACEN,YAAAA,qBAAqB,CAACzB,IAAD,EAAOc,OAAP,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,OAA/B,EAAwCC,MAAxC,EAAgDC,KAAhD,EAAuDC,KAAvD,CAArB;AACA;;AAEF,eAAK,EAAL;AACEM,YAAAA,qBAAqB,CAAC1B,IAAD,EAAOc,OAAP,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,OAA/B,EAAwCC,MAAxC,EAAgDC,KAAhD,EAAuDC,KAAvD,CAArB;AACA;;AAEF,eAAK,EAAL;AACEO,YAAAA,qBAAqB,CAAC3B,IAAD,EAAOc,OAAP,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,OAA/B,EAAwCC,MAAxC,EAAgDC,KAAhD,EAAuDC,KAAvD,CAArB;AACA;;AAEF;AACElC,YAAAA,OAAO,CAACC,KAAR,CAAc,wCAAd;AACA;AAnBJ;AAqBD,OA9EsD,CA8ErD;AACF;AACA;;;AAGA,aAAOa,IAAP;AACD,KA3SW,CA2SV;;;AAGF,UAAMR,gBAAgB,GAAG,CAAzB;AAAA,UACMX,gBAAgB,GAAG,CADzB;AAAA,UAEMO,YAAY,GAAG,CAFrB;AAAA,UAGMC,aAAa,GAAG,CAHtB;AAAA,UAIMP,oBAAoB,GAAG,CAJ7B;AAAA,UAKMQ,gBAAgB,GAAG,EALzB;AAAA,UAMMC,iBAAiB,GAAG,EAN1B;AAAA,UAOM0C,eAAe,GAAG,IAPxB;AAAA,UAQMC,gBAAgB,GAAG,IARzB;AAAA,UASME,aAAa,GAAG,IATtB;AAAA,UAUME,aAAa,GAAG,IAVtB;AAAA,UAWMH,aAAa,GAAG,IAXtB;AAAA,UAYME,aAAa,GAAG,IAZtB;AAaA,QAAI5D,MAAM,CAAC+D,MAAP,GAAgB,EAApB,EAAwBtD,OAAO,CAACC,KAAR,CAAc,qDAAd;AACxB,QAAIY,MAAM,GAAG,CAAb;AACA,UAAM0C,OAAO,GAAG,IAAIpC,UAAJ,CAAe5B,MAAf,CAAhB;AAAA,UACME,MAAM,GAAG;AACb+D,MAAAA,SAAS,EAAED,OAAO,CAAC1C,MAAM,EAAP,CADL;AAEbd,MAAAA,aAAa,EAAEwD,OAAO,CAAC1C,MAAM,EAAP,CAFT;AAGbnB,MAAAA,UAAU,EAAE6D,OAAO,CAAC1C,MAAM,EAAP,CAHN;AAIb4C,MAAAA,cAAc,EAAEF,OAAO,CAAC1C,MAAM,EAAP,CAAP,GAAoB0C,OAAO,CAAC1C,MAAM,EAAP,CAAP,IAAqB,CAJ5C;AAKbhB,MAAAA,eAAe,EAAE0D,OAAO,CAAC1C,MAAM,EAAP,CAAP,GAAoB0C,OAAO,CAAC1C,MAAM,EAAP,CAAP,IAAqB,CAL7C;AAMbf,MAAAA,aAAa,EAAEyD,OAAO,CAAC1C,MAAM,EAAP,CANT;AAOb6C,MAAAA,MAAM,EAAE,CAACH,OAAO,CAAC1C,MAAM,EAAP,CAAP,GAAoB0C,OAAO,CAAC1C,MAAM,EAAP,CAAP,IAAqB,CAA1C,EAA6C0C,OAAO,CAAC1C,MAAM,EAAP,CAAP,GAAoB0C,OAAO,CAAC1C,MAAM,EAAP,CAAP,IAAqB,CAAtF,CAPK;AAQbN,MAAAA,KAAK,EAAEgD,OAAO,CAAC1C,MAAM,EAAP,CAAP,GAAoB0C,OAAO,CAAC1C,MAAM,EAAP,CAAP,IAAqB,CARnC;AASbL,MAAAA,MAAM,EAAE+C,OAAO,CAAC1C,MAAM,EAAP,CAAP,GAAoB0C,OAAO,CAAC1C,MAAM,EAAP,CAAP,IAAqB,CATpC;AAUbJ,MAAAA,UAAU,EAAE8C,OAAO,CAAC1C,MAAM,EAAP,CAVN;AAWbiC,MAAAA,KAAK,EAAES,OAAO,CAAC1C,MAAM,EAAP;AAXD,KADf,CA7TY,CA0UT;;AAEHrB,IAAAA,cAAc,CAACC,MAAD,CAAd;;AAEA,QAAIA,MAAM,CAAC+D,SAAP,GAAmB3C,MAAnB,GAA4BtB,MAAM,CAAC+D,MAAvC,EAA+C;AAC7CtD,MAAAA,OAAO,CAACC,KAAR,CAAc,2BAAd;AACD,KAhVW,CAgVV;;;AAGFY,IAAAA,MAAM,IAAIpB,MAAM,CAAC+D,SAAjB,CAnVY,CAmVgB;;AAE5B,QAAI7C,OAAO,GAAG,KAAd;AAAA,QACIC,OAAO,GAAG,KADd;AAAA,QAEIyC,QAAQ,GAAG,KAFf;;AAIA,YAAQ5D,MAAM,CAACC,UAAf;AACE,WAAKE,oBAAL;AACEe,QAAAA,OAAO,GAAG,IAAV;AACAC,QAAAA,OAAO,GAAG,IAAV;AACA;;AAEF,WAAKjB,gBAAL;AACEiB,QAAAA,OAAO,GAAG,IAAV;AACA;;AAEF,WAAKR,gBAAL;AACEO,QAAAA,OAAO,GAAG,IAAV;AACA;;AAEF,WAAKT,YAAL;AACE;;AAEF,WAAKG,iBAAL;AACEM,QAAAA,OAAO,GAAG,IAAV;AACA0C,QAAAA,QAAQ,GAAG,IAAX;AACA;;AAEF,WAAKlD,aAAL;AACEkD,QAAAA,QAAQ,GAAG,IAAX;AACA;AAxBJ,KAzVY,CAkXV;;;AAGF,UAAM1B,SAAS,GAAG,IAAIR,UAAJ,CAAe1B,MAAM,CAACc,KAAP,GAAed,MAAM,CAACe,MAAtB,GAA+B,CAA9C,CAAlB;AACA,UAAMmD,MAAM,GAAGjD,QAAQ,CAACC,OAAD,EAAUC,OAAV,EAAmBnB,MAAnB,EAA2BoB,MAA3B,EAAmC0C,OAAnC,CAAvB;AACAX,IAAAA,UAAU,CAACjB,SAAD,EAAYlC,MAAM,CAACc,KAAnB,EAA0Bd,MAAM,CAACe,MAAjC,EAAyCmD,MAAM,CAAC5C,UAAhD,EAA4D4C,MAAM,CAAC3C,QAAnE,CAAV;AACA,WAAO;AACLF,MAAAA,IAAI,EAAEa,SADD;AAELpB,MAAAA,KAAK,EAAEd,MAAM,CAACc,KAFT;AAGLC,MAAAA,MAAM,EAAEf,MAAM,CAACe,MAHV;AAILoD,MAAAA,KAAK,EAAE,IAJF;AAKLC,MAAAA,eAAe,EAAE,IALZ;AAMLC,MAAAA,SAAS,EAAE5E;AANN,KAAP;AAQD;;AArYuC;;AAyY1C,SAASC,SAAT","sourcesContent":["import { DataTextureLoader, LinearMipmapLinearFilter } from 'three';\n\nclass TGALoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  parse(buffer) {\n    // reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n    function tgaCheckHeader(header) {\n      switch (header.image_type) {\n        // check indexed type\n        case TGA_TYPE_INDEXED:\n        case TGA_TYPE_RLE_INDEXED:\n          if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n            console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n          }\n\n          break;\n        // check colormap type\n\n        case TGA_TYPE_RGB:\n        case TGA_TYPE_GREY:\n        case TGA_TYPE_RLE_RGB:\n        case TGA_TYPE_RLE_GREY:\n          if (header.colormap_type) {\n            console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n          }\n\n          break;\n        // What the need of a file without data ?\n\n        case TGA_TYPE_NO_DATA:\n          console.error('THREE.TGALoader: No data.');\n        // Invalid type ?\n\n        default:\n          console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n      } // check image width and height\n\n\n      if (header.width <= 0 || header.height <= 0) {\n        console.error('THREE.TGALoader: Invalid image size.');\n      } // check image pixel size\n\n\n      if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n        console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n      }\n    } // parse tga image buffer\n\n\n    function tgaParse(use_rle, use_pal, header, offset, data) {\n      let pixel_data, palettes;\n      const pixel_size = header.pixel_size >> 3;\n      const pixel_total = header.width * header.height * pixel_size; // read palettes\n\n      if (use_pal) {\n        palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n      } // read RLE\n\n\n      if (use_rle) {\n        pixel_data = new Uint8Array(pixel_total);\n        let c, count, i;\n        let shift = 0;\n        const pixels = new Uint8Array(pixel_size);\n\n        while (shift < pixel_total) {\n          c = data[offset++];\n          count = (c & 0x7f) + 1; // RLE pixels\n\n          if (c & 0x80) {\n            // bind pixel tmp array\n            for (i = 0; i < pixel_size; ++i) {\n              pixels[i] = data[offset++];\n            } // copy pixel array\n\n\n            for (i = 0; i < count; ++i) {\n              pixel_data.set(pixels, shift + i * pixel_size);\n            }\n\n            shift += pixel_size * count;\n          } else {\n            // raw pixels\n            count *= pixel_size;\n\n            for (i = 0; i < count; ++i) {\n              pixel_data[shift + i] = data[offset++];\n            }\n\n            shift += count;\n          }\n        }\n      } else {\n        // raw pixels\n        pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n      }\n\n      return {\n        pixel_data: pixel_data,\n        palettes: palettes\n      };\n    }\n\n    function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n      const colormap = palettes;\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n          imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n          imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\n\n          imageData[(x + width * y) * 4 + 0] = (color & 0x7c00) >> 7;\n          imageData[(x + width * y) * 4 + 1] = (color & 0x03e0) >> 2;\n          imageData[(x + width * y) * 4 + 2] = (color & 0x001f) >> 3;\n          imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 3) {\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 4) {\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n          imageData[(x + width * y) * 4 + 3] = image[i + 3];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 0] = color;\n          imageData[(x + width * y) * 4 + 1] = color;\n          imageData[(x + width * y) * 4 + 2] = color;\n          imageData[(x + width * y) * 4 + 3] = 255;\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          imageData[(x + width * y) * 4 + 0] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 0];\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 3] = image[i + 1];\n        }\n      }\n\n      return imageData;\n    }\n\n    function getTgaRGBA(data, width, height, image, palette) {\n      let x_start, y_start, x_step, y_step, x_end, y_end;\n\n      switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n        default:\n        case TGA_ORIGIN_UL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n\n        case TGA_ORIGIN_BL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n\n        case TGA_ORIGIN_UR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n\n        case TGA_ORIGIN_BR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n      }\n\n      if (use_grey) {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 16:\n            tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } else {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n            break;\n\n          case 16:\n            tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 24:\n            tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 32:\n            tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } // Load image data according to specific method\n      // let func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n      // func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\n\n      return data;\n    } // TGA constants\n\n\n    const TGA_TYPE_NO_DATA = 0,\n          TGA_TYPE_INDEXED = 1,\n          TGA_TYPE_RGB = 2,\n          TGA_TYPE_GREY = 3,\n          TGA_TYPE_RLE_INDEXED = 9,\n          TGA_TYPE_RLE_RGB = 10,\n          TGA_TYPE_RLE_GREY = 11,\n          TGA_ORIGIN_MASK = 0x30,\n          TGA_ORIGIN_SHIFT = 0x04,\n          TGA_ORIGIN_BL = 0x00,\n          TGA_ORIGIN_BR = 0x01,\n          TGA_ORIGIN_UL = 0x02,\n          TGA_ORIGIN_UR = 0x03;\n    if (buffer.length < 19) console.error('THREE.TGALoader: Not enough data to contain header.');\n    let offset = 0;\n    const content = new Uint8Array(buffer),\n          header = {\n      id_length: content[offset++],\n      colormap_type: content[offset++],\n      image_type: content[offset++],\n      colormap_index: content[offset++] | content[offset++] << 8,\n      colormap_length: content[offset++] | content[offset++] << 8,\n      colormap_size: content[offset++],\n      origin: [content[offset++] | content[offset++] << 8, content[offset++] | content[offset++] << 8],\n      width: content[offset++] | content[offset++] << 8,\n      height: content[offset++] | content[offset++] << 8,\n      pixel_size: content[offset++],\n      flags: content[offset++]\n    }; // check tga if it is valid format\n\n    tgaCheckHeader(header);\n\n    if (header.id_length + offset > buffer.length) {\n      console.error('THREE.TGALoader: No data.');\n    } // skip the needn't data\n\n\n    offset += header.id_length; // get targa information about RLE compression and palette\n\n    let use_rle = false,\n        use_pal = false,\n        use_grey = false;\n\n    switch (header.image_type) {\n      case TGA_TYPE_RLE_INDEXED:\n        use_rle = true;\n        use_pal = true;\n        break;\n\n      case TGA_TYPE_INDEXED:\n        use_pal = true;\n        break;\n\n      case TGA_TYPE_RLE_RGB:\n        use_rle = true;\n        break;\n\n      case TGA_TYPE_RGB:\n        break;\n\n      case TGA_TYPE_RLE_GREY:\n        use_rle = true;\n        use_grey = true;\n        break;\n\n      case TGA_TYPE_GREY:\n        use_grey = true;\n        break;\n    } //\n\n\n    const imageData = new Uint8Array(header.width * header.height * 4);\n    const result = tgaParse(use_rle, use_pal, header, offset, content);\n    getTgaRGBA(imageData, header.width, header.height, result.pixel_data, result.palettes);\n    return {\n      data: imageData,\n      width: header.width,\n      height: header.height,\n      flipY: true,\n      generateMipmaps: true,\n      minFilter: LinearMipmapLinearFilter\n    };\n  }\n\n}\n\nexport { TGALoader };\n"]},"metadata":{},"sourceType":"module"}