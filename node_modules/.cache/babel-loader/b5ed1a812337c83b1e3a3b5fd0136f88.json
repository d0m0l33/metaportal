{"ast":null,"code":"export function IS_LEAF(n16, uint16Array) {\n  return uint16Array[n16 + 15] === 0xFFFF;\n}\nexport function OFFSET(n32, uint32Array) {\n  return uint32Array[n32 + 6];\n}\nexport function COUNT(n16, uint16Array) {\n  return uint16Array[n16 + 14];\n}\nexport function LEFT_NODE(n32) {\n  return n32 + 8;\n}\nexport function RIGHT_NODE(n32, uint32Array) {\n  return uint32Array[n32 + 6];\n}\nexport function SPLIT_AXIS(n32, uint32Array) {\n  return uint32Array[n32 + 7];\n}\nexport function BOUNDING_DATA_INDEX(n32) {\n  return n32;\n}","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-mesh-bvh/src/core/nodeBufferFunctions.js"],"names":["IS_LEAF","n16","uint16Array","OFFSET","n32","uint32Array","COUNT","LEFT_NODE","RIGHT_NODE","SPLIT_AXIS","BOUNDING_DATA_INDEX"],"mappings":"AAAA,OAAO,SAASA,OAAT,CAAkBC,GAAlB,EAAuBC,WAAvB,EAAqC;AAE3C,SAAOA,WAAW,CAAED,GAAG,GAAG,EAAR,CAAX,KAA4B,MAAnC;AAEA;AAED,OAAO,SAASE,MAAT,CAAiBC,GAAjB,EAAsBC,WAAtB,EAAoC;AAE1C,SAAOA,WAAW,CAAED,GAAG,GAAG,CAAR,CAAlB;AAEA;AAED,OAAO,SAASE,KAAT,CAAgBL,GAAhB,EAAqBC,WAArB,EAAmC;AAEzC,SAAOA,WAAW,CAAED,GAAG,GAAG,EAAR,CAAlB;AAEA;AAED,OAAO,SAASM,SAAT,CAAoBH,GAApB,EAA0B;AAEhC,SAAOA,GAAG,GAAG,CAAb;AAEA;AAED,OAAO,SAASI,UAAT,CAAqBJ,GAArB,EAA0BC,WAA1B,EAAwC;AAE9C,SAAOA,WAAW,CAAED,GAAG,GAAG,CAAR,CAAlB;AAEA;AAED,OAAO,SAASK,UAAT,CAAqBL,GAArB,EAA0BC,WAA1B,EAAwC;AAE9C,SAAOA,WAAW,CAAED,GAAG,GAAG,CAAR,CAAlB;AAEA;AAED,OAAO,SAASM,mBAAT,CAA8BN,GAA9B,EAAoC;AAE1C,SAAOA,GAAP;AAEA","sourcesContent":["export function IS_LEAF( n16, uint16Array ) {\r\n\r\n\treturn uint16Array[ n16 + 15 ] === 0xFFFF;\r\n\r\n}\r\n\r\nexport function OFFSET( n32, uint32Array ) {\r\n\r\n\treturn uint32Array[ n32 + 6 ];\r\n\r\n}\r\n\r\nexport function COUNT( n16, uint16Array ) {\r\n\r\n\treturn uint16Array[ n16 + 14 ];\r\n\r\n}\r\n\r\nexport function LEFT_NODE( n32 ) {\r\n\r\n\treturn n32 + 8;\r\n\r\n}\r\n\r\nexport function RIGHT_NODE( n32, uint32Array ) {\r\n\r\n\treturn uint32Array[ n32 + 6 ];\r\n\r\n}\r\n\r\nexport function SPLIT_AXIS( n32, uint32Array ) {\r\n\r\n\treturn uint32Array[ n32 + 7 ];\r\n\r\n}\r\n\r\nexport function BOUNDING_DATA_INDEX( n32 ) {\r\n\r\n\treturn n32;\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}