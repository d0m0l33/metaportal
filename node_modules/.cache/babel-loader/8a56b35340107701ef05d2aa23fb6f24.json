{"ast":null,"code":"import _classCallCheck from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from 'three';\n/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @class TDSLoader\n * @constructor\n */\n\nvar TDSLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(TDSLoader, _Loader);\n\n  var _super = _createSuper(TDSLoader);\n\n  function TDSLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, TDSLoader);\n\n    _this = _super.call(this, manager);\n    _this.debug = false;\n    _this.group = null;\n    _this.position = 0;\n    _this.materials = [];\n    _this.meshes = [];\n    return _this;\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n\n\n  _createClass(TDSLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (data) {\n        try {\n          onLoad(scope.parse(data, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n    /**\n     * Parse arraybuffer data and load 3ds file.\n     *\n     * @method parse\n     * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n     * @param {String} path Path for external resources.\n     * @return {Group} Group loaded from 3ds file.\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(arraybuffer, path) {\n      this.group = new Group();\n      this.position = 0;\n      this.materials = [];\n      this.meshes = [];\n      this.readFile(arraybuffer, path);\n\n      for (var i = 0; i < this.meshes.length; i++) {\n        this.group.add(this.meshes[i]);\n      }\n\n      return this.group;\n    }\n    /**\n     * Decode file content to read 3ds data.\n     *\n     * @method readFile\n     * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n     * @param {String} path Path for external resources.\n     */\n\n  }, {\n    key: \"readFile\",\n    value: function readFile(arraybuffer, path) {\n      var data = new DataView(arraybuffer);\n      var chunk = this.readChunk(data);\n\n      if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n        var next = this.nextChunk(data, chunk);\n\n        while (next !== 0) {\n          if (next === M3D_VERSION) {\n            var version = this.readDWord(data);\n            this.debugMessage('3DS file version: ' + version);\n          } else if (next === MDATA) {\n            this.resetPosition(data);\n            this.readMeshData(data, path);\n          } else {\n            this.debugMessage('Unknown main chunk: ' + next.toString(16));\n          }\n\n          next = this.nextChunk(data, chunk);\n        }\n      }\n\n      this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n    }\n    /**\n     * Read mesh data chunk.\n     *\n     * @method readMeshData\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     */\n\n  }, {\n    key: \"readMeshData\",\n    value: function readMeshData(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n\n      while (next !== 0) {\n        if (next === MESH_VERSION) {\n          var version = +this.readDWord(data);\n          this.debugMessage('Mesh Version: ' + version);\n        } else if (next === MASTER_SCALE) {\n          var scale = this.readFloat(data);\n          this.debugMessage('Master scale: ' + scale);\n          this.group.scale.set(scale, scale, scale);\n        } else if (next === NAMED_OBJECT) {\n          this.debugMessage('Named Object');\n          this.resetPosition(data);\n          this.readNamedObject(data);\n        } else if (next === MAT_ENTRY) {\n          this.debugMessage('Material');\n          this.resetPosition(data);\n          this.readMaterialEntry(data, path);\n        } else {\n          this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n    }\n    /**\n     * Read named object chunk.\n     *\n     * @method readNamedObject\n     * @param {Dataview} data Dataview in use.\n     */\n\n  }, {\n    key: \"readNamedObject\",\n    value: function readNamedObject(data) {\n      var chunk = this.readChunk(data);\n      var name = this.readString(data, 64);\n      chunk.cur = this.position;\n      var next = this.nextChunk(data, chunk);\n\n      while (next !== 0) {\n        if (next === N_TRI_OBJECT) {\n          this.resetPosition(data);\n          var mesh = this.readMesh(data);\n          mesh.name = name;\n          this.meshes.push(mesh);\n        } else {\n          this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n\n      this.endChunk(chunk);\n    }\n    /**\n     * Read material data chunk and add it to the material list.\n     *\n     * @method readMaterialEntry\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     */\n\n  }, {\n    key: \"readMaterialEntry\",\n    value: function readMaterialEntry(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var material = new MeshPhongMaterial();\n\n      while (next !== 0) {\n        if (next === MAT_NAME) {\n          material.name = this.readString(data, 64);\n          this.debugMessage('   Name: ' + material.name);\n        } else if (next === MAT_WIRE) {\n          this.debugMessage('   Wireframe');\n          material.wireframe = true;\n        } else if (next === MAT_WIRE_SIZE) {\n          var value = this.readByte(data);\n          material.wireframeLinewidth = value;\n          this.debugMessage('   Wireframe Thickness: ' + value);\n        } else if (next === MAT_TWO_SIDE) {\n          material.side = DoubleSide;\n          this.debugMessage('   DoubleSided');\n        } else if (next === MAT_ADDITIVE) {\n          this.debugMessage('   Additive Blending');\n          material.blending = AdditiveBlending;\n        } else if (next === MAT_DIFFUSE) {\n          this.debugMessage('   Diffuse Color');\n          material.color = this.readColor(data);\n        } else if (next === MAT_SPECULAR) {\n          this.debugMessage('   Specular Color');\n          material.specular = this.readColor(data);\n        } else if (next === MAT_AMBIENT) {\n          this.debugMessage('   Ambient color');\n          material.color = this.readColor(data);\n        } else if (next === MAT_SHININESS) {\n          var shininess = this.readPercentage(data);\n          material.shininess = shininess * 100;\n          this.debugMessage('   Shininess : ' + shininess);\n        } else if (next === MAT_TRANSPARENCY) {\n          var transparency = this.readPercentage(data);\n          material.opacity = 1 - transparency;\n          this.debugMessage('  Transparency : ' + transparency);\n          material.transparent = material.opacity < 1 ? true : false;\n        } else if (next === MAT_TEXMAP) {\n          this.debugMessage('   ColorMap');\n          this.resetPosition(data);\n          material.map = this.readMap(data, path);\n        } else if (next === MAT_BUMPMAP) {\n          this.debugMessage('   BumpMap');\n          this.resetPosition(data);\n          material.bumpMap = this.readMap(data, path);\n        } else if (next === MAT_OPACMAP) {\n          this.debugMessage('   OpacityMap');\n          this.resetPosition(data);\n          material.alphaMap = this.readMap(data, path);\n        } else if (next === MAT_SPECMAP) {\n          this.debugMessage('   SpecularMap');\n          this.resetPosition(data);\n          material.specularMap = this.readMap(data, path);\n        } else {\n          this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n\n      this.endChunk(chunk);\n      this.materials[material.name] = material;\n    }\n    /**\n     * Read mesh data chunk.\n     *\n     * @method readMesh\n     * @param {Dataview} data Dataview in use.\n     * @return {Mesh} The parsed mesh.\n     */\n\n  }, {\n    key: \"readMesh\",\n    value: function readMesh(data) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var geometry = new BufferGeometry();\n      var material = new MeshPhongMaterial();\n      var mesh = new Mesh(geometry, material);\n      mesh.name = 'mesh';\n\n      while (next !== 0) {\n        if (next === POINT_ARRAY) {\n          var points = this.readWord(data);\n          this.debugMessage('   Vertex: ' + points); //BufferGeometry\n\n          var vertices = [];\n\n          for (var i = 0; i < points; i++) {\n            vertices.push(this.readFloat(data));\n            vertices.push(this.readFloat(data));\n            vertices.push(this.readFloat(data));\n          }\n\n          geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n        } else if (next === FACE_ARRAY) {\n          this.resetPosition(data);\n          this.readFaceArray(data, mesh);\n        } else if (next === TEX_VERTS) {\n          var texels = this.readWord(data);\n          this.debugMessage('   UV: ' + texels); //BufferGeometry\n\n          var uvs = [];\n\n          for (var _i = 0; _i < texels; _i++) {\n            uvs.push(this.readFloat(data));\n            uvs.push(this.readFloat(data));\n          }\n\n          geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n        } else if (next === MESH_MATRIX) {\n          this.debugMessage('   Tranformation Matrix (TODO)');\n          var values = [];\n\n          for (var _i2 = 0; _i2 < 12; _i2++) {\n            values[_i2] = this.readFloat(data);\n          }\n\n          var matrix = new Matrix4(); //X Line\n\n          matrix.elements[0] = values[0];\n          matrix.elements[1] = values[6];\n          matrix.elements[2] = values[3];\n          matrix.elements[3] = values[9]; //Y Line\n\n          matrix.elements[4] = values[2];\n          matrix.elements[5] = values[8];\n          matrix.elements[6] = values[5];\n          matrix.elements[7] = values[11]; //Z Line\n\n          matrix.elements[8] = values[1];\n          matrix.elements[9] = values[7];\n          matrix.elements[10] = values[4];\n          matrix.elements[11] = values[10]; //W Line\n\n          matrix.elements[12] = 0;\n          matrix.elements[13] = 0;\n          matrix.elements[14] = 0;\n          matrix.elements[15] = 1;\n          matrix.transpose();\n          var inverse = new Matrix4();\n          inverse.copy(matrix).invert();\n          geometry.applyMatrix4(inverse);\n          matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n        } else {\n          this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n\n      this.endChunk(chunk);\n      geometry.computeVertexNormals();\n      return mesh;\n    }\n    /**\n     * Read face array data chunk.\n     *\n     * @method readFaceArray\n     * @param {Dataview} data Dataview in use.\n     * @param {Mesh} mesh Mesh to be filled with the data read.\n     */\n\n  }, {\n    key: \"readFaceArray\",\n    value: function readFaceArray(data, mesh) {\n      var chunk = this.readChunk(data);\n      var faces = this.readWord(data);\n      this.debugMessage('   Faces: ' + faces);\n      var index = [];\n\n      for (var i = 0; i < faces; ++i) {\n        index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n        this.readWord(data); // visibility\n      }\n\n      mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\n\n      var materialIndex = 0;\n      var start = 0;\n\n      while (this.position < chunk.end) {\n        var subchunk = this.readChunk(data);\n\n        if (subchunk.id === MSH_MAT_GROUP) {\n          this.debugMessage('      Material Group');\n          this.resetPosition(data);\n          var group = this.readMaterialGroup(data);\n          var count = group.index.length * 3; // assuming successive indices\n\n          mesh.geometry.addGroup(start, count, materialIndex);\n          start += count;\n          materialIndex++;\n          var material = this.materials[group.name];\n          if (Array.isArray(mesh.material) === false) mesh.material = [];\n\n          if (material !== undefined) {\n            mesh.material.push(material);\n          }\n        } else {\n          this.debugMessage('      Unknown face array chunk: ' + subchunk.toString(16));\n        }\n\n        this.endChunk(subchunk);\n      }\n\n      if (mesh.material.length === 1) mesh.material = mesh.material[0]; // for backwards compatibility\n\n      this.endChunk(chunk);\n    }\n    /**\n     * Read texture map data chunk.\n     *\n     * @method readMap\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     * @return {Texture} Texture read from this data chunk.\n     */\n\n  }, {\n    key: \"readMap\",\n    value: function readMap(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var texture = {};\n      var loader = new TextureLoader(this.manager);\n      loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n\n      while (next !== 0) {\n        if (next === MAT_MAPNAME) {\n          var name = this.readString(data, 128);\n          texture = loader.load(name);\n          this.debugMessage('      File: ' + path + name);\n        } else if (next === MAT_MAP_UOFFSET) {\n          texture.offset.x = this.readFloat(data);\n          this.debugMessage('      OffsetX: ' + texture.offset.x);\n        } else if (next === MAT_MAP_VOFFSET) {\n          texture.offset.y = this.readFloat(data);\n          this.debugMessage('      OffsetY: ' + texture.offset.y);\n        } else if (next === MAT_MAP_USCALE) {\n          texture.repeat.x = this.readFloat(data);\n          this.debugMessage('      RepeatX: ' + texture.repeat.x);\n        } else if (next === MAT_MAP_VSCALE) {\n          texture.repeat.y = this.readFloat(data);\n          this.debugMessage('      RepeatY: ' + texture.repeat.y);\n        } else {\n          this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n\n      this.endChunk(chunk);\n      return texture;\n    }\n    /**\n     * Read material group data chunk.\n     *\n     * @method readMaterialGroup\n     * @param {Dataview} data Dataview in use.\n     * @return {Object} Object with name and index of the object.\n     */\n\n  }, {\n    key: \"readMaterialGroup\",\n    value: function readMaterialGroup(data) {\n      this.readChunk(data);\n      var name = this.readString(data, 64);\n      var numFaces = this.readWord(data);\n      this.debugMessage('         Name: ' + name);\n      this.debugMessage('         Faces: ' + numFaces);\n      var index = [];\n\n      for (var i = 0; i < numFaces; ++i) {\n        index.push(this.readWord(data));\n      }\n\n      return {\n        name: name,\n        index: index\n      };\n    }\n    /**\n     * Read a color value.\n     *\n     * @method readColor\n     * @param {DataView} data Dataview.\n     * @return {Color} Color value read..\n     */\n\n  }, {\n    key: \"readColor\",\n    value: function readColor(data) {\n      var chunk = this.readChunk(data);\n      var color = new Color();\n\n      if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n        var r = this.readByte(data);\n        var g = this.readByte(data);\n        var b = this.readByte(data);\n        color.setRGB(r / 255, g / 255, b / 255);\n        this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n      } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n        var _r = this.readFloat(data);\n\n        var _g = this.readFloat(data);\n\n        var _b = this.readFloat(data);\n\n        color.setRGB(_r, _g, _b);\n        this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n      } else {\n        this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n      }\n\n      this.endChunk(chunk);\n      return color;\n    }\n    /**\n     * Read next chunk of data.\n     *\n     * @method readChunk\n     * @param {DataView} data Dataview.\n     * @return {Object} Chunk of data read.\n     */\n\n  }, {\n    key: \"readChunk\",\n    value: function readChunk(data) {\n      var chunk = {};\n      chunk.cur = this.position;\n      chunk.id = this.readWord(data);\n      chunk.size = this.readDWord(data);\n      chunk.end = chunk.cur + chunk.size;\n      chunk.cur += 6;\n      return chunk;\n    }\n    /**\n     * Set position to the end of the current chunk of data.\n     *\n     * @method endChunk\n     * @param {Object} chunk Data chunk.\n     */\n\n  }, {\n    key: \"endChunk\",\n    value: function endChunk(chunk) {\n      this.position = chunk.end;\n    }\n    /**\n     * Move to the next data chunk.\n     *\n     * @method nextChunk\n     * @param {DataView} data Dataview.\n     * @param {Object} chunk Data chunk.\n     */\n\n  }, {\n    key: \"nextChunk\",\n    value: function nextChunk(data, chunk) {\n      if (chunk.cur >= chunk.end) {\n        return 0;\n      }\n\n      this.position = chunk.cur;\n\n      try {\n        var next = this.readChunk(data);\n        chunk.cur += next.size;\n        return next.id;\n      } catch (e) {\n        this.debugMessage('Unable to read chunk at ' + this.position);\n        return 0;\n      }\n    }\n    /**\n     * Reset dataview position.\n     *\n     * @method resetPosition\n     */\n\n  }, {\n    key: \"resetPosition\",\n    value: function resetPosition() {\n      this.position -= 6;\n    }\n    /**\n     * Read byte value.\n     *\n     * @method readByte\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readByte\",\n    value: function readByte(data) {\n      var v = data.getUint8(this.position, true);\n      this.position += 1;\n      return v;\n    }\n    /**\n     * Read 32 bit float value.\n     *\n     * @method readFloat\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readFloat\",\n    value: function readFloat(data) {\n      try {\n        var v = data.getFloat32(this.position, true);\n        this.position += 4;\n        return v;\n      } catch (e) {\n        this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n      }\n    }\n    /**\n     * Read 32 bit signed integer value.\n     *\n     * @method readInt\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readInt\",\n    value: function readInt(data) {\n      var v = data.getInt32(this.position, true);\n      this.position += 4;\n      return v;\n    }\n    /**\n     * Read 16 bit signed integer value.\n     *\n     * @method readShort\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readShort\",\n    value: function readShort(data) {\n      var v = data.getInt16(this.position, true);\n      this.position += 2;\n      return v;\n    }\n    /**\n     * Read 64 bit unsigned integer value.\n     *\n     * @method readDWord\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readDWord\",\n    value: function readDWord(data) {\n      var v = data.getUint32(this.position, true);\n      this.position += 4;\n      return v;\n    }\n    /**\n     * Read 32 bit unsigned integer value.\n     *\n     * @method readWord\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readWord\",\n    value: function readWord(data) {\n      var v = data.getUint16(this.position, true);\n      this.position += 2;\n      return v;\n    }\n    /**\n     * Read string value.\n     *\n     * @method readString\n     * @param {DataView} data Dataview to read data from.\n     * @param {Number} maxLength Max size of the string to be read.\n     * @return {String} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readString\",\n    value: function readString(data, maxLength) {\n      var s = '';\n\n      for (var i = 0; i < maxLength; i++) {\n        var c = this.readByte(data);\n\n        if (!c) {\n          break;\n        }\n\n        s += String.fromCharCode(c);\n      }\n\n      return s;\n    }\n    /**\n     * Read percentage value.\n     *\n     * @method readPercentage\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readPercentage\",\n    value: function readPercentage(data) {\n      var chunk = this.readChunk(data);\n      var value;\n\n      switch (chunk.id) {\n        case INT_PERCENTAGE:\n          value = this.readShort(data) / 100;\n          break;\n\n        case FLOAT_PERCENTAGE:\n          value = this.readFloat(data);\n          break;\n\n        default:\n          this.debugMessage('      Unknown percentage chunk: ' + chunk.toString(16));\n      }\n\n      this.endChunk(chunk);\n      return value;\n    }\n    /**\n     * Print debug message to the console.\n     *\n     * Is controlled by a flag to show or hide debug messages.\n     *\n     * @method debugMessage\n     * @param {Object} message Debug message to print to the console.\n     */\n\n  }, {\n    key: \"debugMessage\",\n    value: function debugMessage(message) {\n      if (this.debug) {\n        console.log(message);\n      }\n    }\n  }]);\n\n  return TDSLoader;\n}(Loader); // const NULL_CHUNK = 0x0000;\n\n\nvar M3DMAGIC = 0x4d4d; // const SMAGIC = 0x2D2D;\n// const LMAGIC = 0x2D3D;\n\nvar MLIBMAGIC = 0x3daa; // const MATMAGIC = 0x3DFF;\n\nvar CMAGIC = 0xc23d;\nvar M3D_VERSION = 0x0002; // const M3D_KFVERSION = 0x0005;\n\nvar COLOR_F = 0x0010;\nvar COLOR_24 = 0x0011;\nvar LIN_COLOR_24 = 0x0012;\nvar LIN_COLOR_F = 0x0013;\nvar INT_PERCENTAGE = 0x0030;\nvar FLOAT_PERCENTAGE = 0x0031;\nvar MDATA = 0x3d3d;\nvar MESH_VERSION = 0x3d3e;\nvar MASTER_SCALE = 0x0100; // const LO_SHADOW_BIAS = 0x1400;\n// const HI_SHADOW_BIAS = 0x1410;\n// const SHADOW_MAP_SIZE = 0x1420;\n// const SHADOW_SAMPLES = 0x1430;\n// const SHADOW_RANGE = 0x1440;\n// const SHADOW_FILTER = 0x1450;\n// const RAY_BIAS = 0x1460;\n// const O_CONSTS = 0x1500;\n// const AMBIENT_LIGHT = 0x2100;\n// const BIT_MAP = 0x1100;\n// const SOLID_BGND = 0x1200;\n// const V_GRADIENT = 0x1300;\n// const USE_BIT_MAP = 0x1101;\n// const USE_SOLID_BGND = 0x1201;\n// const USE_V_GRADIENT = 0x1301;\n// const FOG = 0x2200;\n// const FOG_BGND = 0x2210;\n// const LAYER_FOG = 0x2302;\n// const DISTANCE_CUE = 0x2300;\n// const DCUE_BGND = 0x2310;\n// const USE_FOG = 0x2201;\n// const USE_LAYER_FOG = 0x2303;\n// const USE_DISTANCE_CUE = 0x2301;\n\nvar MAT_ENTRY = 0xafff;\nvar MAT_NAME = 0xa000;\nvar MAT_AMBIENT = 0xa010;\nvar MAT_DIFFUSE = 0xa020;\nvar MAT_SPECULAR = 0xa030;\nvar MAT_SHININESS = 0xa040; // const MAT_SHIN2PCT = 0xA041;\n\nvar MAT_TRANSPARENCY = 0xa050; // const MAT_XPFALL = 0xA052;\n// const MAT_USE_XPFALL = 0xA240;\n// const MAT_REFBLUR = 0xA053;\n// const MAT_SHADING = 0xA100;\n// const MAT_USE_REFBLUR = 0xA250;\n// const MAT_SELF_ILLUM = 0xA084;\n\nvar MAT_TWO_SIDE = 0xa081; // const MAT_DECAL = 0xA082;\n\nvar MAT_ADDITIVE = 0xa083;\nvar MAT_WIRE = 0xa085; // const MAT_FACEMAP = 0xA088;\n// const MAT_TRANSFALLOFF_IN = 0xA08A;\n// const MAT_PHONGSOFT = 0xA08C;\n// const MAT_WIREABS = 0xA08E;\n\nvar MAT_WIRE_SIZE = 0xa087;\nvar MAT_TEXMAP = 0xa200; // const MAT_SXP_TEXT_DATA = 0xA320;\n// const MAT_TEXMASK = 0xA33E;\n// const MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// const MAT_TEX2MAP = 0xA33A;\n// const MAT_SXP_TEXT2_DATA = 0xA321;\n// const MAT_TEX2MASK = 0xA340;\n// const MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\nvar MAT_OPACMAP = 0xa210; // const MAT_SXP_OPAC_DATA = 0xA322;\n// const MAT_OPACMASK = 0xA342;\n// const MAT_SXP_OPACMASK_DATA = 0xA32E;\n\nvar MAT_BUMPMAP = 0xa230; // const MAT_SXP_BUMP_DATA = 0xA324;\n// const MAT_BUMPMASK = 0xA344;\n// const MAT_SXP_BUMPMASK_DATA = 0xA330;\n\nvar MAT_SPECMAP = 0xa204; // const MAT_SXP_SPEC_DATA = 0xA325;\n// const MAT_SPECMASK = 0xA348;\n// const MAT_SXP_SPECMASK_DATA = 0xA332;\n// const MAT_SHINMAP = 0xA33C;\n// const MAT_SXP_SHIN_DATA = 0xA326;\n// const MAT_SHINMASK = 0xA346;\n// const MAT_SXP_SHINMASK_DATA = 0xA334;\n// const MAT_SELFIMAP = 0xA33D;\n// const MAT_SXP_SELFI_DATA = 0xA328;\n// const MAT_SELFIMASK = 0xA34A;\n// const MAT_SXP_SELFIMASK_DATA = 0xA336;\n// const MAT_REFLMAP = 0xA220;\n// const MAT_REFLMASK = 0xA34C;\n// const MAT_SXP_REFLMASK_DATA = 0xA338;\n// const MAT_ACUBIC = 0xA310;\n\nvar MAT_MAPNAME = 0xa300; // const MAT_MAP_TILING = 0xA351;\n// const MAT_MAP_TEXBLUR = 0xA353;\n\nvar MAT_MAP_USCALE = 0xa354;\nvar MAT_MAP_VSCALE = 0xa356;\nvar MAT_MAP_UOFFSET = 0xa358;\nvar MAT_MAP_VOFFSET = 0xa35a; // const MAT_MAP_ANG = 0xA35C;\n// const MAT_MAP_COL1 = 0xA360;\n// const MAT_MAP_COL2 = 0xA362;\n// const MAT_MAP_RCOL = 0xA364;\n// const MAT_MAP_GCOL = 0xA366;\n// const MAT_MAP_BCOL = 0xA368;\n\nvar NAMED_OBJECT = 0x4000; // const N_DIRECT_LIGHT = 0x4600;\n// const DL_OFF = 0x4620;\n// const DL_OUTER_RANGE = 0x465A;\n// const DL_INNER_RANGE = 0x4659;\n// const DL_MULTIPLIER = 0x465B;\n// const DL_EXCLUDE = 0x4654;\n// const DL_ATTENUATE = 0x4625;\n// const DL_SPOTLIGHT = 0x4610;\n// const DL_SPOT_ROLL = 0x4656;\n// const DL_SHADOWED = 0x4630;\n// const DL_LOCAL_SHADOW2 = 0x4641;\n// const DL_SEE_CONE = 0x4650;\n// const DL_SPOT_RECTANGULAR = 0x4651;\n// const DL_SPOT_ASPECT = 0x4657;\n// const DL_SPOT_PROJECTOR = 0x4653;\n// const DL_SPOT_OVERSHOOT = 0x4652;\n// const DL_RAY_BIAS = 0x4658;\n// const DL_RAYSHAD = 0x4627;\n// const N_CAMERA = 0x4700;\n// const CAM_SEE_CONE = 0x4710;\n// const CAM_RANGES = 0x4720;\n// const OBJ_HIDDEN = 0x4010;\n// const OBJ_VIS_LOFTER = 0x4011;\n// const OBJ_DOESNT_CAST = 0x4012;\n// const OBJ_DONT_RECVSHADOW = 0x4017;\n// const OBJ_MATTE = 0x4013;\n// const OBJ_FAST = 0x4014;\n// const OBJ_PROCEDURAL = 0x4015;\n// const OBJ_FROZEN = 0x4016;\n\nvar N_TRI_OBJECT = 0x4100;\nvar POINT_ARRAY = 0x4110; // const POINT_FLAG_ARRAY = 0x4111;\n\nvar FACE_ARRAY = 0x4120;\nvar MSH_MAT_GROUP = 0x4130; // const SMOOTH_GROUP = 0x4150;\n// const MSH_BOXMAP = 0x4190;\n\nvar TEX_VERTS = 0x4140;\nvar MESH_MATRIX = 0x4160; // const MESH_COLOR = 0x4165;\n\nexport { TDSLoader };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/three-stdlib/loaders/TDSLoader.js"],"names":["Loader","LoaderUtils","FileLoader","Group","MeshPhongMaterial","DoubleSide","AdditiveBlending","BufferGeometry","Mesh","Float32BufferAttribute","Matrix4","TextureLoader","Color","TDSLoader","manager","debug","group","position","materials","meshes","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","data","parse","e","console","error","itemError","arraybuffer","readFile","i","length","add","DataView","chunk","readChunk","id","MLIBMAGIC","CMAGIC","M3DMAGIC","next","nextChunk","M3D_VERSION","version","readDWord","debugMessage","MDATA","resetPosition","readMeshData","toString","MESH_VERSION","MASTER_SCALE","scale","readFloat","set","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","name","readString","cur","N_TRI_OBJECT","mesh","readMesh","push","endChunk","material","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","value","readByte","wireframeLinewidth","MAT_TWO_SIDE","side","MAT_ADDITIVE","blending","MAT_DIFFUSE","color","readColor","MAT_SPECULAR","specular","MAT_AMBIENT","MAT_SHININESS","shininess","readPercentage","MAT_TRANSPARENCY","transparency","opacity","transparent","MAT_TEXMAP","map","readMap","MAT_BUMPMAP","bumpMap","MAT_OPACMAP","alphaMap","MAT_SPECMAP","specularMap","geometry","POINT_ARRAY","points","readWord","vertices","setAttribute","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","uvs","MESH_MATRIX","values","matrix","elements","transpose","inverse","copy","invert","applyMatrix4","decompose","quaternion","computeVertexNormals","faces","index","setIndex","materialIndex","start","end","subchunk","MSH_MAT_GROUP","readMaterialGroup","count","addGroup","Array","isArray","undefined","texture","resourcePath","setCrossOrigin","crossOrigin","MAT_MAPNAME","MAT_MAP_UOFFSET","offset","x","MAT_MAP_VOFFSET","y","MAT_MAP_USCALE","repeat","MAT_MAP_VSCALE","numFaces","COLOR_24","LIN_COLOR_24","r","g","b","setRGB","COLOR_F","LIN_COLOR_F","size","v","getUint8","getFloat32","byteLength","getInt32","getInt16","getUint32","getUint16","maxLength","s","c","String","fromCharCode","INT_PERCENTAGE","readShort","FLOAT_PERCENTAGE","message","log"],"mappings":"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","sourcesContent":["import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from 'three';\n\n/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @class TDSLoader\n * @constructor\n */\n\nclass TDSLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.debug = false;\n    this.group = null;\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n\n\n  parse(arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n\n    return this.group;\n  }\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n\n\n  readFile(arraybuffer, path) {\n    const data = new DataView(arraybuffer);\n    const chunk = this.readChunk(data);\n\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      let next = this.nextChunk(data, chunk);\n\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          const version = this.readDWord(data);\n          this.debugMessage('3DS file version: ' + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage('Unknown main chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n    }\n\n    this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n\n\n  readMeshData(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        const version = +this.readDWord(data);\n        this.debugMessage('Mesh Version: ' + version);\n      } else if (next === MASTER_SCALE) {\n        const scale = this.readFloat(data);\n        this.debugMessage('Master scale: ' + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage('Named Object');\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage('Material');\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n  }\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n\n\n  readNamedObject(data) {\n    const chunk = this.readChunk(data);\n    const name = this.readString(data, 64);\n    chunk.cur = this.position;\n    let next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        const mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n  }\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n\n\n  readMaterialEntry(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const material = new MeshPhongMaterial();\n\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage('   Name: ' + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage('   Wireframe');\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        const value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage('   Wireframe Thickness: ' + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage('   DoubleSided');\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage('   Additive Blending');\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage('   Diffuse Color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage('   Specular Color');\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage('   Ambient color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        const shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage('   Shininess : ' + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        const transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage('  Transparency : ' + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage('   ColorMap');\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage('   BumpMap');\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage('   OpacityMap');\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage('   SpecularMap');\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n\n\n  readMesh(data) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const geometry = new BufferGeometry();\n    const material = new MeshPhongMaterial();\n    const mesh = new Mesh(geometry, material);\n    mesh.name = 'mesh';\n\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        const points = this.readWord(data);\n        this.debugMessage('   Vertex: ' + points); //BufferGeometry\n\n        const vertices = [];\n\n        for (let i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        const texels = this.readWord(data);\n        this.debugMessage('   UV: ' + texels); //BufferGeometry\n\n        const uvs = [];\n\n        for (let i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage('   Tranformation Matrix (TODO)');\n        const values = [];\n\n        for (let i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n\n        const matrix = new Matrix4(); //X Line\n\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9]; //Y Line\n\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11]; //Z Line\n\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10]; //W Line\n\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        const inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  }\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n\n\n  readFaceArray(data, mesh) {\n    const chunk = this.readChunk(data);\n    const faces = this.readWord(data);\n    this.debugMessage('   Faces: ' + faces);\n    const index = [];\n\n    for (let i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data); // visibility\n    }\n\n    mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\n\n    let materialIndex = 0;\n    let start = 0;\n\n    while (this.position < chunk.end) {\n      const subchunk = this.readChunk(data);\n\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage('      Material Group');\n        this.resetPosition(data);\n        const group = this.readMaterialGroup(data);\n        const count = group.index.length * 3; // assuming successive indices\n\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        const material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false) mesh.material = [];\n\n        if (material !== undefined) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage('      Unknown face array chunk: ' + subchunk.toString(16));\n      }\n\n      this.endChunk(subchunk);\n    }\n\n    if (mesh.material.length === 1) mesh.material = mesh.material[0]; // for backwards compatibility\n\n    this.endChunk(chunk);\n  }\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n\n\n  readMap(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    let texture = {};\n    const loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        const name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage('      File: ' + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage('      OffsetX: ' + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage('      OffsetY: ' + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage('      RepeatX: ' + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage('      RepeatY: ' + texture.repeat.y);\n      } else {\n        this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    return texture;\n  }\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n\n\n  readMaterialGroup(data) {\n    this.readChunk(data);\n    const name = this.readString(data, 64);\n    const numFaces = this.readWord(data);\n    this.debugMessage('         Name: ' + name);\n    this.debugMessage('         Faces: ' + numFaces);\n    const index = [];\n\n    for (let i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n\n    return {\n      name: name,\n      index: index\n    };\n  }\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n\n\n  readColor(data) {\n    const chunk = this.readChunk(data);\n    const color = new Color();\n\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      const r = this.readByte(data);\n      const g = this.readByte(data);\n      const b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      const r = this.readFloat(data);\n      const g = this.readFloat(data);\n      const b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else {\n      this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return color;\n  }\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n\n\n  readChunk(data) {\n    const chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  }\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n\n\n  endChunk(chunk) {\n    this.position = chunk.end;\n  }\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n\n\n  nextChunk(data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n\n    this.position = chunk.cur;\n\n    try {\n      const next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage('Unable to read chunk at ' + this.position);\n      return 0;\n    }\n  }\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n\n\n  resetPosition() {\n    this.position -= 6;\n  }\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readByte(data) {\n    const v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  }\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readFloat(data) {\n    try {\n      const v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n    }\n  }\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readInt(data) {\n    const v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readShort(data) {\n    const v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readDWord(data) {\n    const v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readWord(data) {\n    const v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n\n\n  readString(data, maxLength) {\n    let s = '';\n\n    for (let i = 0; i < maxLength; i++) {\n      const c = this.readByte(data);\n\n      if (!c) {\n        break;\n      }\n\n      s += String.fromCharCode(c);\n    }\n\n    return s;\n  }\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readPercentage(data) {\n    const chunk = this.readChunk(data);\n    let value;\n\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n\n      default:\n        this.debugMessage('      Unknown percentage chunk: ' + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return value;\n  }\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n\n\n  debugMessage(message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n\n} // const NULL_CHUNK = 0x0000;\n\n\nconst M3DMAGIC = 0x4d4d; // const SMAGIC = 0x2D2D;\n// const LMAGIC = 0x2D3D;\n\nconst MLIBMAGIC = 0x3daa; // const MATMAGIC = 0x3DFF;\n\nconst CMAGIC = 0xc23d;\nconst M3D_VERSION = 0x0002; // const M3D_KFVERSION = 0x0005;\n\nconst COLOR_F = 0x0010;\nconst COLOR_24 = 0x0011;\nconst LIN_COLOR_24 = 0x0012;\nconst LIN_COLOR_F = 0x0013;\nconst INT_PERCENTAGE = 0x0030;\nconst FLOAT_PERCENTAGE = 0x0031;\nconst MDATA = 0x3d3d;\nconst MESH_VERSION = 0x3d3e;\nconst MASTER_SCALE = 0x0100; // const LO_SHADOW_BIAS = 0x1400;\n// const HI_SHADOW_BIAS = 0x1410;\n// const SHADOW_MAP_SIZE = 0x1420;\n// const SHADOW_SAMPLES = 0x1430;\n// const SHADOW_RANGE = 0x1440;\n// const SHADOW_FILTER = 0x1450;\n// const RAY_BIAS = 0x1460;\n// const O_CONSTS = 0x1500;\n// const AMBIENT_LIGHT = 0x2100;\n// const BIT_MAP = 0x1100;\n// const SOLID_BGND = 0x1200;\n// const V_GRADIENT = 0x1300;\n// const USE_BIT_MAP = 0x1101;\n// const USE_SOLID_BGND = 0x1201;\n// const USE_V_GRADIENT = 0x1301;\n// const FOG = 0x2200;\n// const FOG_BGND = 0x2210;\n// const LAYER_FOG = 0x2302;\n// const DISTANCE_CUE = 0x2300;\n// const DCUE_BGND = 0x2310;\n// const USE_FOG = 0x2201;\n// const USE_LAYER_FOG = 0x2303;\n// const USE_DISTANCE_CUE = 0x2301;\n\nconst MAT_ENTRY = 0xafff;\nconst MAT_NAME = 0xa000;\nconst MAT_AMBIENT = 0xa010;\nconst MAT_DIFFUSE = 0xa020;\nconst MAT_SPECULAR = 0xa030;\nconst MAT_SHININESS = 0xa040; // const MAT_SHIN2PCT = 0xA041;\n\nconst MAT_TRANSPARENCY = 0xa050; // const MAT_XPFALL = 0xA052;\n// const MAT_USE_XPFALL = 0xA240;\n// const MAT_REFBLUR = 0xA053;\n// const MAT_SHADING = 0xA100;\n// const MAT_USE_REFBLUR = 0xA250;\n// const MAT_SELF_ILLUM = 0xA084;\n\nconst MAT_TWO_SIDE = 0xa081; // const MAT_DECAL = 0xA082;\n\nconst MAT_ADDITIVE = 0xa083;\nconst MAT_WIRE = 0xa085; // const MAT_FACEMAP = 0xA088;\n// const MAT_TRANSFALLOFF_IN = 0xA08A;\n// const MAT_PHONGSOFT = 0xA08C;\n// const MAT_WIREABS = 0xA08E;\n\nconst MAT_WIRE_SIZE = 0xa087;\nconst MAT_TEXMAP = 0xa200; // const MAT_SXP_TEXT_DATA = 0xA320;\n// const MAT_TEXMASK = 0xA33E;\n// const MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// const MAT_TEX2MAP = 0xA33A;\n// const MAT_SXP_TEXT2_DATA = 0xA321;\n// const MAT_TEX2MASK = 0xA340;\n// const MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\nconst MAT_OPACMAP = 0xa210; // const MAT_SXP_OPAC_DATA = 0xA322;\n// const MAT_OPACMASK = 0xA342;\n// const MAT_SXP_OPACMASK_DATA = 0xA32E;\n\nconst MAT_BUMPMAP = 0xa230; // const MAT_SXP_BUMP_DATA = 0xA324;\n// const MAT_BUMPMASK = 0xA344;\n// const MAT_SXP_BUMPMASK_DATA = 0xA330;\n\nconst MAT_SPECMAP = 0xa204; // const MAT_SXP_SPEC_DATA = 0xA325;\n// const MAT_SPECMASK = 0xA348;\n// const MAT_SXP_SPECMASK_DATA = 0xA332;\n// const MAT_SHINMAP = 0xA33C;\n// const MAT_SXP_SHIN_DATA = 0xA326;\n// const MAT_SHINMASK = 0xA346;\n// const MAT_SXP_SHINMASK_DATA = 0xA334;\n// const MAT_SELFIMAP = 0xA33D;\n// const MAT_SXP_SELFI_DATA = 0xA328;\n// const MAT_SELFIMASK = 0xA34A;\n// const MAT_SXP_SELFIMASK_DATA = 0xA336;\n// const MAT_REFLMAP = 0xA220;\n// const MAT_REFLMASK = 0xA34C;\n// const MAT_SXP_REFLMASK_DATA = 0xA338;\n// const MAT_ACUBIC = 0xA310;\n\nconst MAT_MAPNAME = 0xa300; // const MAT_MAP_TILING = 0xA351;\n// const MAT_MAP_TEXBLUR = 0xA353;\n\nconst MAT_MAP_USCALE = 0xa354;\nconst MAT_MAP_VSCALE = 0xa356;\nconst MAT_MAP_UOFFSET = 0xa358;\nconst MAT_MAP_VOFFSET = 0xa35a; // const MAT_MAP_ANG = 0xA35C;\n// const MAT_MAP_COL1 = 0xA360;\n// const MAT_MAP_COL2 = 0xA362;\n// const MAT_MAP_RCOL = 0xA364;\n// const MAT_MAP_GCOL = 0xA366;\n// const MAT_MAP_BCOL = 0xA368;\n\nconst NAMED_OBJECT = 0x4000; // const N_DIRECT_LIGHT = 0x4600;\n// const DL_OFF = 0x4620;\n// const DL_OUTER_RANGE = 0x465A;\n// const DL_INNER_RANGE = 0x4659;\n// const DL_MULTIPLIER = 0x465B;\n// const DL_EXCLUDE = 0x4654;\n// const DL_ATTENUATE = 0x4625;\n// const DL_SPOTLIGHT = 0x4610;\n// const DL_SPOT_ROLL = 0x4656;\n// const DL_SHADOWED = 0x4630;\n// const DL_LOCAL_SHADOW2 = 0x4641;\n// const DL_SEE_CONE = 0x4650;\n// const DL_SPOT_RECTANGULAR = 0x4651;\n// const DL_SPOT_ASPECT = 0x4657;\n// const DL_SPOT_PROJECTOR = 0x4653;\n// const DL_SPOT_OVERSHOOT = 0x4652;\n// const DL_RAY_BIAS = 0x4658;\n// const DL_RAYSHAD = 0x4627;\n// const N_CAMERA = 0x4700;\n// const CAM_SEE_CONE = 0x4710;\n// const CAM_RANGES = 0x4720;\n// const OBJ_HIDDEN = 0x4010;\n// const OBJ_VIS_LOFTER = 0x4011;\n// const OBJ_DOESNT_CAST = 0x4012;\n// const OBJ_DONT_RECVSHADOW = 0x4017;\n// const OBJ_MATTE = 0x4013;\n// const OBJ_FAST = 0x4014;\n// const OBJ_PROCEDURAL = 0x4015;\n// const OBJ_FROZEN = 0x4016;\n\nconst N_TRI_OBJECT = 0x4100;\nconst POINT_ARRAY = 0x4110; // const POINT_FLAG_ARRAY = 0x4111;\n\nconst FACE_ARRAY = 0x4120;\nconst MSH_MAT_GROUP = 0x4130; // const SMOOTH_GROUP = 0x4150;\n// const MSH_BOXMAP = 0x4190;\n\nconst TEX_VERTS = 0x4140;\nconst MESH_MATRIX = 0x4160; // const MESH_COLOR = 0x4165;\n\nexport { TDSLoader };\n"]},"metadata":{},"sourceType":"module"}