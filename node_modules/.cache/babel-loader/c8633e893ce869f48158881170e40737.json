{"ast":null,"code":"import { GLTFLoader, DRACOLoader, MeshoptDecoder } from 'three-stdlib';\nimport { useLoader } from '@react-three/fiber'; // @ts-ignore\n\nlet dracoLoader = null;\n\nfunction extensions(useDraco, useMeshopt, extendLoader) {\n  return loader => {\n    if (extendLoader) {\n      extendLoader(loader);\n    }\n\n    if (useDraco) {\n      if (!dracoLoader) {\n        dracoLoader = new DRACOLoader();\n      }\n\n      dracoLoader.setDecoderPath(typeof useDraco === 'string' ? useDraco : 'https://www.gstatic.com/draco/versioned/decoders/1.4.3/');\n      loader.setDRACOLoader(dracoLoader);\n    }\n\n    if (useMeshopt) {\n      loader.setMeshoptDecoder(typeof MeshoptDecoder === 'function' ? MeshoptDecoder() : MeshoptDecoder);\n    }\n  };\n}\n\nfunction useGLTF(path) {\n  let useDraco = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let useMeshOpt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let extendLoader = arguments.length > 3 ? arguments[3] : undefined;\n  const gltf = useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\n  return gltf;\n}\n\nuseGLTF.preload = function (path) {\n  let useDraco = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let useMeshOpt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let extendLoader = arguments.length > 3 ? arguments[3] : undefined;\n  return useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\n}; // @ts-expect-error new in r3f 7.0.5\n\n\nuseGLTF.clear = input => useLoader.clear(GLTFLoader, input);\n\nexport { useGLTF };","map":{"version":3,"sources":["/Users/dominiclee/Desktop/ethprojs/metaportal/node_modules/@react-three/drei/core/useGLTF.js"],"names":["GLTFLoader","DRACOLoader","MeshoptDecoder","useLoader","dracoLoader","extensions","useDraco","useMeshopt","extendLoader","loader","setDecoderPath","setDRACOLoader","setMeshoptDecoder","useGLTF","path","useMeshOpt","gltf","preload","clear","input"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,EAAkCC,cAAlC,QAAwD,cAAxD;AACA,SAASC,SAAT,QAA0B,oBAA1B,C,CAEA;;AACA,IAAIC,WAAW,GAAG,IAAlB;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,UAA9B,EAA0CC,YAA1C,EAAwD;AACtD,SAAOC,MAAM,IAAI;AACf,QAAID,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACC,MAAD,CAAZ;AACD;;AAED,QAAIH,QAAJ,EAAc;AACZ,UAAI,CAACF,WAAL,EAAkB;AAChBA,QAAAA,WAAW,GAAG,IAAIH,WAAJ,EAAd;AACD;;AAEDG,MAAAA,WAAW,CAACM,cAAZ,CAA2B,OAAOJ,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0C,yDAArE;AACAG,MAAAA,MAAM,CAACE,cAAP,CAAsBP,WAAtB;AACD;;AAED,QAAIG,UAAJ,EAAgB;AACdE,MAAAA,MAAM,CAACG,iBAAP,CAAyB,OAAOV,cAAP,KAA0B,UAA1B,GAAuCA,cAAc,EAArD,GAA0DA,cAAnF;AACD;AACF,GAjBD;AAkBD;;AAED,SAASW,OAAT,CAAiBC,IAAjB,EAAyE;AAAA,MAAlDR,QAAkD,uEAAvC,IAAuC;AAAA,MAAjCS,UAAiC,uEAApB,IAAoB;AAAA,MAAdP,YAAc;AACvE,QAAMQ,IAAI,GAAGb,SAAS,CAACH,UAAD,EAAac,IAAb,EAAmBT,UAAU,CAACC,QAAD,EAAWS,UAAX,EAAuBP,YAAvB,CAA7B,CAAtB;AACA,SAAOQ,IAAP;AACD;;AAEDH,OAAO,CAACI,OAAR,GAAkB,UAACH,IAAD;AAAA,MAAOR,QAAP,uEAAkB,IAAlB;AAAA,MAAwBS,UAAxB,uEAAqC,IAArC;AAAA,MAA2CP,YAA3C;AAAA,SAA4DL,SAAS,CAACc,OAAV,CAAkBjB,UAAlB,EAA8Bc,IAA9B,EAAoCT,UAAU,CAACC,QAAD,EAAWS,UAAX,EAAuBP,YAAvB,CAA9C,CAA5D;AAAA,CAAlB,C,CAAmK;;;AAGnKK,OAAO,CAACK,KAAR,GAAgBC,KAAK,IAAIhB,SAAS,CAACe,KAAV,CAAgBlB,UAAhB,EAA4BmB,KAA5B,CAAzB;;AAEA,SAASN,OAAT","sourcesContent":["import { GLTFLoader, DRACOLoader, MeshoptDecoder } from 'three-stdlib';\nimport { useLoader } from '@react-three/fiber';\n\n// @ts-ignore\nlet dracoLoader = null;\n\nfunction extensions(useDraco, useMeshopt, extendLoader) {\n  return loader => {\n    if (extendLoader) {\n      extendLoader(loader);\n    }\n\n    if (useDraco) {\n      if (!dracoLoader) {\n        dracoLoader = new DRACOLoader();\n      }\n\n      dracoLoader.setDecoderPath(typeof useDraco === 'string' ? useDraco : 'https://www.gstatic.com/draco/versioned/decoders/1.4.3/');\n      loader.setDRACOLoader(dracoLoader);\n    }\n\n    if (useMeshopt) {\n      loader.setMeshoptDecoder(typeof MeshoptDecoder === 'function' ? MeshoptDecoder() : MeshoptDecoder);\n    }\n  };\n}\n\nfunction useGLTF(path, useDraco = true, useMeshOpt = true, extendLoader) {\n  const gltf = useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\n  return gltf;\n}\n\nuseGLTF.preload = (path, useDraco = true, useMeshOpt = true, extendLoader) => useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader)); // @ts-expect-error new in r3f 7.0.5\n\n\nuseGLTF.clear = input => useLoader.clear(GLTFLoader, input);\n\nexport { useGLTF };\n"]},"metadata":{},"sourceType":"module"}